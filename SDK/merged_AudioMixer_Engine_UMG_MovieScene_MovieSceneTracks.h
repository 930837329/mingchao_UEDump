
/********************************************************
*                                                       *
*   Package generated using UEDumper by Spuckwaffel.    *
*                                                       *
********************************************************/

#pragma once
/// dependency: BasicType
/// dependency: AudioExtensions
/// dependency: AudioPlatformConfiguration
/// dependency: Chaos
/// dependency: ClothingSystemRuntimeInterface
/// dependency: CoreUObject
/// dependency: DeveloperSettings
/// dependency: InputCore
/// dependency: PacketHandler
/// dependency: PhysicsCore
/// dependency: PropertyAccess
/// dependency: PropertyPath
/// dependency: Slate
/// dependency: SlateCore
/// dependency: StaticMeshDescription

/// Enum /Script/AudioMixer.EMusicalNoteName
/// Size: 0x01 (1 bytes)
enum class EMusicalNoteName : uint8_t
{
	EMusicalNoteName__C                                                              = 0,
	EMusicalNoteName__Db                                                             = 1,
	EMusicalNoteName__D                                                              = 2,
	EMusicalNoteName__Eb                                                             = 3,
	EMusicalNoteName__E                                                              = 4,
	EMusicalNoteName__F                                                              = 5,
	EMusicalNoteName__Gb                                                             = 6,
	EMusicalNoteName__G                                                              = 7,
	EMusicalNoteName__Ab                                                             = 8,
	EMusicalNoteName__A                                                              = 9,
	EMusicalNoteName__Bb                                                             = 10,
	EMusicalNoteName__B                                                              = 11
};

/// Enum /Script/AudioMixer.ESubmixEffectDynamicsChannelLinkMode
/// Size: 0x01 (1 bytes)
enum class ESubmixEffectDynamicsChannelLinkMode : uint8_t
{
	ESubmixEffectDynamicsChannelLinkMode__Disabled                                   = 0,
	ESubmixEffectDynamicsChannelLinkMode__Average                                    = 1,
	ESubmixEffectDynamicsChannelLinkMode__Peak                                       = 2,
	ESubmixEffectDynamicsChannelLinkMode__Count                                      = 3
};

/// Enum /Script/AudioMixer.ESubmixEffectDynamicsPeakMode
/// Size: 0x01 (1 bytes)
enum class ESubmixEffectDynamicsPeakMode : uint8_t
{
	ESubmixEffectDynamicsPeakMode__MeanSquared                                       = 0,
	ESubmixEffectDynamicsPeakMode__RootMeanSquared                                   = 1,
	ESubmixEffectDynamicsPeakMode__Peak                                              = 2,
	ESubmixEffectDynamicsPeakMode__Count                                             = 3
};

/// Enum /Script/AudioMixer.ESubmixEffectDynamicsProcessorType
/// Size: 0x01 (1 bytes)
enum class ESubmixEffectDynamicsProcessorType : uint8_t
{
	ESubmixEffectDynamicsProcessorType__Compressor                                   = 0,
	ESubmixEffectDynamicsProcessorType__Limiter                                      = 1,
	ESubmixEffectDynamicsProcessorType__Expander                                     = 2,
	ESubmixEffectDynamicsProcessorType__Gate                                         = 3,
	ESubmixEffectDynamicsProcessorType__Count                                        = 4
};

/// Enum /Script/Engine.ETextGender
/// Size: 0x01 (1 bytes)
enum class ETextGender : uint8_t
{
	ETextGender__Masculine                                                           = 0,
	ETextGender__Feminine                                                            = 1,
	ETextGender__Neuter                                                              = 2
};

/// Enum /Script/Engine.EFormatArgumentType
/// Size: 0x01 (1 bytes)
enum class EFormatArgumentType : uint8_t
{
	EFormatArgumentType__Int                                                         = 0,
	EFormatArgumentType__UInt                                                        = 1,
	EFormatArgumentType__Float                                                       = 2,
	EFormatArgumentType__Double                                                      = 3,
	EFormatArgumentType__Text                                                        = 4,
	EFormatArgumentType__Gender                                                      = 5
};

/// Enum /Script/Engine.EEndPlayReason
/// Size: 0x01 (1 bytes)
enum class EEndPlayReason : uint8_t
{
	EEndPlayReason__Destroyed                                                        = 0,
	EEndPlayReason__LevelTransition                                                  = 1,
	EEndPlayReason__EndPlayInEditor                                                  = 2,
	EEndPlayReason__RemovedFromWorld                                                 = 3,
	EEndPlayReason__Quit                                                             = 4
};

/// Enum /Script/Engine.ETickingGroup
/// Size: 0x01 (1 bytes)
enum class ETickingGroup : uint8_t
{
	TG_PrePhysics                                                                    = 0,
	TG_StartPhysics                                                                  = 1,
	TG_DuringPhysics                                                                 = 2,
	TG_EndPhysics                                                                    = 3,
	TG_PostPhysics                                                                   = 4,
	TG_PostUpdateWork                                                                = 5,
	TG_LastDemotable                                                                 = 6,
	TG_NewlySpawned                                                                  = 7
};

/// Enum /Script/Engine.EComponentCreationMethod
/// Size: 0x01 (1 bytes)
enum class EComponentCreationMethod : uint8_t
{
	EComponentCreationMethod__Native                                                 = 0,
	EComponentCreationMethod__SimpleConstructionScript                               = 1,
	EComponentCreationMethod__UserConstructionScript                                 = 2,
	EComponentCreationMethod__Instance                                               = 3
};

/// Enum /Script/Engine.ETemperatureSeverityType
/// Size: 0x01 (1 bytes)
enum class ETemperatureSeverityType : uint8_t
{
	ETemperatureSeverityType__Unknown                                                = 0,
	ETemperatureSeverityType__Good                                                   = 1,
	ETemperatureSeverityType__Bad                                                    = 2,
	ETemperatureSeverityType__Serious                                                = 3,
	ETemperatureSeverityType__Critical                                               = 4,
	ETemperatureSeverityType__NumSeverities                                          = 5
};

/// Enum /Script/Engine.EQuartzCommandQuantization
/// Size: 0x01 (1 bytes)
enum class EQuartzCommandQuantization : uint8_t
{
	EQuartzCommandQuantization__Bar                                                  = 0,
	EQuartzCommandQuantization__Beat                                                 = 1,
	EQuartzCommandQuantization__ThirtySecondNote                                     = 2,
	EQuartzCommandQuantization__SixteenthNote                                        = 3,
	EQuartzCommandQuantization__EighthNote                                           = 4,
	EQuartzCommandQuantization__QuarterNote                                          = 5,
	EQuartzCommandQuantization__HalfNote                                             = 6,
	EQuartzCommandQuantization__WholeNote                                            = 7,
	EQuartzCommandQuantization__DottedSixteenthNote                                  = 8,
	EQuartzCommandQuantization__DottedEighthNote                                     = 9,
	EQuartzCommandQuantization__DottedQuarterNote                                    = 10,
	EQuartzCommandQuantization__DottedHalfNote                                       = 11,
	EQuartzCommandQuantization__DottedWholeNote                                      = 12,
	EQuartzCommandQuantization__SixteenthNoteTriplet                                 = 13,
	EQuartzCommandQuantization__EighthNoteTriplet                                    = 14,
	EQuartzCommandQuantization__QuarterNoteTriplet                                   = 15,
	EQuartzCommandQuantization__HalfNoteTriplet                                      = 16,
	EQuartzCommandQuantization__Tick                                                 = 17,
	EQuartzCommandQuantization__Count                                                = 18
};

/// Enum /Script/Engine.EQuartzCommandDelegateSubType
/// Size: 0x01 (1 bytes)
enum class EQuartzCommandDelegateSubType : uint8_t
{
	EQuartzCommandDelegateSubType__CommandOnFailedToQueue                            = 0,
	EQuartzCommandDelegateSubType__CommandOnQueued                                   = 1,
	EQuartzCommandDelegateSubType__CommandOnCanceled                                 = 2,
	EQuartzCommandDelegateSubType__CommandOnAboutToStart                             = 3,
	EQuartzCommandDelegateSubType__CommandOnStarted                                  = 4,
	EQuartzCommandDelegateSubType__Count                                             = 5
};

/// Enum /Script/Engine.EAudioComponentPlayState
/// Size: 0x01 (1 bytes)
enum class EAudioComponentPlayState : uint8_t
{
	EAudioComponentPlayState__Playing                                                = 0,
	EAudioComponentPlayState__Stopped                                                = 1,
	EAudioComponentPlayState__Paused                                                 = 2,
	EAudioComponentPlayState__FadingIn                                               = 3,
	EAudioComponentPlayState__FadingOut                                              = 4,
	EAudioComponentPlayState__Count                                                  = 5
};

/// Enum /Script/Engine.EPlaneConstraintAxisSetting
/// Size: 0x01 (1 bytes)
enum class EPlaneConstraintAxisSetting : uint8_t
{
	EPlaneConstraintAxisSetting__Custom                                              = 0,
	EPlaneConstraintAxisSetting__X                                                   = 1,
	EPlaneConstraintAxisSetting__Y                                                   = 2,
	EPlaneConstraintAxisSetting__Z                                                   = 3,
	EPlaneConstraintAxisSetting__UseGlobalPhysicsSetting                             = 4
};

/// Enum /Script/Engine.EInterpToBehaviourType
/// Size: 0x01 (1 bytes)
enum class EInterpToBehaviourType : uint8_t
{
	EInterpToBehaviourType__OneShot                                                  = 0,
	EInterpToBehaviourType__OneShot_Reverse                                          = 1,
	EInterpToBehaviourType__Loop_Reset                                               = 2,
	EInterpToBehaviourType__PingPong                                                 = 3
};

/// Enum /Script/Engine.ETeleportType
/// Size: 0x01 (1 bytes)
enum class ETeleportType : uint8_t
{
	ETeleportType__None                                                              = 0,
	ETeleportType__TeleportPhysics                                                   = 1,
	ETeleportType__ResetPhysics                                                      = 2
};

/// Enum /Script/Engine.EPlatformInterfaceDataType
/// Size: 0x01 (1 bytes)
enum class EPlatformInterfaceDataType : uint8_t
{
	PIDT_None                                                                        = 0,
	PIDT_Int                                                                         = 1,
	PIDT_Float                                                                       = 2,
	PIDT_String                                                                      = 3,
	PIDT_Object                                                                      = 4,
	PIDT_Custom                                                                      = 5
};

/// Enum /Script/Engine.EMovementMode
/// Size: 0x01 (1 bytes)
enum class EMovementMode : uint8_t
{
	MOVE_None                                                                        = 0,
	MOVE_Walking                                                                     = 1,
	MOVE_NavWalking                                                                  = 2,
	MOVE_Falling                                                                     = 3,
	MOVE_Swimming                                                                    = 4,
	MOVE_Flying                                                                      = 5,
	MOVE_Custom                                                                      = 6
};

/// Enum /Script/Engine.ENetworkFailure
/// Size: 0x01 (1 bytes)
enum class ENetworkFailure : uint8_t
{
	ENetworkFailure__NetDriverAlreadyExists                                          = 0,
	ENetworkFailure__NetDriverCreateFailure                                          = 1,
	ENetworkFailure__NetDriverListenFailure                                          = 2,
	ENetworkFailure__ConnectionLost                                                  = 3,
	ENetworkFailure__ConnectionTimeout                                               = 4,
	ENetworkFailure__FailureReceived                                                 = 5,
	ENetworkFailure__OutdatedClient                                                  = 6,
	ENetworkFailure__OutdatedServer                                                  = 7,
	ENetworkFailure__PendingConnectionFailure                                        = 8,
	ENetworkFailure__NetGuidMismatch                                                 = 9,
	ENetworkFailure__NetChecksumMismatch                                             = 10
};

/// Enum /Script/Engine.ETravelFailure
/// Size: 0x01 (1 bytes)
enum class ETravelFailure : uint8_t
{
	ETravelFailure__NoLevel                                                          = 0,
	ETravelFailure__LoadMapFailure                                                   = 1,
	ETravelFailure__InvalidURL                                                       = 2,
	ETravelFailure__PackageMissing                                                   = 3,
	ETravelFailure__PackageVersion                                                   = 4,
	ETravelFailure__NoDownload                                                       = 5,
	ETravelFailure__TravelFailure                                                    = 6,
	ETravelFailure__CheatCommands                                                    = 7,
	ETravelFailure__PendingNetGameCreateFailure                                      = 8,
	ETravelFailure__CloudSaveFailure                                                 = 9,
	ETravelFailure__ServerTravelFailure                                              = 10,
	ETravelFailure__ClientTravelFailure                                              = 11
};

/// Enum /Script/Engine.EScreenOrientation
/// Size: 0x01 (1 bytes)
enum class EScreenOrientation : uint8_t
{
	EScreenOrientation__Unknown                                                      = 0,
	EScreenOrientation__Portrait                                                     = 1,
	EScreenOrientation__PortraitUpsideDown                                           = 2,
	EScreenOrientation__LandscapeLeft                                                = 3,
	EScreenOrientation__LandscapeRight                                               = 4,
	EScreenOrientation__FaceUp                                                       = 5,
	EScreenOrientation__FaceDown                                                     = 6
};

/// Enum /Script/Engine.EApplicationState
/// Size: 0x01 (1 bytes)
enum class EApplicationState : uint8_t
{
	EApplicationState__Unknown                                                       = 0,
	EApplicationState__Inactive                                                      = 1,
	EApplicationState__Background                                                    = 2,
	EApplicationState__Active                                                        = 3
};

/// Enum /Script/Engine.EObjectTypeQuery
/// Size: 0x01 (1 bytes)
enum class EObjectTypeQuery : uint8_t
{
	ObjectTypeQuery1                                                                 = 0,
	ObjectTypeQuery2                                                                 = 1,
	ObjectTypeQuery3                                                                 = 2,
	ObjectTypeQuery4                                                                 = 3,
	ObjectTypeQuery5                                                                 = 4,
	ObjectTypeQuery6                                                                 = 5,
	ObjectTypeQuery7                                                                 = 6,
	ObjectTypeQuery8                                                                 = 7,
	ObjectTypeQuery9                                                                 = 8,
	ObjectTypeQuery10                                                                = 9,
	ObjectTypeQuery11                                                                = 10,
	ObjectTypeQuery12                                                                = 11,
	ObjectTypeQuery13                                                                = 12,
	ObjectTypeQuery14                                                                = 13,
	ObjectTypeQuery15                                                                = 14,
	ObjectTypeQuery16                                                                = 15,
	ObjectTypeQuery17                                                                = 16,
	ObjectTypeQuery18                                                                = 17,
	ObjectTypeQuery19                                                                = 18,
	ObjectTypeQuery20                                                                = 19,
	ObjectTypeQuery21                                                                = 20,
	ObjectTypeQuery22                                                                = 21,
	ObjectTypeQuery23                                                                = 22,
	ObjectTypeQuery24                                                                = 23,
	ObjectTypeQuery25                                                                = 24,
	ObjectTypeQuery26                                                                = 25,
	ObjectTypeQuery27                                                                = 26,
	ObjectTypeQuery28                                                                = 27,
	ObjectTypeQuery29                                                                = 28,
	ObjectTypeQuery30                                                                = 29,
	ObjectTypeQuery31                                                                = 30,
	ObjectTypeQuery32                                                                = 31
};

/// Enum /Script/Engine.EDrawDebugTrace
/// Size: 0x01 (1 bytes)
enum class EDrawDebugTrace : uint8_t
{
	EDrawDebugTrace__None                                                            = 0,
	EDrawDebugTrace__ForOneFrame                                                     = 1,
	EDrawDebugTrace__ForDuration                                                     = 2,
	EDrawDebugTrace__Persistent                                                      = 3
};

/// Enum /Script/Engine.ETraceTypeQuery
/// Size: 0x01 (1 bytes)
enum class ETraceTypeQuery : uint8_t
{
	TraceTypeQuery1                                                                  = 0,
	TraceTypeQuery2                                                                  = 1,
	TraceTypeQuery3                                                                  = 2,
	TraceTypeQuery4                                                                  = 3,
	TraceTypeQuery5                                                                  = 4,
	TraceTypeQuery6                                                                  = 5,
	TraceTypeQuery7                                                                  = 6,
	TraceTypeQuery8                                                                  = 7,
	TraceTypeQuery9                                                                  = 8,
	TraceTypeQuery10                                                                 = 9,
	TraceTypeQuery11                                                                 = 10,
	TraceTypeQuery12                                                                 = 11,
	TraceTypeQuery13                                                                 = 12,
	TraceTypeQuery14                                                                 = 13,
	TraceTypeQuery15                                                                 = 14,
	TraceTypeQuery16                                                                 = 15,
	TraceTypeQuery17                                                                 = 16,
	TraceTypeQuery18                                                                 = 17,
	TraceTypeQuery19                                                                 = 18,
	TraceTypeQuery20                                                                 = 19,
	TraceTypeQuery21                                                                 = 20,
	TraceTypeQuery22                                                                 = 21,
	TraceTypeQuery23                                                                 = 22,
	TraceTypeQuery24                                                                 = 23,
	TraceTypeQuery25                                                                 = 24,
	TraceTypeQuery26                                                                 = 25,
	TraceTypeQuery27                                                                 = 26,
	TraceTypeQuery28                                                                 = 27,
	TraceTypeQuery29                                                                 = 28,
	TraceTypeQuery30                                                                 = 29,
	TraceTypeQuery31                                                                 = 30,
	TraceTypeQuery32                                                                 = 31
};

/// Enum /Script/Engine.EMoveComponentAction
/// Size: 0x01 (1 bytes)
enum class EMoveComponentAction : uint8_t
{
	EMoveComponentAction__Move                                                       = 0,
	EMoveComponentAction__Stop                                                       = 1,
	EMoveComponentAction__Return                                                     = 2
};

/// Enum /Script/Engine.EQuitPreference
/// Size: 0x01 (1 bytes)
enum class EQuitPreference : uint8_t
{
	EQuitPreference__Quit                                                            = 0,
	EQuitPreference__Background                                                      = 1
};

/// Enum /Script/Engine.ECollisionResponse
/// Size: 0x01 (1 bytes)
enum class ECollisionResponse : uint8_t
{
	ECR_Ignore                                                                       = 0,
	ECR_Overlap                                                                      = 1,
	ECR_Block                                                                        = 2
};

/// Enum /Script/Engine.EDataLayerState
/// Size: 0x01 (1 bytes)
enum class EDataLayerState : uint8_t
{
	EDataLayerState__Unloaded                                                        = 0,
	EDataLayerState__Loaded                                                          = 1,
	EDataLayerState__Activated                                                       = 2
};

/// Enum /Script/Engine.EFastArraySerializerDeltaFlags
/// Size: 0x01 (1 bytes)
enum class EFastArraySerializerDeltaFlags : uint8_t
{
	EFastArraySerializerDeltaFlags__None                                             = 0,
	EFastArraySerializerDeltaFlags__HasBeenSerialized                                = 1,
	EFastArraySerializerDeltaFlags__HasDeltaBeenRequested                            = 2,
	EFastArraySerializerDeltaFlags__IsUsingDeltaSerialization                        = 4
};

/// Enum /Script/Engine.ERelativeTransformSpace
/// Size: 0x01 (1 bytes)
enum class ERelativeTransformSpace : uint8_t
{
	RTS_World                                                                        = 0,
	RTS_Actor                                                                        = 1,
	RTS_Component                                                                    = 2,
	RTS_ParentBoneSpace                                                              = 3
};

/// Enum /Script/Engine.EAttachLocation
/// Size: 0x01 (1 bytes)
enum class EAttachLocation : uint8_t
{
	EAttachLocation__KeepRelativeOffset                                              = 0,
	EAttachLocation__KeepWorldPosition                                               = 1,
	EAttachLocation__SnapToTarget                                                    = 2,
	EAttachLocation__SnapToTargetIncludingScale                                      = 3
};

/// Enum /Script/Engine.EAttachmentRule
/// Size: 0x01 (1 bytes)
enum class EAttachmentRule : uint8_t
{
	EAttachmentRule__KeepRelative                                                    = 0,
	EAttachmentRule__KeepWorld                                                       = 1,
	EAttachmentRule__SnapToTarget                                                    = 2
};

/// Enum /Script/Engine.EDetachmentRule
/// Size: 0x01 (1 bytes)
enum class EDetachmentRule : uint8_t
{
	EDetachmentRule__KeepRelative                                                    = 0,
	EDetachmentRule__KeepWorld                                                       = 1
};

/// Enum /Script/Engine.EComponentMobility
/// Size: 0x01 (1 bytes)
enum class EComponentMobility : uint8_t
{
	EComponentMobility__Static                                                       = 0,
	EComponentMobility__Stationary                                                   = 1,
	EComponentMobility__Movable                                                      = 2
};

/// Enum /Script/Engine.EDetailMode
/// Size: 0x01 (1 bytes)
enum class EDetailMode : uint8_t
{
	DM_Low                                                                           = 0,
	DM_Medium                                                                        = 1,
	DM_High                                                                          = 2
};

/// Enum /Script/Engine.EMouseLockMode
/// Size: 0x01 (1 bytes)
enum class EMouseLockMode : uint8_t
{
	EMouseLockMode__DoNotLock                                                        = 0,
	EMouseLockMode__LockOnCapture                                                    = 1,
	EMouseLockMode__LockAlways                                                       = 2,
	EMouseLockMode__LockInFullscreen                                                 = 3
};

/// Enum /Script/Engine.EWindowTitleBarMode
/// Size: 0x01 (1 bytes)
enum class EWindowTitleBarMode : uint8_t
{
	EWindowTitleBarMode__Overlay                                                     = 0,
	EWindowTitleBarMode__VerticalBox                                                 = 1
};

/// Enum /Script/Engine.EActorUpdateOverlapsMethod
/// Size: 0x01 (1 bytes)
enum class EActorUpdateOverlapsMethod : uint8_t
{
	EActorUpdateOverlapsMethod__UseConfigDefault                                     = 0,
	EActorUpdateOverlapsMethod__AlwaysUpdate                                         = 1,
	EActorUpdateOverlapsMethod__OnlyUpdateMovable                                    = 2,
	EActorUpdateOverlapsMethod__NeverUpdate                                          = 3
};

/// Enum /Script/Engine.EAlphaBlendOption
/// Size: 0x01 (1 bytes)
enum class EAlphaBlendOption : uint8_t
{
	EAlphaBlendOption__Linear                                                        = 0,
	EAlphaBlendOption__Cubic                                                         = 1,
	EAlphaBlendOption__HermiteCubic                                                  = 2,
	EAlphaBlendOption__Sinusoidal                                                    = 3,
	EAlphaBlendOption__QuadraticInOut                                                = 4,
	EAlphaBlendOption__CubicInOut                                                    = 5,
	EAlphaBlendOption__QuarticInOut                                                  = 6,
	EAlphaBlendOption__QuinticInOut                                                  = 7,
	EAlphaBlendOption__CircularIn                                                    = 8,
	EAlphaBlendOption__CircularOut                                                   = 9,
	EAlphaBlendOption__CircularInOut                                                 = 10,
	EAlphaBlendOption__ExpIn                                                         = 11,
	EAlphaBlendOption__ExpOut                                                        = 12,
	EAlphaBlendOption__ExpInOut                                                      = 13,
	EAlphaBlendOption__Custom                                                        = 14
};

/// Enum /Script/Engine.EAnimSyncGroupScope
/// Size: 0x01 (1 bytes)
enum class EAnimSyncGroupScope : uint8_t
{
	EAnimSyncGroupScope__Local                                                       = 0,
	EAnimSyncGroupScope__Component                                                   = 1
};

/// Enum /Script/Engine.EAnimGroupRole
/// Size: 0x01 (1 bytes)
enum class EAnimGroupRole : uint8_t
{
	EAnimGroupRole__CanBeLeader                                                      = 0,
	EAnimGroupRole__AlwaysFollower                                                   = 1,
	EAnimGroupRole__AlwaysLeader                                                     = 2,
	EAnimGroupRole__TransitionLeader                                                 = 3,
	EAnimGroupRole__TransitionFollower                                               = 4
};

/// Enum /Script/Engine.EPreviewAnimationBlueprintApplicationMethod
/// Size: 0x01 (1 bytes)
enum class EPreviewAnimationBlueprintApplicationMethod : uint8_t
{
	EPreviewAnimationBlueprintApplicationMethod__LinkedLayers                        = 0,
	EPreviewAnimationBlueprintApplicationMethod__LinkedAnimGraph                     = 1
};

/// Enum /Script/Engine.AnimationKeyFormat
/// Size: 0x01 (1 bytes)
enum class AnimationKeyFormat : uint8_t
{
	AKF_ConstantKeyLerp                                                              = 0,
	AKF_VariableKeyLerp                                                              = 1,
	AKF_PerTrackCompression                                                          = 2
};

/// Enum /Script/Engine.ERawCurveTrackTypes
/// Size: 0x01 (1 bytes)
enum class ERawCurveTrackTypes : uint8_t
{
	ERawCurveTrackTypes__RCT_Float                                                   = 0,
	ERawCurveTrackTypes__RCT_Vector                                                  = 1,
	ERawCurveTrackTypes__RCT_Transform                                               = 2
};

/// Enum /Script/Engine.EAnimAssetCurveFlags
/// Size: 0x01 (1 bytes)
enum class EAnimAssetCurveFlags : uint8_t
{
	AACF_NONE                                                                        = 0,
	AACF_DriveMorphTarget_DEPRECATED                                                 = 1,
	AACF_DriveAttribute_DEPRECATED                                                   = 2,
	AACF_Editable                                                                    = 4,
	AACF_DriveMaterial_DEPRECATED                                                    = 8,
	AACF_Metadata                                                                    = 16,
	AACF_DriveTrack                                                                  = 32,
	AACF_Disabled                                                                    = 64
};

/// Enum /Script/Engine.AnimationCompressionFormat
/// Size: 0x01 (1 bytes)
enum class AnimationCompressionFormat : uint8_t
{
	ACF_None                                                                         = 0,
	ACF_Float96NoW                                                                   = 1,
	ACF_Fixed48NoW                                                                   = 2,
	ACF_IntervalFixed32NoW                                                           = 3,
	ACF_Fixed32NoW                                                                   = 4,
	ACF_Float32NoW                                                                   = 5,
	ACF_Identity                                                                     = 6
};

/// Enum /Script/Engine.EAdditiveBasePoseType
/// Size: 0x01 (1 bytes)
enum class EAdditiveBasePoseType : uint8_t
{
	ABPT_None                                                                        = 0,
	ABPT_RefPose                                                                     = 1,
	ABPT_AnimScaled                                                                  = 2,
	ABPT_AnimFrame                                                                   = 3
};

/// Enum /Script/Engine.ERootMotionMode
/// Size: 0x01 (1 bytes)
enum class ERootMotionMode : uint8_t
{
	ERootMotionMode__NoRootMotionExtraction                                          = 0,
	ERootMotionMode__IgnoreRootMotion                                                = 1,
	ERootMotionMode__RootMotionFromEverything                                        = 2,
	ERootMotionMode__RootMotionFromMontagesOnly                                      = 3
};

/// Enum /Script/Engine.ERootMotionRootLock
/// Size: 0x01 (1 bytes)
enum class ERootMotionRootLock : uint8_t
{
	ERootMotionRootLock__RefPose                                                     = 0,
	ERootMotionRootLock__AnimFirstFrame                                              = 1,
	ERootMotionRootLock__Zero                                                        = 2
};

/// Enum /Script/Engine.EMontagePlayReturnType
/// Size: 0x01 (1 bytes)
enum class EMontagePlayReturnType : uint8_t
{
	EMontagePlayReturnType__MontageLength                                            = 0,
	EMontagePlayReturnType__Duration                                                 = 1
};

/// Enum /Script/Engine.EDrawDebugItemType
/// Size: 0x01 (1 bytes)
enum class EDrawDebugItemType : uint8_t
{
	EDrawDebugItemType__DirectionalArrow                                             = 0,
	EDrawDebugItemType__Sphere                                                       = 1,
	EDrawDebugItemType__Line                                                         = 2,
	EDrawDebugItemType__OnScreenMessage                                              = 3,
	EDrawDebugItemType__CoordinateSystem                                             = 4,
	EDrawDebugItemType__String                                                       = 5
};

/// Enum /Script/Engine.EAnimLinkMethod
/// Size: 0x01 (1 bytes)
enum class EAnimLinkMethod : uint8_t
{
	EAnimLinkMethod__Absolute                                                        = 0,
	EAnimLinkMethod__Relative                                                        = 1,
	EAnimLinkMethod__Proportional                                                    = 2
};

/// Enum /Script/Engine.EMontageSubStepResult
/// Size: 0x01 (1 bytes)
enum class EMontageSubStepResult : uint8_t
{
	EMontageSubStepResult__Moved                                                     = 0,
	EMontageSubStepResult__NotMoved                                                  = 1,
	EMontageSubStepResult__InvalidSection                                            = 2,
	EMontageSubStepResult__InvalidMontage                                            = 3
};

/// Enum /Script/Engine.EAnimNotifyEventType
/// Size: 0x01 (1 bytes)
enum class EAnimNotifyEventType : uint8_t
{
	EAnimNotifyEventType__Begin                                                      = 0,
	EAnimNotifyEventType__End                                                        = 1
};

/// Enum /Script/Engine.EInertializationSpace
/// Size: 0x01 (1 bytes)
enum class EInertializationSpace : uint8_t
{
	EInertializationSpace__Default                                                   = 0,
	EInertializationSpace__WorldSpace                                                = 1,
	EInertializationSpace__WorldRotation                                             = 2
};

/// Enum /Script/Engine.EInertializationBoneState
/// Size: 0x01 (1 bytes)
enum class EInertializationBoneState : uint8_t
{
	EInertializationBoneState__Invalid                                               = 0,
	EInertializationBoneState__Valid                                                 = 1,
	EInertializationBoneState__Excluded                                              = 2
};

/// Enum /Script/Engine.EInertializationState
/// Size: 0x01 (1 bytes)
enum class EInertializationState : uint8_t
{
	EInertializationState__Inactive                                                  = 0,
	EInertializationState__Pending                                                   = 1,
	EInertializationState__Active                                                    = 2
};

/// Enum /Script/Engine.EEvaluatorMode
/// Size: 0x01 (1 bytes)
enum class EEvaluatorMode : uint8_t
{
	EEvaluatorMode__EM_Standard                                                      = 0,
	EEvaluatorMode__EM_Freeze                                                        = 1,
	EEvaluatorMode__EM_DelayedFreeze                                                 = 2
};

/// Enum /Script/Engine.EEvaluatorDataSource
/// Size: 0x01 (1 bytes)
enum class EEvaluatorDataSource : uint8_t
{
	EEvaluatorDataSource__EDS_SourcePose                                             = 0,
	EEvaluatorDataSource__EDS_DestinationPose                                        = 1
};

/// Enum /Script/Engine.EPostCopyOperation
/// Size: 0x01 (1 bytes)
enum class EPostCopyOperation : uint8_t
{
	EPostCopyOperation__None                                                         = 0,
	EPostCopyOperation__LogicalNegateBool                                            = 1
};

/// Enum /Script/Engine.EPinHidingMode
/// Size: 0x01 (1 bytes)
enum class EPinHidingMode : uint8_t
{
	EPinHidingMode__NeverAsPin                                                       = 0,
	EPinHidingMode__PinHiddenByDefault                                               = 1,
	EPinHidingMode__PinShownByDefault                                                = 2,
	EPinHidingMode__AlwaysAsPin                                                      = 3
};

/// Enum /Script/Engine.AnimPhysCollisionType
/// Size: 0x01 (1 bytes)
enum class AnimPhysCollisionType : uint8_t
{
	AnimPhysCollisionType__CoM                                                       = 0,
	AnimPhysCollisionType__CustomSphere                                              = 1,
	AnimPhysCollisionType__InnerSphere                                               = 2,
	AnimPhysCollisionType__OuterSphere                                               = 3
};

/// Enum /Script/Engine.AnimPhysTwistAxis
/// Size: 0x01 (1 bytes)
enum class AnimPhysTwistAxis : uint8_t
{
	AnimPhysTwistAxis__AxisX                                                         = 0,
	AnimPhysTwistAxis__AxisY                                                         = 1,
	AnimPhysTwistAxis__AxisZ                                                         = 2
};

/// Enum /Script/Engine.ETypeAdvanceAnim
/// Size: 0x01 (1 bytes)
enum class ETypeAdvanceAnim : uint8_t
{
	ETAA_Default                                                                     = 0,
	ETAA_Finished                                                                    = 1,
	ETAA_Looped                                                                      = 2
};

/// Enum /Script/Engine.ETransitionLogicType
/// Size: 0x01 (1 bytes)
enum class ETransitionLogicType : uint8_t
{
	ETransitionLogicType__TLT_StandardBlend                                          = 0,
	ETransitionLogicType__TLT_Inertialization                                        = 1,
	ETransitionLogicType__TLT_Custom                                                 = 2
};

/// Enum /Script/Engine.ETransitionBlendMode
/// Size: 0x01 (1 bytes)
enum class ETransitionBlendMode : uint8_t
{
	ETransitionBlendMode__TBM_Linear                                                 = 0,
	ETransitionBlendMode__TBM_Cubic                                                  = 1
};

/// Enum /Script/Engine.EComponentType
/// Size: 0x01 (1 bytes)
enum class EComponentType : uint8_t
{
	EComponentType__None                                                             = 0,
	EComponentType__TranslationX                                                     = 1,
	EComponentType__TranslationY                                                     = 2,
	EComponentType__TranslationZ                                                     = 3,
	EComponentType__RotationX                                                        = 4,
	EComponentType__RotationY                                                        = 5,
	EComponentType__RotationZ                                                        = 6,
	EComponentType__Scale                                                            = 7,
	EComponentType__ScaleX                                                           = 8,
	EComponentType__ScaleY                                                           = 9,
	EComponentType__ScaleZ                                                           = 10
};

/// Enum /Script/Engine.EAxisOption
/// Size: 0x01 (1 bytes)
enum class EAxisOption : uint8_t
{
	EAxisOption__X                                                                   = 0,
	EAxisOption__Y                                                                   = 1,
	EAxisOption__Z                                                                   = 2,
	EAxisOption__X_Neg                                                               = 3,
	EAxisOption__Y_Neg                                                               = 4,
	EAxisOption__Z_Neg                                                               = 5,
	EAxisOption__Custom                                                              = 6
};

/// Enum /Script/Engine.EAnimInterpolationType
/// Size: 0x01 (1 bytes)
enum class EAnimInterpolationType : uint8_t
{
	EAnimInterpolationType__Linear                                                   = 0,
	EAnimInterpolationType__Step                                                     = 1
};

/// Enum /Script/Engine.ECurveBlendOption
/// Size: 0x01 (1 bytes)
enum class ECurveBlendOption : uint8_t
{
	ECurveBlendOption__Override                                                      = 0,
	ECurveBlendOption__DoNotOverride                                                 = 1,
	ECurveBlendOption__NormalizeByWeight                                             = 2,
	ECurveBlendOption__BlendByWeight                                                 = 3,
	ECurveBlendOption__UseBasePose                                                   = 4,
	ECurveBlendOption__UseMaxValue                                                   = 5,
	ECurveBlendOption__UseMinValue                                                   = 6
};

/// Enum /Script/Engine.EAdditiveAnimationType
/// Size: 0x01 (1 bytes)
enum class EAdditiveAnimationType : uint8_t
{
	AAT_None                                                                         = 0,
	AAT_LocalSpaceBase                                                               = 1,
	AAT_RotationOffsetMeshSpace                                                      = 2
};

/// Enum /Script/Engine.ENotifyFilterType
/// Size: 0x01 (1 bytes)
enum class ENotifyFilterType : uint8_t
{
	ENotifyFilterType__NoFiltering                                                   = 0,
	ENotifyFilterType__LOD                                                           = 1
};

/// Enum /Script/Engine.EMontageNotifyTickType
/// Size: 0x01 (1 bytes)
enum class EMontageNotifyTickType : uint8_t
{
	EMontageNotifyTickType__Queued                                                   = 0,
	EMontageNotifyTickType__BranchingPoint                                           = 1
};

/// Enum /Script/Engine.EBoneRotationSource
/// Size: 0x01 (1 bytes)
enum class EBoneRotationSource : uint8_t
{
	BRS_KeepComponentSpaceRotation                                                   = 0,
	BRS_KeepLocalSpaceRotation                                                       = 1,
	BRS_CopyFromTarget                                                               = 2
};

/// Enum /Script/Engine.EBoneControlSpace
/// Size: 0x01 (1 bytes)
enum class EBoneControlSpace : uint8_t
{
	BCS_WorldSpace                                                                   = 0,
	BCS_ComponentSpace                                                               = 1,
	BCS_ParentBoneSpace                                                              = 2,
	BCS_BoneSpace                                                                    = 3
};

/// Enum /Script/Engine.EBoneAxis
/// Size: 0x01 (1 bytes)
enum class EBoneAxis : uint8_t
{
	BA_X                                                                             = 0,
	BA_Y                                                                             = 1,
	BA_Z                                                                             = 2
};

/// Enum /Script/Engine.EPrimaryAssetCookRule
/// Size: 0x01 (1 bytes)
enum class EPrimaryAssetCookRule : uint8_t
{
	EPrimaryAssetCookRule__Unknown                                                   = 0,
	EPrimaryAssetCookRule__NeverCook                                                 = 1,
	EPrimaryAssetCookRule__DevelopmentCook                                           = 2,
	EPrimaryAssetCookRule__DevelopmentAlwaysCook                                     = 3,
	EPrimaryAssetCookRule__AlwaysCook                                                = 4
};

/// Enum /Script/Engine.ENaturalSoundFalloffMode
/// Size: 0x01 (1 bytes)
enum class ENaturalSoundFalloffMode : uint8_t
{
	ENaturalSoundFalloffMode__Continues                                              = 0,
	ENaturalSoundFalloffMode__Silent                                                 = 1,
	ENaturalSoundFalloffMode__Hold                                                   = 2
};

/// Enum /Script/Engine.EAttenuationShape
/// Size: 0x01 (1 bytes)
enum class EAttenuationShape : uint8_t
{
	EAttenuationShape__Sphere                                                        = 0,
	EAttenuationShape__Capsule                                                       = 1,
	EAttenuationShape__Box                                                           = 2,
	EAttenuationShape__Cone                                                          = 3
};

/// Enum /Script/Engine.EAttenuationDistanceModel
/// Size: 0x01 (1 bytes)
enum class EAttenuationDistanceModel : uint8_t
{
	EAttenuationDistanceModel__Linear                                                = 0,
	EAttenuationDistanceModel__Logarithmic                                           = 1,
	EAttenuationDistanceModel__Inverse                                               = 2,
	EAttenuationDistanceModel__LogReverse                                            = 3,
	EAttenuationDistanceModel__NaturalSound                                          = 4,
	EAttenuationDistanceModel__Custom                                                = 5
};

/// Enum /Script/Engine.EAudioBusChannels
/// Size: 0x01 (1 bytes)
enum class EAudioBusChannels : uint8_t
{
	EAudioBusChannels__Mono                                                          = 0,
	EAudioBusChannels__Stereo                                                        = 1
};

/// Enum /Script/Engine.EAudioFaderCurve
/// Size: 0x01 (1 bytes)
enum class EAudioFaderCurve : uint8_t
{
	EAudioFaderCurve__Linear                                                         = 0,
	EAudioFaderCurve__Logarithmic                                                    = 1,
	EAudioFaderCurve__SCurve                                                         = 2,
	EAudioFaderCurve__Sin                                                            = 3,
	EAudioFaderCurve__Count                                                          = 4
};

/// Enum /Script/Engine.EAudioOutputTarget
/// Size: 0x01 (1 bytes)
enum class EAudioOutputTarget : uint8_t
{
	EAudioOutputTarget__Speaker                                                      = 0,
	EAudioOutputTarget__Controller                                                   = 1,
	EAudioOutputTarget__ControllerFallbackToSpeaker                                  = 2
};

/// Enum /Script/Engine.EMonoChannelUpmixMethod
/// Size: 0x01 (1 bytes)
enum class EMonoChannelUpmixMethod : uint8_t
{
	EMonoChannelUpmixMethod__Linear                                                  = 0,
	EMonoChannelUpmixMethod__EqualPower                                              = 1,
	EMonoChannelUpmixMethod__FullVolume                                              = 2
};

/// Enum /Script/Engine.EPanningMethod
/// Size: 0x01 (1 bytes)
enum class EPanningMethod : uint8_t
{
	EPanningMethod__Linear                                                           = 0,
	EPanningMethod__EqualPower                                                       = 1
};

/// Enum /Script/Engine.EVoiceSampleRate
/// Size: 0x04 (4 bytes)
enum class EVoiceSampleRate : uint32_t
{
	EVoiceSampleRate__Low16000Hz                                                     = 16000,
	EVoiceSampleRate__Normal24000Hz                                                  = 24000
};

/// Enum /Script/Engine.EAudioVolumeLocationState
/// Size: 0x01 (1 bytes)
enum class EAudioVolumeLocationState : uint8_t
{
	EAudioVolumeLocationState__InsideTheVolume                                       = 0,
	EAudioVolumeLocationState__OutsideTheVolume                                      = 1
};

/// Enum /Script/Engine.EBlendableLocation
/// Size: 0x01 (1 bytes)
enum class EBlendableLocation : uint8_t
{
	BL_AfterTonemapping                                                              = 0,
	BL_BeforeTonemapping                                                             = 1,
	BL_BeforeTranslucency                                                            = 2,
	BL_ReplacingTonemapper                                                           = 3,
	BL_SSRInput                                                                      = 4
};

/// Enum /Script/Engine.ENotifyTriggerMode
/// Size: 0x01 (1 bytes)
enum class ENotifyTriggerMode : uint8_t
{
	ENotifyTriggerMode__AllAnimations                                                = 0,
	ENotifyTriggerMode__HighestWeightedAnimation                                     = 1,
	ENotifyTriggerMode__None                                                         = 2
};

/// Enum /Script/Engine.EBlendSpaceAxis
/// Size: 0x01 (1 bytes)
enum class EBlendSpaceAxis : uint8_t
{
	BSA_None                                                                         = 0,
	BSA_X                                                                            = 1,
	BSA_Y                                                                            = 2,
	BSA_Max                                                                          = 3,
	BSA_Max5                                                                         = 4
};

/// Enum /Script/Engine.EBlueprintNativizationFlag
/// Size: 0x01 (1 bytes)
enum class EBlueprintNativizationFlag : uint8_t
{
	EBlueprintNativizationFlag__Disabled                                             = 0,
	EBlueprintNativizationFlag__Dependency                                           = 1,
	EBlueprintNativizationFlag__ExplicitlyEnabled                                    = 2
};

/// Enum /Script/Engine.EBlueprintCompileMode
/// Size: 0x01 (1 bytes)
enum class EBlueprintCompileMode : uint8_t
{
	EBlueprintCompileMode__Default                                                   = 0,
	EBlueprintCompileMode__Development                                               = 1,
	EBlueprintCompileMode__FinalRelease                                              = 2
};

/// Enum /Script/Engine.EBlueprintType
/// Size: 0x01 (1 bytes)
enum class EBlueprintType : uint8_t
{
	BPTYPE_Normal                                                                    = 0,
	BPTYPE_Const                                                                     = 1,
	BPTYPE_MacroLibrary                                                              = 2,
	BPTYPE_Interface                                                                 = 3,
	BPTYPE_LevelScript                                                               = 4,
	BPTYPE_FunctionLibrary                                                           = 5
};

/// Enum /Script/Engine.EBlueprintStatus
/// Size: 0x01 (1 bytes)
enum class EBlueprintStatus : uint8_t
{
	BS_Unknown                                                                       = 0,
	BS_Dirty                                                                         = 1,
	BS_Error                                                                         = 2,
	BS_UpToDate                                                                      = 3,
	BS_BeingCreated                                                                  = 4,
	BS_UpToDateWithWarnings                                                          = 5
};

/// Enum /Script/Engine.EDOFMode
/// Size: 0x01 (1 bytes)
enum class EDOFMode : uint8_t
{
	EDOFMode__Default                                                                = 0,
	EDOFMode__SixDOF                                                                 = 1,
	EDOFMode__YZPlane                                                                = 2,
	EDOFMode__XZPlane                                                                = 3,
	EDOFMode__XYPlane                                                                = 4,
	EDOFMode__CustomPlane                                                            = 5,
	EDOFMode__None                                                                   = 6
};

/// Enum /Script/Engine.EBoneFoldLODIndex
/// Size: 0x01 (1 bytes)
enum class EBoneFoldLODIndex : uint8_t
{
	EBoneFoldLODIndex__LOD0                                                          = 0,
	EBoneFoldLODIndex__LOD1                                                          = 1,
	EBoneFoldLODIndex__LOD2                                                          = 2,
	EBoneFoldLODIndex__LOD3                                                          = 3,
	EBoneFoldLODIndex__LOD4                                                          = 4
};

/// Enum /Script/Engine.EBoneFoldMethod
/// Size: 0x01 (1 bytes)
enum class EBoneFoldMethod : uint8_t
{
	EBoneFoldMethod__FoldEverything                                                  = 0,
	EBoneFoldMethod__FoldBetweenNextFolder                                           = 1,
	EBoneFoldMethod__FoldByAutoLODCalc                                               = 2,
	EBoneFoldMethod__None                                                            = 3
};

/// Enum /Script/Engine.EBoneFoldType
/// Size: 0x01 (1 bytes)
enum class EBoneFoldType : uint8_t
{
	EBoneFoldType__FolderBone                                                        = 0,
	EBoneFoldType__FoldedBone                                                        = 1,
	EBoneFoldType__Default                                                           = 2
};

/// Enum /Script/Engine.EBrushType
/// Size: 0x01 (1 bytes)
enum class EBrushType : uint8_t
{
	Brush_Default                                                                    = 0,
	Brush_Add                                                                        = 1,
	Brush_Subtract                                                                   = 2
};

/// Enum /Script/Engine.ECsgOper
/// Size: 0x01 (1 bytes)
enum class ECsgOper : uint8_t
{
	CSG_Active                                                                       = 0,
	CSG_Add                                                                          = 1,
	CSG_Subtract                                                                     = 2,
	CSG_Intersect                                                                    = 3,
	CSG_Deintersect                                                                  = 4,
	CSG_None                                                                         = 5
};

/// Enum /Script/Engine.EInitialOscillatorOffset
/// Size: 0x01 (1 bytes)
enum class EInitialOscillatorOffset : uint8_t
{
	EOO_OffsetRandom                                                                 = 0,
	EOO_OffsetZero                                                                   = 1
};

/// Enum /Script/Engine.EOscillatorWaveform
/// Size: 0x01 (1 bytes)
enum class EOscillatorWaveform : uint8_t
{
	EOscillatorWaveform__SineWave                                                    = 0,
	EOscillatorWaveform__PerlinNoise                                                 = 1
};

/// Enum /Script/Engine.ECameraShakeDurationType
/// Size: 0x01 (1 bytes)
enum class ECameraShakeDurationType : uint8_t
{
	ECameraShakeDurationType__Fixed                                                  = 0,
	ECameraShakeDurationType__Infinite                                               = 1,
	ECameraShakeDurationType__Custom                                                 = 2
};

/// Enum /Script/Engine.ECameraShakeUpdateResultFlags
/// Size: 0x01 (1 bytes)
enum class ECameraShakeUpdateResultFlags : uint8_t
{
	ECameraShakeUpdateResultFlags__ApplyAsAbsolute                                   = 1,
	ECameraShakeUpdateResultFlags__SkipAutoScale                                     = 2,
	ECameraShakeUpdateResultFlags__SkipAutoPlaySpace                                 = 4,
	ECameraShakeUpdateResultFlags__Default                                           = 0
};

/// Enum /Script/Engine.ECameraShakeAttenuation
/// Size: 0x01 (1 bytes)
enum class ECameraShakeAttenuation : uint8_t
{
	ECameraShakeAttenuation__Linear                                                  = 0,
	ECameraShakeAttenuation__Quadratic                                               = 1
};

/// Enum /Script/Engine.ECameraAlphaBlendMode
/// Size: 0x01 (1 bytes)
enum class ECameraAlphaBlendMode : uint8_t
{
	ECameraAlphaBlendMode__CABM_Linear                                               = 0,
	ECameraAlphaBlendMode__CABM_Cubic                                                = 1
};

/// Enum /Script/Engine.ECameraShakePlaySpace
/// Size: 0x01 (1 bytes)
enum class ECameraShakePlaySpace : uint8_t
{
	ECameraShakePlaySpace__CameraLocal                                               = 0,
	ECameraShakePlaySpace__World                                                     = 1,
	ECameraShakePlaySpace__UserDefined                                               = 2
};

/// Enum /Script/Engine.ECameraProjectionMode
/// Size: 0x01 (1 bytes)
enum class ECameraProjectionMode : uint8_t
{
	ECameraProjectionMode__Perspective                                               = 0,
	ECameraProjectionMode__Orthographic                                              = 1
};

/// Enum /Script/Engine.ECloudStorageDelegate
/// Size: 0x01 (1 bytes)
enum class ECloudStorageDelegate : uint8_t
{
	CSD_KeyValueReadComplete                                                         = 0,
	CSD_KeyValueWriteComplete                                                        = 1,
	CSD_ValueChanged                                                                 = 2,
	CSD_DocumentQueryComplete                                                        = 3,
	CSD_DocumentReadComplete                                                         = 4,
	CSD_DocumentWriteComplete                                                        = 5,
	CSD_DocumentConflictDetected                                                     = 6
};

/// Enum /Script/Engine.EAngularDriveMode
/// Size: 0x01 (1 bytes)
enum class EAngularDriveMode : uint8_t
{
	EAngularDriveMode__SLERP                                                         = 0,
	EAngularDriveMode__TwistAndSwing                                                 = 1
};

/// Enum /Script/Engine.ECurveTableMode
/// Size: 0x01 (1 bytes)
enum class ECurveTableMode : uint8_t
{
	ECurveTableMode__Empty                                                           = 0,
	ECurveTableMode__SimpleCurves                                                    = 1,
	ECurveTableMode__RichCurves                                                      = 2
};

/// Enum /Script/Engine.ECustomAttributeBlendType
/// Size: 0x01 (1 bytes)
enum class ECustomAttributeBlendType : uint8_t
{
	ECustomAttributeBlendType__Override                                              = 0,
	ECustomAttributeBlendType__Blend                                                 = 1
};

/// Enum /Script/Engine.EEvaluateCurveTableResult
/// Size: 0x01 (1 bytes)
enum class EEvaluateCurveTableResult : uint8_t
{
	EEvaluateCurveTableResult__RowFound                                              = 0,
	EEvaluateCurveTableResult__RowNotFound                                           = 1
};

/// Enum /Script/Engine.EGrammaticalNumber
/// Size: 0x01 (1 bytes)
enum class EGrammaticalNumber : uint8_t
{
	EGrammaticalNumber__Singular                                                     = 0,
	EGrammaticalNumber__Plural                                                       = 1
};

/// Enum /Script/Engine.EGrammaticalGender
/// Size: 0x01 (1 bytes)
enum class EGrammaticalGender : uint8_t
{
	EGrammaticalGender__Neuter                                                       = 0,
	EGrammaticalGender__Masculine                                                    = 1,
	EGrammaticalGender__Feminine                                                     = 2,
	EGrammaticalGender__Mixed                                                        = 3
};

/// Enum /Script/Engine.DistributionParamMode
/// Size: 0x01 (1 bytes)
enum class DistributionParamMode : uint8_t
{
	DPM_Normal                                                                       = 0,
	DPM_Abs                                                                          = 1,
	DPM_Direct                                                                       = 2
};

/// Enum /Script/Engine.EDistributionVectorMirrorFlags
/// Size: 0x01 (1 bytes)
enum class EDistributionVectorMirrorFlags : uint8_t
{
	EDVMF_Same                                                                       = 0,
	EDVMF_Different                                                                  = 1,
	EDVMF_Mirror                                                                     = 2
};

/// Enum /Script/Engine.EDistributionVectorLockFlags
/// Size: 0x01 (1 bytes)
enum class EDistributionVectorLockFlags : uint8_t
{
	EDVLF_None                                                                       = 0,
	EDVLF_XY                                                                         = 1,
	EDVLF_XZ                                                                         = 2,
	EDVLF_YZ                                                                         = 3,
	EDVLF_XYZ                                                                        = 4
};

/// Enum /Script/Engine.ENodeEnabledState
/// Size: 0x01 (1 bytes)
enum class ENodeEnabledState : uint8_t
{
	ENodeEnabledState__Enabled                                                       = 0,
	ENodeEnabledState__Disabled                                                      = 1,
	ENodeEnabledState__DevelopmentOnly                                               = 2
};

/// Enum /Script/Engine.ENodeAdvancedPins
/// Size: 0x01 (1 bytes)
enum class ENodeAdvancedPins : uint8_t
{
	ENodeAdvancedPins__NoPins                                                        = 0,
	ENodeAdvancedPins__Shown                                                         = 1,
	ENodeAdvancedPins__Hidden                                                        = 2
};

/// Enum /Script/Engine.ENodeTitleType
/// Size: 0x01 (1 bytes)
enum class ENodeTitleType : uint8_t
{
	ENodeTitleType__FullTitle                                                        = 0,
	ENodeTitleType__ListView                                                         = 1,
	ENodeTitleType__EditableTitle                                                    = 2,
	ENodeTitleType__MenuTitle                                                        = 3,
	ENodeTitleType__MAX_TitleTypes                                                   = 4
};

/// Enum /Script/Engine.EPinContainerType
/// Size: 0x01 (1 bytes)
enum class EPinContainerType : uint8_t
{
	EPinContainerType__None                                                          = 0,
	EPinContainerType__Array                                                         = 1,
	EPinContainerType__Set                                                           = 2,
	EPinContainerType__Map                                                           = 3
};

/// Enum /Script/Engine.EEdGraphPinDirection
/// Size: 0x01 (1 bytes)
enum class EEdGraphPinDirection : uint8_t
{
	EGPD_Input                                                                       = 0,
	EGPD_Output                                                                      = 1
};

/// Enum /Script/Engine.EBlueprintPinStyleType
/// Size: 0x01 (1 bytes)
enum class EBlueprintPinStyleType : uint8_t
{
	BPST_Original                                                                    = 0,
	BPST_VariantA                                                                    = 1
};

/// Enum /Script/Engine.ECanCreateConnectionResponse
/// Size: 0x01 (1 bytes)
enum class ECanCreateConnectionResponse : uint8_t
{
	CONNECT_RESPONSE_MAKE                                                            = 0,
	CONNECT_RESPONSE_DISALLOW                                                        = 1,
	CONNECT_RESPONSE_BREAK_OTHERS_A                                                  = 2,
	CONNECT_RESPONSE_BREAK_OTHERS_B                                                  = 3,
	CONNECT_RESPONSE_BREAK_OTHERS_AB                                                 = 4,
	CONNECT_RESPONSE_MAKE_WITH_CONVERSION_NODE                                       = 5
};

/// Enum /Script/Engine.EGraphType
/// Size: 0x01 (1 bytes)
enum class EGraphType : uint8_t
{
	GT_Function                                                                      = 0,
	GT_Ubergraph                                                                     = 1,
	GT_Macro                                                                         = 2,
	GT_Animation                                                                     = 3,
	GT_StateMachine                                                                  = 4
};

/// Enum /Script/Engine.ETransitionType
/// Size: 0x01 (1 bytes)
enum class ETransitionType : uint8_t
{
	ETransitionType__None                                                            = 0,
	ETransitionType__Paused                                                          = 1,
	ETransitionType__Loading                                                         = 2,
	ETransitionType__Saving                                                          = 3,
	ETransitionType__Connecting                                                      = 4,
	ETransitionType__Precaching                                                      = 5,
	ETransitionType__WaitingToConnect                                                = 6
};

/// Enum /Script/Engine.EFullyLoadPackageType
/// Size: 0x01 (1 bytes)
enum class EFullyLoadPackageType : uint8_t
{
	FULLYLOAD_Map                                                                    = 0,
	FULLYLOAD_Game_PreLoadClass                                                      = 1,
	FULLYLOAD_Game_PostLoadClass                                                     = 2,
	FULLYLOAD_Always                                                                 = 3,
	FULLYLOAD_Mutator                                                                = 4
};

/// Enum /Script/Engine.EViewModeIndex
/// Size: 0x01 (1 bytes)
enum class EViewModeIndex : uint8_t
{
	VMI_BrushWireframe                                                               = 0,
	VMI_Wireframe                                                                    = 1,
	VMI_Unlit                                                                        = 2,
	VMI_Lit                                                                          = 3,
	VMI_Lit_DetailLighting                                                           = 4,
	VMI_LightingOnly                                                                 = 5,
	VMI_LightComplexity                                                              = 6,
	VMI_ShaderComplexity                                                             = 8,
	VMI_LightmapDensity                                                              = 9,
	VMI_LitLightmapDensity                                                           = 10,
	VMI_ReflectionOverride                                                           = 11,
	VMI_VisualizeBuffer                                                              = 12,
	VMI_StationaryLightOverlap                                                       = 14,
	VMI_CollisionPawn                                                                = 15,
	VMI_CollisionVisibility                                                          = 16,
	VMI_LODColoration                                                                = 18,
	VMI_QuadOverdraw                                                                 = 19,
	VMI_PrimitiveDistanceAccuracy                                                    = 20,
	VMI_MeshUVDensityAccuracy                                                        = 21,
	VMI_ShaderComplexityWithQuadOverdraw                                             = 22,
	VMI_HLODColoration                                                               = 23,
	VMI_GroupLODColoration                                                           = 24,
	VMI_MaterialTextureScaleAccuracy                                                 = 25,
	VMI_RequiredTextureResolution                                                    = 26,
	VMI_PathTracing                                                                  = 27,
	VMI_RayTracingDebug                                                              = 28,
	VMI_Generate2DMapMode                                                            = 29,
	VMI_TextureUsage                                                                 = 30,
	VMI_CollisionNormal                                                              = 31,
	VMI_TexelDensity                                                                 = 32,
	VMI_VertexColor                                                                  = 33,
	VMI_Overdraw                                                                     = 34,
	VMI_Max                                                                          = 35,
	VMI_Unknown                                                                      = 255,
	VMI_Max35                                                                        = 256
};

/// Enum /Script/Engine.EKuroNetMode
/// Size: 0x01 (1 bytes)
enum class EKuroNetMode : uint8_t
{
	KNM_Original                                                                     = 0,
	KNM_Net                                                                          = 1,
	KNM_Max                                                                          = 2,
	KNM_Max4                                                                         = 3
};

/// Enum /Script/Engine.EDemoPlayFailure
/// Size: 0x01 (1 bytes)
enum class EDemoPlayFailure : uint8_t
{
	EDemoPlayFailure__Generic                                                        = 0,
	EDemoPlayFailure__DemoNotFound                                                   = 1,
	EDemoPlayFailure__Corrupt                                                        = 2,
	EDemoPlayFailure__InvalidVersion                                                 = 3,
	EDemoPlayFailure__InitBase                                                       = 4,
	EDemoPlayFailure__GameSpecificHeader                                             = 5,
	EDemoPlayFailure__ReplayStreamerInternal                                         = 6,
	EDemoPlayFailure__LoadMap                                                        = 7,
	EDemoPlayFailure__Serialization                                                  = 8
};

/// Enum /Script/Engine.ETravelType
/// Size: 0x01 (1 bytes)
enum class ETravelType : uint8_t
{
	TRAVEL_Absolute                                                                  = 0,
	TRAVEL_Partial                                                                   = 1,
	TRAVEL_Relative                                                                  = 2
};

/// Enum /Script/Engine.ENetworkLagState
/// Size: 0x01 (1 bytes)
enum class ENetworkLagState : uint8_t
{
	ENetworkLagState__NotLagging                                                     = 0,
	ENetworkLagState__Lagging                                                        = 1
};

/// Enum /Script/Engine.EMouseCaptureMode
/// Size: 0x01 (1 bytes)
enum class EMouseCaptureMode : uint8_t
{
	EMouseCaptureMode__NoCapture                                                     = 0,
	EMouseCaptureMode__CapturePermanently                                            = 1,
	EMouseCaptureMode__CapturePermanently_IncludingInitialMouseDown                  = 2,
	EMouseCaptureMode__CaptureDuringMouseDown                                        = 3,
	EMouseCaptureMode__CaptureDuringRightMouseDown                                   = 4
};

/// Enum /Script/Engine.EInputEvent
/// Size: 0x01 (1 bytes)
enum class EInputEvent : uint8_t
{
	IE_Pressed                                                                       = 0,
	IE_Released                                                                      = 1,
	IE_Repeat                                                                        = 2,
	IE_DoubleClick                                                                   = 3,
	IE_Axis                                                                          = 4
};

/// Enum /Script/Engine.ECustomTimeStepSynchronizationState
/// Size: 0x01 (1 bytes)
enum class ECustomTimeStepSynchronizationState : uint8_t
{
	ECustomTimeStepSynchronizationState__Closed                                      = 0,
	ECustomTimeStepSynchronizationState__Error                                       = 1,
	ECustomTimeStepSynchronizationState__Synchronized                                = 2,
	ECustomTimeStepSynchronizationState__Synchronizing                               = 3
};

/// Enum /Script/Engine.EMeshBufferAccess
/// Size: 0x01 (1 bytes)
enum class EMeshBufferAccess : uint8_t
{
	EMeshBufferAccess__Default                                                       = 0,
	EMeshBufferAccess__ForceCPUAndGPU                                                = 1
};

/// Enum /Script/Engine.ESpawnActorCollisionHandlingMethod
/// Size: 0x01 (1 bytes)
enum class ESpawnActorCollisionHandlingMethod : uint8_t
{
	ESpawnActorCollisionHandlingMethod__Undefined                                    = 0,
	ESpawnActorCollisionHandlingMethod__AlwaysSpawn                                  = 1,
	ESpawnActorCollisionHandlingMethod__AdjustIfPossibleButAlwaysSpawn               = 2,
	ESpawnActorCollisionHandlingMethod__AdjustIfPossibleButDontSpawnIfColliding      = 3,
	ESpawnActorCollisionHandlingMethod__DontSpawnIfColliding                         = 4
};

/// Enum /Script/Engine.EComponentSocketType
/// Size: 0x01 (1 bytes)
enum class EComponentSocketType : uint8_t
{
	EComponentSocketType__Invalid                                                    = 0,
	EComponentSocketType__Bone                                                       = 1,
	EComponentSocketType__Socket                                                     = 2
};

/// Enum /Script/Engine.EPhysicalMaterialMaskColor
/// Size: 0x01 (1 bytes)
enum class EPhysicalMaterialMaskColor : uint8_t
{
	EPhysicalMaterialMaskColor__Red                                                  = 0,
	EPhysicalMaterialMaskColor__Green                                                = 1,
	EPhysicalMaterialMaskColor__Blue                                                 = 2,
	EPhysicalMaterialMaskColor__Cyan                                                 = 3,
	EPhysicalMaterialMaskColor__Magenta                                              = 4,
	EPhysicalMaterialMaskColor__Yellow                                               = 5,
	EPhysicalMaterialMaskColor__White                                                = 6,
	EPhysicalMaterialMaskColor__Black                                                = 7
};

/// Enum /Script/Engine.EWalkableSlopeBehavior
/// Size: 0x01 (1 bytes)
enum class EWalkableSlopeBehavior : uint8_t
{
	WalkableSlope_Default                                                            = 0,
	WalkableSlope_Increase                                                           = 1,
	WalkableSlope_Decrease                                                           = 2,
	WalkableSlope_Unwalkable                                                         = 3,
	WalkableSlope_Max                                                                = 4,
	WalkableSlope_Max6                                                               = 5
};

/// Enum /Script/Engine.ERotatorQuantization
/// Size: 0x01 (1 bytes)
enum class ERotatorQuantization : uint8_t
{
	ERotatorQuantization__ByteComponents                                             = 0,
	ERotatorQuantization__ShortComponents                                            = 1
};

/// Enum /Script/Engine.EVectorQuantization
/// Size: 0x01 (1 bytes)
enum class EVectorQuantization : uint8_t
{
	EVectorQuantization__RoundWholeNumber                                            = 0,
	EVectorQuantization__RoundOneDecimal                                             = 1,
	EVectorQuantization__RoundTwoDecimals                                            = 2
};

/// Enum /Script/Engine.EAutoPossessAI
/// Size: 0x01 (1 bytes)
enum class EAutoPossessAI : uint8_t
{
	EAutoPossessAI__Disabled                                                         = 0,
	EAutoPossessAI__PlacedInWorld                                                    = 1,
	EAutoPossessAI__Spawned                                                          = 2,
	EAutoPossessAI__PlacedInWorldOrSpawned                                           = 3
};

/// Enum /Script/Engine.EAutoReceiveInput
/// Size: 0x01 (1 bytes)
enum class EAutoReceiveInput : uint8_t
{
	EAutoReceiveInput__Disabled                                                      = 0,
	EAutoReceiveInput__Player0                                                       = 1,
	EAutoReceiveInput__Player1                                                       = 2,
	EAutoReceiveInput__Player2                                                       = 3,
	EAutoReceiveInput__Player3                                                       = 4,
	EAutoReceiveInput__Player4                                                       = 5,
	EAutoReceiveInput__Player5                                                       = 6,
	EAutoReceiveInput__Player6                                                       = 7,
	EAutoReceiveInput__Player7                                                       = 8
};

/// Enum /Script/Engine.ENetDormancy
/// Size: 0x01 (1 bytes)
enum class ENetDormancy : uint8_t
{
	DORM_Never                                                                       = 0,
	DORM_Awake                                                                       = 1,
	DORM_DormantAll                                                                  = 2,
	DORM_DormantPartial                                                              = 3,
	DORM_Initial                                                                     = 4
};

/// Enum /Script/Engine.EKuroNetRole
/// Size: 0x01 (1 bytes)
enum class EKuroNetRole : uint8_t
{
	KURO_ROLE_None                                                                   = 0,
	KURO_ROLE_SimulatedProxy                                                         = 1,
	KURO_ROLE_AutonomousProxy                                                        = 2,
	KURO_ROLE_Authority                                                              = 3
};

/// Enum /Script/Engine.ENetRole
/// Size: 0x01 (1 bytes)
enum class ENetRole : uint8_t
{
	ROLE_None                                                                        = 0,
	ROLE_SimulatedProxy                                                              = 1,
	ROLE_AutonomousProxy                                                             = 2,
	ROLE_Authority                                                                   = 3
};

/// Enum /Script/Engine.EUpdateRateShiftBucket
/// Size: 0x01 (1 bytes)
enum class EUpdateRateShiftBucket : uint8_t
{
	EUpdateRateShiftBucket__ShiftBucket0                                             = 0,
	EUpdateRateShiftBucket__ShiftBucket1                                             = 1,
	EUpdateRateShiftBucket__ShiftBucket2                                             = 2,
	EUpdateRateShiftBucket__ShiftBucket3                                             = 3,
	EUpdateRateShiftBucket__ShiftBucket4                                             = 4,
	EUpdateRateShiftBucket__ShiftBucket5                                             = 5,
	EUpdateRateShiftBucket__ShiftBucketMax                                           = 6
};

/// Enum /Script/Engine.EShadowMapFlags
/// Size: 0x01 (1 bytes)
enum class EShadowMapFlags : uint8_t
{
	SMF_None                                                                         = 0,
	SMF_Streamed                                                                     = 1
};

/// Enum /Script/Engine.ELightMapPaddingType
/// Size: 0x01 (1 bytes)
enum class ELightMapPaddingType : uint8_t
{
	LMPT_NormalPadding                                                               = 0,
	LMPT_PrePadding                                                                  = 1,
	LMPT_NoPadding                                                                   = 2
};

/// Enum /Script/Engine.ECollisionEnabled
/// Size: 0x01 (1 bytes)
enum class ECollisionEnabled : uint8_t
{
	ECollisionEnabled__NoCollision                                                   = 0,
	ECollisionEnabled__QueryOnly                                                     = 1,
	ECollisionEnabled__PhysicsOnly                                                   = 2,
	ECollisionEnabled__QueryAndPhysics                                               = 3
};

/// Enum /Script/Engine.ETimelineSigType
/// Size: 0x01 (1 bytes)
enum class ETimelineSigType : uint8_t
{
	ETS_EventSignature                                                               = 0,
	ETS_FloatSignature                                                               = 1,
	ETS_VectorSignature                                                              = 2,
	ETS_LinearColorSignature                                                         = 3,
	ETS_InvalidSignature                                                             = 4
};

/// Enum /Script/Engine.EWorldTypeExtra
/// Size: 0x01 (1 bytes)
enum class EWorldTypeExtra : uint8_t
{
	EWorldTypeExtra__None                                                            = 0,
	EWorldTypeExtra__SilentLogin                                                     = 1
};

/// Enum /Script/Engine.EFilterInterpolationType
/// Size: 0x01 (1 bytes)
enum class EFilterInterpolationType : uint8_t
{
	BSIT_Average                                                                     = 0,
	BSIT_Linear                                                                      = 1,
	BSIT_Cubic                                                                       = 2
};

/// Enum /Script/Engine.EOverlapFilterOption
/// Size: 0x01 (1 bytes)
enum class EOverlapFilterOption : uint8_t
{
	OverlapFilter_All                                                                = 0,
	OverlapFilter_DynamicOnly                                                        = 1,
	OverlapFilter_StaticOnly                                                         = 2
};

/// Enum /Script/Engine.ECollisionChannel
/// Size: 0x01 (1 bytes)
enum class ECollisionChannel : uint8_t
{
	ECC_WorldStatic                                                                  = 0,
	ECC_WorldDynamic                                                                 = 1,
	ECC_Pawn                                                                         = 2,
	ECC_Visibility                                                                   = 3,
	ECC_Camera                                                                       = 4,
	ECC_PhysicsBody                                                                  = 5,
	ECC_Vehicle                                                                      = 6,
	ECC_Destructible                                                                 = 7,
	ECC_EngineTraceChannel1                                                          = 8,
	ECC_EngineTraceChannel2                                                          = 9,
	ECC_EngineTraceChannel3                                                          = 10,
	ECC_EngineTraceChannel4                                                          = 11,
	ECC_EngineTraceChannel5                                                          = 12,
	ECC_EngineTraceChannel6                                                          = 13,
	ECC_GameTraceChannel1                                                            = 14,
	ECC_GameTraceChannel2                                                            = 15,
	ECC_GameTraceChannel3                                                            = 16,
	ECC_GameTraceChannel4                                                            = 17,
	ECC_GameTraceChannel5                                                            = 18,
	ECC_GameTraceChannel6                                                            = 19,
	ECC_GameTraceChannel7                                                            = 20,
	ECC_GameTraceChannel8                                                            = 21,
	ECC_GameTraceChannel9                                                            = 22,
	ECC_GameTraceChannel10                                                           = 23,
	ECC_GameTraceChannel11                                                           = 24,
	ECC_GameTraceChannel12                                                           = 25,
	ECC_GameTraceChannel13                                                           = 26,
	ECC_GameTraceChannel14                                                           = 27,
	ECC_GameTraceChannel15                                                           = 28,
	ECC_GameTraceChannel16                                                           = 29,
	ECC_GameTraceChannel17                                                           = 30,
	ECC_GameTraceChannel18                                                           = 31,
	ECC_OverlapAll_Deprecated                                                        = 32
};

/// Enum /Script/Engine.ENetworkSmoothingMode
/// Size: 0x01 (1 bytes)
enum class ENetworkSmoothingMode : uint8_t
{
	ENetworkSmoothingMode__Disabled                                                  = 0,
	ENetworkSmoothingMode__Linear                                                    = 1,
	ENetworkSmoothingMode__Exponential                                               = 2,
	ENetworkSmoothingMode__Replay                                                    = 3,
	ENetworkSmoothingMode__Predicting                                                = 4,
	ENetworkSmoothingMode__KuroReplay                                                = 5
};

/// Enum /Script/Engine.ELightingBuildQuality
/// Size: 0x01 (1 bytes)
enum class ELightingBuildQuality : uint8_t
{
	Quality_Preview                                                                  = 0,
	Quality_Medium                                                                   = 1,
	Quality_High                                                                     = 2,
	Quality_Production                                                               = 3
};

/// Enum /Script/Engine.EMaterialShadingRate
/// Size: 0x01 (1 bytes)
enum class EMaterialShadingRate : uint8_t
{
	MSR_1x1                                                                          = 0,
	MSR_2x1                                                                          = 1,
	MSR_1x2                                                                          = 2,
	MSR_2x2                                                                          = 3,
	MSR_4x2                                                                          = 4,
	MSR_2x4                                                                          = 5,
	MSR_4x4                                                                          = 6,
	MSR_Count                                                                        = 7
};

/// Enum /Script/Engine.EMaterialStencilCompare
/// Size: 0x01 (1 bytes)
enum class EMaterialStencilCompare : uint8_t
{
	MSC_Less                                                                         = 0,
	MSC_LessEqual                                                                    = 1,
	MSC_Greater                                                                      = 2,
	MSC_GreaterEqual                                                                 = 3,
	MSC_Equal                                                                        = 4,
	MSC_NotEqual                                                                     = 5,
	MSC_Never                                                                        = 6,
	MSC_Always                                                                       = 7,
	MSC_Count                                                                        = 8
};

/// Enum /Script/Engine.EMaterialSamplerType
/// Size: 0x01 (1 bytes)
enum class EMaterialSamplerType : uint8_t
{
	SAMPLERTYPE_Color                                                                = 0,
	SAMPLERTYPE_Grayscale                                                            = 1,
	SAMPLERTYPE_Alpha                                                                = 2,
	SAMPLERTYPE_Normal                                                               = 3,
	SAMPLERTYPE_Masks                                                                = 4,
	SAMPLERTYPE_DistanceFieldFont                                                    = 5,
	SAMPLERTYPE_LinearColor                                                          = 6,
	SAMPLERTYPE_LinearGrayscale                                                      = 7,
	SAMPLERTYPE_Data                                                                 = 8,
	SAMPLERTYPE_External                                                             = 9,
	SAMPLERTYPE_VirtualColor                                                         = 10,
	SAMPLERTYPE_VirtualGrayscale                                                     = 11,
	SAMPLERTYPE_VirtualAlpha                                                         = 12,
	SAMPLERTYPE_VirtualNormal                                                        = 13,
	SAMPLERTYPE_VirtualMasks                                                         = 14,
	SAMPLERTYPE_VirtualLinearColor                                                   = 15,
	SAMPLERTYPE_VirtualLinearGrayscale                                               = 16
};

/// Enum /Script/Engine.EMaterialTessellationMode
/// Size: 0x01 (1 bytes)
enum class EMaterialTessellationMode : uint8_t
{
	MTM_NoTessellation                                                               = 0,
	MTM_FlatTessellation                                                             = 1,
	MTM_PNTriangles                                                                  = 2
};

/// Enum /Script/Engine.EMaterialShadingModel
/// Size: 0x01 (1 bytes)
enum class EMaterialShadingModel : uint8_t
{
	MSM_Unlit                                                                        = 0,
	MSM_DefaultLit                                                                   = 1,
	MSM_Subsurface                                                                   = 2,
	MSM_PreintegratedSkin                                                            = 3,
	MSM_ClearCoat                                                                    = 4,
	MSM_SubsurfaceProfile                                                            = 5,
	MSM_TwoSidedFoliage                                                              = 6,
	MSM_SpecularFoliage                                                              = 7,
	MSM_DefaultLitMobileSSR                                                          = 8,
	MSM_SceneHLOD                                                                    = 9,
	MSM_SingleLayerWater                                                             = 10,
	MSM_ThinTranslucent                                                              = 11,
	MSM_ToonCommon                                                                   = 12,
	MSM_ToonOutline                                                                  = 13,
	MSM_ToonFace                                                                     = 14,
	MSM_ToonHair                                                                     = 15,
	MSM_NUM                                                                          = 16,
	MSM_FromMaterialExpression                                                       = 17
};

/// Enum /Script/Engine.EParticleCollisionMode
/// Size: 0x01 (1 bytes)
enum class EParticleCollisionMode : uint8_t
{
	EParticleCollisionMode__SceneDepth                                               = 0,
	EParticleCollisionMode__DistanceField                                            = 1
};

/// Enum /Script/Engine.ETrailWidthMode
/// Size: 0x01 (1 bytes)
enum class ETrailWidthMode : uint8_t
{
	ETrailWidthMode_FromCentre                                                       = 0,
	ETrailWidthMode_FromFirst                                                        = 1,
	ETrailWidthMode_FromSecond                                                       = 2
};

/// Enum /Script/Engine.EGBufferFormat
/// Size: 0x01 (1 bytes)
enum class EGBufferFormat : uint8_t
{
	EGBufferFormat__Force8BitsPerChannel                                             = 0,
	EGBufferFormat__Default                                                          = 1,
	EGBufferFormat__HighPrecisionNormals                                             = 3,
	EGBufferFormat__Force16BitsPerChannel                                            = 5
};

/// Enum /Script/Engine.ESceneCaptureCompositeMode
/// Size: 0x01 (1 bytes)
enum class ESceneCaptureCompositeMode : uint8_t
{
	SCCM_Overwrite                                                                   = 0,
	SCCM_Additive                                                                    = 1,
	SCCM_Composite                                                                   = 2
};

/// Enum /Script/Engine.ESceneCaptureSource
/// Size: 0x01 (1 bytes)
enum class ESceneCaptureSource : uint8_t
{
	SCS_SceneColorHDR                                                                = 0,
	SCS_SceneColorHDRNoAlpha                                                         = 1,
	SCS_FinalColorLDR                                                                = 2,
	SCS_SceneColorSceneDepth                                                         = 3,
	SCS_SceneDepth                                                                   = 4,
	SCS_DeviceDepth                                                                  = 5,
	SCS_Normal                                                                       = 6,
	SCS_BaseColor                                                                    = 7,
	SCS_FinalColorHDR                                                                = 8,
	SCS_FinalToneCurveHDR                                                            = 9
};

/// Enum /Script/Engine.ETranslucentSortPolicy
/// Size: 0x01 (1 bytes)
enum class ETranslucentSortPolicy : uint8_t
{
	ETranslucentSortPolicy__SortByDistance                                           = 0,
	ETranslucentSortPolicy__SortByProjectedZ                                         = 1,
	ETranslucentSortPolicy__SortAlongAxis                                            = 2
};

/// Enum /Script/Engine.ERefractionMode
/// Size: 0x01 (1 bytes)
enum class ERefractionMode : uint8_t
{
	RM_IndexOfRefraction                                                             = 0,
	RM_PixelNormalOffset                                                             = 1
};

/// Enum /Script/Engine.ETranslucencyLightingMode
/// Size: 0x01 (1 bytes)
enum class ETranslucencyLightingMode : uint8_t
{
	TLM_VolumetricNonDirectional                                                     = 0,
	TLM_VolumetricDirectional                                                        = 1,
	TLM_VolumetricPerVertexNonDirectional                                            = 2,
	TLM_VolumetricPerVertexDirectional                                               = 3,
	TLM_Surface                                                                      = 4,
	TLM_SurfacePerPixelLighting                                                      = 5
};

/// Enum /Script/Engine.ESamplerSourceMode
/// Size: 0x01 (1 bytes)
enum class ESamplerSourceMode : uint8_t
{
	SSM_FromTextureAsset                                                             = 0,
	SSM_Wrap_WorldGroupSettings                                                      = 1,
	SSM_Clamp_WorldGroupSettings                                                     = 2
};

/// Enum /Script/Engine.EKuroTranslucentPreDepthTestMode
/// Size: 0x01 (1 bytes)
enum class EKuroTranslucentPreDepthTestMode : uint8_t
{
	KTPD_DepthNearOrEqual                                                            = 0,
	KTPD_DepthNear                                                                   = 1,
	KTPD_DepthFartherOrEqual                                                         = 2,
	KTPD_DepthFarther                                                                = 3,
	KTPD_DepthTestNone                                                               = 4
};

/// Enum /Script/Engine.EBlendMode
/// Size: 0x01 (1 bytes)
enum class EBlendMode : uint8_t
{
	BLEND_Opaque                                                                     = 0,
	BLEND_Masked                                                                     = 1,
	BLEND_Translucent                                                                = 2,
	BLEND_Additive                                                                   = 3,
	BLEND_Modulate                                                                   = 4,
	BLEND_AlphaComposite                                                             = 5,
	BLEND_AlphaHoldout                                                               = 6
};

/// Enum /Script/Engine.EOcclusionCombineMode
/// Size: 0x01 (1 bytes)
enum class EOcclusionCombineMode : uint8_t
{
	OCM_Minimum                                                                      = 0,
	OCM_Multiply                                                                     = 1
};

/// Enum /Script/Engine.ELightmapType
/// Size: 0x01 (1 bytes)
enum class ELightmapType : uint8_t
{
	ELightmapType__Default                                                           = 0,
	ELightmapType__ForceSurface                                                      = 1,
	ELightmapType__ForceVolumetric                                                   = 2
};

/// Enum /Script/Engine.EIndirectLightingCacheQuality
/// Size: 0x01 (1 bytes)
enum class EIndirectLightingCacheQuality : uint8_t
{
	ILCQ_Off                                                                         = 0,
	ILCQ_Point                                                                       = 1,
	ILCQ_Volume                                                                      = 2
};

/// Enum /Script/Engine.ESceneDepthPriorityGroup
/// Size: 0x01 (1 bytes)
enum class ESceneDepthPriorityGroup : uint8_t
{
	SDPG_World                                                                       = 0,
	SDPG_Foreground                                                                  = 1
};

/// Enum /Script/Engine.EAspectRatioAxisConstraint
/// Size: 0x01 (1 bytes)
enum class EAspectRatioAxisConstraint : uint8_t
{
	AspectRatio_MaintainYFOV                                                         = 0,
	AspectRatio_MaintainXFOV                                                         = 1,
	AspectRatio_MajorAxisFOV                                                         = 2
};

/// Enum /Script/Engine.EFontCacheType
/// Size: 0x01 (1 bytes)
enum class EFontCacheType : uint8_t
{
	EFontCacheType__Offline                                                          = 0,
	EFontCacheType__Runtime                                                          = 1
};

/// Enum /Script/Engine.EFontImportCharacterSet
/// Size: 0x01 (1 bytes)
enum class EFontImportCharacterSet : uint8_t
{
	FontICS_Default                                                                  = 0,
	FontICS_Ansi                                                                     = 1,
	FontICS_Symbol                                                                   = 2
};

/// Enum /Script/Engine.EStandbyType
/// Size: 0x01 (1 bytes)
enum class EStandbyType : uint8_t
{
	STDBY_Rx                                                                         = 0,
	STDBY_Tx                                                                         = 1,
	STDBY_BadPing                                                                    = 2
};

/// Enum /Script/Engine.ESuggestProjVelocityTraceOption
/// Size: 0x01 (1 bytes)
enum class ESuggestProjVelocityTraceOption : uint8_t
{
	ESuggestProjVelocityTraceOption__DoNotTrace                                      = 0,
	ESuggestProjVelocityTraceOption__TraceFullPath                                   = 1,
	ESuggestProjVelocityTraceOption__OnlyTraceWhileAscending                         = 2
};

/// Enum /Script/Engine.EWindowMode
/// Size: 0x01 (1 bytes)
enum class EWindowMode : uint8_t
{
	EWindowMode__Fullscreen                                                          = 0,
	EWindowMode__WindowedFullscreen                                                  = 1,
	EWindowMode__Windowed                                                            = 2
};

/// Enum /Script/Engine.EHISMViewRelevanceType
/// Size: 0x01 (1 bytes)
enum class EHISMViewRelevanceType : uint8_t
{
	EHISMViewRelevanceType__Grass                                                    = 0,
	EHISMViewRelevanceType__Foliage                                                  = 1,
	EHISMViewRelevanceType__HISM                                                     = 2
};

/// Enum /Script/Engine.EHitProxyPriority
/// Size: 0x01 (1 bytes)
enum class EHitProxyPriority : uint8_t
{
	HPP_World                                                                        = 0,
	HPP_Wireframe                                                                    = 1,
	HPP_Foreground                                                                   = 2,
	HPP_UI                                                                           = 3
};

/// Enum /Script/Engine.EHLODLayerType
/// Size: 0x01 (1 bytes)
enum class EHLODLayerType : uint8_t
{
	EHLODLayerType__Instancing                                                       = 0,
	EHLODLayerType__MeshMerge                                                        = 1,
	EHLODLayerType__MeshSimplify                                                     = 2
};

/// Enum /Script/Engine.EImportanceWeight
/// Size: 0x01 (1 bytes)
enum class EImportanceWeight : uint8_t
{
	EImportanceWeight__Luminance                                                     = 0,
	EImportanceWeight__Red                                                           = 1,
	EImportanceWeight__Green                                                         = 2,
	EImportanceWeight__Blue                                                          = 3,
	EImportanceWeight__Alpha                                                         = 4
};

/// Enum /Script/Engine.EAdManagerDelegate
/// Size: 0x01 (1 bytes)
enum class EAdManagerDelegate : uint8_t
{
	AMD_ClickedBanner                                                                = 0,
	AMD_UserClosedAd                                                                 = 1
};

/// Enum /Script/Engine.EControllerAnalogStick
/// Size: 0x01 (1 bytes)
enum class EControllerAnalogStick : uint8_t
{
	EControllerAnalogStick__CAS_LeftStick                                            = 0,
	EControllerAnalogStick__CAS_RightStick                                           = 1
};

/// Enum /Script/Engine.EAnimAlphaInputType
/// Size: 0x01 (1 bytes)
enum class EAnimAlphaInputType : uint8_t
{
	EAnimAlphaInputType__Float                                                       = 0,
	EAnimAlphaInputType__Bool                                                        = 1,
	EAnimAlphaInputType__Curve                                                       = 2
};

/// Enum /Script/Engine.EKuroISMCullingType
/// Size: 0x01 (1 bytes)
enum class EKuroISMCullingType : uint8_t
{
	EKuroISMCullingType__None                                                        = 0,
	EKuroISMCullingType__Near                                                        = 1,
	EKuroISMCullingType__Middle                                                      = 2,
	EKuroISMCullingType__Far                                                         = 3,
	EKuroISMCullingType__SuperFar                                                    = 4,
	EKuroISMCullingType__Impostor                                                    = 5,
	EKuroISMCullingType__Grass                                                       = 6,
	EKuroISMCullingType__ExtremeFar                                                  = 7,
	EKuroISMCullingType__Pcg                                                         = 8
};

/// Enum /Script/Engine.ETrackActiveCondition
/// Size: 0x01 (1 bytes)
enum class ETrackActiveCondition : uint8_t
{
	ETAC_Always                                                                      = 0,
	ETAC_GoreEnabled                                                                 = 1,
	ETAC_GoreDisabled                                                                = 2
};

/// Enum /Script/Engine.EInterpTrackMoveRotMode
/// Size: 0x01 (1 bytes)
enum class EInterpTrackMoveRotMode : uint8_t
{
	IMR_Keyframed                                                                    = 0,
	IMR_LookAtGroup                                                                  = 1,
	IMR_Ignore                                                                       = 2
};

/// Enum /Script/Engine.EInterpMoveAxis
/// Size: 0x01 (1 bytes)
enum class EInterpMoveAxis : uint8_t
{
	AXIS_TranslationX                                                                = 0,
	AXIS_TranslationY                                                                = 1,
	AXIS_TranslationZ                                                                = 2,
	AXIS_RotationX                                                                   = 3,
	AXIS_RotationY                                                                   = 4,
	AXIS_RotationZ                                                                   = 5
};

/// Enum /Script/Engine.ETrackToggleAction
/// Size: 0x01 (1 bytes)
enum class ETrackToggleAction : uint8_t
{
	ETTA_Off                                                                         = 0,
	ETTA_On                                                                          = 1,
	ETTA_Toggle                                                                      = 2,
	ETTA_Trigger                                                                     = 3
};

/// Enum /Script/Engine.EVisibilityTrackCondition
/// Size: 0x01 (1 bytes)
enum class EVisibilityTrackCondition : uint8_t
{
	EVTC_Always                                                                      = 0,
	EVTC_GoreEnabled                                                                 = 1,
	EVTC_GoreDisabled                                                                = 2
};

/// Enum /Script/Engine.EVisibilityTrackAction
/// Size: 0x01 (1 bytes)
enum class EVisibilityTrackAction : uint8_t
{
	EVTA_Hide                                                                        = 0,
	EVTA_Show                                                                        = 1,
	EVTA_Toggle                                                                      = 2
};

/// Enum /Script/Engine.ESlateGesture
/// Size: 0x01 (1 bytes)
enum class ESlateGesture : uint8_t
{
	ESlateGesture__None                                                              = 0,
	ESlateGesture__Scroll                                                            = 1,
	ESlateGesture__Magnify                                                           = 2,
	ESlateGesture__Swipe                                                             = 3,
	ESlateGesture__Rotate                                                            = 4,
	ESlateGesture__LongPress                                                         = 5
};

/// Enum /Script/Engine.EMIDCreationFlags
/// Size: 0x01 (1 bytes)
enum class EMIDCreationFlags : uint8_t
{
	EMIDCreationFlags__None                                                          = 0,
	EMIDCreationFlags__Transient                                                     = 1
};

/// Enum /Script/Engine.EMatrixColumns
/// Size: 0x01 (1 bytes)
enum class EMatrixColumns : uint8_t
{
	EMatrixColumns__First                                                            = 0,
	EMatrixColumns__Second                                                           = 1,
	EMatrixColumns__Third                                                            = 2,
	EMatrixColumns__Fourth                                                           = 3
};

/// Enum /Script/Engine.ELerpInterpolationMode
/// Size: 0x01 (1 bytes)
enum class ELerpInterpolationMode : uint8_t
{
	ELerpInterpolationMode__QuatInterp                                               = 0,
	ELerpInterpolationMode__EulerInterp                                              = 1,
	ELerpInterpolationMode__DualQuatInterp                                           = 2
};

/// Enum /Script/Engine.EEasingFunc
/// Size: 0x01 (1 bytes)
enum class EEasingFunc : uint8_t
{
	EEasingFunc__Linear                                                              = 0,
	EEasingFunc__Step                                                                = 1,
	EEasingFunc__SinusoidalIn                                                        = 2,
	EEasingFunc__SinusoidalOut                                                       = 3,
	EEasingFunc__SinusoidalInOut                                                     = 4,
	EEasingFunc__EaseIn                                                              = 5,
	EEasingFunc__EaseOut                                                             = 6,
	EEasingFunc__EaseInOut                                                           = 7,
	EEasingFunc__ExpoIn                                                              = 8,
	EEasingFunc__ExpoOut                                                             = 9,
	EEasingFunc__ExpoInOut                                                           = 10,
	EEasingFunc__CircularIn                                                          = 11,
	EEasingFunc__CircularOut                                                         = 12,
	EEasingFunc__CircularInOut                                                       = 13
};

/// Enum /Script/Engine.ERoundingMode
/// Size: 0x01 (1 bytes)
enum class ERoundingMode : uint8_t
{
	HalfToEven                                                                       = 0,
	HalfFromZero                                                                     = 1,
	HalfToZero                                                                       = 2,
	FromZero                                                                         = 3,
	ToZero                                                                           = 4,
	ToNegativeInfinity                                                               = 5,
	ToPositiveInfinity                                                               = 6
};

/// Enum /Script/Engine.EKuroFrameStatsCaptureMode
/// Size: 0x01 (1 bytes)
enum class EKuroFrameStatsCaptureMode : uint8_t
{
	KFS_CAPTURE_JSON                                                                 = 0,
	KFS_CAPTURE_RAW                                                                  = 1
};

/// Enum /Script/Engine.ELevelInstanceRuntimeBehavior
/// Size: 0x01 (1 bytes)
enum class ELevelInstanceRuntimeBehavior : uint8_t
{
	ELevelInstanceRuntimeBehavior__None                                              = 0,
	ELevelInstanceRuntimeBehavior__Embedded                                          = 1,
	ELevelInstanceRuntimeBehavior__Partitioned                                       = 2,
	ELevelInstanceRuntimeBehavior__LevelStreaming                                    = 3
};

/// Enum /Script/Engine.ELevelInstancePivotType
/// Size: 0x01 (1 bytes)
enum class ELevelInstancePivotType : uint8_t
{
	ELevelInstancePivotType__CenterMinZ                                              = 0,
	ELevelInstancePivotType__Center                                                  = 1,
	ELevelInstancePivotType__Actor                                                   = 2
};

/// Enum /Script/Engine.ELevelInstanceCreationType
/// Size: 0x01 (1 bytes)
enum class ELevelInstanceCreationType : uint8_t
{
	ELevelInstanceCreationType__LevelInstance                                        = 0,
	ELevelInstanceCreationType__PackedLevelInstance                                  = 1,
	ELevelInstanceCreationType__PackedLevelInstanceBlueprint                         = 2
};

/// Enum /Script/Engine.EStreamingVolumeUsage
/// Size: 0x01 (1 bytes)
enum class EStreamingVolumeUsage : uint8_t
{
	SVB_Loading                                                                      = 0,
	SVB_LoadingAndVisibility                                                         = 1,
	SVB_VisibilityBlockingOnLoad                                                     = 2,
	SVB_BlockingOnLoad                                                               = 3,
	SVB_LoadingNotVisible                                                            = 4
};

/// Enum /Script/Engine.ESyncOption
/// Size: 0x01 (1 bytes)
enum class ESyncOption : uint8_t
{
	ESyncOption__Drive                                                               = 0,
	ESyncOption__Passive                                                             = 1,
	ESyncOption__Disabled                                                            = 2
};

/// Enum /Script/Engine.EMaterialDecalResponse
/// Size: 0x01 (1 bytes)
enum class EMaterialDecalResponse : uint8_t
{
	MDR_None                                                                         = 0,
	MDR_ColorNormalRoughness                                                         = 1,
	MDR_Color                                                                        = 2,
	MDR_ColorNormal                                                                  = 3,
	MDR_ColorRoughness                                                               = 4,
	MDR_Normal                                                                       = 5,
	MDR_NormalRoughness                                                              = 6,
	MDR_Roughness                                                                    = 7
};

/// Enum /Script/Engine.EDecalBlendMode
/// Size: 0x01 (1 bytes)
enum class EDecalBlendMode : uint8_t
{
	DBM_Translucent                                                                  = 0,
	DBM_Stain                                                                        = 1,
	DBM_Normal                                                                       = 2,
	DBM_ColorRoughness                                                               = 3,
	DBM_Emissive                                                                     = 4,
	DBM_KuroLight                                                                    = 5,
	DBM_DBuffer_ColorNormalRoughness                                                 = 6,
	DBM_DBuffer_Color                                                                = 7,
	DBM_DBuffer_ColorNormal                                                          = 8,
	DBM_DBuffer_ColorRoughness                                                       = 9,
	DBM_DBuffer_Normal                                                               = 10,
	DBM_DBuffer_NormalRoughness                                                      = 11,
	DBM_DBuffer_Roughness                                                            = 12,
	DBM_DBuffer_Emissive                                                             = 13,
	DBM_DBuffer_AlphaComposite                                                       = 14,
	DBM_DBuffer_EmissiveAlphaComposite                                               = 15,
	DBM_Volumetric_DistanceFunction                                                  = 16,
	DBM_AlphaComposite                                                               = 17,
	DBM_AmbientOcclusion                                                             = 18
};

/// Enum /Script/Engine.ETextureColorChannel
/// Size: 0x01 (1 bytes)
enum class ETextureColorChannel : uint8_t
{
	TCC_Red                                                                          = 0,
	TCC_Green                                                                        = 1,
	TCC_Blue                                                                         = 2,
	TCC_Alpha                                                                        = 3
};

/// Enum /Script/Engine.EMaterialAttributeBlend
/// Size: 0x01 (1 bytes)
enum class EMaterialAttributeBlend : uint8_t
{
	EMaterialAttributeBlend__Blend                                                   = 0,
	EMaterialAttributeBlend__UseA                                                    = 1,
	EMaterialAttributeBlend__UseB                                                    = 2
};

/// Enum /Script/Engine.EChannelMaskParameterColor
/// Size: 0x01 (1 bytes)
enum class EChannelMaskParameterColor : uint8_t
{
	EChannelMaskParameterColor__Red                                                  = 0,
	EChannelMaskParameterColor__Green                                                = 1,
	EChannelMaskParameterColor__Blue                                                 = 2,
	EChannelMaskParameterColor__Alpha                                                = 3
};

/// Enum /Script/Engine.EClampMode
/// Size: 0x01 (1 bytes)
enum class EClampMode : uint8_t
{
	CMODE_Clamp                                                                      = 0,
	CMODE_ClampMin                                                                   = 1,
	CMODE_ClampMax                                                                   = 2
};

/// Enum /Script/Engine.ECustomMaterialOutputType
/// Size: 0x01 (1 bytes)
enum class ECustomMaterialOutputType : uint8_t
{
	CMOT_Float1                                                                      = 0,
	CMOT_Float2                                                                      = 1,
	CMOT_Float3                                                                      = 2,
	CMOT_Float4                                                                      = 3,
	CMOT_MaterialAttributes                                                          = 4
};

/// Enum /Script/Engine.EDepthOfFieldFunctionValue
/// Size: 0x01 (1 bytes)
enum class EDepthOfFieldFunctionValue : uint8_t
{
	TDOF_NearAndFarMask                                                              = 0,
	TDOF_NearMask                                                                    = 1,
	TDOF_FarMask                                                                     = 2,
	TDOF_CircleOfConfusionRadius                                                     = 3
};

/// Enum /Script/Engine.EFunctionInputType
/// Size: 0x01 (1 bytes)
enum class EFunctionInputType : uint8_t
{
	FunctionInput_Scalar                                                             = 0,
	FunctionInput_Vector2                                                            = 1,
	FunctionInput_Vector3                                                            = 2,
	FunctionInput_Vector4                                                            = 3,
	FunctionInput_Texture2D                                                          = 4,
	FunctionInput_TextureCube                                                        = 5,
	FunctionInput_Texture2DArray                                                     = 6,
	FunctionInput_VolumeTexture                                                      = 7,
	FunctionInput_StaticBool                                                         = 8,
	FunctionInput_MaterialAttributes                                                 = 9,
	FunctionInput_TextureExternal                                                    = 10
};

/// Enum /Script/Engine.EMaterialKuroGlobalHeightSampleSpace
/// Size: 0x01 (1 bytes)
enum class EMaterialKuroGlobalHeightSampleSpace : uint8_t
{
	KUROSAMPLESPACE_WORLD                                                            = 0,
	KUROSAMPLESPACE_UV                                                               = 1
};

/// Enum /Script/Engine.ENoiseFunction
/// Size: 0x01 (1 bytes)
enum class ENoiseFunction : uint8_t
{
	NOISEFUNCTION_SimplexTex                                                         = 0,
	NOISEFUNCTION_GradientTex                                                        = 1,
	NOISEFUNCTION_GradientTex3D                                                      = 2,
	NOISEFUNCTION_GradientALU                                                        = 3,
	NOISEFUNCTION_ValueALU                                                           = 4,
	NOISEFUNCTION_VoronoiALU                                                         = 5
};

/// Enum /Script/Engine.ERHIFeatureLevelStrip
/// Size: 0x01 (1 bytes)
enum class ERHIFeatureLevelStrip : uint8_t
{
	ES2_REMOVED                                                                      = 0,
	ES3                                                                              = 1,
	SM4_REMOVED                                                                      = 2,
	SM5                                                                              = 3
};

/// Enum /Script/Engine.ERuntimeVirtualTextureTextureAddressMode
/// Size: 0x01 (1 bytes)
enum class ERuntimeVirtualTextureTextureAddressMode : uint8_t
{
	RVTTA_Clamp                                                                      = 0,
	RVTTA_Wrap                                                                       = 1
};

/// Enum /Script/Engine.ERuntimeVirtualTextureMipValueMode
/// Size: 0x01 (1 bytes)
enum class ERuntimeVirtualTextureMipValueMode : uint8_t
{
	RVTMVM_None                                                                      = 0,
	RVTMVM_MipLevel                                                                  = 1,
	RVTMVM_MipBias                                                                   = 2
};

/// Enum /Script/Engine.EMaterialSceneAttributeInputMode
/// Size: 0x01 (1 bytes)
enum class EMaterialSceneAttributeInputMode : uint8_t
{
	EMaterialSceneAttributeInputMode__Coordinates                                    = 0,
	EMaterialSceneAttributeInputMode__OffsetFraction                                 = 1
};

/// Enum /Script/Engine.ESpeedTreeLODType
/// Size: 0x01 (1 bytes)
enum class ESpeedTreeLODType : uint8_t
{
	STLOD_Pop                                                                        = 0,
	STLOD_Smooth                                                                     = 1
};

/// Enum /Script/Engine.ESpeedTreeWindType
/// Size: 0x01 (1 bytes)
enum class ESpeedTreeWindType : uint8_t
{
	STW_None                                                                         = 0,
	STW_Fastest                                                                      = 1,
	STW_Fast                                                                         = 2,
	STW_Better                                                                       = 3,
	STW_Best                                                                         = 4,
	STW_Palm                                                                         = 5,
	STW_BestPlus                                                                     = 6
};

/// Enum /Script/Engine.ESpeedTreeGeometryType
/// Size: 0x01 (1 bytes)
enum class ESpeedTreeGeometryType : uint8_t
{
	STG_Branch                                                                       = 0,
	STG_Frond                                                                        = 1,
	STG_Leaf                                                                         = 2,
	STG_FacingLeaf                                                                   = 3,
	STG_Billboard                                                                    = 4
};

/// Enum /Script/Engine.EMaterialExposedTextureProperty
/// Size: 0x01 (1 bytes)
enum class EMaterialExposedTextureProperty : uint8_t
{
	TMTM_TextureSize                                                                 = 0,
	TMTM_TexelSize                                                                   = 1
};

/// Enum /Script/Engine.ETextureMipValueMode
/// Size: 0x01 (1 bytes)
enum class ETextureMipValueMode : uint8_t
{
	TMVM_None                                                                        = 0,
	TMVM_MipLevel                                                                    = 1,
	TMVM_MipBias                                                                     = 2,
	TMVM_Derivative                                                                  = 3
};

/// Enum /Script/Engine.EMaterialVectorCoordTransform
/// Size: 0x01 (1 bytes)
enum class EMaterialVectorCoordTransform : uint8_t
{
	TRANSFORM_Tangent                                                                = 0,
	TRANSFORM_Local                                                                  = 1,
	TRANSFORM_World                                                                  = 2,
	TRANSFORM_View                                                                   = 3,
	TRANSFORM_Camera                                                                 = 4,
	TRANSFORM_ParticleWorld                                                          = 5
};

/// Enum /Script/Engine.EMaterialVectorCoordTransformSource
/// Size: 0x01 (1 bytes)
enum class EMaterialVectorCoordTransformSource : uint8_t
{
	TRANSFORMSOURCE_Tangent                                                          = 0,
	TRANSFORMSOURCE_Local                                                            = 1,
	TRANSFORMSOURCE_World                                                            = 2,
	TRANSFORMSOURCE_View                                                             = 3,
	TRANSFORMSOURCE_Camera                                                           = 4,
	TRANSFORMSOURCE_ParticleWorld                                                    = 5
};

/// Enum /Script/Engine.EMaterialPositionTransformSource
/// Size: 0x01 (1 bytes)
enum class EMaterialPositionTransformSource : uint8_t
{
	TRANSFORMPOSSOURCE_Local                                                         = 0,
	TRANSFORMPOSSOURCE_World                                                         = 1,
	TRANSFORMPOSSOURCE_TranslatedWorld                                               = 2,
	TRANSFORMPOSSOURCE_View                                                          = 3,
	TRANSFORMPOSSOURCE_Camera                                                        = 4,
	TRANSFORMPOSSOURCE_Particle                                                      = 5
};

/// Enum /Script/Engine.EVectorNoiseFunction
/// Size: 0x01 (1 bytes)
enum class EVectorNoiseFunction : uint8_t
{
	VNF_CellnoiseALU                                                                 = 0,
	VNF_VectorALU                                                                    = 1,
	VNF_GradientALU                                                                  = 2,
	VNF_CurlALU                                                                      = 3,
	VNF_VoronoiALU                                                                   = 4
};

/// Enum /Script/Engine.EMaterialExposedViewProperty
/// Size: 0x01 (1 bytes)
enum class EMaterialExposedViewProperty : uint8_t
{
	MEVP_BufferSize                                                                  = 0,
	MEVP_FieldOfView                                                                 = 1,
	MEVP_TanHalfFieldOfView                                                          = 2,
	MEVP_ViewSize                                                                    = 3,
	MEVP_WorldSpaceViewPosition                                                      = 4,
	MEVP_WorldSpaceCameraPosition                                                    = 5,
	MEVP_ViewportOffset                                                              = 6,
	MEVP_TemporalSampleCount                                                         = 7,
	MEVP_TemporalSampleIndex                                                         = 8,
	MEVP_TemporalSampleOffset                                                        = 9,
	MEVP_RuntimeVirtualTextureOutputLevel                                            = 10,
	MEVP_RuntimeVirtualTextureOutputDerivative                                       = 11,
	MEVP_PreExposure                                                                 = 12,
	MEVP_RuntimeVirtualTextureMaxLevel                                               = 13
};

/// Enum /Script/Engine.EWorldPositionIncludedOffsets
/// Size: 0x01 (1 bytes)
enum class EWorldPositionIncludedOffsets : uint8_t
{
	WPT_Default                                                                      = 0,
	WPT_ExcludeAllShaderOffsets                                                      = 1,
	WPT_CameraRelative                                                               = 2,
	WPT_CameraRelativeNoOffsets                                                      = 3
};

/// Enum /Script/Engine.EMaterialFunctionUsage
/// Size: 0x01 (1 bytes)
enum class EMaterialFunctionUsage : uint8_t
{
	EMaterialFunctionUsage__Default                                                  = 0,
	EMaterialFunctionUsage__MaterialLayer                                            = 1,
	EMaterialFunctionUsage__MaterialLayerBlend                                       = 2
};

/// Enum /Script/Engine.EMaterialUsage
/// Size: 0x01 (1 bytes)
enum class EMaterialUsage : uint8_t
{
	MATUSAGE_SkeletalMesh                                                            = 0,
	MATUSAGE_ParticleSprites                                                         = 1,
	MATUSAGE_BeamTrails                                                              = 2,
	MATUSAGE_MeshParticles                                                           = 3,
	MATUSAGE_StaticLighting                                                          = 4,
	MATUSAGE_MorphTargets                                                            = 5,
	MATUSAGE_SplineMesh                                                              = 6,
	MATUSAGE_InstancedStaticMeshes                                                   = 7,
	MATUSAGE_GeometryCollections                                                     = 8,
	MATUSAGE_Clothing                                                                = 9,
	MATUSAGE_NiagaraSprites                                                          = 10,
	MATUSAGE_NiagaraRibbons                                                          = 11,
	MATUSAGE_NiagaraMeshParticles                                                    = 12,
	MATUSAGE_GeometryCache                                                           = 13,
	MATUSAGE_Water                                                                   = 14,
	MATUSAGE_HairStrands                                                             = 15,
	MATUSAGE_LidarPointCloud                                                         = 16,
	MATUSAGE_VirtualHeightfieldMesh                                                  = 17,
	MATUSAGE_TranslucentPreDepth                                                     = 18,
	MATUSAGE_Outline                                                                 = 19,
	MATUSAGE_StencilOnlyWrite                                                        = 20,
	MATUSAGE_FaceShadowMesh                                                          = 21,
	MATUSAGE_Empty                                                                   = 22,
	MATUSAGE_HLODVertexCompression                                                   = 23
};

/// Enum /Script/Engine.EMaterialLayerLinkState
/// Size: 0x01 (1 bytes)
enum class EMaterialLayerLinkState : uint8_t
{
	EMaterialLayerLinkState__Uninitialized                                           = 0,
	EMaterialLayerLinkState__LinkedToParent                                          = 1,
	EMaterialLayerLinkState__UnlinkedFromParent                                      = 2,
	EMaterialLayerLinkState__NotFromParent                                           = 3
};

/// Enum /Script/Engine.EMaterialParameterFlags
/// Size: 0x01 (1 bytes)
enum class EMaterialParameterFlags : uint8_t
{
	ScalarAsDynamicSwitch                                                            = 1
};

/// Enum /Script/Engine.EMaterialParameterAssociation
/// Size: 0x01 (1 bytes)
enum class EMaterialParameterAssociation : uint8_t
{
	LayerParameter                                                                   = 0,
	BlendParameter                                                                   = 1,
	GlobalParameter                                                                  = 2
};

/// Enum /Script/Engine.EMaterialMergeType
/// Size: 0x01 (1 bytes)
enum class EMaterialMergeType : uint8_t
{
	MaterialMergeType_Default                                                        = 0,
	MaterialMergeType_Simplygon                                                      = 1
};

/// Enum /Script/Engine.ETextureSizingType
/// Size: 0x01 (1 bytes)
enum class ETextureSizingType : uint8_t
{
	TextureSizingType_UseSingleTextureSize                                           = 0,
	TextureSizingType_UseAutomaticBiasedSizes                                        = 1,
	TextureSizingType_UseManualOverrideTextureSize                                   = 2,
	TextureSizingType_UseSimplygonAutomaticSizing                                    = 3
};

/// Enum /Script/Engine.ESceneTextureId
/// Size: 0x01 (1 bytes)
enum class ESceneTextureId : uint8_t
{
	PPI_SceneColor                                                                   = 0,
	PPI_SceneDepth                                                                   = 1,
	PPI_DiffuseColor                                                                 = 2,
	PPI_SpecularColor                                                                = 3,
	PPI_SubsurfaceColor                                                              = 4,
	PPI_BaseColor                                                                    = 5,
	PPI_Specular                                                                     = 6,
	PPI_Metallic                                                                     = 7,
	PPI_WorldNormal                                                                  = 8,
	PPI_SeparateTranslucency                                                         = 9,
	PPI_Opacity                                                                      = 10,
	PPI_Roughness                                                                    = 11,
	PPI_MaterialAO                                                                   = 12,
	PPI_CustomDepth                                                                  = 13,
	PPI_PostProcessInput0                                                            = 14,
	PPI_PostProcessInput1                                                            = 15,
	PPI_PostProcessInput2                                                            = 16,
	PPI_PostProcessInput3                                                            = 17,
	PPI_PostProcessInput4                                                            = 18,
	PPI_PostProcessInput5                                                            = 19,
	PPI_PostProcessInput6                                                            = 20,
	PPI_DecalMask                                                                    = 21,
	PPI_ShadingModelColor                                                            = 22,
	PPI_ShadingModelID                                                               = 23,
	PPI_AmbientOcclusion                                                             = 24,
	PPI_CustomStencil                                                                = 25,
	PPI_StoredBaseColor                                                              = 26,
	PPI_StoredSpecular                                                               = 27,
	PPI_Velocity                                                                     = 28,
	PPI_WorldTangent                                                                 = 29,
	PPI_Anisotropy                                                                   = 30
};

/// Enum /Script/Engine.EMaterialDomain
/// Size: 0x01 (1 bytes)
enum class EMaterialDomain : uint8_t
{
	MD_Surface                                                                       = 0,
	MD_DeferredDecal                                                                 = 1,
	MD_LightFunction                                                                 = 2,
	MD_Volume                                                                        = 3,
	MD_PostProcess                                                                   = 4,
	MD_UI                                                                            = 5,
	MD_RuntimeVirtualTexture                                                         = 6,
	MD_MipMapDebug                                                                   = 7,
	MD_MipMapBillDebug                                                               = 8
};

/// Enum /Script/Engine.EMeshInstancingReplacementMethod
/// Size: 0x01 (1 bytes)
enum class EMeshInstancingReplacementMethod : uint8_t
{
	EMeshInstancingReplacementMethod__RemoveOriginalActors                           = 0,
	EMeshInstancingReplacementMethod__KeepOriginalActorsAsEditorOnly                 = 1
};

/// Enum /Script/Engine.EHLODBakeDiffuseToVertexColorMode
/// Size: 0x01 (1 bytes)
enum class EHLODBakeDiffuseToVertexColorMode : uint8_t
{
	EHLODBakeDiffuseToVertexColorMode__Disable                                       = 0,
	EHLODBakeDiffuseToVertexColorMode__NoCompression                                 = 1,
	EHLODBakeDiffuseToVertexColorMode__RGB565                                        = 2
};

/// Enum /Script/Engine.EUVOutput
/// Size: 0x01 (1 bytes)
enum class EUVOutput : uint8_t
{
	EUVOutput__DoNotOutputChannel                                                    = 0,
	EUVOutput__OutputChannel                                                         = 1
};

/// Enum /Script/Engine.EMeshMergeType
/// Size: 0x01 (1 bytes)
enum class EMeshMergeType : uint8_t
{
	EMeshMergeType__MeshMergeType_Default                                            = 0,
	EMeshMergeType__MeshMergeType_MergeActor                                         = 1
};

/// Enum /Script/Engine.EMeshLODSelectionType
/// Size: 0x01 (1 bytes)
enum class EMeshLODSelectionType : uint8_t
{
	EMeshLODSelectionType__AllLODs                                                   = 0,
	EMeshLODSelectionType__SpecificLOD                                               = 1,
	EMeshLODSelectionType__CalculateLOD                                              = 2,
	EMeshLODSelectionType__LowestDetailLOD                                           = 3
};

/// Enum /Script/Engine.EProxyNormalComputationMethod
/// Size: 0x01 (1 bytes)
enum class EProxyNormalComputationMethod : uint8_t
{
	EProxyNormalComputationMethod__AngleWeighted                                     = 0,
	EProxyNormalComputationMethod__AreaWeighted                                      = 1,
	EProxyNormalComputationMethod__EqualWeighted                                     = 2
};

/// Enum /Script/Engine.ELandscapeCullingPrecision
/// Size: 0x01 (1 bytes)
enum class ELandscapeCullingPrecision : uint8_t
{
	ELandscapeCullingPrecision__High                                                 = 0,
	ELandscapeCullingPrecision__Medium                                               = 1,
	ELandscapeCullingPrecision__Low                                                  = 2
};

/// Enum /Script/Engine.EStaticMeshReductionTerimationCriterion
/// Size: 0x01 (1 bytes)
enum class EStaticMeshReductionTerimationCriterion : uint8_t
{
	EStaticMeshReductionTerimationCriterion__Triangles                               = 0,
	EStaticMeshReductionTerimationCriterion__Vertices                                = 1,
	EStaticMeshReductionTerimationCriterion__Any                                     = 2
};

/// Enum /Script/Engine.EMeshFeatureImportance
/// Size: 0x01 (1 bytes)
enum class EMeshFeatureImportance : uint8_t
{
	EMeshFeatureImportance__Off                                                      = 0,
	EMeshFeatureImportance__Lowest                                                   = 1,
	EMeshFeatureImportance__Low                                                      = 2,
	EMeshFeatureImportance__Normal                                                   = 3,
	EMeshFeatureImportance__High                                                     = 4,
	EMeshFeatureImportance__Highest                                                  = 5
};

/// Enum /Script/Engine.EVertexPaintAxis
/// Size: 0x01 (1 bytes)
enum class EVertexPaintAxis : uint8_t
{
	EVertexPaintAxis__X                                                              = 0,
	EVertexPaintAxis__Y                                                              = 1,
	EVertexPaintAxis__Z                                                              = 2
};

/// Enum /Script/Engine.EMicroTransactionResult
/// Size: 0x01 (1 bytes)
enum class EMicroTransactionResult : uint8_t
{
	MTR_Succeeded                                                                    = 0,
	MTR_Failed                                                                       = 1,
	MTR_Canceled                                                                     = 2,
	MTR_RestoredFromServer                                                           = 3
};

/// Enum /Script/Engine.EMicroTransactionDelegate
/// Size: 0x01 (1 bytes)
enum class EMicroTransactionDelegate : uint8_t
{
	MTD_PurchaseQueryComplete                                                        = 0,
	MTD_PurchaseComplete                                                             = 1
};

/// Enum /Script/Engine.EMorphTargetModMethod
/// Size: 0x01 (1 bytes)
enum class EMorphTargetModMethod : uint8_t
{
	EMorphTargetModMethod__Unspecific                                                = 0,
	EMorphTargetModMethod__LeftRightView                                             = 1,
	EMorphTargetModMethod__PitchAngleView                                            = 2,
	EMorphTargetModMethod__DistanceBasedView                                         = 3
};

/// Enum /Script/Engine.FNavigationSystemRunMode
/// Size: 0x01 (1 bytes)
enum class FNavigationSystemRunMode : uint8_t
{
	FNavigationSystemRunMode__InvalidMode                                            = 0,
	FNavigationSystemRunMode__GameMode                                               = 1,
	FNavigationSystemRunMode__EditorMode                                             = 2,
	FNavigationSystemRunMode__SimulationMode                                         = 3,
	FNavigationSystemRunMode__PIEMode                                                = 4,
	FNavigationSystemRunMode__InferFromWorldMode                                     = 5
};

/// Enum /Script/Engine.ENavigationQueryResult
/// Size: 0x01 (1 bytes)
enum class ENavigationQueryResult : uint8_t
{
	ENavigationQueryResult__Invalid                                                  = 0,
	ENavigationQueryResult__Error                                                    = 1,
	ENavigationQueryResult__Fail                                                     = 2,
	ENavigationQueryResult__Success                                                  = 3
};

/// Enum /Script/Engine.ENavPathEvent
/// Size: 0x01 (1 bytes)
enum class ENavPathEvent : uint8_t
{
	ENavPathEvent__Cleared                                                           = 0,
	ENavPathEvent__NewPath                                                           = 1,
	ENavPathEvent__UpdatedDueToGoalMoved                                             = 2,
	ENavPathEvent__UpdatedDueToNavigationChanged                                     = 3,
	ENavPathEvent__Invalidated                                                       = 4,
	ENavPathEvent__RePathFailed                                                      = 5,
	ENavPathEvent__MetaPathUpdate                                                    = 6,
	ENavPathEvent__Custom                                                            = 7
};

/// Enum /Script/Engine.ENavDataGatheringModeConfig
/// Size: 0x01 (1 bytes)
enum class ENavDataGatheringModeConfig : uint8_t
{
	ENavDataGatheringModeConfig__Invalid                                             = 0,
	ENavDataGatheringModeConfig__Instant                                             = 1,
	ENavDataGatheringModeConfig__Lazy                                                = 2
};

/// Enum /Script/Engine.ENavDataGatheringMode
/// Size: 0x01 (1 bytes)
enum class ENavDataGatheringMode : uint8_t
{
	ENavDataGatheringMode__Default                                                   = 0,
	ENavDataGatheringMode__Instant                                                   = 1,
	ENavDataGatheringMode__Lazy                                                      = 2
};

/// Enum /Script/Engine.ENavigationOptionFlag
/// Size: 0x01 (1 bytes)
enum class ENavigationOptionFlag : uint8_t
{
	ENavigationOptionFlag__Default                                                   = 0,
	ENavigationOptionFlag__Enable                                                    = 1,
	ENavigationOptionFlag__Disable                                                   = 2
};

/// Enum /Script/Engine.ENavLinkDirection
/// Size: 0x01 (1 bytes)
enum class ENavLinkDirection : uint8_t
{
	ENavLinkDirection__BothWays                                                      = 0,
	ENavLinkDirection__LeftToRight                                                   = 1,
	ENavLinkDirection__RightToLeft                                                   = 2
};

/// Enum /Script/Engine.EEmitterRenderMode
/// Size: 0x01 (1 bytes)
enum class EEmitterRenderMode : uint8_t
{
	ERM_Normal                                                                       = 0,
	ERM_Point                                                                        = 1,
	ERM_Cross                                                                        = 2,
	ERM_LightsOnly                                                                   = 3,
	ERM_None                                                                         = 4
};

/// Enum /Script/Engine.EParticleSubUVInterpMethod
/// Size: 0x01 (1 bytes)
enum class EParticleSubUVInterpMethod : uint8_t
{
	PSUVIM_None                                                                      = 0,
	PSUVIM_Linear                                                                    = 1,
	PSUVIM_Linear_Blend                                                              = 2,
	PSUVIM_Random                                                                    = 3,
	PSUVIM_Random_Blend                                                              = 4
};

/// Enum /Script/Engine.EParticleBurstMethod
/// Size: 0x01 (1 bytes)
enum class EParticleBurstMethod : uint8_t
{
	EPBM_Instant                                                                     = 0,
	EPBM_Interpolated                                                                = 1
};

/// Enum /Script/Engine.EParticleSystemInsignificanceReaction
/// Size: 0x01 (1 bytes)
enum class EParticleSystemInsignificanceReaction : uint8_t
{
	EParticleSystemInsignificanceReaction__Auto                                      = 0,
	EParticleSystemInsignificanceReaction__Complete                                  = 1,
	EParticleSystemInsignificanceReaction__DisableTick                               = 2,
	EParticleSystemInsignificanceReaction__DisableTickAndKill                        = 3,
	EParticleSystemInsignificanceReaction__Num                                       = 4
};

/// Enum /Script/Engine.EParticleSignificanceLevel
/// Size: 0x01 (1 bytes)
enum class EParticleSignificanceLevel : uint8_t
{
	EParticleSignificanceLevel__Low                                                  = 0,
	EParticleSignificanceLevel__Medium                                               = 1,
	EParticleSignificanceLevel__High                                                 = 2,
	EParticleSignificanceLevel__Critical                                             = 3,
	EParticleSignificanceLevel__Num                                                  = 4
};

/// Enum /Script/Engine.EParticleDetailMode
/// Size: 0x01 (1 bytes)
enum class EParticleDetailMode : uint8_t
{
	PDM_Low                                                                          = 0,
	PDM_Medium                                                                       = 1,
	PDM_High                                                                         = 2
};

/// Enum /Script/Engine.EParticleSourceSelectionMethod
/// Size: 0x01 (1 bytes)
enum class EParticleSourceSelectionMethod : uint8_t
{
	EPSSM_Random                                                                     = 0,
	EPSSM_Sequential                                                                 = 1
};

/// Enum /Script/Engine.EModuleType
/// Size: 0x01 (1 bytes)
enum class EModuleType : uint8_t
{
	EPMT_General                                                                     = 0,
	EPMT_TypeData                                                                    = 1,
	EPMT_Beam                                                                        = 2,
	EPMT_Trail                                                                       = 3,
	EPMT_Spawn                                                                       = 4,
	EPMT_Required                                                                    = 5,
	EPMT_Event                                                                       = 6,
	EPMT_Light                                                                       = 7,
	EPMT_SubUV                                                                       = 8
};

/// Enum /Script/Engine.EAttractorParticleSelectionMethod
/// Size: 0x01 (1 bytes)
enum class EAttractorParticleSelectionMethod : uint8_t
{
	EAPSM_Random                                                                     = 0,
	EAPSM_Sequential                                                                 = 1
};

/// Enum /Script/Engine.Beam2SourceTargetTangentMethod
/// Size: 0x01 (1 bytes)
enum class Beam2SourceTargetTangentMethod : uint8_t
{
	PEB2STTM_Direct                                                                  = 0,
	PEB2STTM_UserSet                                                                 = 1,
	PEB2STTM_Distribution                                                            = 2,
	PEB2STTM_Emitter                                                                 = 3
};

/// Enum /Script/Engine.Beam2SourceTargetMethod
/// Size: 0x01 (1 bytes)
enum class Beam2SourceTargetMethod : uint8_t
{
	PEB2STM_Default                                                                  = 0,
	PEB2STM_UserSet                                                                  = 1,
	PEB2STM_Emitter                                                                  = 2,
	PEB2STM_Particle                                                                 = 3,
	PEB2STM_Actor                                                                    = 4
};

/// Enum /Script/Engine.BeamModifierType
/// Size: 0x01 (1 bytes)
enum class BeamModifierType : uint8_t
{
	PEB2MT_Source                                                                    = 0,
	PEB2MT_Target                                                                    = 1
};

/// Enum /Script/Engine.EParticleCameraOffsetUpdateMethod
/// Size: 0x01 (1 bytes)
enum class EParticleCameraOffsetUpdateMethod : uint8_t
{
	EPCOUM_DirectSet                                                                 = 0,
	EPCOUM_Additive                                                                  = 1,
	EPCOUM_Scalar                                                                    = 2
};

/// Enum /Script/Engine.EParticleCollisionComplete
/// Size: 0x01 (1 bytes)
enum class EParticleCollisionComplete : uint8_t
{
	EPCC_Kill                                                                        = 0,
	EPCC_Freeze                                                                      = 1,
	EPCC_HaltCollisions                                                              = 2,
	EPCC_FreezeTranslation                                                           = 3,
	EPCC_FreezeRotation                                                              = 4,
	EPCC_FreezeMovement                                                              = 5
};

/// Enum /Script/Engine.EParticleCollisionResponse
/// Size: 0x01 (1 bytes)
enum class EParticleCollisionResponse : uint8_t
{
	EParticleCollisionResponse__Bounce                                               = 0,
	EParticleCollisionResponse__Stop                                                 = 1,
	EParticleCollisionResponse__Kill                                                 = 2
};

/// Enum /Script/Engine.ELocationBoneSocketSelectionMethod
/// Size: 0x01 (1 bytes)
enum class ELocationBoneSocketSelectionMethod : uint8_t
{
	BONESOCKETSEL_Sequential                                                         = 0,
	BONESOCKETSEL_Random                                                             = 1
};

/// Enum /Script/Engine.ELocationBoneSocketSource
/// Size: 0x01 (1 bytes)
enum class ELocationBoneSocketSource : uint8_t
{
	BONESOCKETSOURCE_Bones                                                           = 0,
	BONESOCKETSOURCE_Sockets                                                         = 1
};

/// Enum /Script/Engine.ELocationEmitterSelectionMethod
/// Size: 0x01 (1 bytes)
enum class ELocationEmitterSelectionMethod : uint8_t
{
	ELESM_Random                                                                     = 0,
	ELESM_Sequential                                                                 = 1
};

/// Enum /Script/Engine.CylinderHeightAxis
/// Size: 0x01 (1 bytes)
enum class CylinderHeightAxis : uint8_t
{
	PMLPC_HEIGHTAXIS_X                                                               = 0,
	PMLPC_HEIGHTAXIS_Y                                                               = 1,
	PMLPC_HEIGHTAXIS_Z                                                               = 2
};

/// Enum /Script/Engine.ELocationSkelVertSurfaceSource
/// Size: 0x01 (1 bytes)
enum class ELocationSkelVertSurfaceSource : uint8_t
{
	VERTSURFACESOURCE_Vert                                                           = 0,
	VERTSURFACESOURCE_Surface                                                        = 1
};

/// Enum /Script/Engine.EOrbitChainMode
/// Size: 0x01 (1 bytes)
enum class EOrbitChainMode : uint8_t
{
	EOChainMode_Add                                                                  = 0,
	EOChainMode_Scale                                                                = 1,
	EOChainMode_Link                                                                 = 2
};

/// Enum /Script/Engine.EParticleAxisLock
/// Size: 0x01 (1 bytes)
enum class EParticleAxisLock : uint8_t
{
	EPAL_NONE                                                                        = 0,
	EPAL_X                                                                           = 1,
	EPAL_Y                                                                           = 2,
	EPAL_Z                                                                           = 3,
	EPAL_NEGATIVE_X                                                                  = 4,
	EPAL_NEGATIVE_Y                                                                  = 5,
	EPAL_NEGATIVE_Z                                                                  = 6,
	EPAL_ROTATE_X                                                                    = 7,
	EPAL_ROTATE_Y                                                                    = 8,
	EPAL_ROTATE_Z                                                                    = 9
};

/// Enum /Script/Engine.EEmitterDynamicParameterValue
/// Size: 0x01 (1 bytes)
enum class EEmitterDynamicParameterValue : uint8_t
{
	EDPV_UserSet                                                                     = 0,
	EDPV_AutoSet                                                                     = 1,
	EDPV_VelocityX                                                                   = 2,
	EDPV_VelocityY                                                                   = 3,
	EDPV_VelocityZ                                                                   = 4,
	EDPV_VelocityMag                                                                 = 5
};

/// Enum /Script/Engine.EEmitterNormalsMode
/// Size: 0x01 (1 bytes)
enum class EEmitterNormalsMode : uint8_t
{
	ENM_CameraFacing                                                                 = 0,
	ENM_Spherical                                                                    = 1,
	ENM_Cylindrical                                                                  = 2
};

/// Enum /Script/Engine.EParticleSortMode
/// Size: 0x01 (1 bytes)
enum class EParticleSortMode : uint8_t
{
	PSORTMODE_None                                                                   = 0,
	PSORTMODE_ViewProjDepth                                                          = 1,
	PSORTMODE_DistanceToView                                                         = 2,
	PSORTMODE_Age_OldestFirst                                                        = 3,
	PSORTMODE_Age_NewestFirst                                                        = 4
};

/// Enum /Script/Engine.EParticleUVFlipMode
/// Size: 0x01 (1 bytes)
enum class EParticleUVFlipMode : uint8_t
{
	EParticleUVFlipMode__None                                                        = 0,
	EParticleUVFlipMode__FlipUV                                                      = 1,
	EParticleUVFlipMode__FlipUOnly                                                   = 2,
	EParticleUVFlipMode__FlipVOnly                                                   = 3,
	EParticleUVFlipMode__RandomFlipUV                                                = 4,
	EParticleUVFlipMode__RandomFlipUOnly                                             = 5,
	EParticleUVFlipMode__RandomFlipVOnly                                             = 6,
	EParticleUVFlipMode__RandomFlipUVIndependent                                     = 7
};

/// Enum /Script/Engine.ETrail2SourceMethod
/// Size: 0x01 (1 bytes)
enum class ETrail2SourceMethod : uint8_t
{
	PET2SRCM_Default                                                                 = 0,
	PET2SRCM_Particle                                                                = 1,
	PET2SRCM_Actor                                                                   = 2
};

/// Enum /Script/Engine.EBeamTaperMethod
/// Size: 0x01 (1 bytes)
enum class EBeamTaperMethod : uint8_t
{
	PEBTM_None                                                                       = 0,
	PEBTM_Full                                                                       = 1,
	PEBTM_Partial                                                                    = 2
};

/// Enum /Script/Engine.EBeam2Method
/// Size: 0x01 (1 bytes)
enum class EBeam2Method : uint8_t
{
	PEB2M_Distance                                                                   = 0,
	PEB2M_Target                                                                     = 1,
	PEB2M_Branch                                                                     = 2
};

/// Enum /Script/Engine.EMeshCameraFacingOptions
/// Size: 0x01 (1 bytes)
enum class EMeshCameraFacingOptions : uint8_t
{
	XAxisFacing_NoUp                                                                 = 0,
	XAxisFacing_ZUp                                                                  = 1,
	XAxisFacing_NegativeZUp                                                          = 2,
	XAxisFacing_YUp                                                                  = 3,
	XAxisFacing_NegativeYUp                                                          = 4,
	LockedAxis_ZAxisFacing                                                           = 5,
	LockedAxis_NegativeZAxisFacing                                                   = 6,
	LockedAxis_YAxisFacing                                                           = 7,
	LockedAxis_NegativeYAxisFacing                                                   = 8,
	VelocityAligned_ZAxisFacing                                                      = 9,
	VelocityAligned_NegativeZAxisFacing                                              = 10,
	VelocityAligned_YAxisFacing                                                      = 11,
	VelocityAligned_NegativeYAxisFacing                                              = 12
};

/// Enum /Script/Engine.EMeshCameraFacingUpAxis
/// Size: 0x01 (1 bytes)
enum class EMeshCameraFacingUpAxis : uint8_t
{
	CameraFacing_NoneUP                                                              = 0,
	CameraFacing_ZUp                                                                 = 1,
	CameraFacing_NegativeZUp                                                         = 2,
	CameraFacing_YUp                                                                 = 3,
	CameraFacing_NegativeYUp                                                         = 4
};

/// Enum /Script/Engine.EMeshScreenAlignment
/// Size: 0x01 (1 bytes)
enum class EMeshScreenAlignment : uint8_t
{
	PSMA_MeshFaceCameraWithRoll                                                      = 0,
	PSMA_MeshFaceCameraWithSpin                                                      = 1,
	PSMA_MeshFaceCameraWithLockedAxis                                                = 2
};

/// Enum /Script/Engine.ETrailsRenderAxisOption
/// Size: 0x01 (1 bytes)
enum class ETrailsRenderAxisOption : uint8_t
{
	Trails_CameraUp                                                                  = 0,
	Trails_SourceUp                                                                  = 1,
	Trails_WorldUp                                                                   = 2
};

/// Enum /Script/Engine.EParticleScreenAlignment
/// Size: 0x01 (1 bytes)
enum class EParticleScreenAlignment : uint8_t
{
	PSA_FacingCameraPosition                                                         = 0,
	PSA_Square                                                                       = 1,
	PSA_Rectangle                                                                    = 2,
	PSA_Velocity                                                                     = 3,
	PSA_AwayFromCenter                                                               = 4,
	PSA_TypeSpecific                                                                 = 5,
	PSA_FacingCameraDistanceBlend                                                    = 6
};

/// Enum /Script/Engine.EParticleSystemOcclusionBoundsMethod
/// Size: 0x01 (1 bytes)
enum class EParticleSystemOcclusionBoundsMethod : uint8_t
{
	EPSOBM_None                                                                      = 0,
	EPSOBM_ParticleBounds                                                            = 1,
	EPSOBM_CustomBounds                                                              = 2
};

/// Enum /Script/Engine.ParticleSystemLODMethod
/// Size: 0x01 (1 bytes)
enum class ParticleSystemLODMethod : uint8_t
{
	PARTICLESYSTEMLODMETHOD_Automatic                                                = 0,
	PARTICLESYSTEMLODMETHOD_DirectSet                                                = 1,
	PARTICLESYSTEMLODMETHOD_ActivateAutomatic                                        = 2
};

/// Enum /Script/Engine.EParticleSystemUpdateMode
/// Size: 0x01 (1 bytes)
enum class EParticleSystemUpdateMode : uint8_t
{
	EPSUM_RealTime                                                                   = 0,
	EPSUM_FixedTime                                                                  = 1
};

/// Enum /Script/Engine.EParticleEventType
/// Size: 0x01 (1 bytes)
enum class EParticleEventType : uint8_t
{
	EPET_Any                                                                         = 0,
	EPET_Spawn                                                                       = 1,
	EPET_Death                                                                       = 2,
	EPET_Collision                                                                   = 3,
	EPET_Burst                                                                       = 4,
	EPET_Blueprint                                                                   = 5
};

/// Enum /Script/Engine.ParticleReplayState
/// Size: 0x01 (1 bytes)
enum class ParticleReplayState : uint8_t
{
	PRS_Disabled                                                                     = 0,
	PRS_Capturing                                                                    = 1,
	PRS_Replaying                                                                    = 2
};

/// Enum /Script/Engine.EParticleSysParamType
/// Size: 0x01 (1 bytes)
enum class EParticleSysParamType : uint8_t
{
	PSPT_None                                                                        = 0,
	PSPT_Scalar                                                                      = 1,
	PSPT_ScalarRand                                                                  = 2,
	PSPT_Vector                                                                      = 3,
	PSPT_VectorRand                                                                  = 4,
	PSPT_Color                                                                       = 5,
	PSPT_Actor                                                                       = 6,
	PSPT_Material                                                                    = 7,
	PSPT_VectorUnitRand                                                              = 8
};

/// Enum /Script/Engine.ESettingsLockedAxis
/// Size: 0x01 (1 bytes)
enum class ESettingsLockedAxis : uint8_t
{
	ESettingsLockedAxis__None                                                        = 0,
	ESettingsLockedAxis__X                                                           = 1,
	ESettingsLockedAxis__Y                                                           = 2,
	ESettingsLockedAxis__Z                                                           = 3,
	ESettingsLockedAxis__Invalid                                                     = 4
};

/// Enum /Script/Engine.ESettingsDOF
/// Size: 0x01 (1 bytes)
enum class ESettingsDOF : uint8_t
{
	ESettingsDOF__Full3D                                                             = 0,
	ESettingsDOF__YZPlane                                                            = 1,
	ESettingsDOF__XZPlane                                                            = 2,
	ESettingsDOF__XYPlane                                                            = 3
};

/// Enum /Script/Engine.EPSOGeneratorPrimitiveType
/// Size: 0x01 (1 bytes)
enum class EPSOGeneratorPrimitiveType : uint8_t
{
	PSO_PT_TriangleList                                                              = 0,
	PSO_PT_TriangleStrip                                                             = 1,
	PSO_PT_LineList                                                                  = 2,
	PSO_PT_QuadList                                                                  = 3,
	PSO_PT_PointList                                                                 = 4,
	PSO_PT_RectList                                                                  = 5,
	PSO_PT_1_ControlPointPatchList                                                   = 6,
	PSO_PT_2_ControlPointPatchList                                                   = 7,
	PSO_PT_3_ControlPointPatchList                                                   = 8,
	PSO_PT_4_ControlPointPatchList                                                   = 9,
	PSO_PT_5_ControlPointPatchList                                                   = 10,
	PSO_PT_6_ControlPointPatchList                                                   = 11,
	PSO_PT_7_ControlPointPatchList                                                   = 12,
	PSO_PT_8_ControlPointPatchList                                                   = 13,
	PSO_PT_9_ControlPointPatchList                                                   = 14,
	PSO_PT_10_ControlPointPatchList                                                  = 15,
	PSO_PT_11_ControlPointPatchList                                                  = 16,
	PSO_PT_12_ControlPointPatchList                                                  = 17,
	PSO_PT_13_ControlPointPatchList                                                  = 18,
	PSO_PT_14_ControlPointPatchList                                                  = 19,
	PSO_PT_15_ControlPointPatchList                                                  = 20,
	PSO_PT_16_ControlPointPatchList                                                  = 21,
	PSO_PT_17_ControlPointPatchList                                                  = 22,
	PSO_PT_18_ControlPointPatchList                                                  = 23,
	PSO_PT_19_ControlPointPatchList                                                  = 24,
	PSO_PT_20_ControlPointPatchList                                                  = 25,
	PSO_PT_21_ControlPointPatchList                                                  = 26,
	PSO_PT_22_ControlPointPatchList                                                  = 27,
	PSO_PT_23_ControlPointPatchList                                                  = 28,
	PSO_PT_24_ControlPointPatchList                                                  = 29,
	PSO_PT_25_ControlPointPatchList                                                  = 30,
	PSO_PT_26_ControlPointPatchList                                                  = 31,
	PSO_PT_27_ControlPointPatchList                                                  = 32,
	PSO_PT_28_ControlPointPatchList                                                  = 33,
	PSO_PT_29_ControlPointPatchList                                                  = 34,
	PSO_PT_30_ControlPointPatchList                                                  = 35,
	PSO_PT_31_ControlPointPatchList                                                  = 36,
	PSO_PT_32_ControlPointPatchList                                                  = 37
};

/// Enum /Script/Engine.EPSOGeneratorRenderTargetStoreAction
/// Size: 0x01 (1 bytes)
enum class EPSOGeneratorRenderTargetStoreAction : uint8_t
{
	PSO_STORE_NoAction                                                               = 0,
	PSO_STORE_Store                                                                  = 1,
	PSO_STORE_MultisampleResolve                                                     = 2
};

/// Enum /Script/Engine.EPSOGeneratorRenderTargetLoadAction
/// Size: 0x01 (1 bytes)
enum class EPSOGeneratorRenderTargetLoadAction : uint8_t
{
	PSO_LOAD_NoAction                                                                = 0,
	PSO_LOAD_Load                                                                    = 1,
	PSO_LOAD_Clear                                                                   = 2
};

/// Enum /Script/Engine.EPSOGeneratorRenderTargetFlags
/// Size: 0x04 (4 bytes)
enum class EPSOGeneratorRenderTargetFlags : uint32_t
{
	PSO_TexCreate_None                                                               = 0,
	PSO_TexCreate_RenderTargetable                                                   = 1,
	PSO_TexCreate_ResolveTargetable                                                  = 2,
	PSO_TexCreate_DepthStencilTargetable                                             = 4,
	PSO_TexCreate_ShaderResource                                                     = 8,
	PSO_TexCreate_SRGB                                                               = 16,
	PSO_TexCreate_CPUWritable                                                        = 32,
	PSO_TexCreate_NoTiling                                                           = 64,
	PSO_TexCreate_VideoDecode                                                        = 128,
	PSO_TexCreate_Dynamic                                                            = 256,
	PSO_TexCreate_InputAttachmentRead                                                = 512,
	PSO_TexCreate_Foveation                                                          = 1024,
	PSO_TexCreate_Memoryless                                                         = 2048,
	PSO_TexCreate_GenerateMipCapable                                                 = 4096,
	PSO_TexCreate_FastVRAMPartialAlloc                                               = 8192,
	PSO_TexCreate_DisableSRVCreation                                                 = 16384,
	PSO_TexCreate_DisableDCC                                                         = 32768,
	PSO_TexCreate_UAV                                                                = 65536,
	PSO_TexCreate_Presentable                                                        = 131072,
	PSO_TexCreate_CPUReadback                                                        = 262144,
	PSO_TexCreate_OfflineProcessed                                                   = 524288,
	PSO_TexCreate_FastVRAM                                                           = 1048576,
	PSO_TexCreate_HideInVisualizeTexture                                             = 2097152,
	PSO_TexCreate_Virtual                                                            = 4194304,
	PSO_TexCreate_TargetArraySlicesIndependently                                     = 8388608,
	PSO_TexCreate_Shared                                                             = 16777216,
	PSO_TexCreate_NoFastClear                                                        = 33554432,
	PSO_TexCreate_DepthStencilResolveTarget                                          = 67108864,
	PSO_TexCreate_Streamable                                                         = 134217728,
	PSO_TexCreate_NoFastClearFinalize                                                = 268435456,
	PSO_TexCreate_AFRManual                                                          = 536870912,
	PSO_TexCreate_ReduceMemoryWithTilingMode                                         = 1073741824,
	PSO_TexCreate_Transient                                                          = -2147483648
};

/// Enum /Script/Engine.EPSOGeneratorPixelFormat
/// Size: 0x01 (1 bytes)
enum class EPSOGeneratorPixelFormat : uint8_t
{
	PSO_PF_Unknown                                                                   = 0,
	PSO_PF_A32B32G32R32F                                                             = 1,
	PSO_PF_B8G8R8A8                                                                  = 2,
	PSO_PF_G8                                                                        = 3,
	PSO_PF_G16                                                                       = 4,
	PSO_PF_DXT1                                                                      = 5,
	PSO_PF_DXT3                                                                      = 6,
	PSO_PF_DXT5                                                                      = 7,
	PSO_PF_UYVY                                                                      = 8,
	PSO_PF_FloatRGB                                                                  = 9,
	PSO_PF_FloatRGBA                                                                 = 10,
	PSO_PF_DepthStencil                                                              = 11,
	PSO_PF_ShadowDepth                                                               = 12,
	PSO_PF_R32_FLOAT                                                                 = 13,
	PSO_PF_G16R16                                                                    = 14,
	PSO_PF_G16R16F                                                                   = 15,
	PSO_PF_G16R16F_FILTER                                                            = 16,
	PSO_PF_G32R32F                                                                   = 17,
	PSO_PF_A2B10G10R10                                                               = 18,
	PSO_PF_A16B16G16R16                                                              = 19,
	PSO_PF_D24                                                                       = 20,
	PSO_PF_R16F                                                                      = 21,
	PSO_PF_R16F_FILTER                                                               = 22,
	PSO_PF_BC5                                                                       = 23,
	PSO_PF_V8U8                                                                      = 24,
	PSO_PF_A1                                                                        = 25,
	PSO_PF_FloatR11G11B10                                                            = 26,
	PSO_PF_A8                                                                        = 27,
	PSO_PF_R32_UINT                                                                  = 28,
	PSO_PF_R32_SINT                                                                  = 29,
	PSO_PF_PVRTC2                                                                    = 30,
	PSO_PF_PVRTC4                                                                    = 31,
	PSO_PF_R16_UINT                                                                  = 32,
	PSO_PF_R16_SINT                                                                  = 33,
	PSO_PF_R16G16B16A16_UINT                                                         = 34,
	PSO_PF_R16G16B16A16_SINT                                                         = 35,
	PSO_PF_R5G6B5_UNORM                                                              = 36,
	PSO_PF_R8G8B8A8                                                                  = 37,
	PSO_PF_A8R8G8B8                                                                  = 38,
	PSO_PF_BC4                                                                       = 39,
	PSO_PF_R8G8                                                                      = 40,
	PSO_PF_ATC_RGB                                                                   = 41,
	PSO_PF_ATC_RGBA_E                                                                = 42,
	PSO_PF_ATC_RGBA_I                                                                = 43,
	PSO_PF_X24_G8                                                                    = 44,
	PSO_PF_ETC1                                                                      = 45,
	PSO_PF_ETC2_RGB                                                                  = 46,
	PSO_PF_ETC2_RGBA                                                                 = 47,
	PSO_PF_R32G32B32A32_UINT                                                         = 48,
	PSO_PF_R16G16_UINT                                                               = 49,
	PSO_PF_ASTC_4x4                                                                  = 50,
	PSO_PF_ASTC_6x6                                                                  = 51,
	PSO_PF_ASTC_8x8                                                                  = 52,
	PSO_PF_ASTC_10x10                                                                = 53,
	PSO_PF_ASTC_12x12                                                                = 54,
	PSO_PF_BC6H                                                                      = 55,
	PSO_PF_BC7                                                                       = 56,
	PSO_PF_R8_UINT                                                                   = 57,
	PSO_PF_L8                                                                        = 58,
	PSO_PF_XGXR8                                                                     = 59,
	PSO_PF_R8G8B8A8_UINT                                                             = 60,
	PSO_PF_R8G8B8A8_SNORM                                                            = 61,
	PSO_PF_R16G16B16A16_UNORM                                                        = 62,
	PSO_PF_R16G16B16A16_SNORM                                                        = 63,
	PSO_PF_PLATFORM_HDR                                                              = 64,
	PSO_PF_PLATFORM_HDR66                                                            = 65,
	PSO_PF_PLATFORM_HDR67                                                            = 66,
	PSO_PF_NV12                                                                      = 67,
	PSO_PF_R32G32_UINT                                                               = 68,
	PSO_PF_ETC2_R11_EAC                                                              = 69,
	PSO_PF_ETC2_RG11_EAC                                                             = 70,
	PSO_PF_R8                                                                        = 71,
	PSO_PF_P010                                                                      = 72
};

/// Enum /Script/Engine.EPSOGeneratorStencilOp
/// Size: 0x01 (1 bytes)
enum class EPSOGeneratorStencilOp : uint8_t
{
	PSO_SO_Keep                                                                      = 0,
	PSO_SO_Zero                                                                      = 1,
	PSO_SO_Replace                                                                   = 2,
	PSO_SO_SaturatedIncrement                                                        = 3,
	PSO_SO_SaturatedDecrement                                                        = 4,
	PSO_SO_Invert                                                                    = 5,
	PSO_SO_Increment                                                                 = 6,
	PSO_SO_Decrement                                                                 = 7
};

/// Enum /Script/Engine.EPSOGeneratorCompareFunction
/// Size: 0x01 (1 bytes)
enum class EPSOGeneratorCompareFunction : uint8_t
{
	PSO_CF_Less                                                                      = 0,
	PSO_CF_LessEqual                                                                 = 1,
	PSO_CF_Greater                                                                   = 2,
	PSO_CF_GreaterEqual                                                              = 3,
	PSO_CF_Equal                                                                     = 4,
	PSO_CF_NotEqual                                                                  = 5,
	PSO_CF_Never                                                                     = 6,
	PSO_CF_Always                                                                    = 7
};

/// Enum /Script/Engine.EPSOGeneratorRasterizerCullMode
/// Size: 0x01 (1 bytes)
enum class EPSOGeneratorRasterizerCullMode : uint8_t
{
	PSO_CM_None                                                                      = 0,
	PSO_CM_CW                                                                        = 1,
	PSO_CM_CCW                                                                       = 2
};

/// Enum /Script/Engine.EPSOGeneratorRasterizerFillMode
/// Size: 0x01 (1 bytes)
enum class EPSOGeneratorRasterizerFillMode : uint8_t
{
	PSO_FM_Point                                                                     = 0,
	PSO_FM_Wireframe                                                                 = 1,
	PSO_FM_Solid                                                                     = 2
};

/// Enum /Script/Engine.EPSOGeneratorColorWriteMask
/// Size: 0x01 (1 bytes)
enum class EPSOGeneratorColorWriteMask : uint8_t
{
	PSO_CW_RED                                                                       = 1,
	PSO_CW_GREEN                                                                     = 2,
	PSO_CW_BLUE                                                                      = 4,
	PSO_CW_ALPHA                                                                     = 8,
	PSO_CW_NONE                                                                      = 0,
	PSO_CW_RGB                                                                       = 7,
	PSO_CW_RGBA                                                                      = 15,
	PSO_CW_RG                                                                        = 3,
	PSO_CW_BA                                                                        = 12
};

/// Enum /Script/Engine.EPSOGeneratorBlendFactor
/// Size: 0x01 (1 bytes)
enum class EPSOGeneratorBlendFactor : uint8_t
{
	PSO_BF_Zero                                                                      = 0,
	PSO_BF_One                                                                       = 1,
	PSO_BF_SourceColor                                                               = 2,
	PSO_BF_InverseSourceColor                                                        = 3,
	PSO_BF_SourceAlpha                                                               = 4,
	PSO_BF_InverseSourceAlpha                                                        = 5,
	PSO_BF_DestAlpha                                                                 = 6,
	PSO_BF_InverseDestAlpha                                                          = 7,
	PSO_BF_DestColor                                                                 = 8,
	PSO_BF_InverseDestColor                                                          = 9,
	PSO_BF_ConstantBlendFactor                                                       = 10,
	PSO_BF_InverseConstantBlendFactor                                                = 11,
	PSO_BF_Source1Color                                                              = 12,
	PSO_BF_InverseSource1Color                                                       = 13,
	PSO_BF_Source1Alpha                                                              = 14,
	PSO_BF_InverseSource1Alpha                                                       = 15
};

/// Enum /Script/Engine.EPSOGeneratorBlendOperation
/// Size: 0x01 (1 bytes)
enum class EPSOGeneratorBlendOperation : uint8_t
{
	PSO_BO_Add                                                                       = 0,
	PSO_BO_Subtract                                                                  = 1,
	PSO_BO_Min                                                                       = 2,
	PSO_BO_Max                                                                       = 3,
	PSO_BO_ReverseSubtract                                                           = 4,
	PSO_BO_Max6                                                                      = 5
};

/// Enum /Script/Engine.EPSOGeneratorVertexElementType
/// Size: 0x01 (1 bytes)
enum class EPSOGeneratorVertexElementType : uint8_t
{
	PSO_VET_None                                                                     = 0,
	PSO_VET_Float1                                                                   = 1,
	PSO_VET_Float2                                                                   = 2,
	PSO_VET_Float3                                                                   = 3,
	PSO_VET_Float4                                                                   = 4,
	PSO_VET_PackedNormal                                                             = 5,
	PSO_VET_UByte4                                                                   = 6,
	PSO_VET_UByte4N                                                                  = 7,
	PSO_VET_Color                                                                    = 8,
	PSO_VET_Short2                                                                   = 9,
	PSO_VET_Short4                                                                   = 10,
	PSO_VET_Short2N                                                                  = 11,
	PSO_VET_Half2                                                                    = 12,
	PSO_VET_Half4                                                                    = 13,
	PSO_VET_Short4N                                                                  = 14,
	PSO_VET_UShort2                                                                  = 15,
	PSO_VET_UShort4                                                                  = 16,
	PSO_VET_UShort2N                                                                 = 17,
	PSO_VET_UShort4N                                                                 = 18,
	PSO_VET_URGB10A2N                                                                = 19,
	PSO_VET_UInt                                                                     = 20
};

/// Enum /Script/Engine.ECameraFadeMode
/// Size: 0x01 (1 bytes)
enum class ECameraFadeMode : uint8_t
{
	CFM_Linear                                                                       = 0,
	CFM_Transient                                                                    = 1,
	CFM_InOutCubic                                                                   = 2,
	CFM_OutSine                                                                      = 3,
	CFM_OutQuart                                                                     = 4
};

/// Enum /Script/Engine.EViewTargetBlendFunction
/// Size: 0x01 (1 bytes)
enum class EViewTargetBlendFunction : uint8_t
{
	VTBlend_Linear                                                                   = 0,
	VTBlend_Cubic                                                                    = 1,
	VTBlend_EaseIn                                                                   = 2,
	VTBlend_EaseOut                                                                  = 3,
	VTBlend_EaseInOut                                                                = 4
};

/// Enum /Script/Engine.EDynamicForceFeedbackAction
/// Size: 0x01 (1 bytes)
enum class EDynamicForceFeedbackAction : uint8_t
{
	EDynamicForceFeedbackAction__Start                                               = 0,
	EDynamicForceFeedbackAction__Update                                              = 1,
	EDynamicForceFeedbackAction__Stop                                                = 2
};

/// Enum /Script/Engine.ERendererStencilMask
/// Size: 0x01 (1 bytes)
enum class ERendererStencilMask : uint8_t
{
	ERendererStencilMask__ERSM_Default                                               = 0,
	ERendererStencilMask__ERSM                                                       = 1,
	ERendererStencilMask__ERSM3                                                      = 2,
	ERendererStencilMask__ERSM4                                                      = 3,
	ERendererStencilMask__ERSM5                                                      = 4,
	ERendererStencilMask__ERSM6                                                      = 5,
	ERendererStencilMask__ERSM7                                                      = 6,
	ERendererStencilMask__ERSM8                                                      = 7,
	ERendererStencilMask__ERSM9                                                      = 8,
	ERendererStencilMask__ERSM10                                                     = 9
};

/// Enum /Script/Engine.EHasCustomNavigableGeometry
/// Size: 0x01 (1 bytes)
enum class EHasCustomNavigableGeometry : uint8_t
{
	EHasCustomNavigableGeometry__No                                                  = 0,
	EHasCustomNavigableGeometry__Yes                                                 = 1,
	EHasCustomNavigableGeometry__EvenIfNotCollidable                                 = 2,
	EHasCustomNavigableGeometry__DontExport                                          = 3
};

/// Enum /Script/Engine.ECanBeCharacterBase
/// Size: 0x01 (1 bytes)
enum class ECanBeCharacterBase : uint8_t
{
	ECB_No                                                                           = 0,
	ECB_Yes                                                                          = 1,
	ECB_Owner                                                                        = 2
};

/// Enum /Script/Engine.EQuarztQuantizationReference
/// Size: 0x01 (1 bytes)
enum class EQuarztQuantizationReference : uint8_t
{
	EQuarztQuantizationReference__BarRelative                                        = 0,
	EQuarztQuantizationReference__TransportRelative                                  = 1,
	EQuarztQuantizationReference__CurrentTimeRelative                                = 2,
	EQuarztQuantizationReference__Count                                              = 3
};

/// Enum /Script/Engine.EQuartzDelegateType
/// Size: 0x01 (1 bytes)
enum class EQuartzDelegateType : uint8_t
{
	EQuartzDelegateType__MetronomeTick                                               = 0,
	EQuartzDelegateType__CommandEvent                                                = 1,
	EQuartzDelegateType__Count                                                       = 2
};

/// Enum /Script/Engine.EQuartzTimeSignatureQuantization
/// Size: 0x01 (1 bytes)
enum class EQuartzTimeSignatureQuantization : uint8_t
{
	EQuartzTimeSignatureQuantization__HalfNote                                       = 0,
	EQuartzTimeSignatureQuantization__QuarterNote                                    = 1,
	EQuartzTimeSignatureQuantization__EighthNote                                     = 2,
	EQuartzTimeSignatureQuantization__SixteenthNote                                  = 3,
	EQuartzTimeSignatureQuantization__ThirtySecondNote                               = 4,
	EQuartzTimeSignatureQuantization__Count                                          = 5
};

/// Enum /Script/Engine.ERBFDriverAttribute
/// Size: 0x04 (4 bytes)
enum class ERBFDriverAttribute : uint32_t
{
	ERBFDriverAttribute__Translation                                                 = 0,
	ERBFDriverAttribute__Rotation                                                    = 1,
	ERBFDriverAttribute__Scale                                                       = 2,
	ERBFDriverAttribute__NumCategory                                                 = 3,
	ERBFDriverAttribute__TranslationX                                                = 4,
	ERBFDriverAttribute__TranslationY                                                = 5,
	ERBFDriverAttribute__TranslationZ                                                = 6,
	ERBFDriverAttribute__RotationX                                                   = 7,
	ERBFDriverAttribute__RotationY                                                   = 8,
	ERBFDriverAttribute__RotationZ                                                   = 9,
	ERBFDriverAttribute__ScaleX                                                      = 10,
	ERBFDriverAttribute__ScaleY                                                      = 11,
	ERBFDriverAttribute__ScaleZ                                                      = 12,
	ERBFDriverAttribute__Unknown                                                     = 13
};

/// Enum /Script/Engine.ERBFSolveInterpMode
/// Size: 0x04 (4 bytes)
enum class ERBFSolveInterpMode : uint32_t
{
	ERBFSolveInterpMode__Linear                                                      = 0,
	ERBFSolveInterpMode__Gaussian1                                                   = 1,
	ERBFSolveInterpMode__Gaussian2                                                   = 2,
	ERBFSolveInterpMode__ThinPlate                                                   = 3,
	ERBFSolveInterpMode__MultiQuadratic                                              = 4,
	ERBFSolveInterpMode__InverseMultiQuadratic                                       = 5
};

/// Enum /Script/Engine.ERBFKernalType
/// Size: 0x04 (4 bytes)
enum class ERBFKernalType : uint32_t
{
	ERBFKernalType__Mean                                                             = 0,
	ERBFKernalType__Variance                                                         = 1,
	ERBFKernalType__Covariance                                                       = 2
};

/// Enum /Script/Engine.ERBFDistanceType
/// Size: 0x04 (4 bytes)
enum class ERBFDistanceType : uint32_t
{
	ERBFDistanceType__Linear                                                         = 0,
	ERBFDistanceType__Angle                                                          = 1
};

/// Enum /Script/Engine.ERichCurveExtrapolation
/// Size: 0x01 (1 bytes)
enum class ERichCurveExtrapolation : uint8_t
{
	RCCE_Cycle                                                                       = 0,
	RCCE_CycleWithOffset                                                             = 1,
	RCCE_Oscillate                                                                   = 2,
	RCCE_Linear                                                                      = 3,
	RCCE_Constant                                                                    = 4,
	RCCE_None                                                                        = 5
};

/// Enum /Script/Engine.ERichCurveInterpMode
/// Size: 0x01 (1 bytes)
enum class ERichCurveInterpMode : uint8_t
{
	RCIM_Linear                                                                      = 0,
	RCIM_Constant                                                                    = 1,
	RCIM_Cubic                                                                       = 2,
	RCIM_None                                                                        = 3
};

/// Enum /Script/Engine.EMobileReflectionCompression
/// Size: 0x01 (1 bytes)
enum class EMobileReflectionCompression : uint8_t
{
	EMobileReflectionCompression__Default                                            = 0,
	EMobileReflectionCompression__On                                                 = 1,
	EMobileReflectionCompression__Off                                                = 2
};

/// Enum /Script/Engine.EReflectionSourceType
/// Size: 0x01 (1 bytes)
enum class EReflectionSourceType : uint8_t
{
	EReflectionSourceType__CapturedScene                                             = 0,
	EReflectionSourceType__SpecifiedCubemap                                          = 1
};

/// Enum /Script/Engine.EFixedFoveationLevels
/// Size: 0x01 (1 bytes)
enum class EFixedFoveationLevels : uint8_t
{
	EFixedFoveationLevels__Disabled                                                  = 0,
	EFixedFoveationLevels__Low                                                       = 1,
	EFixedFoveationLevels__Medium                                                    = 2,
	EFixedFoveationLevels__High                                                      = 3,
	EFixedFoveationLevels__HighTop                                                   = 4
};

/// Enum /Script/Engine.EDefaultBackBufferPixelFormat
/// Size: 0x01 (1 bytes)
enum class EDefaultBackBufferPixelFormat : uint8_t
{
	EDefaultBackBufferPixelFormat__DBBPF_B8G8R8A8                                    = 0,
	EDefaultBackBufferPixelFormat__DBBPF_A16B16G16R16_DEPRECATED                     = 1,
	EDefaultBackBufferPixelFormat__DBBPF_FloatRGB_DEPRECATED                         = 2,
	EDefaultBackBufferPixelFormat__DBBPF_FloatRGBA                                   = 3,
	EDefaultBackBufferPixelFormat__DBBPF_A2B10G10R10                                 = 4
};

/// Enum /Script/Engine.EAutoExposureMethodUI
/// Size: 0x01 (1 bytes)
enum class EAutoExposureMethodUI : uint8_t
{
	EAutoExposureMethodUI__AEM_Histogram                                             = 0,
	EAutoExposureMethodUI__AEM_Basic                                                 = 1,
	EAutoExposureMethodUI__AEM_Manual                                                = 2
};

/// Enum /Script/Engine.EAlphaChannelMode
/// Size: 0x01 (1 bytes)
enum class EAlphaChannelMode : uint8_t
{
	EAlphaChannelMode__Disabled                                                      = 0,
	EAlphaChannelMode__LinearColorSpaceOnly                                          = 1,
	EAlphaChannelMode__AllowThroughTonemapper                                        = 2
};

/// Enum /Script/Engine.EEarlyZPass
/// Size: 0x01 (1 bytes)
enum class EEarlyZPass : uint8_t
{
	EEarlyZPass__None                                                                = 0,
	EEarlyZPass__OpaqueOnly                                                          = 1,
	EEarlyZPass__OpaqueAndMasked                                                     = 2,
	EEarlyZPass__Auto                                                                = 3
};

/// Enum /Script/Engine.ECustomDepthStencil
/// Size: 0x01 (1 bytes)
enum class ECustomDepthStencil : uint8_t
{
	ECustomDepthStencil__Disabled                                                    = 0,
	ECustomDepthStencil__Enabled                                                     = 1,
	ECustomDepthStencil__EnabledOnDemand                                             = 2,
	ECustomDepthStencil__EnabledWithStencil                                          = 3
};

/// Enum /Script/Engine.EMobileMSAASampleCount
/// Size: 0x01 (1 bytes)
enum class EMobileMSAASampleCount : uint8_t
{
	EMobileMSAASampleCount__One                                                      = 1,
	EMobileMSAASampleCount__Two                                                      = 2,
	EMobileMSAASampleCount__Four                                                     = 4,
	EMobileMSAASampleCount__Eight                                                    = 8
};

/// Enum /Script/Engine.ECompositingSampleCount
/// Size: 0x01 (1 bytes)
enum class ECompositingSampleCount : uint8_t
{
	ECompositingSampleCount__One                                                     = 1,
	ECompositingSampleCount__Two                                                     = 2,
	ECompositingSampleCount__Four                                                    = 4,
	ECompositingSampleCount__Eight                                                   = 8
};

/// Enum /Script/Engine.EClearSceneOptions
/// Size: 0x01 (1 bytes)
enum class EClearSceneOptions : uint8_t
{
	EClearSceneOptions__NoClear                                                      = 0,
	EClearSceneOptions__HardwareClear                                                = 1,
	EClearSceneOptions__QuadAtMaxZ                                                   = 2
};

/// Enum /Script/Engine.EReporterLineStyle
/// Size: 0x01 (1 bytes)
enum class EReporterLineStyle : uint8_t
{
	EReporterLineStyle__Line                                                         = 0,
	EReporterLineStyle__Dash                                                         = 1
};

/// Enum /Script/Engine.ELegendPosition
/// Size: 0x01 (1 bytes)
enum class ELegendPosition : uint8_t
{
	ELegendPosition__Outside                                                         = 0,
	ELegendPosition__Inside                                                          = 1
};

/// Enum /Script/Engine.EGraphDataStyle
/// Size: 0x01 (1 bytes)
enum class EGraphDataStyle : uint8_t
{
	EGraphDataStyle__Lines                                                           = 0,
	EGraphDataStyle__Filled                                                          = 1
};

/// Enum /Script/Engine.EGraphAxisStyle
/// Size: 0x01 (1 bytes)
enum class EGraphAxisStyle : uint8_t
{
	EGraphAxisStyle__Lines                                                           = 0,
	EGraphAxisStyle__Notches                                                         = 1,
	EGraphAxisStyle__Grid                                                            = 2
};

/// Enum /Script/Engine.ReverbPreset
/// Size: 0x01 (1 bytes)
enum class ReverbPreset : uint8_t
{
	REVERB_Default                                                                   = 0,
	REVERB_Bathroom                                                                  = 1,
	REVERB_StoneRoom                                                                 = 2,
	REVERB_Auditorium                                                                = 3,
	REVERB_ConcertHall                                                               = 4,
	REVERB_Cave                                                                      = 5,
	REVERB_Hallway                                                                   = 6,
	REVERB_StoneCorridor                                                             = 7,
	REVERB_Alley                                                                     = 8,
	REVERB_Forest                                                                    = 9,
	REVERB_City                                                                      = 10,
	REVERB_Mountains                                                                 = 11,
	REVERB_Quarry                                                                    = 12,
	REVERB_Plain                                                                     = 13,
	REVERB_ParkingLot                                                                = 14,
	REVERB_SewerPipe                                                                 = 15,
	REVERB_Underwater                                                                = 16,
	REVERB_SmallRoom                                                                 = 17,
	REVERB_MediumRoom                                                                = 18,
	REVERB_LargeRoom                                                                 = 19,
	REVERB_MediumHall                                                                = 20,
	REVERB_LargeHall                                                                 = 21,
	REVERB_Plate                                                                     = 22
};

/// Enum /Script/Engine.ERichCurveKeyTimeCompressionFormat
/// Size: 0x01 (1 bytes)
enum class ERichCurveKeyTimeCompressionFormat : uint8_t
{
	RCKTCF_uint16                                                                    = 0,
	RCKTCF_float32                                                                   = 1
};

/// Enum /Script/Engine.ERichCurveCompressionFormat
/// Size: 0x01 (1 bytes)
enum class ERichCurveCompressionFormat : uint8_t
{
	RCCF_Empty                                                                       = 0,
	RCCF_Constant                                                                    = 1,
	RCCF_Linear                                                                      = 2,
	RCCF_Cubic                                                                       = 3,
	RCCF_Mixed                                                                       = 4,
	RCCF_Weighted                                                                    = 5
};

/// Enum /Script/Engine.ERichCurveTangentWeightMode
/// Size: 0x01 (1 bytes)
enum class ERichCurveTangentWeightMode : uint8_t
{
	RCTWM_WeightedNone                                                               = 0,
	RCTWM_WeightedArrive                                                             = 1,
	RCTWM_WeightedLeave                                                              = 2,
	RCTWM_WeightedBoth                                                               = 3
};

/// Enum /Script/Engine.ERichCurveTangentMode
/// Size: 0x01 (1 bytes)
enum class ERichCurveTangentMode : uint8_t
{
	RCTM_Auto                                                                        = 0,
	RCTM_User                                                                        = 1,
	RCTM_Break                                                                       = 2,
	RCTM_None                                                                        = 3
};

/// Enum /Script/Engine.EConstraintTransform
/// Size: 0x01 (1 bytes)
enum class EConstraintTransform : uint8_t
{
	EConstraintTransform__Absolute                                                   = 0,
	EConstraintTransform__Relative                                                   = 1
};

/// Enum /Script/Engine.EControlConstraint
/// Size: 0x01 (1 bytes)
enum class EControlConstraint : uint8_t
{
	EControlConstraint__Orientation                                                  = 0,
	EControlConstraint__Translation                                                  = 1
};

/// Enum /Script/Engine.ERootMotionFinishVelocityMode
/// Size: 0x01 (1 bytes)
enum class ERootMotionFinishVelocityMode : uint8_t
{
	ERootMotionFinishVelocityMode__MaintainLastRootMotionVelocity                    = 0,
	ERootMotionFinishVelocityMode__SetVelocity                                       = 1,
	ERootMotionFinishVelocityMode__ClampVelocity                                     = 2
};

/// Enum /Script/Engine.ERootMotionSourceSettingsFlags
/// Size: 0x01 (1 bytes)
enum class ERootMotionSourceSettingsFlags : uint8_t
{
	ERootMotionSourceSettingsFlags__UseSensitiveLiftoffCheck                         = 1,
	ERootMotionSourceSettingsFlags__DisablePartialEndTick                            = 2,
	ERootMotionSourceSettingsFlags__IgnoreZAccumulate                                = 4
};

/// Enum /Script/Engine.ERootMotionSourceStatusFlags
/// Size: 0x01 (1 bytes)
enum class ERootMotionSourceStatusFlags : uint8_t
{
	ERootMotionSourceStatusFlags__Prepared                                           = 1,
	ERootMotionSourceStatusFlags__Finished                                           = 2,
	ERootMotionSourceStatusFlags__MarkedForRemoval                                   = 4
};

/// Enum /Script/Engine.ERootMotionAccumulateMode
/// Size: 0x01 (1 bytes)
enum class ERootMotionAccumulateMode : uint8_t
{
	ERootMotionAccumulateMode__Override                                              = 0,
	ERootMotionAccumulateMode__Additive                                              = 1
};

/// Enum /Script/Engine.ERuntimeVirtualTextureMainPassType
/// Size: 0x01 (1 bytes)
enum class ERuntimeVirtualTextureMainPassType : uint8_t
{
	ERuntimeVirtualTextureMainPassType__Never                                        = 0,
	ERuntimeVirtualTextureMainPassType__Exclusive                                    = 1,
	ERuntimeVirtualTextureMainPassType__Always                                       = 2
};

/// Enum /Script/Engine.ERuntimeVirtualTextureMaterialType
/// Size: 0x01 (1 bytes)
enum class ERuntimeVirtualTextureMaterialType : uint8_t
{
	ERuntimeVirtualTextureMaterialType__BaseColor                                    = 0,
	ERuntimeVirtualTextureMaterialType__BaseColor_Normal_DEPRECATED                  = 1,
	ERuntimeVirtualTextureMaterialType__BaseColor_Normal_Specular                    = 2,
	ERuntimeVirtualTextureMaterialType__BaseColor_Normal_Specular_YCoCg              = 3,
	ERuntimeVirtualTextureMaterialType__BaseColor_Normal_Specular_Mask_YCoCg         = 4,
	ERuntimeVirtualTextureMaterialType__WorldHeight                                  = 5,
	ERuntimeVirtualTextureMaterialType__Count                                        = 6
};

/// Enum /Script/Engine.EMobilePixelProjectedReflectionQuality
/// Size: 0x01 (1 bytes)
enum class EMobilePixelProjectedReflectionQuality : uint8_t
{
	EMobilePixelProjectedReflectionQuality__Disabled                                 = 0,
	EMobilePixelProjectedReflectionQuality__BestPerformance                          = 1,
	EMobilePixelProjectedReflectionQuality__BetterQuality                            = 2,
	EMobilePixelProjectedReflectionQuality__BestQuality                              = 3
};

/// Enum /Script/Engine.EMobilePlanarReflectionMode
/// Size: 0x01 (1 bytes)
enum class EMobilePlanarReflectionMode : uint8_t
{
	EMobilePlanarReflectionMode__Usual                                               = 0,
	EMobilePlanarReflectionMode__MobilePPRExclusive                                  = 1,
	EMobilePlanarReflectionMode__MobilePPR                                           = 2
};

/// Enum /Script/Engine.EReflectedAndRefractedRayTracedShadows
/// Size: 0x01 (1 bytes)
enum class EReflectedAndRefractedRayTracedShadows : uint8_t
{
	EReflectedAndRefractedRayTracedShadows__Disabled                                 = 0,
	EReflectedAndRefractedRayTracedShadows__Hard_shadows                             = 1,
	EReflectedAndRefractedRayTracedShadows__Area_shadows                             = 2
};

/// Enum /Script/Engine.ERayTracingGlobalIlluminationType
/// Size: 0x01 (1 bytes)
enum class ERayTracingGlobalIlluminationType : uint8_t
{
	ERayTracingGlobalIlluminationType__Disabled                                      = 0,
	ERayTracingGlobalIlluminationType__BruteForce                                    = 1,
	ERayTracingGlobalIlluminationType__FinalGather                                   = 2
};

/// Enum /Script/Engine.ETranslucencyType
/// Size: 0x01 (1 bytes)
enum class ETranslucencyType : uint8_t
{
	ETranslucencyType__Raster                                                        = 0,
	ETranslucencyType__RayTracing                                                    = 1
};

/// Enum /Script/Engine.EReflectionsType
/// Size: 0x01 (1 bytes)
enum class EReflectionsType : uint8_t
{
	EReflectionsType__ScreenSpace                                                    = 0,
	EReflectionsType__RayTracing                                                     = 1
};

/// Enum /Script/Engine.ELightUnits
/// Size: 0x01 (1 bytes)
enum class ELightUnits : uint8_t
{
	ELightUnits__Unitless                                                            = 0,
	ELightUnits__Candelas                                                            = 1,
	ELightUnits__Lumens                                                              = 2
};

/// Enum /Script/Engine.EKuroSMAAQualityLevel
/// Size: 0x01 (1 bytes)
enum class EKuroSMAAQualityLevel : uint8_t
{
	KuroSMAAQuality_Low                                                              = 0,
	KuroSMAAQuality_Medium                                                           = 1,
	KuroSMAAQuality_High                                                             = 2,
	KuroSMAAQuality_Epic                                                             = 3,
	KuroSMAAQuality_Custom                                                           = 4
};

/// Enum /Script/Engine.EKuroSMAAEdgePassMethod
/// Size: 0x01 (1 bytes)
enum class EKuroSMAAEdgePassMethod : uint8_t
{
	KuroSMAAEdgePass_Luma                                                            = 0,
	KuroSMAAEdgePass_LumaPredication                                                 = 1,
	KuroSMAAEdgePass_Color                                                           = 2,
	KuroSMAAEdgePass_ColorPredication                                                = 3,
	KuroSMAAEdgePass_Depth                                                           = 4
};

/// Enum /Script/Engine.EKuroSMAADebugPass
/// Size: 0x01 (1 bytes)
enum class EKuroSMAADebugPass : uint8_t
{
	KuroSMAADebug_Off                                                                = 0,
	KuroSMAADebug_Edge                                                               = 1,
	KuroSMAADebug_Weight                                                             = 2
};

/// Enum /Script/Engine.EBloomMethod
/// Size: 0x01 (1 bytes)
enum class EBloomMethod : uint8_t
{
	BM_SOG                                                                           = 0,
	BM_FFT                                                                           = 1,
	BM_KURO                                                                          = 2
};

/// Enum /Script/Engine.EAutoExposureMethod
/// Size: 0x01 (1 bytes)
enum class EAutoExposureMethod : uint8_t
{
	AEM_Histogram                                                                    = 0,
	AEM_Basic                                                                        = 1,
	AEM_Manual                                                                       = 2
};

/// Enum /Script/Engine.EKuroSMAAInsertPosition
/// Size: 0x01 (1 bytes)
enum class EKuroSMAAInsertPosition : uint8_t
{
	KuroSMAAInsert_BeforeBloom                                                       = 0,
	KuroSMAAInsert_AfterTonemapper                                                   = 1
};

/// Enum /Script/Engine.EAntiAliasingMethod
/// Size: 0x01 (1 bytes)
enum class EAntiAliasingMethod : uint8_t
{
	AAM_None                                                                         = 0,
	AAM_FXAA                                                                         = 1,
	AAM_TemporalAA                                                                   = 2,
	AAM_MSAA                                                                         = 3,
	AAM_SMAA                                                                         = 4
};

/// Enum /Script/Engine.EDepthOfFieldMethod
/// Size: 0x01 (1 bytes)
enum class EDepthOfFieldMethod : uint8_t
{
	DOFM_BokehDOF                                                                    = 0,
	DOFM_Gaussian                                                                    = 1,
	DOFM_CircleDOF                                                                   = 2
};

/// Enum /Script/Engine.ESceneCapturePrimitiveRenderMode
/// Size: 0x01 (1 bytes)
enum class ESceneCapturePrimitiveRenderMode : uint8_t
{
	ESceneCapturePrimitiveRenderMode__PRM_LegacySceneCapture                         = 0,
	ESceneCapturePrimitiveRenderMode__PRM_RenderScenePrimitives                      = 1,
	ESceneCapturePrimitiveRenderMode__PRM_UseShowOnlyList                            = 2
};

/// Enum /Script/Engine.EMaterialProperty
/// Size: 0x01 (1 bytes)
enum class EMaterialProperty : uint8_t
{
	MP_EmissiveColor                                                                 = 0,
	MP_Opacity                                                                       = 1,
	MP_OpacityMask                                                                   = 2,
	MP_DiffuseColor                                                                  = 3,
	MP_SpecularColor                                                                 = 4,
	MP_BaseColor                                                                     = 5,
	MP_Metallic                                                                      = 6,
	MP_Specular                                                                      = 7,
	MP_Roughness                                                                     = 8,
	MP_Anisotropy                                                                    = 9,
	MP_Normal                                                                        = 10,
	MP_Tangent                                                                       = 11,
	MP_WorldPositionOffset                                                           = 12,
	MP_WorldDisplacement                                                             = 13,
	MP_TessellationMultiplier                                                        = 14,
	MP_SubsurfaceColor                                                               = 15,
	MP_CustomData0                                                                   = 16,
	MP_CustomData1                                                                   = 17,
	MP_AmbientOcclusion                                                              = 18,
	MP_Refraction                                                                    = 19,
	MP_CustomizedUVs0                                                                = 20,
	MP_CustomizedUVs1                                                                = 21,
	MP_CustomizedUVs2                                                                = 22,
	MP_CustomizedUVs3                                                                = 23,
	MP_CustomizedUVs4                                                                = 24,
	MP_CustomizedUVs5                                                                = 25,
	MP_CustomizedUVs6                                                                = 26,
	MP_CustomizedUVs7                                                                = 27,
	MP_PixelDepthOffset                                                              = 28,
	MP_ShadingModel                                                                  = 29,
	MP_ShadowPixelDepthOffset                                                        = 30,
	MP_MaterialAttributes                                                            = 31,
	MP_CustomOutput                                                                  = 32
};

/// Enum /Script/Engine.ELightQualityType
/// Size: 0x01 (1 bytes)
enum class ELightQualityType : uint8_t
{
	LightQualityHigh                                                                 = 0,
	LightQualityMiddle                                                               = 1,
	LightQualityLow                                                                  = 2,
	LightQualityExtremelyLow                                                         = 3
};

/// Enum /Script/Engine.ELightDistanceCullType
/// Size: 0x01 (1 bytes)
enum class ELightDistanceCullType : uint8_t
{
	NoDistanceCullType                                                               = 0,
	CustomDistanceCullType                                                           = 1,
	DistanceCullType1                                                                = 2,
	DistanceCullType2                                                                = 3,
	DistanceCullType3                                                                = 4,
	DistanceCullType4                                                                = 5,
	DistanceCullType5                                                                = 6
};

/// Enum /Script/Engine.EToonLightType
/// Size: 0x01 (1 bytes)
enum class EToonLightType : uint8_t
{
	ToonLightType_Effect                                                             = 0,
	ToonLightType_LevelSequence                                                      = 1,
	ToonLightType_Scene                                                              = 2
};

/// Enum /Script/Engine.ESkinCacheDefaultBehavior
/// Size: 0x01 (1 bytes)
enum class ESkinCacheDefaultBehavior : uint8_t
{
	ESkinCacheDefaultBehavior__Exclusive                                             = 0,
	ESkinCacheDefaultBehavior__Inclusive                                             = 1
};

/// Enum /Script/Engine.ESkinCacheUsage
/// Size: 0x01 (1 bytes)
enum class ESkinCacheUsage : uint8_t
{
	ESkinCacheUsage__Auto                                                            = 0,
	ESkinCacheUsage__Disabled                                                        = 255,
	ESkinCacheUsage__Enabled                                                         = 1
};

/// Enum /Script/Engine.EPhysicsTransformUpdateMode
/// Size: 0x01 (1 bytes)
enum class EPhysicsTransformUpdateMode : uint8_t
{
	EPhysicsTransformUpdateMode__SimulationUpatesComponentTransform                  = 0,
	EPhysicsTransformUpdateMode__ComponentTransformIsKinematic                       = 1
};

/// Enum /Script/Engine.EAnimationMode
/// Size: 0x01 (1 bytes)
enum class EAnimationMode : uint8_t
{
	EAnimationMode__AnimationBlueprint                                               = 0,
	EAnimationMode__AnimationSingleNode                                              = 1,
	EAnimationMode__AnimationCustomMode                                              = 2
};

/// Enum /Script/Engine.EKinematicBonesUpdateToPhysics
/// Size: 0x01 (1 bytes)
enum class EKinematicBonesUpdateToPhysics : uint8_t
{
	EKinematicBonesUpdateToPhysics__SkipSimulatingBones                              = 0,
	EKinematicBonesUpdateToPhysics__SkipAllBones                                     = 1
};

/// Enum /Script/Engine.ECustomBoneAttributeLookup
/// Size: 0x01 (1 bytes)
enum class ECustomBoneAttributeLookup : uint8_t
{
	ECustomBoneAttributeLookup__BoneOnly                                             = 0,
	ECustomBoneAttributeLookup__ImmediateParent                                      = 1,
	ECustomBoneAttributeLookup__ParentHierarchy                                      = 2
};

/// Enum /Script/Engine.EClothMassMode
/// Size: 0x01 (1 bytes)
enum class EClothMassMode : uint8_t
{
	EClothMassMode__UniformMass                                                      = 0,
	EClothMassMode__TotalMass                                                        = 1,
	EClothMassMode__Density                                                          = 2,
	EClothMassMode__MaxClothMassMode                                                 = 3
};

/// Enum /Script/Engine.EAnimCurveType
/// Size: 0x01 (1 bytes)
enum class EAnimCurveType : uint8_t
{
	EAnimCurveType__AttributeCurve                                                   = 0,
	EAnimCurveType__MaterialCurve                                                    = 1,
	EAnimCurveType__MorphTargetCurve                                                 = 2,
	EAnimCurveType__MaxAnimCurveType                                                 = 3
};

/// Enum /Script/Engine.ESkeletalMeshSkinningImportVersions
/// Size: 0x01 (1 bytes)
enum class ESkeletalMeshSkinningImportVersions : uint8_t
{
	ESkeletalMeshSkinningImportVersions__Before_Versionning                          = 0,
	ESkeletalMeshSkinningImportVersions__SkeletalMeshBuildRefactor                   = 1,
	ESkeletalMeshSkinningImportVersions__VersionPlusOne                              = 2,
	ESkeletalMeshSkinningImportVersions__LatestVersion                               = 1
};

/// Enum /Script/Engine.ESkeletalMeshGeoImportVersions
/// Size: 0x01 (1 bytes)
enum class ESkeletalMeshGeoImportVersions : uint8_t
{
	ESkeletalMeshGeoImportVersions__Before_Versionning                               = 0,
	ESkeletalMeshGeoImportVersions__SkeletalMeshBuildRefactor                        = 1,
	ESkeletalMeshGeoImportVersions__VersionPlusOne                                   = 2,
	ESkeletalMeshGeoImportVersions__LatestVersion                                    = 1
};

/// Enum /Script/Engine.EBoneFilterActionOption
/// Size: 0x01 (1 bytes)
enum class EBoneFilterActionOption : uint8_t
{
	EBoneFilterActionOption__Remove                                                  = 0,
	EBoneFilterActionOption__Keep                                                    = 1,
	EBoneFilterActionOption__Invalid                                                 = 2
};

/// Enum /Script/Engine.SkeletalMeshOptimizationImportance
/// Size: 0x01 (1 bytes)
enum class SkeletalMeshOptimizationImportance : uint8_t
{
	SMOI_Off                                                                         = 0,
	SMOI_Lowest                                                                      = 1,
	SMOI_Low                                                                         = 2,
	SMOI_Normal                                                                      = 3,
	SMOI_High                                                                        = 4,
	SMOI_Highest                                                                     = 5
};

/// Enum /Script/Engine.SkeletalMeshOptimizationType
/// Size: 0x01 (1 bytes)
enum class SkeletalMeshOptimizationType : uint8_t
{
	SMOT_NumOfTriangles                                                              = 0,
	SMOT_MaxDeviation                                                                = 1,
	SMOT_TriangleOrDeviation                                                         = 2
};

/// Enum /Script/Engine.SkeletalMeshTerminationCriterion
/// Size: 0x01 (1 bytes)
enum class SkeletalMeshTerminationCriterion : uint8_t
{
	SMTC_NumOfTriangles                                                              = 0,
	SMTC_NumOfVerts                                                                  = 1,
	SMTC_TriangleOrVert                                                              = 2,
	SMTC_AbsNumOfTriangles                                                           = 3,
	SMTC_AbsNumOfVerts                                                               = 4,
	SMTC_AbsTriangleOrVert                                                           = 5
};

/// Enum /Script/Engine.EScaleInheritMode
/// Size: 0x01 (1 bytes)
enum class EScaleInheritMode : uint8_t
{
	EScaleInheritMode__XYZ                                                           = 0,
	EScaleInheritMode__XY                                                            = 1,
	EScaleInheritMode__YZ                                                            = 2,
	EScaleInheritMode__ZX                                                            = 3,
	EScaleInheritMode__X                                                             = 4,
	EScaleInheritMode__Y                                                             = 5,
	EScaleInheritMode__Z                                                             = 6,
	EScaleInheritMode__Local                                                         = 7
};

/// Enum /Script/Engine.EBoneTranslationRetargetingMode
/// Size: 0x01 (1 bytes)
enum class EBoneTranslationRetargetingMode : uint8_t
{
	EBoneTranslationRetargetingMode__Animation                                       = 0,
	EBoneTranslationRetargetingMode__Skeleton                                        = 1,
	EBoneTranslationRetargetingMode__AnimationScaled                                 = 2,
	EBoneTranslationRetargetingMode__AnimationRelative                               = 3,
	EBoneTranslationRetargetingMode__OrientAndScale                                  = 4
};

/// Enum /Script/Engine.ESkinnedMeshBoundsSource
/// Size: 0x01 (1 bytes)
enum class ESkinnedMeshBoundsSource : uint8_t
{
	ESkinnedMeshBoundsSource__UnrecognizedSource                                     = 0,
	ESkinnedMeshBoundsSource__SkeletalMeshBounds                                     = 1,
	ESkinnedMeshBoundsSource__FixedExtendedBounds                                    = 2,
	ESkinnedMeshBoundsSource__MasterPoseFixedExtendedBounds                          = 3,
	ESkinnedMeshBoundsSource__MasterPoseCurrentBounds                                = 4,
	ESkinnedMeshBoundsSource__PhysicsAssetBounds                                     = 5,
	ESkinnedMeshBoundsSource__MasterPosePhysicsAssetBounds                           = 6,
	ESkinnedMeshBoundsSource__FallbackBounds                                         = 7
};

/// Enum /Script/Engine.EVertexOffsetUsageType
/// Size: 0x01 (1 bytes)
enum class EVertexOffsetUsageType : uint8_t
{
	EVertexOffsetUsageType__None                                                     = 0,
	EVertexOffsetUsageType__PreSkinningOffset                                        = 1,
	EVertexOffsetUsageType__PostSkinningOffset                                       = 2
};

/// Enum /Script/Engine.EBoneSpaces
/// Size: 0x01 (1 bytes)
enum class EBoneSpaces : uint8_t
{
	EBoneSpaces__WorldSpace                                                          = 0,
	EBoneSpaces__ComponentSpace                                                      = 1
};

/// Enum /Script/Engine.EVisibilityBasedAnimTickOption
/// Size: 0x01 (1 bytes)
enum class EVisibilityBasedAnimTickOption : uint8_t
{
	EVisibilityBasedAnimTickOption__AlwaysTickPoseAndRefreshBones                    = 0,
	EVisibilityBasedAnimTickOption__AlwaysTickPose                                   = 1,
	EVisibilityBasedAnimTickOption__OnlyTickMontagesWhenNotRendered                  = 2,
	EVisibilityBasedAnimTickOption__OnlyTickPoseWhenRendered                         = 3
};

/// Enum /Script/Engine.EPhysBodyOp
/// Size: 0x01 (1 bytes)
enum class EPhysBodyOp : uint8_t
{
	PBO_None                                                                         = 0,
	PBO_Term                                                                         = 1
};

/// Enum /Script/Engine.EBoneVisibilityStatus
/// Size: 0x01 (1 bytes)
enum class EBoneVisibilityStatus : uint8_t
{
	BVS_HiddenByParent                                                               = 0,
	BVS_Visible                                                                      = 1,
	BVS_ExplicitlyHidden                                                             = 2
};

/// Enum /Script/Engine.ESkyAtmosphereTransformMode
/// Size: 0x01 (1 bytes)
enum class ESkyAtmosphereTransformMode : uint8_t
{
	ESkyAtmosphereTransformMode__PlanetTopAtAbsoluteWorldOrigin                      = 0,
	ESkyAtmosphereTransformMode__PlanetTopAtComponentTransform                       = 1,
	ESkyAtmosphereTransformMode__PlanetCenterAtComponentTransform                    = 2
};

/// Enum /Script/Engine.ESkyLightSourceType
/// Size: 0x01 (1 bytes)
enum class ESkyLightSourceType : uint8_t
{
	SLS_CapturedScene                                                                = 0,
	SLS_SpecifiedCubemap                                                             = 1
};

/// Enum /Script/Engine.EPriorityAttenuationMethod
/// Size: 0x01 (1 bytes)
enum class EPriorityAttenuationMethod : uint8_t
{
	EPriorityAttenuationMethod__Linear                                               = 0,
	EPriorityAttenuationMethod__CustomCurve                                          = 1,
	EPriorityAttenuationMethod__Manual                                               = 2
};

/// Enum /Script/Engine.ESubmixSendMethod
/// Size: 0x01 (1 bytes)
enum class ESubmixSendMethod : uint8_t
{
	ESubmixSendMethod__Linear                                                        = 0,
	ESubmixSendMethod__CustomCurve                                                   = 1,
	ESubmixSendMethod__Manual                                                        = 2
};

/// Enum /Script/Engine.EReverbSendMethod
/// Size: 0x01 (1 bytes)
enum class EReverbSendMethod : uint8_t
{
	EReverbSendMethod__Linear                                                        = 0,
	EReverbSendMethod__CustomCurve                                                   = 1,
	EReverbSendMethod__Manual                                                        = 2
};

/// Enum /Script/Engine.EAirAbsorptionMethod
/// Size: 0x01 (1 bytes)
enum class EAirAbsorptionMethod : uint8_t
{
	EAirAbsorptionMethod__Linear                                                     = 0,
	EAirAbsorptionMethod__CustomCurve                                                = 1
};

/// Enum /Script/Engine.ESoundSpatializationAlgorithm
/// Size: 0x01 (1 bytes)
enum class ESoundSpatializationAlgorithm : uint8_t
{
	SPATIALIZATION_Default                                                           = 0,
	SPATIALIZATION_HRTF                                                              = 1
};

/// Enum /Script/Engine.ESoundDistanceCalc
/// Size: 0x01 (1 bytes)
enum class ESoundDistanceCalc : uint8_t
{
	SOUNDDISTANCE_Normal                                                             = 0,
	SOUNDDISTANCE_InfiniteXYPlane                                                    = 1,
	SOUNDDISTANCE_InfiniteXZPlane                                                    = 2,
	SOUNDDISTANCE_InfiniteYZPlane                                                    = 3
};

/// Enum /Script/Engine.EVirtualizationMode
/// Size: 0x01 (1 bytes)
enum class EVirtualizationMode : uint8_t
{
	EVirtualizationMode__Disabled                                                    = 0,
	EVirtualizationMode__PlayWhenSilent                                              = 1,
	EVirtualizationMode__Restart                                                     = 2
};

/// Enum /Script/Engine.EConcurrencyVolumeScaleMode
/// Size: 0x04 (4 bytes)
enum class EConcurrencyVolumeScaleMode : uint32_t
{
	EConcurrencyVolumeScaleMode__Default                                             = 0,
	EConcurrencyVolumeScaleMode__Distance                                            = 1,
	EConcurrencyVolumeScaleMode__Priority                                            = 2
};

/// Enum /Script/Engine.EMaxConcurrentResolutionRule
/// Size: 0x01 (1 bytes)
enum class EMaxConcurrentResolutionRule : uint8_t
{
	EMaxConcurrentResolutionRule__PreventNew                                         = 0,
	EMaxConcurrentResolutionRule__StopOldest                                         = 1,
	EMaxConcurrentResolutionRule__StopFarthestThenPreventNew                         = 2,
	EMaxConcurrentResolutionRule__StopFarthestThenOldest                             = 3,
	EMaxConcurrentResolutionRule__StopLowestPriority                                 = 4,
	EMaxConcurrentResolutionRule__StopQuietest                                       = 5,
	EMaxConcurrentResolutionRule__StopLowestPriorityThenPreventNew                   = 6,
	EMaxConcurrentResolutionRule__Count                                              = 7
};

/// Enum /Script/Engine.ESoundGroup
/// Size: 0x01 (1 bytes)
enum class ESoundGroup : uint8_t
{
	SOUNDGROUP_Default                                                               = 0,
	SOUNDGROUP_Effects                                                               = 1,
	SOUNDGROUP_UI                                                                    = 2,
	SOUNDGROUP_Music                                                                 = 3,
	SOUNDGROUP_Voice                                                                 = 4,
	SOUNDGROUP_GameSoundGroup1                                                       = 5,
	SOUNDGROUP_GameSoundGroup2                                                       = 6,
	SOUNDGROUP_GameSoundGroup3                                                       = 7,
	SOUNDGROUP_GameSoundGroup4                                                       = 8,
	SOUNDGROUP_GameSoundGroup5                                                       = 9,
	SOUNDGROUP_GameSoundGroup6                                                       = 10,
	SOUNDGROUP_GameSoundGroup7                                                       = 11,
	SOUNDGROUP_GameSoundGroup8                                                       = 12,
	SOUNDGROUP_GameSoundGroup9                                                       = 13,
	SOUNDGROUP_GameSoundGroup10                                                      = 14,
	SOUNDGROUP_GameSoundGroup11                                                      = 15,
	SOUNDGROUP_GameSoundGroup12                                                      = 16,
	SOUNDGROUP_GameSoundGroup13                                                      = 17,
	SOUNDGROUP_GameSoundGroup14                                                      = 18,
	SOUNDGROUP_GameSoundGroup15                                                      = 19,
	SOUNDGROUP_GameSoundGroup16                                                      = 20,
	SOUNDGROUP_GameSoundGroup17                                                      = 21,
	SOUNDGROUP_GameSoundGroup18                                                      = 22,
	SOUNDGROUP_GameSoundGroup19                                                      = 23,
	SOUNDGROUP_GameSoundGroup20                                                      = 24
};

/// Enum /Script/Engine.EModulationRouting
/// Size: 0x01 (1 bytes)
enum class EModulationRouting : uint8_t
{
	EModulationRouting__Disable                                                      = 0,
	EModulationRouting__Inherit                                                      = 1,
	EModulationRouting__Override                                                     = 2
};

/// Enum /Script/Engine.ModulationParamMode
/// Size: 0x01 (1 bytes)
enum class ModulationParamMode : uint8_t
{
	MPM_Normal                                                                       = 0,
	MPM_Abs                                                                          = 1,
	MPM_Direct                                                                       = 2
};

/// Enum /Script/Engine.ESourceBusChannels
/// Size: 0x01 (1 bytes)
enum class ESourceBusChannels : uint8_t
{
	ESourceBusChannels__Mono                                                         = 0,
	ESourceBusChannels__Stereo                                                       = 1
};

/// Enum /Script/Engine.ESourceBusSendLevelControlMethod
/// Size: 0x01 (1 bytes)
enum class ESourceBusSendLevelControlMethod : uint8_t
{
	ESourceBusSendLevelControlMethod__Linear                                         = 0,
	ESourceBusSendLevelControlMethod__CustomCurve                                    = 1,
	ESourceBusSendLevelControlMethod__Manual                                         = 2
};

/// Enum /Script/Engine.EGainParamMode
/// Size: 0x01 (1 bytes)
enum class EGainParamMode : uint8_t
{
	EGainParamMode__Linear                                                           = 0,
	EGainParamMode__Decibels                                                         = 1
};

/// Enum /Script/Engine.EAudioSpectrumType
/// Size: 0x01 (1 bytes)
enum class EAudioSpectrumType : uint8_t
{
	EAudioSpectrumType__MagnitudeSpectrum                                            = 0,
	EAudioSpectrumType__PowerSpectrum                                                = 1,
	EAudioSpectrumType__Decibel                                                      = 2
};

/// Enum /Script/Engine.EFFTWindowType
/// Size: 0x01 (1 bytes)
enum class EFFTWindowType : uint8_t
{
	EFFTWindowType__None                                                             = 0,
	EFFTWindowType__Hamming                                                          = 1,
	EFFTWindowType__Hann                                                             = 2,
	EFFTWindowType__Blackman                                                         = 3
};

/// Enum /Script/Engine.EFFTPeakInterpolationMethod
/// Size: 0x01 (1 bytes)
enum class EFFTPeakInterpolationMethod : uint8_t
{
	EFFTPeakInterpolationMethod__NearestNeighbor                                     = 0,
	EFFTPeakInterpolationMethod__Linear                                              = 1,
	EFFTPeakInterpolationMethod__Quadratic                                           = 2,
	EFFTPeakInterpolationMethod__ConstantQ                                           = 3
};

/// Enum /Script/Engine.EFFTSize
/// Size: 0x01 (1 bytes)
enum class EFFTSize : uint8_t
{
	EFFTSize__DefaultSize                                                            = 0,
	EFFTSize__Min                                                                    = 1,
	EFFTSize__Small                                                                  = 2,
	EFFTSize__Medium                                                                 = 3,
	EFFTSize__Large                                                                  = 4,
	EFFTSize__VeryLarge                                                              = 5,
	EFFTSize__Max                                                                    = 6
};

/// Enum /Script/Engine.ESubmixSendStage
/// Size: 0x01 (1 bytes)
enum class ESubmixSendStage : uint8_t
{
	ESubmixSendStage__PostDistanceAttenuation                                        = 0,
	ESubmixSendStage__PreDistanceAttenuation                                         = 1
};

/// Enum /Script/Engine.ESendLevelControlMethod
/// Size: 0x01 (1 bytes)
enum class ESendLevelControlMethod : uint8_t
{
	ESendLevelControlMethod__Linear                                                  = 0,
	ESendLevelControlMethod__CustomCurve                                             = 1,
	ESendLevelControlMethod__Manual                                                  = 2
};

/// Enum /Script/Engine.EAudioRecordingExportType
/// Size: 0x01 (1 bytes)
enum class EAudioRecordingExportType : uint8_t
{
	EAudioRecordingExportType__SoundWave                                             = 0,
	EAudioRecordingExportType__WavFile                                               = 1
};

/// Enum /Script/Engine.EAudioSpectrumBandPresetType
/// Size: 0x01 (1 bytes)
enum class EAudioSpectrumBandPresetType : uint8_t
{
	EAudioSpectrumBandPresetType__KickDrum                                           = 0,
	EAudioSpectrumBandPresetType__SnareDrum                                          = 1,
	EAudioSpectrumBandPresetType__Voice                                              = 2,
	EAudioSpectrumBandPresetType__Cymbals                                            = 3
};

/// Enum /Script/Engine.ESoundWaveFFTSize
/// Size: 0x01 (1 bytes)
enum class ESoundWaveFFTSize : uint8_t
{
	ESoundWaveFFTSize__VerySmall                                                     = 0,
	ESoundWaveFFTSize__Small                                                         = 1,
	ESoundWaveFFTSize__Medium                                                        = 2,
	ESoundWaveFFTSize__Large                                                         = 3,
	ESoundWaveFFTSize__VeryLarge                                                     = 4
};

/// Enum /Script/Engine.EDecompressionType
/// Size: 0x01 (1 bytes)
enum class EDecompressionType : uint8_t
{
	DTYPE_Setup                                                                      = 0,
	DTYPE_Invalid                                                                    = 1,
	DTYPE_Preview                                                                    = 2,
	DTYPE_Native                                                                     = 3,
	DTYPE_RealTime                                                                   = 4,
	DTYPE_Procedural                                                                 = 5,
	DTYPE_Xenon                                                                      = 6,
	DTYPE_Streaming                                                                  = 7
};

/// Enum /Script/Engine.ESoundWaveLoadingBehavior
/// Size: 0x01 (1 bytes)
enum class ESoundWaveLoadingBehavior : uint8_t
{
	ESoundWaveLoadingBehavior__Inherited                                             = 0,
	ESoundWaveLoadingBehavior__RetainOnLoad                                          = 1,
	ESoundWaveLoadingBehavior__PrimeOnLoad                                           = 2,
	ESoundWaveLoadingBehavior__LoadOnDemand                                          = 3,
	ESoundWaveLoadingBehavior__ForceInline                                           = 4,
	ESoundWaveLoadingBehavior__Uninitialized                                         = 255
};

/// Enum /Script/Engine.ESplineCoordinateSpace
/// Size: 0x01 (1 bytes)
enum class ESplineCoordinateSpace : uint8_t
{
	ESplineCoordinateSpace__Local                                                    = 0,
	ESplineCoordinateSpace__World                                                    = 1
};

/// Enum /Script/Engine.ESplinePointType
/// Size: 0x01 (1 bytes)
enum class ESplinePointType : uint8_t
{
	ESplinePointType__Linear                                                         = 0,
	ESplinePointType__Curve                                                          = 1,
	ESplinePointType__Constant                                                       = 2,
	ESplinePointType__CurveClamped                                                   = 3,
	ESplinePointType__CurveCustomTangent                                             = 4
};

/// Enum /Script/Engine.ESplineMeshAxis
/// Size: 0x01 (1 bytes)
enum class ESplineMeshAxis : uint8_t
{
	ESplineMeshAxis__X                                                               = 0,
	ESplineMeshAxis__Y                                                               = 1,
	ESplineMeshAxis__Z                                                               = 2
};

/// Enum /Script/Engine.EOptimizationType
/// Size: 0x01 (1 bytes)
enum class EOptimizationType : uint8_t
{
	OT_NumOfTriangles                                                                = 0,
	OT_MaxDeviation                                                                  = 1
};

/// Enum /Script/Engine.EImportanceLevel
/// Size: 0x01 (1 bytes)
enum class EImportanceLevel : uint8_t
{
	IL_Off                                                                           = 0,
	IL_Lowest                                                                        = 1,
	IL_Low                                                                           = 2,
	IL_Normal                                                                        = 3,
	IL_High                                                                          = 4,
	IL_Highest                                                                       = 5,
	TEMP_BROKEN2                                                                     = 6
};

/// Enum /Script/Engine.ENormalMode
/// Size: 0x01 (1 bytes)
enum class ENormalMode : uint8_t
{
	NM_PreserveSmoothingGroups                                                       = 0,
	NM_RecalculateNormals                                                            = 1,
	NM_RecalculateNormalsSmooth                                                      = 2,
	NM_RecalculateNormalsHard                                                        = 3,
	TEMP_BROKEN                                                                      = 4
};

/// Enum /Script/Engine.EStereoLayerShape
/// Size: 0x01 (1 bytes)
enum class EStereoLayerShape : uint8_t
{
	SLSH_QuadLayer                                                                   = 0,
	SLSH_CylinderLayer                                                               = 1,
	SLSH_CubemapLayer                                                                = 2,
	SLSH_EquirectLayer                                                               = 3
};

/// Enum /Script/Engine.EStereoLayerType
/// Size: 0x01 (1 bytes)
enum class EStereoLayerType : uint8_t
{
	SLT_WorldLocked                                                                  = 0,
	SLT_TrackerLocked                                                                = 1,
	SLT_FaceLocked                                                                   = 2
};

/// Enum /Script/Engine.EOpacitySourceMode
/// Size: 0x01 (1 bytes)
enum class EOpacitySourceMode : uint8_t
{
	OSM_Alpha                                                                        = 0,
	OSM_ColorBrightness                                                              = 1,
	OSM_RedChannel                                                                   = 2,
	OSM_GreenChannel                                                                 = 3,
	OSM_BlueChannel                                                                  = 4
};

/// Enum /Script/Engine.ESubUVBoundingVertexCount
/// Size: 0x01 (1 bytes)
enum class ESubUVBoundingVertexCount : uint8_t
{
	BVC_FourVertices                                                                 = 0,
	BVC_EightVertices                                                                = 1
};

/// Enum /Script/Engine.EVerticalTextAligment
/// Size: 0x01 (1 bytes)
enum class EVerticalTextAligment : uint8_t
{
	EVRTA_TextTop                                                                    = 0,
	EVRTA_TextCenter                                                                 = 1,
	EVRTA_TextBottom                                                                 = 2,
	EVRTA_QuadTop                                                                    = 3
};

/// Enum /Script/Engine.EHorizTextAligment
/// Size: 0x01 (1 bytes)
enum class EHorizTextAligment : uint8_t
{
	EHTA_Left                                                                        = 0,
	EHTA_Center                                                                      = 1,
	EHTA_Right                                                                       = 2
};

/// Enum /Script/Engine.ETextureLossyCompressionAmount
/// Size: 0x01 (1 bytes)
enum class ETextureLossyCompressionAmount : uint8_t
{
	TLCA_Default                                                                     = 0,
	TLCA_None                                                                        = 1,
	TLCA_Lowest                                                                      = 2,
	TLCA_Low                                                                         = 3,
	TLCA_Medium                                                                      = 4,
	TLCA_High                                                                        = 5,
	TLCA_Highest                                                                     = 6
};

/// Enum /Script/Engine.ETextureCompressionQuality
/// Size: 0x01 (1 bytes)
enum class ETextureCompressionQuality : uint8_t
{
	TCQ_Default                                                                      = 0,
	TCQ_Lowest                                                                       = 1,
	TCQ_Low                                                                          = 2,
	TCQ_Medium                                                                       = 3,
	TCQ_High                                                                         = 4,
	TCQ_Highest                                                                      = 5
};

/// Enum /Script/Engine.ETextureSourceFormat
/// Size: 0x01 (1 bytes)
enum class ETextureSourceFormat : uint8_t
{
	TSF_Invalid                                                                      = 0,
	TSF_G8                                                                           = 1,
	TSF_BGRA8                                                                        = 2,
	TSF_BGRE8                                                                        = 3,
	TSF_RGBA16                                                                       = 4,
	TSF_RGBA16F                                                                      = 5,
	TSF_RGBA8                                                                        = 6,
	TSF_RGBE8                                                                        = 7,
	TSF_G16                                                                          = 8
};

/// Enum /Script/Engine.ETextureSourceArtType
/// Size: 0x01 (1 bytes)
enum class ETextureSourceArtType : uint8_t
{
	TSAT_Uncompressed                                                                = 0,
	TSAT_PNGCompressed                                                               = 1,
	TSAT_DDSFile                                                                     = 2
};

/// Enum /Script/Engine.ETextureMipCount
/// Size: 0x01 (1 bytes)
enum class ETextureMipCount : uint8_t
{
	TMC_ResidentMips                                                                 = 0,
	TMC_AllMips                                                                      = 1,
	TMC_AllMipsBiased                                                                = 2
};

/// Enum /Script/Engine.ECompositeTextureMode
/// Size: 0x01 (1 bytes)
enum class ECompositeTextureMode : uint8_t
{
	CTM_Disabled                                                                     = 0,
	CTM_NormalRoughnessToRed                                                         = 1,
	CTM_NormalRoughnessToGreen                                                       = 2,
	CTM_NormalRoughnessToBlue                                                        = 3,
	CTM_NormalRoughnessToAlpha                                                       = 4,
	CTM_ToonMaskToAlpha                                                              = 5
};

/// Enum /Script/Engine.TextureAddress
/// Size: 0x01 (1 bytes)
enum class TextureAddress : uint8_t
{
	TA_Wrap                                                                          = 0,
	TA_Clamp                                                                         = 1,
	TA_Mirror                                                                        = 2
};

/// Enum /Script/Engine.TextureFilter
/// Size: 0x01 (1 bytes)
enum class TextureFilter : uint8_t
{
	TF_Nearest                                                                       = 0,
	TF_Bilinear                                                                      = 1,
	TF_Trilinear                                                                     = 2,
	TF_Default                                                                       = 3
};

/// Enum /Script/Engine.TextureCompressionSettings
/// Size: 0x01 (1 bytes)
enum class TextureCompressionSettings : uint8_t
{
	TC_Default                                                                       = 0,
	TC_Normalmap                                                                     = 1,
	TC_Masks                                                                         = 2,
	TC_Grayscale                                                                     = 3,
	TC_Displacementmap                                                               = 4,
	TC_VectorDisplacementmap                                                         = 5,
	TC_HDR                                                                           = 6,
	TC_EditorIcon                                                                    = 7,
	TC_Alpha                                                                         = 8,
	TC_DistanceFieldFont                                                             = 9,
	TC_HDR_Compressed                                                                = 10,
	TC_BC7                                                                           = 11,
	TC_HalfFloat                                                                     = 12,
	TC_ReflectionCapture                                                             = 13
};

/// Enum /Script/Engine.ETextureDownscaleOptions
/// Size: 0x01 (1 bytes)
enum class ETextureDownscaleOptions : uint8_t
{
	ETextureDownscaleOptions__Default                                                = 0,
	ETextureDownscaleOptions__Unfiltered                                             = 1,
	ETextureDownscaleOptions__SimpleAverage                                          = 2,
	ETextureDownscaleOptions__Sharpen0                                               = 3,
	ETextureDownscaleOptions__Sharpen1                                               = 4,
	ETextureDownscaleOptions__Sharpen2                                               = 5,
	ETextureDownscaleOptions__Sharpen3                                               = 6,
	ETextureDownscaleOptions__Sharpen4                                               = 7,
	ETextureDownscaleOptions__Sharpen5                                               = 8,
	ETextureDownscaleOptions__Sharpen6                                               = 9,
	ETextureDownscaleOptions__Sharpen7                                               = 10,
	ETextureDownscaleOptions__Sharpen8                                               = 11,
	ETextureDownscaleOptions__Sharpen9                                               = 12,
	ETextureDownscaleOptions__Sharpen10                                              = 13
};

/// Enum /Script/Engine.ETextureMipLoadOptions
/// Size: 0x01 (1 bytes)
enum class ETextureMipLoadOptions : uint8_t
{
	ETextureMipLoadOptions__Default                                                  = 0,
	ETextureMipLoadOptions__AllMips                                                  = 1,
	ETextureMipLoadOptions__OnlyFirstMip                                             = 2
};

/// Enum /Script/Engine.ETextureSamplerFilter
/// Size: 0x01 (1 bytes)
enum class ETextureSamplerFilter : uint8_t
{
	ETextureSamplerFilter__Point                                                     = 0,
	ETextureSamplerFilter__Bilinear                                                  = 1,
	ETextureSamplerFilter__Trilinear                                                 = 2,
	ETextureSamplerFilter__AnisotropicPoint                                          = 3,
	ETextureSamplerFilter__AnisotropicLinear                                         = 4
};

/// Enum /Script/Engine.ETexturePowerOfTwoSetting
/// Size: 0x01 (1 bytes)
enum class ETexturePowerOfTwoSetting : uint8_t
{
	ETexturePowerOfTwoSetting__None                                                  = 0,
	ETexturePowerOfTwoSetting__PadToPowerOfTwo                                       = 1,
	ETexturePowerOfTwoSetting__PadToSquarePowerOfTwo                                 = 2,
	ETexturePowerOfTwoSetting__PadToMutipleOfFour                                    = 3
};

/// Enum /Script/Engine.TextureMipGenSettings
/// Size: 0x01 (1 bytes)
enum class TextureMipGenSettings : uint8_t
{
	TMGS_FromTextureGroup                                                            = 0,
	TMGS_SimpleAverage                                                               = 1,
	TMGS_Sharpen0                                                                    = 2,
	TMGS_Sharpen1                                                                    = 3,
	TMGS_Sharpen2                                                                    = 4,
	TMGS_Sharpen3                                                                    = 5,
	TMGS_Sharpen4                                                                    = 6,
	TMGS_Sharpen5                                                                    = 7,
	TMGS_Sharpen6                                                                    = 8,
	TMGS_Sharpen7                                                                    = 9,
	TMGS_Sharpen8                                                                    = 10,
	TMGS_Sharpen9                                                                    = 11,
	TMGS_Sharpen10                                                                   = 12,
	TMGS_NoMipmaps                                                                   = 13,
	TMGS_LeaveExistingMips                                                           = 14,
	TMGS_Blur1                                                                       = 15,
	TMGS_Blur2                                                                       = 16,
	TMGS_Blur3                                                                       = 17,
	TMGS_Blur4                                                                       = 18,
	TMGS_Blur5                                                                       = 19,
	TMGS_Unfiltered                                                                  = 20,
	TMGS_BuildFromSourceImage                                                        = 21
};

/// Enum /Script/Engine.TextureGroup
/// Size: 0x01 (1 bytes)
enum class TextureGroup : uint8_t
{
	TEXTUREGROUP_World                                                               = 0,
	TEXTUREGROUP_WorldNormalMap                                                      = 1,
	TEXTUREGROUP_WorldSpecular                                                       = 2,
	TEXTUREGROUP_Character                                                           = 3,
	TEXTUREGROUP_CharacterNormalMap                                                  = 4,
	TEXTUREGROUP_CharacterSpecular                                                   = 5,
	TEXTUREGROUP_Weapon                                                              = 6,
	TEXTUREGROUP_WeaponNormalMap                                                     = 7,
	TEXTUREGROUP_WeaponSpecular                                                      = 8,
	TEXTUREGROUP_Vehicle                                                             = 9,
	TEXTUREGROUP_VehicleNormalMap                                                    = 10,
	TEXTUREGROUP_VehicleSpecular                                                     = 11,
	TEXTUREGROUP_Cinematic                                                           = 12,
	TEXTUREGROUP_Effects                                                             = 13,
	TEXTUREGROUP_EffectsNotFiltered                                                  = 14,
	TEXTUREGROUP_Skybox                                                              = 15,
	TEXTUREGROUP_UI                                                                  = 16,
	TEXTUREGROUP_Lightmap                                                            = 17,
	TEXTUREGROUP_RenderTarget                                                        = 18,
	TEXTUREGROUP_MobileFlattened                                                     = 19,
	TEXTUREGROUP_ProcBuilding_Face                                                   = 20,
	TEXTUREGROUP_ProcBuilding_LightMap                                               = 21,
	TEXTUREGROUP_Shadowmap                                                           = 22,
	TEXTUREGROUP_ColorLookupTable                                                    = 23,
	TEXTUREGROUP_Terrain_Heightmap                                                   = 24,
	TEXTUREGROUP_Terrain_Weightmap                                                   = 25,
	TEXTUREGROUP_Bokeh                                                               = 26,
	TEXTUREGROUP_IESLightProfile                                                     = 27,
	TEXTUREGROUP_Pixels2D                                                            = 28,
	TEXTUREGROUP_HierarchicalLOD                                                     = 29,
	TEXTUREGROUP_Impostor                                                            = 30,
	TEXTUREGROUP_ImpostorNormalDepth                                                 = 31,
	TEXTUREGROUP_8BitData                                                            = 32,
	TEXTUREGROUP_16BitData                                                           = 33,
	TEXTUREGROUP_Project01                                                           = 34,
	TEXTUREGROUP_Project02                                                           = 35,
	TEXTUREGROUP_Project03                                                           = 36,
	TEXTUREGROUP_Project04                                                           = 37,
	TEXTUREGROUP_Project05                                                           = 38,
	TEXTUREGROUP_Project06                                                           = 39,
	TEXTUREGROUP_Project07                                                           = 40,
	TEXTUREGROUP_Project08                                                           = 41,
	TEXTUREGROUP_Project09                                                           = 42,
	TEXTUREGROUP_Project10                                                           = 43,
	TEXTUREGROUP_Project11                                                           = 44,
	TEXTUREGROUP_Project12                                                           = 45,
	TEXTUREGROUP_Project13                                                           = 46,
	TEXTUREGROUP_Project14                                                           = 47,
	TEXTUREGROUP_Project15                                                           = 48
};

/// Enum /Script/Engine.ETextureRenderTargetFormat
/// Size: 0x01 (1 bytes)
enum class ETextureRenderTargetFormat : uint8_t
{
	RTF_R8                                                                           = 0,
	RTF_RG8                                                                          = 1,
	RTF_RGBA8                                                                        = 2,
	RTF_RGBA8_SRGB                                                                   = 3,
	RTF_R16f                                                                         = 4,
	RTF_RG16f                                                                        = 5,
	RTF_RGBA16f                                                                      = 6,
	RTF_R32f                                                                         = 7,
	RTF_RG32f                                                                        = 8,
	RTF_RGBA32f                                                                      = 9,
	RTF_RGB10A2                                                                      = 10
};

/// Enum /Script/Engine.ETimecodeProviderSynchronizationState
/// Size: 0x01 (1 bytes)
enum class ETimecodeProviderSynchronizationState : uint8_t
{
	ETimecodeProviderSynchronizationState__Closed                                    = 0,
	ETimecodeProviderSynchronizationState__Error                                     = 1,
	ETimecodeProviderSynchronizationState__Synchronized                              = 2,
	ETimecodeProviderSynchronizationState__Synchronizing                             = 3
};

/// Enum /Script/Engine.ETimelineDirection
/// Size: 0x01 (1 bytes)
enum class ETimelineDirection : uint8_t
{
	ETimelineDirection__Forward                                                      = 0,
	ETimelineDirection__Backward                                                     = 1
};

/// Enum /Script/Engine.ETimelineLengthMode
/// Size: 0x01 (1 bytes)
enum class ETimelineLengthMode : uint8_t
{
	TL_TimelineLength                                                                = 0,
	TL_LastKeyFrame                                                                  = 1
};

/// Enum /Script/Engine.ETimeStretchCurveMapping
/// Size: 0x01 (1 bytes)
enum class ETimeStretchCurveMapping : uint8_t
{
	ETimeStretchCurveMapping__T_Original                                             = 0,
	ETimeStretchCurveMapping__T_TargetMin                                            = 1,
	ETimeStretchCurveMapping__T_TargetMax                                            = 2
};

/// Enum /Script/Engine.ETwitterIntegrationDelegate
/// Size: 0x01 (1 bytes)
enum class ETwitterIntegrationDelegate : uint8_t
{
	TID_AuthorizeComplete                                                            = 0,
	TID_TweetUIComplete                                                              = 1,
	TID_RequestComplete                                                              = 2
};

/// Enum /Script/Engine.ETwitterRequestMethod
/// Size: 0x01 (1 bytes)
enum class ETwitterRequestMethod : uint8_t
{
	TRM_Get                                                                          = 0,
	TRM_Post                                                                         = 1,
	TRM_Delete                                                                       = 2
};

/// Enum /Script/Engine.EUserDefinedStructureStatus
/// Size: 0x01 (1 bytes)
enum class EUserDefinedStructureStatus : uint8_t
{
	UDSS_UpToDate                                                                    = 0,
	UDSS_Dirty                                                                       = 1,
	UDSS_Error                                                                       = 2,
	UDSS_Duplicate                                                                   = 3
};

/// Enum /Script/Engine.EUIScalingRule
/// Size: 0x01 (1 bytes)
enum class EUIScalingRule : uint8_t
{
	EUIScalingRule__ShortestSide                                                     = 0,
	EUIScalingRule__LongestSide                                                      = 1,
	EUIScalingRule__Horizontal                                                       = 2,
	EUIScalingRule__Vertical                                                         = 3,
	EUIScalingRule__ScaleToFit                                                       = 4,
	EUIScalingRule__Custom                                                           = 5
};

/// Enum /Script/Engine.ERenderFocusRule
/// Size: 0x01 (1 bytes)
enum class ERenderFocusRule : uint8_t
{
	ERenderFocusRule__Always                                                         = 0,
	ERenderFocusRule__NonPointer                                                     = 1,
	ERenderFocusRule__NavigationOnly                                                 = 2,
	ERenderFocusRule__Never                                                          = 3
};

/// Enum /Script/Engine.EVectorFieldConstructionOp
/// Size: 0x01 (1 bytes)
enum class EVectorFieldConstructionOp : uint8_t
{
	VFCO_Extrude                                                                     = 0,
	VFCO_Revolve                                                                     = 1
};

/// Enum /Script/Engine.EWindSourceType
/// Size: 0x01 (1 bytes)
enum class EWindSourceType : uint8_t
{
	EWindSourceType__Directional                                                     = 0,
	EWindSourceType__Point                                                           = 1
};

/// Enum /Script/Engine.EWorldPartitionLoadState
/// Size: 0x04 (4 bytes)
enum class EWorldPartitionLoadState : uint32_t
{
	EWorldPartitionLoadState__NormalLoadState                                        = 0,
	EWorldPartitionLoadState__RegionNearLoadState                                    = 1,
	EWorldPartitionLoadState__RegionAllLoadState                                     = 2
};

/// Enum /Script/Engine.ECaveOrRoomLoadType
/// Size: 0x01 (1 bytes)
enum class ECaveOrRoomLoadType : uint8_t
{
	ECaveOrRoomLoadType__HLODGridActor                                               = 0,
	ECaveOrRoomLoadType__HLODActor                                                   = 1,
	ECaveOrRoomLoadType__HLODActorAndGrid                                            = 2,
	ECaveOrRoomLoadType__HLODGridActorNoLoadOverride                                 = 3,
	ECaveOrRoomLoadType__HLODActorNoLoadOverride                                     = 4,
	ECaveOrRoomLoadType__HLODActorAndGridNoLoadOverride                              = 5,
	ECaveOrRoomLoadType__DoNothing                                                   = 6
};

/// Enum /Script/Engine.ELoadPlatfromType
/// Size: 0x01 (1 bytes)
enum class ELoadPlatfromType : uint8_t
{
	ELoadPlatfromType__None                                                          = 0,
	ELoadPlatfromType__Mobile                                                        = 1,
	ELoadPlatfromType__DeskTop                                                       = 2
};

/// Enum /Script/Engine.ECaveOrRoom
/// Size: 0x01 (1 bytes)
enum class ECaveOrRoom : uint8_t
{
	ECaveOrRoom__Cave                                                                = 0,
	ECaveOrRoom__Room                                                                = 1
};

/// Enum /Script/Engine.EWorldPartitionRuntimeCellState
/// Size: 0x01 (1 bytes)
enum class EWorldPartitionRuntimeCellState : uint8_t
{
	EWorldPartitionRuntimeCellState__Unloaded                                        = 0,
	EWorldPartitionRuntimeCellState__Loaded                                          = 1,
	EWorldPartitionRuntimeCellState__Activated                                       = 2
};

/// Enum /Script/Engine.StreamingQualityLevel
/// Size: 0x01 (1 bytes)
enum class StreamingQualityLevel : uint8_t
{
	StreamingQualityLevel__LOW                                                       = 0,
	StreamingQualityLevel__MIDDLE                                                    = 1,
	StreamingQualityLevel__HIGH                                                      = 2
};

/// Enum /Script/Engine.EStreamingSourceTargetState
/// Size: 0x01 (1 bytes)
enum class EStreamingSourceTargetState : uint8_t
{
	EStreamingSourceTargetState__Loaded                                              = 0,
	EStreamingSourceTargetState__Activated                                           = 1
};

/// Enum /Script/Engine.EVolumeTriggerType
/// Size: 0x01 (1 bytes)
enum class EVolumeTriggerType : uint8_t
{
	EVolumeTriggerType__RegionEntrance                                               = 0,
	EVolumeTriggerType__RegionExit                                                   = 1,
	EVolumeTriggerType__Common                                                       = 2
};

/// Enum /Script/Engine.EPSCPoolMethod
/// Size: 0x01 (1 bytes)
enum class EPSCPoolMethod : uint8_t
{
	EPSCPoolMethod__None                                                             = 0,
	EPSCPoolMethod__AutoRelease                                                      = 1,
	EPSCPoolMethod__ManualRelease                                                    = 2,
	EPSCPoolMethod__ManualRelease_OnComplete                                         = 3,
	EPSCPoolMethod__FreeInPool                                                       = 4
};

/// Enum /Script/Engine.EVolumeLightingMethod
/// Size: 0x01 (1 bytes)
enum class EVolumeLightingMethod : uint8_t
{
	VLM_VolumetricLightmap                                                           = 0,
	VLM_SparseVolumeLightingSamples                                                  = 1
};

/// Enum /Script/Engine.EVisibilityAggressiveness
/// Size: 0x01 (1 bytes)
enum class EVisibilityAggressiveness : uint8_t
{
	VIS_LeastAggressive                                                              = 0,
	VIS_ModeratelyAggressive                                                         = 1,
	VIS_MostAggressive                                                               = 2,
	VIS_Max                                                                          = 3,
	VIS_Max5                                                                         = 4
};

/// Enum /Script/UMG.ESlateAccessibleBehavior
/// Size: 0x01 (1 bytes)
enum class ESlateAccessibleBehavior : uint8_t
{
	ESlateAccessibleBehavior__NotAccessible                                          = 0,
	ESlateAccessibleBehavior__Auto                                                   = 1,
	ESlateAccessibleBehavior__Summary                                                = 2,
	ESlateAccessibleBehavior__Custom                                                 = 3,
	ESlateAccessibleBehavior__ToolTip                                                = 4
};

/// Enum /Script/UMG.ESlateVisibility
/// Size: 0x01 (1 bytes)
enum class ESlateVisibility : uint8_t
{
	ESlateVisibility__Visible                                                        = 0,
	ESlateVisibility__Collapsed                                                      = 1,
	ESlateVisibility__Hidden                                                         = 2,
	ESlateVisibility__HitTestInvisible                                               = 3,
	ESlateVisibility__SelfHitTestInvisible                                           = 4
};

/// Enum /Script/UMG.EVirtualKeyboardType
/// Size: 0x01 (1 bytes)
enum class EVirtualKeyboardType : uint8_t
{
	EVirtualKeyboardType__Default                                                    = 0,
	EVirtualKeyboardType__Number                                                     = 1,
	EVirtualKeyboardType__Web                                                        = 2,
	EVirtualKeyboardType__Email                                                      = 3,
	EVirtualKeyboardType__Password                                                   = 4,
	EVirtualKeyboardType__AlphaNumeric                                               = 5
};

/// Enum /Script/UMG.EDragPivot
/// Size: 0x01 (1 bytes)
enum class EDragPivot : uint8_t
{
	EDragPivot__MouseDown                                                            = 0,
	EDragPivot__TopLeft                                                              = 1,
	EDragPivot__TopCenter                                                            = 2,
	EDragPivot__TopRight                                                             = 3,
	EDragPivot__CenterLeft                                                           = 4,
	EDragPivot__CenterCenter                                                         = 5,
	EDragPivot__CenterRight                                                          = 6,
	EDragPivot__BottomLeft                                                           = 7,
	EDragPivot__BottomCenter                                                         = 8,
	EDragPivot__BottomRight                                                          = 9
};

/// Enum /Script/UMG.EDynamicBoxType
/// Size: 0x01 (1 bytes)
enum class EDynamicBoxType : uint8_t
{
	EDynamicBoxType__Horizontal                                                      = 0,
	EDynamicBoxType__Vertical                                                        = 1,
	EDynamicBoxType__Wrap                                                            = 2,
	EDynamicBoxType__VerticalWrap                                                    = 3,
	EDynamicBoxType__Radial                                                          = 4,
	EDynamicBoxType__Overlay                                                         = 5
};

/// Enum /Script/UMG.ESlateSizeRule
/// Size: 0x01 (1 bytes)
enum class ESlateSizeRule : uint8_t
{
	ESlateSizeRule__Automatic                                                        = 0,
	ESlateSizeRule__Fill                                                             = 1
};

/// Enum /Script/UMG.EUMGSequencePlayMode
/// Size: 0x01 (1 bytes)
enum class EUMGSequencePlayMode : uint8_t
{
	EUMGSequencePlayMode__Forward                                                    = 0,
	EUMGSequencePlayMode__Reverse                                                    = 1,
	EUMGSequencePlayMode__PingPong                                                   = 2
};

/// Enum /Script/UMG.EWidgetAnimationEvent
/// Size: 0x01 (1 bytes)
enum class EWidgetAnimationEvent : uint8_t
{
	EWidgetAnimationEvent__Started                                                   = 0,
	EWidgetAnimationEvent__Finished                                                  = 1
};

/// Enum /Script/UMG.EWidgetTickFrequency
/// Size: 0x01 (1 bytes)
enum class EWidgetTickFrequency : uint8_t
{
	EWidgetTickFrequency__Never                                                      = 0,
	EWidgetTickFrequency__Auto                                                       = 1
};

/// Enum /Script/UMG.EWidgetDesignFlags
/// Size: 0x01 (1 bytes)
enum class EWidgetDesignFlags : uint8_t
{
	EWidgetDesignFlags__None                                                         = 0,
	EWidgetDesignFlags__Designing                                                    = 1,
	EWidgetDesignFlags__ShowOutline                                                  = 2,
	EWidgetDesignFlags__ExecutePreConstruct                                          = 4
};

/// Enum /Script/UMG.EBindingKind
/// Size: 0x01 (1 bytes)
enum class EBindingKind : uint8_t
{
	EBindingKind__Function                                                           = 0,
	EBindingKind__Property                                                           = 1
};

/// Enum /Script/UMG.ETickMode
/// Size: 0x01 (1 bytes)
enum class ETickMode : uint8_t
{
	ETickMode__Disabled                                                              = 0,
	ETickMode__Enabled                                                               = 1,
	ETickMode__Automatic                                                             = 2
};

/// Enum /Script/UMG.EWindowVisibility
/// Size: 0x01 (1 bytes)
enum class EWindowVisibility : uint8_t
{
	EWindowVisibility__Visible                                                       = 0,
	EWindowVisibility__SelfHitTestInvisible                                          = 1
};

/// Enum /Script/UMG.EWidgetGeometryMode
/// Size: 0x01 (1 bytes)
enum class EWidgetGeometryMode : uint8_t
{
	EWidgetGeometryMode__Plane                                                       = 0,
	EWidgetGeometryMode__Cylinder                                                    = 1
};

/// Enum /Script/UMG.EWidgetBlendMode
/// Size: 0x01 (1 bytes)
enum class EWidgetBlendMode : uint8_t
{
	EWidgetBlendMode__Opaque                                                         = 0,
	EWidgetBlendMode__Masked                                                         = 1,
	EWidgetBlendMode__Transparent                                                    = 2
};

/// Enum /Script/UMG.EWidgetTimingPolicy
/// Size: 0x01 (1 bytes)
enum class EWidgetTimingPolicy : uint8_t
{
	EWidgetTimingPolicy__RealTime                                                    = 0,
	EWidgetTimingPolicy__GameTime                                                    = 1
};

/// Enum /Script/UMG.EWidgetSpace
/// Size: 0x01 (1 bytes)
enum class EWidgetSpace : uint8_t
{
	EWidgetSpace__World                                                              = 0,
	EWidgetSpace__Screen                                                             = 1
};

/// Enum /Script/UMG.EWidgetInteractionSource
/// Size: 0x01 (1 bytes)
enum class EWidgetInteractionSource : uint8_t
{
	EWidgetInteractionSource__World                                                  = 0,
	EWidgetInteractionSource__Mouse                                                  = 1,
	EWidgetInteractionSource__CenterScreen                                           = 2,
	EWidgetInteractionSource__Custom                                                 = 3
};

/// Enum /Script/MovieScene.EMovieSceneKeyInterpolation
/// Size: 0x01 (1 bytes)
enum class EMovieSceneKeyInterpolation : uint8_t
{
	EMovieSceneKeyInterpolation__Auto                                                = 0,
	EMovieSceneKeyInterpolation__User                                                = 1,
	EMovieSceneKeyInterpolation__Break                                               = 2,
	EMovieSceneKeyInterpolation__Linear                                              = 3,
	EMovieSceneKeyInterpolation__Constant                                            = 4
};

/// Enum /Script/MovieScene.EMovieSceneBlendType
/// Size: 0x01 (1 bytes)
enum class EMovieSceneBlendType : uint8_t
{
	EMovieSceneBlendType__Invalid                                                    = 0,
	EMovieSceneBlendType__Absolute                                                   = 1,
	EMovieSceneBlendType__Additive                                                   = 2,
	EMovieSceneBlendType__Relative                                                   = 4,
	EMovieSceneBlendType__AdditiveFromBase                                           = 8
};

/// Enum /Script/MovieScene.EMovieSceneCompletionMode
/// Size: 0x01 (1 bytes)
enum class EMovieSceneCompletionMode : uint8_t
{
	EMovieSceneCompletionMode__KeepState                                             = 0,
	EMovieSceneCompletionMode__RestoreState                                          = 1,
	EMovieSceneCompletionMode__ProjectDefault                                        = 2
};

/// Enum /Script/MovieScene.EMovieSceneBuiltInEasing
/// Size: 0x01 (1 bytes)
enum class EMovieSceneBuiltInEasing : uint8_t
{
	EMovieSceneBuiltInEasing__Linear                                                 = 0,
	EMovieSceneBuiltInEasing__SinIn                                                  = 1,
	EMovieSceneBuiltInEasing__SinOut                                                 = 2,
	EMovieSceneBuiltInEasing__SinInOut                                               = 3,
	EMovieSceneBuiltInEasing__QuadIn                                                 = 4,
	EMovieSceneBuiltInEasing__QuadOut                                                = 5,
	EMovieSceneBuiltInEasing__QuadInOut                                              = 6,
	EMovieSceneBuiltInEasing__CubicIn                                                = 7,
	EMovieSceneBuiltInEasing__CubicOut                                               = 8,
	EMovieSceneBuiltInEasing__CubicInOut                                             = 9,
	EMovieSceneBuiltInEasing__QuartIn                                                = 10,
	EMovieSceneBuiltInEasing__QuartOut                                               = 11,
	EMovieSceneBuiltInEasing__QuartInOut                                             = 12,
	EMovieSceneBuiltInEasing__QuintIn                                                = 13,
	EMovieSceneBuiltInEasing__QuintOut                                               = 14,
	EMovieSceneBuiltInEasing__QuintInOut                                             = 15,
	EMovieSceneBuiltInEasing__ExpoIn                                                 = 16,
	EMovieSceneBuiltInEasing__ExpoOut                                                = 17,
	EMovieSceneBuiltInEasing__ExpoInOut                                              = 18,
	EMovieSceneBuiltInEasing__CircIn                                                 = 19,
	EMovieSceneBuiltInEasing__CircOut                                                = 20,
	EMovieSceneBuiltInEasing__CircInOut                                              = 21
};

/// Enum /Script/MovieScene.EEvaluationMethod
/// Size: 0x01 (1 bytes)
enum class EEvaluationMethod : uint8_t
{
	EEvaluationMethod__Static                                                        = 0,
	EEvaluationMethod__Swept                                                         = 1
};

/// Enum /Script/MovieScene.EMovieSceneSequenceFlags
/// Size: 0x01 (1 bytes)
enum class EMovieSceneSequenceFlags : uint8_t
{
	EMovieSceneSequenceFlags__None                                                   = 0,
	EMovieSceneSequenceFlags__Volatile                                               = 1,
	EMovieSceneSequenceFlags__BlockingEvaluation                                     = 2,
	EMovieSceneSequenceFlags__InheritedFlags                                         = 1
};

/// Enum /Script/MovieScene.EUpdateClockSource
/// Size: 0x01 (1 bytes)
enum class EUpdateClockSource : uint8_t
{
	EUpdateClockSource__Tick                                                         = 0,
	EUpdateClockSource__Platform                                                     = 1,
	EUpdateClockSource__Audio                                                        = 2,
	EUpdateClockSource__RelativeTimecode                                             = 3,
	EUpdateClockSource__Timecode                                                     = 4,
	EUpdateClockSource__Custom                                                       = 5
};

/// Enum /Script/MovieScene.EMovieSceneEvaluationType
/// Size: 0x01 (1 bytes)
enum class EMovieSceneEvaluationType : uint8_t
{
	EMovieSceneEvaluationType__FrameLocked                                           = 0,
	EMovieSceneEvaluationType__WithSubFrames                                         = 1
};

/// Enum /Script/MovieScene.EMovieScenePlayerStatus
/// Size: 0x01 (1 bytes)
enum class EMovieScenePlayerStatus : uint8_t
{
	EMovieScenePlayerStatus__Stopped                                                 = 0,
	EMovieScenePlayerStatus__Playing                                                 = 1,
	EMovieScenePlayerStatus__Recording                                               = 2,
	EMovieScenePlayerStatus__Scrubbing                                               = 3,
	EMovieScenePlayerStatus__Jumping                                                 = 4,
	EMovieScenePlayerStatus__Stepping                                                = 5,
	EMovieScenePlayerStatus__Paused                                                  = 6
};

/// Enum /Script/MovieScene.EMovieSceneObjectBindingSpace
/// Size: 0x01 (1 bytes)
enum class EMovieSceneObjectBindingSpace : uint8_t
{
	EMovieSceneObjectBindingSpace__Local                                             = 0,
	EMovieSceneObjectBindingSpace__Root                                              = 1
};

/// Enum /Script/MovieScene.ESectionEvaluationFlags
/// Size: 0x01 (1 bytes)
enum class ESectionEvaluationFlags : uint8_t
{
	ESectionEvaluationFlags__None                                                    = 0,
	ESectionEvaluationFlags__PreRoll                                                 = 1,
	ESectionEvaluationFlags__PostRoll                                                = 2
};

/// Enum /Script/MovieScene.EMovieScenePositionType
/// Size: 0x01 (1 bytes)
enum class EMovieScenePositionType : uint8_t
{
	EMovieScenePositionType__Frame                                                   = 0,
	EMovieScenePositionType__Time                                                    = 1,
	EMovieScenePositionType__MarkedFrame                                             = 2
};

/// Enum /Script/MovieScene.EUpdatePositionMethod
/// Size: 0x01 (1 bytes)
enum class EUpdatePositionMethod : uint8_t
{
	EUpdatePositionMethod__Play                                                      = 0,
	EUpdatePositionMethod__Jump                                                      = 1,
	EUpdatePositionMethod__Scrub                                                     = 2
};

/// Enum /Script/MovieScene.ESpawnOwnership
/// Size: 0x01 (1 bytes)
enum class ESpawnOwnership : uint8_t
{
	ESpawnOwnership__InnerSequence                                                   = 0,
	ESpawnOwnership__MasterSequence                                                  = 1,
	ESpawnOwnership__External                                                        = 2
};

/// Enum /Script/MovieSceneTracks.MovieScene3DPathSection_Axis
/// Size: 0x01 (1 bytes)
enum class MovieScene3DPathSection_Axis : uint8_t
{
	MovieScene3DPathSection_Axis__X                                                  = 0,
	MovieScene3DPathSection_Axis__Y                                                  = 1,
	MovieScene3DPathSection_Axis__Z                                                  = 2,
	MovieScene3DPathSection_Axis__NEG_X                                              = 3,
	MovieScene3DPathSection_Axis__NEG_Y                                              = 4,
	MovieScene3DPathSection_Axis__NEG_Z                                              = 5
};

/// Enum /Script/MovieSceneTracks.EMovieSceneTransformChannel
/// Size: 0x02 (2 bytes)
enum class EMovieSceneTransformChannel : uint16_t
{
	EMovieSceneTransformChannel__None                                                = 0,
	EMovieSceneTransformChannel__TranslationX                                        = 1,
	EMovieSceneTransformChannel__TranslationY                                        = 2,
	EMovieSceneTransformChannel__TranslationZ                                        = 4,
	EMovieSceneTransformChannel__Translation                                         = 7,
	EMovieSceneTransformChannel__RotationX                                           = 8,
	EMovieSceneTransformChannel__RotationY                                           = 16,
	EMovieSceneTransformChannel__RotationZ                                           = 32,
	EMovieSceneTransformChannel__Rotation                                            = 56,
	EMovieSceneTransformChannel__ScaleX                                              = 64,
	EMovieSceneTransformChannel__ScaleY                                              = 128,
	EMovieSceneTransformChannel__ScaleZ                                              = 256,
	EMovieSceneTransformChannel__Scale                                               = 448,
	EMovieSceneTransformChannel__AllTransform                                        = 511,
	EMovieSceneTransformChannel__Weight                                              = 512,
	EMovieSceneTransformChannel__All                                                 = 1023
};

/// Enum /Script/MovieSceneTracks.EFireEventsAtPosition
/// Size: 0x01 (1 bytes)
enum class EFireEventsAtPosition : uint8_t
{
	EFireEventsAtPosition__AtStartOfEvaluation                                       = 0,
	EFireEventsAtPosition__AtEndOfEvaluation                                         = 1,
	EFireEventsAtPosition__AfterSpawn                                                = 2
};

/// Enum /Script/MovieSceneTracks.ELevelVisibility
/// Size: 0x01 (1 bytes)
enum class ELevelVisibility : uint8_t
{
	ELevelVisibility__Visible                                                        = 0,
	ELevelVisibility__Hidden                                                         = 1
};

/// Enum /Script/MovieSceneTracks.EParticleKey
/// Size: 0x01 (1 bytes)
enum class EParticleKey : uint8_t
{
	EParticleKey__Activate                                                           = 0,
	EParticleKey__Deactivate                                                         = 1,
	EParticleKey__Trigger                                                            = 2
};

/// Struct /Script/Engine.TickFunction
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FTickFunction
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	TEnumAsByte<ETickingGroup>                         TickGroup;                                                  // 0x0008   (0x0001)  
	TEnumAsByte<ETickingGroup>                         EndTickGroup;                                               // 0x0009   (0x0001)  
	bool                                               bTickEvenWhenPaused : 1;                                    // 0x000A:0 (0x0001)  
	bool                                               bCanEverTick : 1;                                           // 0x000A:1 (0x0001)  
	bool                                               bStartWithTickEnabled : 1;                                  // 0x000A:2 (0x0001)  
	bool                                               bAllowTickOnDedicatedServer : 1;                            // 0x000A:3 (0x0001)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x000B   (0x0001)  MISSED
	float                                              TickInterval;                                               // 0x000C   (0x0004)  
	unsigned char                                      UnknownData02_7[0x18];                                      // 0x0010   (0x0018)  MISSED
};

/// Struct /Script/Engine.ActorComponentTickFunction
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
struct FActorComponentTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.SimpleMemberReference
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FSimpleMemberReference
{ 
	class UObject*                                     MemberParent;                                               // 0x0000   (0x0008)  
	FName                                              MemberName;                                                 // 0x0008   (0x000C)  
	FGuid                                              MemberGuid;                                                 // 0x0014   (0x0010)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Class /Script/Engine.ActorComponent
/// Size: 0x0090 (144 bytes) (0x000030 - 0x0000C0) align 8 pad: 0x0000
class UActorComponent : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0030   (0x0008)  MISSED
	FActorComponentTickFunction                        PrimaryComponentTick;                                       // 0x0038   (0x0030)  
	TArray<FName>                                      ComponentTags;                                              // 0x0068   (0x0010)  
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0078   (0x0010)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0088   (0x0004)  MISSED
	int32_t                                            UCSSerializationIndex;                                      // 0x008C   (0x0004)  
	unsigned char                                      UnknownBit02 : 1;                                           // 0x0090:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit03 : 1;                                           // 0x0090:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit04 : 1;                                           // 0x0090:2 (0x0001)  MISSED
	bool                                               bNetAddressable : 1;                                        // 0x0090:3 (0x0001)  
	bool                                               bReplicates : 1;                                            // 0x0090:4 (0x0001)  
	unsigned char                                      UnknownBit05 : 1;                                           // 0x0090:5 (0x0001)  MISSED
	unsigned char                                      UnknownBit06 : 1;                                           // 0x0090:6 (0x0001)  MISSED
	unsigned char                                      UnknownBit07 : 1;                                           // 0x0090:7 (0x0001)  MISSED
	unsigned char                                      UnknownBit08 : 1;                                           // 0x0091:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit09 : 1;                                           // 0x0091:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit10 : 1;                                           // 0x0091:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit11 : 1;                                           // 0x0091:3 (0x0001)  MISSED
	unsigned char                                      UnknownBit12 : 1;                                           // 0x0091:4 (0x0001)  MISSED
	unsigned char                                      UnknownBit13 : 1;                                           // 0x0091:5 (0x0001)  MISSED
	unsigned char                                      UnknownBit14 : 1;                                           // 0x0091:6 (0x0001)  MISSED
	bool                                               bAutoActivate : 1;                                          // 0x0091:7 (0x0001)  
	bool                                               bIsActive : 1;                                              // 0x0092:0 (0x0001)  
	bool                                               bEditableWhenInherited : 1;                                 // 0x0092:1 (0x0001)  
	unsigned char                                      UnknownBit15 : 1;                                           // 0x0092:2 (0x0001)  MISSED
	bool                                               bCanEverAffectNavigation : 1;                               // 0x0092:3 (0x0001)  
	unsigned char                                      UnknownBit16 : 1;                                           // 0x0092:4 (0x0001)  MISSED
	bool                                               bIsEditorOnly : 1;                                          // 0x0092:5 (0x0001)  
	bool                                               bEnableCreatePhysicsStateDebugLog : 1;                      // 0x0092:6 (0x0001)  
	unsigned char                                      UnknownBit17 : 1;                                           // 0x0092:7 (0x0001)  MISSED
	bool                                               bEnableAutoPhysicsSplit : 1;                                // 0x0093:0 (0x0001)  
	unsigned char                                      UnknownData18_5[0x1];                                       // 0x0094   (0x0001)  MISSED
	EComponentCreationMethod                           CreationMethod;                                             // 0x0095   (0x0001)  
	SDK_UNDEFINED(1,6) /* FMulticastSparseDelegate */  __um(OnComponentActivated);                                 // 0x0096   (0x0001)  
	SDK_UNDEFINED(1,7) /* FMulticastSparseDelegate */  __um(OnComponentDeactivated);                               // 0x0097   (0x0001)  
	TArray<FSimpleMemberReference>                     UCSModifiedProperties;                                      // 0x0098   (0x0010)  
	unsigned char                                      UnknownData19_7[0x18];                                      // 0x00A8   (0x0018)  MISSED
	// void ToggleActive();                                                                                                     // [0x1773580] Native|Public|BlueprintCallable 
	// void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);                                                              // [0x45c6010] Final|Native|Public|BlueprintCallable 
	// void SetTickableWhenPaused(bool bTickableWhenPaused);                                                                    // [0x45c6090] Final|Native|Public|BlueprintCallable 
	// void SetKuroOnlyTickOutside(bool OnlyTickOutside);                                                                       // [0x45c5f80] Final|Native|Public|BlueprintCallable 
	// void SetIsReplicated(bool ShouldReplicate);                                                                              // [0x45c5ef0] Final|Native|Public|BlueprintCallable 
	// void SetComponentTickIntervalAndCooldown(float TickInterval);                                                            // [0x45c5e70] Final|Native|Public|BlueprintCallable 
	// void SetComponentTickInterval(float TickInterval);                                                                       // [0x45c5df0] Final|Native|Public|BlueprintCallable 
	// void SetComponentTickEnabled(bool bEnabled);                                                                             // [0x45c5d60] Native|Public|BlueprintCallable 
	// void SetAutoActivate(bool bNewAutoActivate);                                                                             // [0x45c24c0] Native|Public|BlueprintCallable 
	// void SetActive(bool bNewActive, bool bReset);                                                                            // [0x45c5c80] Native|Public|BlueprintCallable 
	// void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);                                      // [0x45c5bf0] Native|Public|BlueprintCallable 
	// void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);                                                       // [0x45c5b60] Native|Public|BlueprintCallable 
	// void ReceiveTick(float DeltaSeconds);                                                                                    // [0x25a7960] Event|Public|BlueprintEvent 
	// void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);                                                          // [0x25a7960] Event|Public|BlueprintEvent 
	// void ReceiveBeginPlay();                                                                                                 // [0x25a7960] Event|Public|BlueprintEvent 
	// void OnRep_IsActive();                                                                                                   // [0x14b2530] Native|Public        
	// void KuroTickComponentOutside(float DeltaSeconds);                                                                       // [0x45c5a60] Final|Native|Public|BlueprintCallable 
	// void KuroDestroyPhysicsState();                                                                                          // [0x45c5a40] Final|Native|Public|BlueprintCallable 
	// void KuroCreatePhysicsState(bool bAllowDeferral);                                                                        // [0x45c59b0] Final|Native|Public|BlueprintCallable 
	// void K2_DestroyComponent(class UObject* Object);                                                                         // [0x45c5920] Final|Native|Public|BlueprintCallable 
	// bool IsComponentTickEnabled();                                                                                           // [0x45c58f0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsBeingDestroyed();                                                                                                 // [0x45c58c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsActive();                                                                                                         // [0x45c5890] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class AActor* GetOwner();                                                                                                // [0x45c5870] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetComponentTickInterval();                                                                                        // [0x45c5840] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void Deactivate();                                                                                                       // [0x3633570] Native|Public|BlueprintCallable 
	// bool ComponentHasTag(FName Tag);                                                                                         // [0x45c55f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);                                         // [0x45c5490] Native|Public|BlueprintCallable 
	// void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);                                                          // [0x45c5400] Native|Public|BlueprintCallable 
	// void Activate(bool bReset);                                                                                              // [0x14b3b90] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SceneComponent
/// Size: 0x0160 (352 bytes) (0x0000C0 - 0x000220) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class USceneComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00C0   (0x0008)  MISSED
	SDK_UNDEFINED(8,8) /* TWeakObjectPtr<APhysicsVolume*> */ __um(PhysicsVolume);                                  // 0x00C8   (0x0008)  
	class USceneComponent*                             AttachParent;                                               // 0x00D0   (0x0008)  
	FName                                              AttachSocketName;                                           // 0x00D8   (0x000C)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00E4   (0x0004)  MISSED
	TArray<class USceneComponent*>                     AttachChildren;                                             // 0x00E8   (0x0010)  
	TArray<class USceneComponent*>                     ClientAttachedChildren;                                     // 0x00F8   (0x0010)  
	unsigned char                                      UnknownData02_6[0x18];                                      // 0x0108   (0x0018)  MISSED
	FBoxSphereBounds                                   Bounds;                                                     // 0x0120   (0x001C)  
	FVector                                            RelativeLocation;                                           // 0x013C   (0x000C)  
	FRotator                                           RelativeRotation;                                           // 0x0148   (0x000C)  
	FVector                                            RelativeScale3D;                                            // 0x0154   (0x000C)  
	FVector                                            ComponentVelocity;                                          // 0x0160   (0x000C)  
	bool                                               bKuroMoveDebugLog;                                          // 0x016C   (0x0001)  
	unsigned char                                      UnknownData03_6[0x1];                                       // 0x016D   (0x0001)  MISSED
	bool                                               bComponentToWorldUpdated : 1;                               // 0x016E:0 (0x0001)  
	unsigned char                                      UnknownBit04 : 1;                                           // 0x016E:1 (0x0001)  MISSED
	bool                                               bAbsoluteLocation : 1;                                      // 0x016E:2 (0x0001)  
	bool                                               bAbsoluteRotation : 1;                                      // 0x016E:3 (0x0001)  
	bool                                               bAbsoluteScale : 1;                                         // 0x016E:4 (0x0001)  
	bool                                               bVisible : 1;                                               // 0x016E:5 (0x0001)  
	bool                                               bShouldBeAttached : 1;                                      // 0x016E:6 (0x0001)  
	bool                                               bShouldSnapLocationWhenAttached : 1;                        // 0x016E:7 (0x0001)  
	bool                                               bShouldSnapRotationWhenAttached : 1;                        // 0x016F:0 (0x0001)  
	bool                                               bShouldUpdatePhysicsVolume : 1;                             // 0x016F:1 (0x0001)  
	bool                                               bHiddenInGame : 1;                                          // 0x016F:2 (0x0001)  
	bool                                               bBoundsChangeTriggersStreamingDataRebuild : 1;              // 0x016F:3 (0x0001)  
	bool                                               bUseAttachParentBound : 1;                                  // 0x016F:4 (0x0001)  
	unsigned char                                      UnknownData05_5[0x1];                                       // 0x0170   (0x0001)  MISSED
	TEnumAsByte<EComponentMobility>                    Mobility;                                                   // 0x0171   (0x0001)  
	TEnumAsByte<EDetailMode>                           DetailMode;                                                 // 0x0172   (0x0001)  
	SDK_UNDEFINED(1,9) /* FMulticastSparseDelegate */  __um(PhysicsVolumeChangedDelegate);                         // 0x0173   (0x0001)  
	unsigned char                                      UnknownData06_7[0xA4];                                      // 0x0174   (0x00A4)  MISSED
	// void ToggleVisibility(bool bPropagateToChildren);                                                                        // [0x472d270] Final|Native|Public|BlueprintCallable 
	// bool SnapTo(class USceneComponent* InParent, FName InSocketName);                                                        // [0x472d180] Final|Native|Public|BlueprintCallable 
	// void SetWorldScale3D(FVector NewScale);                                                                                  // [0x472cf90] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);                                                      // [0x472cec0] Final|Native|Public|BlueprintCallable 
	// void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);                                                    // [0x472ce30] Final|Native|Public|BlueprintCallable 
	// void SetRelativeScale3D(FVector NewScale3D);                                                                             // [0x472cda0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetMobility(TEnumAsByte<EComponentMobility> NewMobility);                                                           // [0x472cd20] Native|Public|BlueprintCallable 
	// void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);                                                         // [0x472cc50] Final|Native|Public|BlueprintCallable 
	// void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);                          // [0x472ca90] Final|Native|Public|BlueprintCallable 
	// void ResetRelativeTransform();                                                                                           // [0x472ca70] Final|Native|Public|BlueprintCallable 
	// void OnRep_Visibility(bool OldValue);                                                                                    // [0x472c880] Final|Native|Private 
	// void OnRep_Transform();                                                                                                  // [0x472c860] Final|Native|Private 
	// void OnRep_AttachSocketName();                                                                                           // [0x472c840] Final|Native|Private 
	// void OnRep_AttachParent();                                                                                               // [0x472c840] Final|Native|Private 
	// void OnRep_AttachChildren();                                                                                             // [0x472c820] Final|Native|Private 
	// void KuroRefreshCacheLocalTransform();                                                                                   // [0x472c800] Final|Native|Public|BlueprintCallable 
	// void K2_SetWorldTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);            // [0x472c5f0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void K2_SetWorldRotation(FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);                 // [0x472c440] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void K2_SetWorldLocationAndRotation(FVector NewLocation, FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x472c230] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void K2_SetWorldLocation(FVector NewLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);                  // [0x472c080] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void K2_SetRelativeTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);         // [0x472be70] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void K2_SetRelativeRotation(FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);              // [0x472bcc0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void K2_SetRelativeLocationAndRotation(FVector NewLocation, FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x472bab0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void K2_SetRelativeLocation(FVector NewLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);               // [0x472b900] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// FTransform K2_GetComponentToWorld();                                                                                     // [0x472b8a0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector K2_GetComponentScale();                                                                                          // [0x472b860] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FRotator K2_GetComponentRotation();                                                                                      // [0x472b820] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FQuat K2_GetComponentQuaternion();                                                                                       // [0x472b7e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector K2_GetComponentLocation();                                                                                       // [0x472b7a0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// void K2_DetachFromComponent(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule, bool bCallModify); // [0x472b640] Final|Native|Public|BlueprintCallable 
	// bool K2_AttachToComponent(class USceneComponent* Parent, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // [0x472b450] Final|Native|Public|BlueprintCallable 
	// bool K2_AttachTo(class USceneComponent* InParent, FName InSocketName, TEnumAsByte<EAttachLocation> AttachType, bool bWeldSimulatedBodies); // [0x472b2c0] Final|Native|Public|BlueprintCallable 
	// void K2_AddWorldTransformKeepScale(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x472b0b0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void K2_AddWorldTransform(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);          // [0x472aea0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void K2_AddWorldRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);               // [0x472acf0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void K2_AddWorldOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);                  // [0x472ab40] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void K2_AddRelativeRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);            // [0x472a990] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void K2_AddRelativeLocation(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);             // [0x472a7e0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void K2_AddLocalTransform(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);          // [0x472a5d0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void K2_AddLocalRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);               // [0x472a420] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void K2_AddLocalOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);                  // [0x472a270] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool IsVisible();                                                                                                        // [0x472a240] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsSimulatingPhysics(FName BoneName);                                                                                // [0x472a180] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsAttachedTo(class USceneComponent* TestComp);                                                                      // [0x472a0e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsAnySimulatingPhysics();                                                                                           // [0x472a0b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector GetUpVector();                                                                                                   // [0x4729f10] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FTransform GetSocketTransform(FName InSocketName, TEnumAsByte<ERelativeTransformSpace> TransformSpace);                  // [0x4729de0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FRotator GetSocketRotation(FName InSocketName);                                                                          // [0x4729d10] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FQuat GetSocketQuaternion(FName InSocketName);                                                                           // [0x4729c50] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetSocketLocation(FName InSocketName);                                                                           // [0x4729b80] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// bool GetShouldUpdatePhysicsVolume();                                                                                     // [0x4729b50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector GetRightVector();                                                                                                // [0x4729b10] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FTransform GetRelativeTransform();                                                                                       // [0x4729ab0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// class APhysicsVolume* GetPhysicsVolume();                                                                                // [0x4729a80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void GetParentComponents(TArray<USceneComponent*>& Parents);                                                             // [0x47299d0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetNumChildrenComponents();                                                                                      // [0x47299a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector GetForwardVector();                                                                                              // [0x46fe7f0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetComponentVelocity();                                                                                          // [0x4729960] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// void GetChildrenComponents(bool bIncludeAllDescendants, TArray<USceneComponent*>& Children);                             // [0x4729860] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// class USceneComponent* GetChildComponent(int32_t ChildIndex);                                                            // [0x47297c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FName GetAttachSocketName();                                                                                             // [0x4729790] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class USceneComponent* GetAttachParent();                                                                                // [0x3d17df0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// TArray<FName> GetAllSocketNames();                                                                                       // [0x4729710] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool DoesSocketExist(FName InSocketName);                                                                                // [0x4729650] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);                                                    // [0x4729570] Native|Public|BlueprintCallable 
};
#pragma pack(pop)

/// Struct /Script/Engine.KeyHandleMap
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 pad: 0x0000
struct FKeyHandleMap
{ 
	unsigned char                                      UnknownData00_2[0x60];                                      // 0x0000   (0x0060)  MISSED
};

/// Struct /Script/Engine.IndexedCurve
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align 8 pad: 0x0000
struct FIndexedCurve
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	FKeyHandleMap                                      KeyHandlesToIndices;                                        // 0x0008   (0x0060)  
};

/// Struct /Script/Engine.RealCurve
/// Size: 0x0008 (8 bytes) (0x000068 - 0x000070) align 8 pad: 0x0000
struct FRealCurve : FIndexedCurve
{ 
	float                                              DefaultValue;                                               // 0x0068   (0x0004)  
	TEnumAsByte<ERichCurveExtrapolation>               PreInfinityExtrap;                                          // 0x006C   (0x0001)  
	TEnumAsByte<ERichCurveExtrapolation>               PostInfinityExtrap;                                         // 0x006D   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x006E   (0x0002)  MISSED
};

/// Struct /Script/Engine.RichCurveKey
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FRichCurveKey
{ 
	TEnumAsByte<ERichCurveInterpMode>                  InterpMode;                                                 // 0x0000   (0x0001)  
	TEnumAsByte<ERichCurveTangentMode>                 TangentMode;                                                // 0x0001   (0x0001)  
	TEnumAsByte<ERichCurveTangentWeightMode>           TangentWeightMode;                                          // 0x0002   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0003   (0x0001)  MISSED
	float                                              Time;                                                       // 0x0004   (0x0004)  
	float                                              Value;                                                      // 0x0008   (0x0004)  
	float                                              ArriveTangent;                                              // 0x000C   (0x0004)  
	float                                              ArriveTangentWeight;                                        // 0x0010   (0x0004)  
	float                                              LeaveTangent;                                               // 0x0014   (0x0004)  
	float                                              LeaveTangentWeight;                                         // 0x0018   (0x0004)  
};

/// Struct /Script/Engine.RichCurve
/// Size: 0x0010 (16 bytes) (0x000070 - 0x000080) align 8 pad: 0x0000
struct FRichCurve : FRealCurve
{ 
	TArray<FRichCurveKey>                              Keys;                                                       // 0x0070   (0x0010)  
};

/// Struct /Script/Engine.RuntimeFloatCurve
/// Size: 0x0088 (136 bytes) (0x000000 - 0x000088) align 8 pad: 0x0000
struct FRuntimeFloatCurve
{ 
	FRichCurve                                         EditorCurveData;                                            // 0x0000   (0x0080)  
	class UCurveFloat*                                 ExternalCurve;                                              // 0x0080   (0x0008)  
};

/// Struct /Script/Engine.BaseAttenuationSettings
/// Size: 0x00B0 (176 bytes) (0x000000 - 0x0000B0) align 8 pad: 0x0000
struct FBaseAttenuationSettings
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	EAttenuationDistanceModel                          DistanceAlgorithm;                                          // 0x0008   (0x0001)  
	TEnumAsByte<EAttenuationShape>                     AttenuationShape;                                           // 0x0009   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x000A   (0x0002)  MISSED
	float                                              dBAttenuationAtMax;                                         // 0x000C   (0x0004)  
	ENaturalSoundFalloffMode                           FalloffMode;                                                // 0x0010   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0011   (0x0003)  MISSED
	FVector                                            AttenuationShapeExtents;                                    // 0x0014   (0x000C)  
	float                                              ConeOffset;                                                 // 0x0020   (0x0004)  
	float                                              FalloffDistance;                                            // 0x0024   (0x0004)  
	FRuntimeFloatCurve                                 CustomAttenuationCurve;                                     // 0x0028   (0x0088)  
};

/// Struct /Script/Engine.AttenuationSubmixSendSettings
/// Size: 0x00A8 (168 bytes) (0x000000 - 0x0000A8) align 8 pad: 0x0000
struct FAttenuationSubmixSendSettings
{ 
	class USoundSubmixBase*                            Submix;                                                     // 0x0000   (0x0008)  
	ESubmixSendMethod                                  SubmixSendMethod;                                           // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	float                                              SubmixSendLevelMin;                                         // 0x000C   (0x0004)  
	float                                              SubmixSendLevelMax;                                         // 0x0010   (0x0004)  
	float                                              SubmixSendDistanceMin;                                      // 0x0014   (0x0004)  
	float                                              SubmixSendDistanceMax;                                      // 0x0018   (0x0004)  
	float                                              ManualSubmixSendLevel;                                      // 0x001C   (0x0004)  
	FRuntimeFloatCurve                                 CustomSubmixSendCurve;                                      // 0x0020   (0x0088)  
};

/// Struct /Script/Engine.SoundAttenuationPluginSettings
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FSoundAttenuationPluginSettings
{ 
	TArray<class USpatializationPluginSourceSettingsBase*> SpatializationPluginSettingsArray;                      // 0x0000   (0x0010)  
	TArray<class UOcclusionPluginSourceSettingsBase*>  OcclusionPluginSettingsArray;                               // 0x0010   (0x0010)  
	TArray<class UReverbPluginSourceSettingsBase*>     ReverbPluginSettingsArray;                                  // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.SoundAttenuationSettings
/// Size: 0x02F0 (752 bytes) (0x0000B0 - 0x0003A0) align 8 pad: 0x0000
struct FSoundAttenuationSettings : FBaseAttenuationSettings
{ 
	bool                                               bAttenuate : 1;                                             // 0x00B0:0 (0x0001)  
	bool                                               bSpatialize : 1;                                            // 0x00B0:1 (0x0001)  
	bool                                               bAttenuateWithLPF : 1;                                      // 0x00B0:2 (0x0001)  
	bool                                               bEnableListenerFocus : 1;                                   // 0x00B0:3 (0x0001)  
	bool                                               bEnableFocusInterpolation : 1;                              // 0x00B0:4 (0x0001)  
	bool                                               bEnableOcclusion : 1;                                       // 0x00B0:5 (0x0001)  
	bool                                               bUseComplexCollisionForOcclusion : 1;                       // 0x00B0:6 (0x0001)  
	bool                                               bEnableReverbSend : 1;                                      // 0x00B0:7 (0x0001)  
	bool                                               bEnablePriorityAttenuation : 1;                             // 0x00B1:0 (0x0001)  
	bool                                               bApplyNormalizationToStereoSounds : 1;                      // 0x00B1:1 (0x0001)  
	bool                                               bEnableLogFrequencyScaling : 1;                             // 0x00B1:2 (0x0001)  
	bool                                               bEnableSubmixSends : 1;                                     // 0x00B1:3 (0x0001)  
	TEnumAsByte<ESoundSpatializationAlgorithm>         SpatializationAlgorithm;                                    // 0x00B2   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x00B3   (0x0001)  MISSED
	float                                              BinauralRadius;                                             // 0x00B4   (0x0004)  
	EAirAbsorptionMethod                               AbsorptionMethod;                                           // 0x00B8   (0x0001)  
	TEnumAsByte<ECollisionChannel>                     OcclusionTraceChannel;                                      // 0x00B9   (0x0001)  
	EReverbSendMethod                                  ReverbSendMethod;                                           // 0x00BA   (0x0001)  
	EPriorityAttenuationMethod                         PriorityAttenuationMethod;                                  // 0x00BB   (0x0001)  
	float                                              OmniRadius;                                                 // 0x00BC   (0x0004)  
	float                                              StereoSpread;                                               // 0x00C0   (0x0004)  
	float                                              LPFRadiusMin;                                               // 0x00C4   (0x0004)  
	float                                              LPFRadiusMax;                                               // 0x00C8   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00CC   (0x0004)  MISSED
	FRuntimeFloatCurve                                 CustomLowpassAirAbsorptionCurve;                            // 0x00D0   (0x0088)  
	FRuntimeFloatCurve                                 CustomHighpassAirAbsorptionCurve;                           // 0x0158   (0x0088)  
	float                                              LPFFrequencyAtMin;                                          // 0x01E0   (0x0004)  
	float                                              LPFFrequencyAtMax;                                          // 0x01E4   (0x0004)  
	float                                              HPFFrequencyAtMin;                                          // 0x01E8   (0x0004)  
	float                                              HPFFrequencyAtMax;                                          // 0x01EC   (0x0004)  
	float                                              FocusAzimuth;                                               // 0x01F0   (0x0004)  
	float                                              NonFocusAzimuth;                                            // 0x01F4   (0x0004)  
	float                                              FocusDistanceScale;                                         // 0x01F8   (0x0004)  
	float                                              NonFocusDistanceScale;                                      // 0x01FC   (0x0004)  
	float                                              FocusPriorityScale;                                         // 0x0200   (0x0004)  
	float                                              NonFocusPriorityScale;                                      // 0x0204   (0x0004)  
	float                                              FocusVolumeAttenuation;                                     // 0x0208   (0x0004)  
	float                                              NonFocusVolumeAttenuation;                                  // 0x020C   (0x0004)  
	float                                              FocusAttackInterpSpeed;                                     // 0x0210   (0x0004)  
	float                                              FocusReleaseInterpSpeed;                                    // 0x0214   (0x0004)  
	float                                              OcclusionLowPassFilterFrequency;                            // 0x0218   (0x0004)  
	float                                              OcclusionVolumeAttenuation;                                 // 0x021C   (0x0004)  
	float                                              OcclusionInterpolationTime;                                 // 0x0220   (0x0004)  
	float                                              ReverbWetLevelMin;                                          // 0x0224   (0x0004)  
	float                                              ReverbWetLevelMax;                                          // 0x0228   (0x0004)  
	float                                              ReverbDistanceMin;                                          // 0x022C   (0x0004)  
	float                                              ReverbDistanceMax;                                          // 0x0230   (0x0004)  
	float                                              ManualReverbSendLevel;                                      // 0x0234   (0x0004)  
	FRuntimeFloatCurve                                 CustomReverbSendCurve;                                      // 0x0238   (0x0088)  
	TArray<FAttenuationSubmixSendSettings>             SubmixSendSettings;                                         // 0x02C0   (0x0010)  
	float                                              PriorityAttenuationMin;                                     // 0x02D0   (0x0004)  
	float                                              PriorityAttenuationMax;                                     // 0x02D4   (0x0004)  
	float                                              PriorityAttenuationDistanceMin;                             // 0x02D8   (0x0004)  
	float                                              PriorityAttenuationDistanceMax;                             // 0x02DC   (0x0004)  
	float                                              ManualPriorityAttenuation;                                  // 0x02E0   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x02E4   (0x0004)  MISSED
	FRuntimeFloatCurve                                 CustomPriorityAttenuationCurve;                             // 0x02E8   (0x0088)  
	FSoundAttenuationPluginSettings                    PluginSettings;                                             // 0x0370   (0x0030)  
};

/// Struct /Script/Engine.SoundSubmixSendInfo
/// Size: 0x00B0 (176 bytes) (0x000000 - 0x0000B0) align 8 pad: 0x0000
struct FSoundSubmixSendInfo
{ 
	ESendLevelControlMethod                            SendLevelControlMethod;                                     // 0x0000   (0x0001)  
	ESubmixSendStage                                   SendStage;                                                  // 0x0001   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x0002   (0x0006)  MISSED
	class USoundSubmixBase*                            SoundSubmix;                                                // 0x0008   (0x0008)  
	float                                              SendLevel;                                                  // 0x0010   (0x0004)  
	float                                              MinSendLevel;                                               // 0x0014   (0x0004)  
	float                                              MaxSendLevel;                                               // 0x0018   (0x0004)  
	float                                              MinSendDistance;                                            // 0x001C   (0x0004)  
	float                                              MaxSendDistance;                                            // 0x0020   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0024   (0x0004)  MISSED
	FRuntimeFloatCurve                                 CustomSendLevelCurve;                                       // 0x0028   (0x0088)  
};

/// Struct /Script/Engine.SoundSourceBusSendInfo
/// Size: 0x00B8 (184 bytes) (0x000000 - 0x0000B8) align 8 pad: 0x0000
struct FSoundSourceBusSendInfo
{ 
	ESourceBusSendLevelControlMethod                   SourceBusSendLevelControlMethod;                            // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	class USoundSourceBus*                             SoundSourceBus;                                             // 0x0008   (0x0008)  
	class UAudioBus*                                   AudioBus;                                                   // 0x0010   (0x0008)  
	float                                              SendLevel;                                                  // 0x0018   (0x0004)  
	float                                              MinSendLevel;                                               // 0x001C   (0x0004)  
	float                                              MaxSendLevel;                                               // 0x0020   (0x0004)  
	float                                              MinSendDistance;                                            // 0x0024   (0x0004)  
	float                                              MaxSendDistance;                                            // 0x0028   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x002C   (0x0004)  MISSED
	FRuntimeFloatCurve                                 CustomSendLevelCurve;                                       // 0x0030   (0x0088)  
};

/// Class /Script/AudioMixer.SynthComponent
/// Size: 0x04C8 (1224 bytes) (0x000218 - 0x0006E0) align 16 pad: 0x0000
class USynthComponent : public USceneComponent
{ 
public:
	bool                                               bAutoDestroy : 1;                                           // 0x0218:0 (0x0001)  
	bool                                               bStopWhenOwnerDestroyed : 1;                                // 0x0218:1 (0x0001)  
	bool                                               bAllowSpatialization : 1;                                   // 0x0218:2 (0x0001)  
	bool                                               bOverrideAttenuation : 1;                                   // 0x0218:3 (0x0001)  
	unsigned char                                      UnknownData00_3[0x3];                                       // 0x0219   (0x0003)  MISSED
	bool                                               bOutputToBusOnly : 1;                                       // 0x021C:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x021D   (0x0003)  MISSED
	class USoundAttenuation*                           AttenuationSettings;                                        // 0x0220   (0x0008)  
	FSoundAttenuationSettings                          AttenuationOverrides;                                       // 0x0228   (0x03A0)  
	class USoundConcurrency*                           ConcurrencySettings;                                        // 0x05C8   (0x0008)  
	SDK_UNDEFINED(80,10) /* TSet<USoundConcurrency*> */ __um(ConcurrencySet);                                      // 0x05D0   (0x0050)  
	class USoundClass*                                 SoundClass;                                                 // 0x0620   (0x0008)  
	class USoundEffectSourcePresetChain*               SourceEffectChain;                                          // 0x0628   (0x0008)  
	class USoundSubmixBase*                            SoundSubmix;                                                // 0x0630   (0x0008)  
	TArray<FSoundSubmixSendInfo>                       SoundSubmixSends;                                           // 0x0638   (0x0010)  
	TArray<FSoundSourceBusSendInfo>                    BusSends;                                                   // 0x0648   (0x0010)  
	TArray<FSoundSourceBusSendInfo>                    PreEffectBusSends;                                          // 0x0658   (0x0010)  
	bool                                               bIsUISound : 1;                                             // 0x0668:0 (0x0001)  
	bool                                               bIsPreviewSound : 1;                                        // 0x0668:1 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0669   (0x0003)  MISSED
	int32_t                                            EnvelopeFollowerAttackTime;                                 // 0x066C   (0x0004)  
	int32_t                                            EnvelopeFollowerReleaseTime;                                // 0x0670   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0674   (0x0004)  MISSED
	SDK_UNDEFINED(16,11) /* FMulticastInlineDelegate */ __um(OnAudioEnvelopeValue);                                // 0x0678   (0x0010)  
	unsigned char                                      UnknownData04_6[0x20];                                      // 0x0688   (0x0020)  MISSED
	class USynthSound*                                 Synth;                                                      // 0x06A8   (0x0008)  
	class UAudioComponent*                             AudioComponent;                                             // 0x06B0   (0x0008)  
	unsigned char                                      UnknownData05_7[0x28];                                      // 0x06B8   (0x0028)  MISSED
	// void Stop();                                                                                                             // [0x3c2f4c0] Final|Native|Public|BlueprintCallable 
	// void Start();                                                                                                            // [0x3c2f0b0] Final|Native|Public|BlueprintCallable 
	// void SetVolumeMultiplier(float VolumeMultiplier);                                                                        // [0x3c2f030] Final|Native|Public|BlueprintCallable 
	// void SetSubmixSend(class USoundSubmixBase* Submix, float SendLevel);                                                     // [0x3c2ec20] Final|Native|Public|BlueprintCallable 
	// void SetLowPassFilterFrequency(float InLowPassFilterFrequency);                                                          // [0x3c2e380] Native|Public|BlueprintCallable 
	// void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);                                                               // [0x3c2e2f0] Final|Native|Public|BlueprintCallable 
	// bool IsPlaying();                                                                                                        // [0x3c2cfc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/AudioMixer.AudioGenerator
/// Size: 0x0080 (128 bytes) (0x000030 - 0x0000B0) align 8 pad: 0x0000
class UAudioGenerator : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x80];                                      // 0x0030   (0x0080)  MISSED
};

/// Class /Script/Engine.BlueprintFunctionLibrary
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UBlueprintFunctionLibrary : public UObject
{ 
public:
};

/// Class /Script/AudioMixer.AudioMixerBlueprintLibrary
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UAudioMixerBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
public:
	// float TrimAudioCache(float InMegabytesToFree);                                                                           // [0x3c2fad0] Final|Native|Static|Public|BlueprintCallable 
	// class USoundWave* StopRecordingOutput(class UObject* WorldContextObject, EAudioRecordingExportType ExportType, FString Name, FString Path, class USoundSubmix* SubmixToRecord, class USoundWave* ExistingSoundWaveToOverwrite); // [0x3c2f660] Final|Native|Static|Public|BlueprintCallable 
	// void StopAudioBus(class UObject* WorldContextObject, class UAudioBus* AudioBus);                                         // [0x3c2f5a0] Final|Native|Static|Public|BlueprintCallable 
	// void StopAnalyzingOutput(class UObject* WorldContextObject, class USoundSubmix* SubmixToStopAnalyzing);                  // [0x3c2f4e0] Final|Native|Static|Public|BlueprintCallable 
	// void StartRecordingOutput(class UObject* WorldContextObject, float ExpectedDuration, class USoundSubmix* SubmixToRecord); // [0x3c2f3b0] Final|Native|Static|Public|BlueprintCallable 
	// void StartAudioBus(class UObject* WorldContextObject, class UAudioBus* AudioBus);                                        // [0x3c2f2f0] Final|Native|Static|Public|BlueprintCallable 
	// void StartAnalyzingOutput(class UObject* WorldContextObject, class USoundSubmix* SubmixToAnalyze, EFFTSize FFTSize, EFFTPeakInterpolationMethod InterpolationMethod, EFFTWindowType WindowType, float HopSize, EAudioSpectrumType SpectrumType); // [0x3c2f0d0] Final|Native|Static|Public|BlueprintCallable 
	// void SetSubmixEffectChainOverride(class UObject* WorldContextObject, class USoundSubmix* SoundSubmix, TArray<USoundEffectSubmixPreset*> SubmixEffectPresetChain, float FadeTimeSec); // [0x3c2ea80] Final|Native|Static|Public|BlueprintCallable 
	// void SetBypassSourceEffectChainEntry(class UObject* WorldContextObject, class USoundEffectSourcePresetChain* PresetChain, int32_t EntryIndex, bool bBypassed); // [0x3c2e110] Final|Native|Static|Public|BlueprintCallable 
	// void ResumeRecordingOutput(class UObject* WorldContextObject, class USoundSubmix* SubmixToPause);                        // [0x3c2deb0] Final|Native|Static|Public|BlueprintCallable 
	// void ReplaceSoundEffectSubmix(class UObject* WorldContextObject, class USoundSubmix* InSoundSubmix, int32_t SubmixChainIndex, class USoundEffectSubmixPreset* SubmixEffectPreset); // [0x3c2dbe0] Final|Native|Static|Public|BlueprintCallable 
	// void RemoveSubmixEffectPresetAtIndex(class UObject* WorldContextObject, class USoundSubmix* SoundSubmix, int32_t SubmixChainIndex); // [0x3c2dae0] Final|Native|Static|Public|BlueprintCallable 
	// void RemoveSubmixEffectPreset(class UObject* WorldContextObject, class USoundSubmix* SoundSubmix, class USoundEffectSubmixPreset* SubmixEffectPreset); // [0x3c2d9e0] Final|Native|Static|Public|BlueprintCallable 
	// void RemoveSourceEffectFromPresetChain(class UObject* WorldContextObject, class USoundEffectSourcePresetChain* PresetChain, int32_t EntryIndex); // [0x3c2d8e0] Final|Native|Static|Public|BlueprintCallable 
	// void RemoveMasterSubmixEffect(class UObject* WorldContextObject, class USoundEffectSubmixPreset* SubmixEffectPreset);    // [0x3c2d820] Final|Native|Static|Public|BlueprintCallable 
	// void PrimeSoundForPlayback(class USoundWave* SoundWave, FDelegateProperty OnLoadCompletion);                             // [0x3c2d740] Final|Native|Static|Public|BlueprintCallable 
	// void PrimeSoundCueForPlayback(class USoundCue* SoundCue);                                                                // [0x3c2d6c0] Final|Native|Static|Public|BlueprintCallable 
	// void PauseRecordingOutput(class UObject* WorldContextObject, class USoundSubmix* SubmixToPause);                         // [0x3c2d600] Final|Native|Static|Public|BlueprintCallable 
	// TArray<FSoundSubmixSpectralAnalysisBandSettings> MakePresetSpectralAnalysisBandSettings(EAudioSpectrumBandPresetType InBandPresetType, int32_t InNumBands, int32_t InAttackTimeMsec, int32_t InReleaseTimeMsec); // [0x3c2d3d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// TArray<FSoundSubmixSpectralAnalysisBandSettings> MakeMusicalSpectralAnalysisBandSettings(int32_t InNumSemitones, EMusicalNoteName InStartingMusicalNote, int32_t InStartingOctave, int32_t InAttackTimeMsec, int32_t InReleaseTimeMsec); // [0x3c2d1e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// TArray<FSoundSubmixSpectralAnalysisBandSettings> MakeFullSpectrumSpectralAnalysisBandSettings(int32_t InNumBands, float InMinimumFrequency, float InMaximumFrequency, int32_t InAttackTimeMsec, int32_t InReleaseTimeMsec); // [0x3c2cff0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool IsAudioBusActive(class UObject* WorldContextObject, class UAudioBus* AudioBus);                                     // [0x3c2cef0] Final|Native|Static|Public|BlueprintCallable 
	// void GetPhaseForFrequencies(class UObject* WorldContextObject, TArray<float>& Frequencies, TArray<float>& Phases, class USoundSubmix* SubmixToAnalyze); // [0x3c2c9a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// int32_t GetNumberOfEntriesInSourceEffectChain(class UObject* WorldContextObject, class USoundEffectSourcePresetChain* PresetChain); // [0x3c2c8d0] Final|Native|Static|Public|BlueprintCallable 
	// void GetMagnitudeForFrequencies(class UObject* WorldContextObject, TArray<float>& Frequencies, TArray<float>& Magnitudes, class USoundSubmix* SubmixToAnalyze); // [0x3c2c6a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void ClearSubmixEffects(class UObject* WorldContextObject, class USoundSubmix* SoundSubmix);                             // [0x3c2bfd0] Final|Native|Static|Public|BlueprintCallable 
	// void ClearSubmixEffectChainOverride(class UObject* WorldContextObject, class USoundSubmix* SoundSubmix, float FadeTimeSec); // [0x3c2bec0] Final|Native|Static|Public|BlueprintCallable 
	// void ClearMasterSubmixEffects(class UObject* WorldContextObject);                                                        // [0x3c2be40] Final|Native|Static|Public|BlueprintCallable 
	// int32_t AddSubmixEffect(class UObject* WorldContextObject, class USoundSubmix* SoundSubmix, class USoundEffectSubmixPreset* SubmixEffectPreset); // [0x3c2bd40] Final|Native|Static|Public|BlueprintCallable 
	// void AddSourceEffectToPresetChain(class UObject* WorldContextObject, class USoundEffectSourcePresetChain* PresetChain, FSourceEffectChainEntry entry); // [0x3c2bc30] Final|Native|Static|Public|BlueprintCallable 
	// void AddMasterSubmixEffect(class UObject* WorldContextObject, class USoundEffectSubmixPreset* SubmixEffectPreset);       // [0x3c2bb70] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/AudioMixer.QuartzClockHandle
/// Size: 0x0170 (368 bytes) (0x000030 - 0x0001A0) align 8 pad: 0x0000
class UQuartzClockHandle : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x170];                                     // 0x0030   (0x0170)  MISSED
	// void UnsubscribeFromTimeDivision(class UObject* WorldContextObject, EQuartzCommandQuantization InQuantizationBoundary);  // [0x3c2fbf0] Final|Native|Public|BlueprintCallable 
	// void UnsubscribeFromAllTimeDivisions(class UObject* WorldContextObject);                                                 // [0x3c2fb60] Final|Native|Public|BlueprintCallable 
	// void SubscribeToQuantizationEvent(class UObject* WorldContextObject, EQuartzCommandQuantization InQuantizationBoundary, FDelegateProperty& OnQuantizationEvent); // [0x3c2f990] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SubscribeToAllQuantizationEvents(class UObject* WorldContextObject, FDelegateProperty& OnQuantizationEvent);        // [0x3c2f890] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetTicksPerSecond(class UObject* WorldContextObject, FQuartzQuantizationBoundary& QuantizationBoundary, FDelegateProperty& Delegate, float TicksPerSecond); // [0x3c2ee90] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetThirtySecondNotesPerMinute(class UObject* WorldContextObject, FQuartzQuantizationBoundary& QuantizationBoundary, FDelegateProperty& Delegate, float ThirtySecondsNotesPerMinute); // [0x3c2ecf0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetSecondsPerTick(class UObject* WorldContextObject, FQuartzQuantizationBoundary& QuantizationBoundary, FDelegateProperty& Delegate, float SecondsPerTick); // [0x3c2e5b0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetMillisecondsPerTick(class UObject* WorldContextObject, FQuartzQuantizationBoundary& QuantizationBoundary, FDelegateProperty& Delegate, float MillisecondsPerTick); // [0x3c2e410] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetBeatsPerMinute(class UObject* WorldContextObject, FQuartzQuantizationBoundary& QuantizationBoundary, FDelegateProperty& Delegate, float BeatsPerMinute); // [0x3c2df70] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void ResumeClock(class UObject* WorldContextObject);                                                                     // [0x3c2de20] Final|Native|Public|BlueprintCallable 
	// void ResetTransport(class UObject* WorldContextObject, FDelegateProperty& InDelegate);                                   // [0x3c2dd20] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void PauseClock(class UObject* WorldContextObject);                                                                      // [0x3c2d570] Final|Native|Public|BlueprintCallable 
	// float GetTicksPerSecond(class UObject* WorldContextObject);                                                              // [0x3c2ce50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetThirtySecondNotesPerMinute(class UObject* WorldContextObject);                                                  // [0x3c2cdb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetSecondsPerTick(class UObject* WorldContextObject);                                                              // [0x3c2cd10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetMillisecondsPerTick(class UObject* WorldContextObject);                                                         // [0x3c2c830] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetBeatsPerMinute(class UObject* WorldContextObject);                                                              // [0x3c2c3c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.SoundEffectPreset
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000070) align 8 pad: 0x0000
class USoundEffectPreset : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x40];                                      // 0x0030   (0x0040)  MISSED
};

/// Class /Script/Engine.SoundEffectSubmixPreset
/// Size: 0x0000 (0 bytes) (0x000070 - 0x000070) align 8 pad: 0x0000
class USoundEffectSubmixPreset : public USoundEffectPreset
{ 
public:
};

/// Struct /Script/AudioMixer.SubmixEffectDynamicProcessorFilterSettings
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FSubmixEffectDynamicProcessorFilterSettings
{ 
	bool                                               bEnabled : 1;                                               // 0x0000:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              Cutoff;                                                     // 0x0004   (0x0004)  
	float                                              GainDb;                                                     // 0x0008   (0x0004)  
};

/// Struct /Script/AudioMixer.SubmixEffectDynamicsProcessorSettings
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 pad: 0x0000
struct FSubmixEffectDynamicsProcessorSettings
{ 
	ESubmixEffectDynamicsProcessorType                 DynamicsProcessorType;                                      // 0x0000   (0x0001)  
	ESubmixEffectDynamicsPeakMode                      PeakMode;                                                   // 0x0001   (0x0001)  
	ESubmixEffectDynamicsChannelLinkMode               LinkMode;                                                   // 0x0002   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0003   (0x0001)  MISSED
	float                                              InputGainDb;                                                // 0x0004   (0x0004)  
	float                                              ThresholdDb;                                                // 0x0008   (0x0004)  
	float                                              Ratio;                                                      // 0x000C   (0x0004)  
	float                                              KneeBandwidthDb;                                            // 0x0010   (0x0004)  
	float                                              LookAheadMsec;                                              // 0x0014   (0x0004)  
	float                                              AttackTimeMsec;                                             // 0x0018   (0x0004)  
	float                                              ReleaseTimeMsec;                                            // 0x001C   (0x0004)  
	class USoundSubmix*                                ExternalSubmix;                                             // 0x0020   (0x0008)  
	bool                                               bChannelLinked : 1;                                         // 0x0028:0 (0x0001)  
	bool                                               bAnalogMode : 1;                                            // 0x0028:1 (0x0001)  
	bool                                               bKeyAudition : 1;                                           // 0x0028:2 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              KeyGainDb;                                                  // 0x002C   (0x0004)  
	float                                              OutputGainDb;                                               // 0x0030   (0x0004)  
	FSubmixEffectDynamicProcessorFilterSettings        KeyHighshelf;                                               // 0x0034   (0x000C)  
	FSubmixEffectDynamicProcessorFilterSettings        KeyLowshelf;                                                // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Class /Script/AudioMixer.SubmixEffectDynamicsProcessorPreset
/// Size: 0x00C8 (200 bytes) (0x000070 - 0x000138) align 8 pad: 0x0000
class USubmixEffectDynamicsProcessorPreset : public USoundEffectSubmixPreset
{ 
public:
	unsigned char                                      UnknownData00_3[0x78];                                      // 0x0070   (0x0078)  MISSED
	FSubmixEffectDynamicsProcessorSettings             Settings;                                                   // 0x00E8   (0x0050)  
	// void SetSettings(FSubmixEffectDynamicsProcessorSettings& Settings);                                                      // [0x3c2e750] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetExternalSubmix(class USoundSubmix* Submix);                                                                      // [0x3c2e260] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/AudioMixer.SubmixEffectEQBand
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FSubmixEffectEQBand
{ 
	float                                              Frequency;                                                  // 0x0000   (0x0004)  
	float                                              Bandwidth;                                                  // 0x0004   (0x0004)  
	float                                              GainDb;                                                     // 0x0008   (0x0004)  
	bool                                               bEnabled : 1;                                               // 0x000C:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Struct /Script/AudioMixer.SubmixEffectSubmixEQSettings
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FSubmixEffectSubmixEQSettings
{ 
	TArray<FSubmixEffectEQBand>                        EQBands;                                                    // 0x0000   (0x0010)  
};

/// Class /Script/AudioMixer.SubmixEffectSubmixEQPreset
/// Size: 0x0048 (72 bytes) (0x000070 - 0x0000B8) align 8 pad: 0x0000
class USubmixEffectSubmixEQPreset : public USoundEffectSubmixPreset
{ 
public:
	unsigned char                                      UnknownData00_3[0x38];                                      // 0x0070   (0x0038)  MISSED
	FSubmixEffectSubmixEQSettings                      Settings;                                                   // 0x00A8   (0x0010)  
	// void SetSettings(FSubmixEffectSubmixEQSettings& InSettings);                                                             // [0x209ec00] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Struct /Script/AudioMixer.SubmixEffectReverbSettings
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 4 pad: 0x0000
struct FSubmixEffectReverbSettings
{ 
	bool                                               bBypassEarlyReflections;                                    // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              ReflectionsDelay;                                           // 0x0004   (0x0004)  
	float                                              GainHF;                                                     // 0x0008   (0x0004)  
	float                                              ReflectionsGain;                                            // 0x000C   (0x0004)  
	bool                                               bBypassLateReflections;                                     // 0x0010   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0011   (0x0003)  MISSED
	float                                              LateDelay;                                                  // 0x0014   (0x0004)  
	float                                              DecayTime;                                                  // 0x0018   (0x0004)  
	float                                              Density;                                                    // 0x001C   (0x0004)  
	float                                              Diffusion;                                                  // 0x0020   (0x0004)  
	float                                              AirAbsorptionGainHF;                                        // 0x0024   (0x0004)  
	float                                              DecayHFRatio;                                               // 0x0028   (0x0004)  
	float                                              LateGain;                                                   // 0x002C   (0x0004)  
	float                                              Gain;                                                       // 0x0030   (0x0004)  
	float                                              WetLevel;                                                   // 0x0034   (0x0004)  
	float                                              DryLevel;                                                   // 0x0038   (0x0004)  
	bool                                               bBypass;                                                    // 0x003C   (0x0001)  
	unsigned char                                      UnknownData02_7[0x3];                                       // 0x003D   (0x0003)  MISSED
};

/// Class /Script/AudioMixer.SubmixEffectReverbPreset
/// Size: 0x00A8 (168 bytes) (0x000070 - 0x000118) align 8 pad: 0x0000
class USubmixEffectReverbPreset : public USoundEffectSubmixPreset
{ 
public:
	unsigned char                                      UnknownData00_3[0x68];                                      // 0x0070   (0x0068)  MISSED
	FSubmixEffectReverbSettings                        Settings;                                                   // 0x00D8   (0x0040)  
	// void SetSettingsWithReverbEffect(class UReverbEffect* InReverbEffect, float WetLevel, float DryLevel);                   // [0x3c2e970] Final|Native|Public|BlueprintCallable 
	// void SetSettings(FSubmixEffectReverbSettings& InSettings);                                                               // [0x3c2e860] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.Subsystem
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class USubsystem : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0030   (0x0008)  MISSED
};

/// Class /Script/Engine.WorldSubsystem
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UWorldSubsystem : public USubsystem
{ 
public:
};

/// Class /Script/AudioMixer.QuartzSubsystem
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000080) align 16 pad: 0x0000
class UQuartzSubsystem : public UWorldSubsystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x48];                                      // 0x0038   (0x0048)  MISSED
	// float GetRoundTripMinLatency(class UObject* WorldContextObject);                                                         // [0x3c2cc70] Final|Native|Public|BlueprintCallable 
	// float GetRoundTripMaxLatency(class UObject* WorldContextObject);                                                         // [0x3c2cbd0] Final|Native|Public|BlueprintCallable 
	// float GetRoundTripAverageLatency(class UObject* WorldContextObject);                                                     // [0x3c2cb30] Final|Native|Public|BlueprintCallable 
	// class UQuartzClockHandle* GetHandleForClock(class UObject* WorldContextObject, FName ClockName);                         // [0x3c2c5a0] Final|Native|Public|BlueprintCallable 
	// float GetGameThreadToAudioRenderThreadMinLatency(class UObject* WorldContextObject);                                     // [0x3c2c500] Final|Native|Public|BlueprintCallable 
	// float GetGameThreadToAudioRenderThreadMaxLatency(class UObject* WorldContextObject);                                     // [0x3c2c500] Final|Native|Public|BlueprintCallable 
	// float GetGameThreadToAudioRenderThreadAverageLatency(class UObject* WorldContextObject);                                 // [0x3c2c460] Final|Native|Public|BlueprintCallable 
	// float GetAudioRenderThreadToGameThreadMinLatency();                                                                      // [0x3c2c390] Final|Native|Public|BlueprintCallable 
	// float GetAudioRenderThreadToGameThreadMaxLatency();                                                                      // [0x3c2c360] Final|Native|Public|BlueprintCallable 
	// float GetAudioRenderThreadToGameThreadAverageLatency();                                                                  // [0x3c2c330] Final|Native|Public|BlueprintCallable 
	// bool DoesClockExist(class UObject* WorldContextObject, FName ClockName);                                                 // [0x3c2c240] Final|Native|Public|BlueprintCallable 
	// class UQuartzClockHandle* CreateNewClock(class UObject* WorldContextObject, FName ClockName, FQuartzClockSettings InSettings, bool bOverrideSettingsIfClockExists); // [0x3c2c090] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.SoundConcurrencySettings
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 4 pad: 0x0000
struct FSoundConcurrencySettings
{ 
	int32_t                                            MaxCount;                                                   // 0x0000   (0x0004)  
	bool                                               bLimitToOwner : 1;                                          // 0x0004:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0005   (0x0003)  MISSED
	TEnumAsByte<EMaxConcurrentResolutionRule>          ResolutionRule;                                             // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	float                                              RetriggerTime;                                              // 0x000C   (0x0004)  
	float                                              VolumeScale;                                                // 0x0010   (0x0004)  
	EConcurrencyVolumeScaleMode                        VolumeScaleMode;                                            // 0x0014   (0x0004)  
	float                                              VolumeScaleAttackTime;                                      // 0x0018   (0x0004)  
	bool                                               bVolumeScaleCanRelease : 1;                                 // 0x001C:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x001D   (0x0003)  MISSED
	float                                              VolumeScaleReleaseTime;                                     // 0x0020   (0x0004)  
	float                                              VoiceStealReleaseTime;                                      // 0x0024   (0x0004)  
};

/// Struct /Script/Engine.SoundModulationDestinationSettings
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FSoundModulationDestinationSettings
{ 
	float                                              Value;                                                      // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	class USoundModulatorBase*                         Modulator;                                                  // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.SoundModulationDefaultSettings
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 pad: 0x0000
struct FSoundModulationDefaultSettings
{ 
	FSoundModulationDestinationSettings                VolumeModulationDestination;                                // 0x0000   (0x0010)  
	FSoundModulationDestinationSettings                PitchModulationDestination;                                 // 0x0010   (0x0010)  
	FSoundModulationDestinationSettings                HighpassModulationDestination;                              // 0x0020   (0x0010)  
	FSoundModulationDestinationSettings                LowpassModulationDestination;                               // 0x0030   (0x0010)  
};

/// Struct /Script/Engine.SoundModulationDefaultRoutingSettings
/// Size: 0x0008 (8 bytes) (0x000040 - 0x000048) align 8 pad: 0x0000
struct FSoundModulationDefaultRoutingSettings : FSoundModulationDefaultSettings
{ 
	EModulationRouting                                 VolumeRouting;                                              // 0x0040   (0x0001)  
	EModulationRouting                                 PitchRouting;                                               // 0x0041   (0x0001)  
	EModulationRouting                                 HighpassRouting;                                            // 0x0042   (0x0001)  
	EModulationRouting                                 LowpassRouting;                                             // 0x0043   (0x0001)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Engine.SoundBase
/// Size: 0x0190 (400 bytes) (0x000030 - 0x0001C0) align 8 pad: 0x0000
class USoundBase : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0030   (0x0008)  MISSED
	class USoundClass*                                 SoundClassObject;                                           // 0x0038   (0x0008)  
	bool                                               bDebug : 1;                                                 // 0x0040:0 (0x0001)  
	bool                                               bOverrideConcurrency : 1;                                   // 0x0040:1 (0x0001)  
	bool                                               bOutputToBusOnly : 1;                                       // 0x0040:2 (0x0001)  
	bool                                               bHasDelayNode : 1;                                          // 0x0040:3 (0x0001)  
	bool                                               bHasConcatenatorNode : 1;                                   // 0x0040:4 (0x0001)  
	bool                                               bBypassVolumeScaleForPriority : 1;                          // 0x0040:5 (0x0001)  
	EVirtualizationMode                                VirtualizationMode;                                         // 0x0041   (0x0001)  
	unsigned char                                      UnknownData01_6[0x56];                                      // 0x0042   (0x0056)  MISSED
	SDK_UNDEFINED(80,12) /* TSet<USoundConcurrency*> */ __um(ConcurrencySet);                                      // 0x0098   (0x0050)  
	FSoundConcurrencySettings                          ConcurrencyOverrides;                                       // 0x00E8   (0x0028)  
	float                                              Duration;                                                   // 0x0110   (0x0004)  
	float                                              MaxDistance;                                                // 0x0114   (0x0004)  
	float                                              TotalSamples;                                               // 0x0118   (0x0004)  
	float                                              Priority;                                                   // 0x011C   (0x0004)  
	class USoundAttenuation*                           AttenuationSettings;                                        // 0x0120   (0x0008)  
	FSoundModulationDefaultRoutingSettings             ModulationSettings;                                         // 0x0128   (0x0048)  
	class USoundSubmixBase*                            SoundSubmixObject;                                          // 0x0170   (0x0008)  
	TArray<FSoundSubmixSendInfo>                       SoundSubmixSends;                                           // 0x0178   (0x0010)  
	class USoundEffectSourcePresetChain*               SourceEffectChain;                                          // 0x0188   (0x0008)  
	TArray<FSoundSourceBusSendInfo>                    BusSends;                                                   // 0x0190   (0x0010)  
	TArray<FSoundSourceBusSendInfo>                    PreEffectBusSends;                                          // 0x01A0   (0x0010)  
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x01B0   (0x0010)  
};

/// Struct /Script/Engine.SoundWaveSpectralDataEntry
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FSoundWaveSpectralDataEntry
{ 
	float                                              Magnitude;                                                  // 0x0000   (0x0004)  
	float                                              NormalizedMagnitude;                                        // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.SoundWaveSpectralTimeData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FSoundWaveSpectralTimeData
{ 
	TArray<FSoundWaveSpectralDataEntry>                Data;                                                       // 0x0000   (0x0010)  
	float                                              TimeSec;                                                    // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/Engine.SoundWaveEnvelopeTimeData
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FSoundWaveEnvelopeTimeData
{ 
	float                                              Amplitude;                                                  // 0x0000   (0x0004)  
	float                                              TimeSec;                                                    // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.SubtitleCue
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FSubtitleCue
{ 
	FText                                              Text;                                                       // 0x0000   (0x0018)  
	float                                              Time;                                                       // 0x0018   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Class /Script/Engine.SoundWave
/// Size: 0x01B8 (440 bytes) (0x0001C0 - 0x000378) align 8 pad: 0x0000
class USoundWave : public USoundBase
{ 
public:
	int32_t                                            CompressionQuality;                                         // 0x01C0   (0x0004)  
	int32_t                                            StreamingPriority;                                          // 0x01C4   (0x0004)  
	ESoundwaveSampleRateSettings                       SampleRateQuality;                                          // 0x01C8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x01C9   (0x0001)  MISSED
	TEnumAsByte<ESoundGroup>                           SoundGroup;                                                 // 0x01CA   (0x0001)  
	bool                                               bLooping : 1;                                               // 0x01CB:0 (0x0001)  
	bool                                               bStreaming : 1;                                             // 0x01CB:1 (0x0001)  
	bool                                               bSeekableStreaming : 1;                                     // 0x01CB:2 (0x0001)  
	ESoundWaveLoadingBehavior                          LoadingBehavior;                                            // 0x01CC   (0x0001)  
	unsigned char                                      UnknownBit01 : 1;                                           // 0x01CD:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit02 : 1;                                           // 0x01CD:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit03 : 1;                                           // 0x01CD:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit04 : 1;                                           // 0x01CD:3 (0x0001)  MISSED
	unsigned char                                      UnknownBit05 : 1;                                           // 0x01CD:4 (0x0001)  MISSED
	unsigned char                                      UnknownBit06 : 1;                                           // 0x01CD:5 (0x0001)  MISSED
	bool                                               bMature : 1;                                                // 0x01CD:6 (0x0001)  
	bool                                               bManualWordWrap : 1;                                        // 0x01CD:7 (0x0001)  
	bool                                               bSingleLine : 1;                                            // 0x01CE:0 (0x0001)  
	bool                                               bIsAmbisonics : 1;                                          // 0x01CE:1 (0x0001)  
	unsigned char                                      UnknownData07_5[0x1];                                       // 0x01CF   (0x0001)  MISSED
	TArray<float>                                      FrequenciesToAnalyze;                                       // 0x01D0   (0x0010)  
	TArray<FSoundWaveSpectralTimeData>                 CookedSpectralTimeData;                                     // 0x01E0   (0x0010)  
	TArray<FSoundWaveEnvelopeTimeData>                 CookedEnvelopeTimeData;                                     // 0x01F0   (0x0010)  
	int32_t                                            InitialChunkSize;                                           // 0x0200   (0x0004)  
	unsigned char                                      UnknownData08_6[0x44];                                      // 0x0204   (0x0044)  MISSED
	FString                                            SpokenText;                                                 // 0x0248   (0x0010)  
	float                                              SubtitlePriority;                                           // 0x0258   (0x0004)  
	float                                              Volume;                                                     // 0x025C   (0x0004)  
	float                                              Pitch;                                                      // 0x0260   (0x0004)  
	int32_t                                            NumChannels;                                                // 0x0264   (0x0004)  
	int32_t                                            SampleRate;                                                 // 0x0268   (0x0004)  
	unsigned char                                      UnknownData09_6[0xC];                                       // 0x026C   (0x000C)  MISSED
	TArray<FSubtitleCue>                               Subtitles;                                                  // 0x0278   (0x0010)  
	class UCurveTable*                                 Curves;                                                     // 0x0288   (0x0008)  
	class UCurveTable*                                 InternalCurves;                                             // 0x0290   (0x0008)  
	unsigned char                                      UnknownData10_7[0xE0];                                      // 0x0298   (0x00E0)  MISSED
};

/// Class /Script/Engine.SoundWaveProcedural
/// Size: 0x0058 (88 bytes) (0x000378 - 0x0003D0) align 16 pad: 0x0000
class USoundWaveProcedural : public USoundWave
{ 
public:
	unsigned char                                      UnknownData00_1[0x58];                                      // 0x0378   (0x0058)  MISSED
};

/// Class /Script/AudioMixer.SynthSound
/// Size: 0x0020 (32 bytes) (0x0003D0 - 0x0003F0) align 16 pad: 0x0000
class USynthSound : public USoundWaveProcedural
{ 
public:
	class USynthComponent*                             OwningSynthComponent;                                       // 0x03D0   (0x0008)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x03D8   (0x0018)  MISSED
};

/// Class /Script/Engine.DataAsset
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UDataAsset : public UObject
{ 
public:
	class UClass*                                      NativeClass;                                                // 0x0030   (0x0008)  
};

/// Struct /Script/Engine.ActorTickFunction
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
struct FActorTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.RepMovement
/// Size: 0x0034 (52 bytes) (0x000000 - 0x000034) align 4 pad: 0x0000
struct FRepMovement
{ 
	FVector                                            LinearVelocity;                                             // 0x0000   (0x000C)  
	FVector                                            AngularVelocity;                                            // 0x000C   (0x000C)  
	FVector                                            Location;                                                   // 0x0018   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x0024   (0x000C)  
	bool                                               bSimulatedPhysicSleep : 1;                                  // 0x0030:0 (0x0001)  
	bool                                               bRepPhysics : 1;                                            // 0x0030:1 (0x0001)  
	EVectorQuantization                                LocationQuantizationLevel;                                  // 0x0031   (0x0001)  
	EVectorQuantization                                VelocityQuantizationLevel;                                  // 0x0032   (0x0001)  
	ERotatorQuantization                               RotationQuantizationLevel;                                  // 0x0033   (0x0001)  
};

/// Struct /Script/Engine.KuroRepMovement
/// Size: 0x0034 (52 bytes) (0x000000 - 0x000034) align 4 pad: 0x0000
struct FKuroRepMovement
{ 
	FVector                                            LinearVelocity;                                             // 0x0000   (0x000C)  
	FVector                                            AngularVelocity;                                            // 0x000C   (0x000C)  
	FVector                                            Location;                                                   // 0x0018   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x0024   (0x000C)  
	bool                                               bSimulatedPhysicSleep : 1;                                  // 0x0030:0 (0x0001)  
	bool                                               bRepPhysics : 1;                                            // 0x0030:1 (0x0001)  
	bool                                               bResetMeshOffset : 1;                                       // 0x0030:2 (0x0001)  
	EVectorQuantization                                LocationQuantizationLevel;                                  // 0x0031   (0x0001)  
	EVectorQuantization                                VelocityQuantizationLevel;                                  // 0x0032   (0x0001)  
	ERotatorQuantization                               RotationQuantizationLevel;                                  // 0x0033   (0x0001)  
};

/// Struct /Script/Engine.Vector_NetQuantize100
/// Size: 0x0000 (0 bytes) (0x00000C - 0x00000C) align 4 pad: 0x0000
struct FVector_NetQuantize100 : FVector
{ 
};

/// Struct /Script/Engine.RepAttachment
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 pad: 0x0000
struct FRepAttachment
{ 
	class AActor*                                      AttachParent;                                               // 0x0000   (0x0008)  
	FVector_NetQuantize100                             LocationOffset;                                             // 0x0008   (0x000C)  
	FVector_NetQuantize100                             RelativeScale3D;                                            // 0x0014   (0x000C)  
	FRotator                                           RotationOffset;                                             // 0x0020   (0x000C)  
	FName                                              AttachSocket;                                               // 0x002C   (0x000C)  
	class USceneComponent*                             AttachComponent;                                            // 0x0038   (0x0008)  
};

/// Class /Script/Engine.Actor
/// Size: 0x0278 (632 bytes) (0x000030 - 0x0002A8) align 8 pad: 0x0000
class AActor : public UObject
{ 
public:
	FActorTickFunction                                 PrimaryActorTick;                                           // 0x0030   (0x0030)  
	bool                                               bNetTemporary : 1;                                          // 0x0060:0 (0x0001)  
	bool                                               bNetStartup : 1;                                            // 0x0060:1 (0x0001)  
	bool                                               bOnlyRelevantToOwner : 1;                                   // 0x0060:2 (0x0001)  
	bool                                               bAlwaysRelevant : 1;                                        // 0x0060:3 (0x0001)  
	bool                                               bReplicateMovement : 1;                                     // 0x0060:4 (0x0001)  
	bool                                               bHidden : 1;                                                // 0x0060:5 (0x0001)  
	bool                                               bTearOff : 1;                                               // 0x0060:6 (0x0001)  
	bool                                               bForceHidden : 1;                                           // 0x0060:7 (0x0001)  
	bool                                               bIsAliveSpawnableAfterSequenceClean;                        // 0x0061   (0x0001)  
	bool                                               bExchangedRoles : 1;                                        // 0x0062:0 (0x0001)  
	bool                                               bNetLoadOnClient : 1;                                       // 0x0062:1 (0x0001)  
	bool                                               bNetUseOwnerRelevancy : 1;                                  // 0x0062:2 (0x0001)  
	bool                                               bRelevantForNetworkReplays : 1;                             // 0x0062:3 (0x0001)  
	bool                                               bRelevantForLevelBounds : 1;                                // 0x0062:4 (0x0001)  
	bool                                               bReplayRewindable : 1;                                      // 0x0062:5 (0x0001)  
	bool                                               bAllowTickBeforeBeginPlay : 1;                              // 0x0062:6 (0x0001)  
	bool                                               bAutoDestroyWhenFinished : 1;                               // 0x0062:7 (0x0001)  
	bool                                               bCanBeDamaged : 1;                                          // 0x0063:0 (0x0001)  
	bool                                               bBlockInput : 1;                                            // 0x0063:1 (0x0001)  
	bool                                               bCollideWhenPlacing : 1;                                    // 0x0063:2 (0x0001)  
	bool                                               bFindCameraComponentWhenViewTarget : 1;                     // 0x0063:3 (0x0001)  
	bool                                               bGenerateOverlapEventsDuringLevelStreaming : 1;             // 0x0063:4 (0x0001)  
	bool                                               bIgnoresOriginShifting : 1;                                 // 0x0063:5 (0x0001)  
	bool                                               bEnableAutoLODGeneration : 1;                               // 0x0063:6 (0x0001)  
	bool                                               bIsEditorOnlyActor : 1;                                     // 0x0063:7 (0x0001)  
	bool                                               bPlatformMobile : 1;                                        // 0x0064:0 (0x0001)  
	bool                                               bPlatformDeskTop : 1;                                       // 0x0064:1 (0x0001)  
	bool                                               bInvolveCook : 1;                                           // 0x0064:2 (0x0001)  
	bool                                               bActorSeamlessTraveled : 1;                                 // 0x0064:3 (0x0001)  
	bool                                               bIsPermanentActor : 1;                                      // 0x0064:4 (0x0001)  
	bool                                               bEnableBeginAndEndPlayDebugLog : 1;                         // 0x0064:5 (0x0001)  
	bool                                               bReplicates : 1;                                            // 0x0064:6 (0x0001)  
	bool                                               bCanBeInCluster : 1;                                        // 0x0064:7 (0x0001)  
	bool                                               bAllowReceiveTickEventOnDedicatedServer : 1;                // 0x0065:0 (0x0001)  
	unsigned char                                      UnknownBit00 : 1;                                           // 0x0065:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit01 : 1;                                           // 0x0065:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit02 : 1;                                           // 0x0065:3 (0x0001)  MISSED
	unsigned char                                      UnknownBit03 : 1;                                           // 0x0065:4 (0x0001)  MISSED
	unsigned char                                      UnknownBit04 : 1;                                           // 0x0065:5 (0x0001)  MISSED
	unsigned char                                      UnknownBit05 : 1;                                           // 0x0065:6 (0x0001)  MISSED
	unsigned char                                      UnknownBit06 : 1;                                           // 0x0065:7 (0x0001)  MISSED
	bool                                               bActorEnableCollision : 1;                                  // 0x0066:0 (0x0001)  
	bool                                               bActorIsBeingDestroyed : 1;                                 // 0x0066:1 (0x0001)  
	EActorUpdateOverlapsMethod                         UpdateOverlapsMethodDuringLevelStreaming;                   // 0x0067   (0x0001)  
	EActorUpdateOverlapsMethod                         DefaultUpdateOverlapsMethodDuringLevelStreaming;            // 0x0068   (0x0001)  
	TEnumAsByte<ENetRole>                              RemoteRole;                                                 // 0x0069   (0x0001)  
	unsigned char                                      UnknownData07_6[0x2];                                       // 0x006A   (0x0002)  MISSED
	FRepMovement                                       ReplicatedMovement;                                         // 0x006C   (0x0034)  
	FKuroRepMovement                                   Kuro_ReplicatedMovement;                                    // 0x00A0   (0x0034)  
	float                                              InitialLifeSpan;                                            // 0x00D4   (0x0004)  
	float                                              CustomTimeDilation;                                         // 0x00D8   (0x0004)  
	unsigned char                                      UnknownData08_6[0x4];                                       // 0x00DC   (0x0004)  MISSED
	FRepAttachment                                     AttachmentReplication;                                      // 0x00E0   (0x0040)  
	class AActor*                                      Owner;                                                      // 0x0120   (0x0008)  
	FName                                              NetDriverName;                                              // 0x0128   (0x000C)  
	FName                                              BlueprintTypeName;                                          // 0x0134   (0x000C)  
	uint32_t                                           KuroEntityType;                                             // 0x0140   (0x0004)  
	FName                                              RuntimeGrid;                                                // 0x0144   (0x000C)  
	TEnumAsByte<ENetRole>                              Role;                                                       // 0x0150   (0x0001)  
	unsigned char                                      UnknownData09_6[0x1];                                       // 0x0151   (0x0001)  MISSED
	TEnumAsByte<ENetDormancy>                          NetDormancy;                                                // 0x0152   (0x0001)  
	ESpawnActorCollisionHandlingMethod                 SpawnCollisionHandlingMethod;                               // 0x0153   (0x0001)  
	TEnumAsByte<EAutoReceiveInput>                     AutoReceiveInput;                                           // 0x0154   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x0155   (0x0003)  MISSED
	int32_t                                            InputPriority;                                              // 0x0158   (0x0004)  
	unsigned char                                      UnknownData11_6[0x4];                                       // 0x015C   (0x0004)  MISSED
	class UInputComponent*                             InputComponent;                                             // 0x0160   (0x0008)  
	float                                              NetCullDistanceSquared;                                     // 0x0168   (0x0004)  
	int32_t                                            NetTag;                                                     // 0x016C   (0x0004)  
	float                                              NetUpdateFrequency;                                         // 0x0170   (0x0004)  
	float                                              MinNetUpdateFrequency;                                      // 0x0174   (0x0004)  
	float                                              NetPriority;                                                // 0x0178   (0x0004)  
	unsigned char                                      UnknownData12_6[0xC];                                       // 0x017C   (0x000C)  MISSED
	class APawn*                                       Instigator;                                                 // 0x0188   (0x0008)  
	TArray<class AActor*>                              Children;                                                   // 0x0190   (0x0010)  
	class USceneComponent*                             RootComponent;                                              // 0x01A0   (0x0008)  
	TArray<class AMatineeActor*>                       ControllingMatineeActors;                                   // 0x01A8   (0x0010)  
	unsigned char                                      UnknownData13_6[0x8];                                       // 0x01B8   (0x0008)  MISSED
	TArray<FName>                                      Layers;                                                     // 0x01C0   (0x0010)  
	SDK_UNDEFINED(8,13) /* TWeakObjectPtr<UChildActorComponent*> */ __um(ParentComponent);                         // 0x01D0   (0x0008)  
	unsigned char                                      UnknownData14_6[0x8];                                       // 0x01D8   (0x0008)  MISSED
	TArray<FName>                                      Tags;                                                       // 0x01E0   (0x0010)  
	SDK_UNDEFINED(1,14) /* FMulticastSparseDelegate */ __um(OnTakeAnyDamage);                                      // 0x01F0   (0x0001)  
	SDK_UNDEFINED(1,15) /* FMulticastSparseDelegate */ __um(OnTakePointDamage);                                    // 0x01F1   (0x0001)  
	SDK_UNDEFINED(1,16) /* FMulticastSparseDelegate */ __um(OnTakeRadialDamage);                                   // 0x01F2   (0x0001)  
	SDK_UNDEFINED(1,17) /* FMulticastSparseDelegate */ __um(OnActorBeginOverlap);                                  // 0x01F3   (0x0001)  
	SDK_UNDEFINED(1,18) /* FMulticastSparseDelegate */ __um(OnActorEndOverlap);                                    // 0x01F4   (0x0001)  
	SDK_UNDEFINED(1,19) /* FMulticastSparseDelegate */ __um(OnBeginCursorOver);                                    // 0x01F5   (0x0001)  
	SDK_UNDEFINED(1,20) /* FMulticastSparseDelegate */ __um(OnEndCursorOver);                                      // 0x01F6   (0x0001)  
	SDK_UNDEFINED(1,21) /* FMulticastSparseDelegate */ __um(OnClicked);                                            // 0x01F7   (0x0001)  
	SDK_UNDEFINED(1,22) /* FMulticastSparseDelegate */ __um(OnReleased);                                           // 0x01F8   (0x0001)  
	SDK_UNDEFINED(1,23) /* FMulticastSparseDelegate */ __um(OnInputTouchBegin);                                    // 0x01F9   (0x0001)  
	SDK_UNDEFINED(1,24) /* FMulticastSparseDelegate */ __um(OnInputTouchEnd);                                      // 0x01FA   (0x0001)  
	SDK_UNDEFINED(1,25) /* FMulticastSparseDelegate */ __um(OnInputTouchEnter);                                    // 0x01FB   (0x0001)  
	SDK_UNDEFINED(1,26) /* FMulticastSparseDelegate */ __um(OnInputTouchLeave);                                    // 0x01FC   (0x0001)  
	SDK_UNDEFINED(1,27) /* FMulticastSparseDelegate */ __um(OnActorHit);                                           // 0x01FD   (0x0001)  
	SDK_UNDEFINED(1,28) /* FMulticastSparseDelegate */ __um(OnDestroyed);                                          // 0x01FE   (0x0001)  
	SDK_UNDEFINED(1,29) /* FMulticastSparseDelegate */ __um(OnEndPlay);                                            // 0x01FF   (0x0001)  
	unsigned char                                      UnknownData15_6[0x60];                                      // 0x0200   (0x0060)  MISSED
	TArray<class UActorComponent*>                     InstanceComponents;                                         // 0x0260   (0x0010)  
	TArray<class UActorComponent*>                     BlueprintCreatedComponents;                                 // 0x0270   (0x0010)  
	unsigned char                                      UnknownData16_6[0x10];                                      // 0x0280   (0x0010)  MISSED
	TArray<class AActor*>                              MoveIgnoreActors;                                           // 0x0290   (0x0010)  
	unsigned char                                      UnknownData17_7[0x8];                                       // 0x02A0   (0x0008)  MISSED
	// bool WasRecentlyRenderedOnScreen(float Tolerance);                                                                       // [0x45c2870] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool WasRecentlyRendered(float Tolerance);                                                                               // [0x45c27e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void UserConstructionScript();                                                                                           // [0x25a7960] Event|Public|BlueprintEvent 
	// void TearOff();                                                                                                          // [0x3633740] Native|Public|BlueprintCallable 
	// void SnapRootComponentTo(class AActor* InParentActor, FName InSocketName);                                               // [0x45c26f0] Final|Native|Public|BlueprintCallable 
	// void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);                                                              // [0x45c25e0] Final|Native|Public|BlueprintCallable 
	// void SetTickableWhenPaused(bool bTickableWhenPaused);                                                                    // [0x45c2660] Final|Native|Public|BlueprintCallable 
	// void SetReplicates(bool bInReplicates);                                                                                  // [0x45c2550] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// void SetReplicateMovement(bool bInReplicateMovement);                                                                    // [0x45c24c0] Native|Public|BlueprintCallable 
	// void SetPrimitiveEntityType(uint32_t Type);                                                                              // [0x45c2430] Final|Native|Public  
	// void SetPrimitiveBlueprintTypeName(FName Name);                                                                          // [0x45c2390] Final|Native|Public  
	// void SetOwner(class AActor* NewOwner);                                                                                   // [0x45c2300] Native|Public|BlueprintCallable 
	// void SetNetDormancy(TEnumAsByte<ENetDormancy> NewDormancy);                                                              // [0x45c2280] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// void SetLifeSpan(float InLifespan);                                                                                      // [0x45c21f0] Native|Public|BlueprintCallable 
	// void SetKuroNetMode(TEnumAsByte<EKuroNetMode> KNM);                                                                      // [0x45c2180] Final|Native|Static|Public|BlueprintCallable 
	// void SetForceHidden(bool bForce);                                                                                        // [0x45c20f0] Final|Native|Public|BlueprintCallable 
	// void SetAutoDestroyWhenFinished(bool bVal);                                                                              // [0x45c2060] Final|Native|Public|BlueprintCallable 
	// void SetActorTickInterval(float TickInterval);                                                                           // [0x45c1fe0] Final|Native|Public|BlueprintCallable 
	// void SetActorTickEnabled(bool bEnabled);                                                                                 // [0x45c1f50] Final|Native|Public|BlueprintCallable 
	// void SetActorScale3D(FVector NewScale3D);                                                                                // [0x45c1ec0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetActorRelativeScale3D(FVector NewRelativeScale);                                                                  // [0x45c1e30] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetActorHiddenInGame(bool bNewHidden);                                                                              // [0x45c1da0] Native|Public|BlueprintCallable 
	// void SetActorEnableCollision(bool bNewActorEnableCollision);                                                             // [0x45c1d10] Final|Native|Public|BlueprintCallable 
	// void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);                                      // [0x45c1c80] Native|Public|BlueprintCallable 
	// void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);                                                       // [0x45c1bf0] Native|Public|BlueprintCallable 
	// void ReceiveTick(float DeltaSeconds);                                                                                    // [0x25a7960] Event|Public|BlueprintEvent 
	// void ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, FVector Origin, FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser); // [0x25a7960] BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// void ReceivePointDamage(float Damage, class UDamageType* DamageType, FVector HitLocation, FVector HitNormal, class UPrimitiveComponent* HitComponent, FName BoneName, FVector ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, FHitResult& HitInfo); // [0x25a7960] BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, FVector HitLocation, FVector HitNormal, FVector NormalImpulse, FHitResult& Hit); // [0x25a7960] Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);                                                          // [0x25a7960] Event|Protected|BlueprintEvent 
	// void ReceiveDestroyed();                                                                                                 // [0x25a7960] Event|Public|BlueprintEvent 
	// void ReceiveBeginPlay();                                                                                                 // [0x25a7960] Event|Protected|BlueprintEvent 
	// void ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser); // [0x25a7960] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// void ReceiveActorOnReleased(FKey ButtonReleased);                                                                        // [0x25a7960] Event|Public|BlueprintEvent 
	// void ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);                                                // [0x25a7960] Event|Public|BlueprintEvent 
	// void ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);                                                // [0x25a7960] Event|Public|BlueprintEvent 
	// void ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);                                                  // [0x25a7960] Event|Public|BlueprintEvent 
	// void ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);                                                // [0x25a7960] Event|Public|BlueprintEvent 
	// void ReceiveActorOnClicked(FKey ButtonPressed);                                                                          // [0x25a7960] Event|Public|BlueprintEvent 
	// void ReceiveActorEndOverlap(class AActor* OtherActor);                                                                   // [0x25a7960] Event|Public|BlueprintEvent 
	// void ReceiveActorEndCursorOver();                                                                                        // [0x25a7960] Event|Public|BlueprintEvent 
	// void ReceiveActorBeginOverlap(class AActor* OtherActor);                                                                 // [0x25a7960] Event|Public|BlueprintEvent 
	// void ReceiveActorBeginCursorOver();                                                                                      // [0x25a7960] Event|Public|BlueprintEvent 
	// void PrestreamTextures(float Seconds, bool bEnableStreaming, int32_t CinematicTextureGroups);                            // [0x45c1ad0] Native|Public|BlueprintCallable 
	// void OnRep_ReplicateMovement();                                                                                          // [0x14b2530] Native|Public        
	// void OnRep_ReplicatedMovement();                                                                                         // [0x45c1ab0] Native|Public        
	// void OnRep_Owner();                                                                                                      // [0x1773580] Native|Protected     
	// void OnRep_Instigator();                                                                                                 // [0x45c1a90] Native|Public        
	// void OnRep_AttachmentReplication();                                                                                      // [0x36333c0] Native|Public        
	// void MakeNoise(float Loudness, class APawn* NoiseInstigator, FVector NoiseLocation, float MaxRange, FName Tag);          // [0x45c18d0] Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable 
	// class UMaterialInstanceDynamic* MakeMIDForMaterial(class UMaterialInterface* Parent);                                    // [0x45c1830] Final|Native|Public|BlueprintCallable 
	// void KuroTickActorOutside(float DeltaSeconds);                                                                           // [0x45c1620] Final|Native|Public|BlueprintCallable 
	// void Kuro_SetRole(TEnumAsByte<EKuroNetRole> InRole);                                                                     // [0x45c17b0] Final|Native|Public|BlueprintCallable 
	// void Kuro_SetReplicatedMovement(FKuroRepMovement& InReplicatedMovement);                                                 // [0x45c1710] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void Kuro_OnRep_ReplicatedMovement();                                                                                    // [0x45c16f0] Native|Public|BlueprintCallable 
	// FKuroRepMovement Kuro_GetReplicatedMovement();                                                                           // [0x45c16a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// TEnumAsByte<EKuroNetRole> Kuro_GetLocalRole();                                                                           // [0xc2ea30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool K2_TeleportTo(FVector DestLocation, FRotator DestRotation);                                                         // [0x45c1530] Final|Native|Public|HasDefaults|BlueprintCallable 
	// bool K2_SetActorTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);            // [0x45c1320] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool K2_SetActorRotation(FRotator NewRotation, bool bTeleportPhysics);                                                   // [0x45c1230] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void K2_SetActorRelativeTransform(FTransform& NewRelativeTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x45c1020] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void K2_SetActorRelativeRotation(FRotator NewRelativeRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x45c0e70] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void K2_SetActorRelativeLocation(FVector NewRelativeLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);  // [0x45c0cc0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool K2_SetActorLocationAndRotation(FVector NewLocation, FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x45c0aa0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool K2_SetActorLocation(FVector NewLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);                  // [0x45c08e0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void K2_OnReset();                                                                                                       // [0x25a7960] Event|Public|BlueprintEvent 
	// void K2_OnEndViewTarget(class APlayerController* PC);                                                                    // [0x25a7960] Event|Public|BlueprintEvent 
	// void K2_OnBecomeViewTarget(class APlayerController* PC);                                                                 // [0x25a7960] Event|Public|BlueprintEvent 
	// bool K2_KuroTeleportTo(FVector DestLocation, FRotator DestRotation);                                                     // [0x45c07f0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// bool K2_KuroSetActorRotation(FRotator NewRotation, bool bSweep, bool bTeleportPhysics, bool bIgnoreOverlap);             // [0x45c0640] Final|Native|Public|HasDefaults|BlueprintCallable 
	// class USceneComponent* K2_GetRootComponent();                                                                            // [0x45c0620] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// TArray<UActorComponent*> K2_GetComponentsByClass(class UClass* ComponentClass);                                          // [0x45c0540] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FRotator K2_GetActorRotation();                                                                                          // [0x45c0480] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FQuat K2_GetActorQuaternion();                                                                                           // [0x45c0420] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector K2_GetActorLocation();                                                                                           // [0x45c03a0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// void K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);          // [0x45c0290] Final|Native|Public|BlueprintCallable 
	// void K2_DestroyComponent(class UActorComponent* Component);                                                              // [0x45c0200] Final|Native|Public|BlueprintCallable 
	// void K2_DestroyActor();                                                                                                  // [0x1089a50] Native|Public|BlueprintCallable 
	// void K2_AttachToComponent(class USceneComponent* Parent, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // [0x45c0010] Final|Native|Public|BlueprintCallable 
	// void K2_AttachToActor(class AActor* ParentActor, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // [0x45bfe20] Final|Native|Public|BlueprintCallable 
	// void K2_AttachRootComponentToActor(class AActor* InParentActor, FName InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies); // [0x45bfca0] Final|Native|Public|BlueprintCallable 
	// void K2_AttachRootComponentTo(class USceneComponent* InParent, FName InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies); // [0x45bfb20] Final|Native|Public|BlueprintCallable 
	// void K2_AddActorWorldTransformKeepScale(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x45bf910] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void K2_AddActorWorldTransform(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);     // [0x45bf700] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void K2_AddActorWorldRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);          // [0x45bf550] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void K2_AddActorWorldOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);             // [0x45bf3a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void K2_AddActorLocalTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);       // [0x45bf190] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void K2_AddActorLocalRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);          // [0x45befe0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void K2_AddActorLocalOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);             // [0x45bee30] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool IsUEOrignal();                                                                                                      // [0x45bee00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsOverlappingActor(class AActor* Other);                                                                            // [0x45bed60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsChildActor();                                                                                                     // [0x45bed30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsAutonomousProxy();                                                                                                // [0x45bed00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsActorTickEnabled();                                                                                               // [0x45becd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsActorBeingDestroyed();                                                                                            // [0x45beca0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void IgnoreActorWhenMoving(class AActor* Actor, bool bShouldIgnore, bool bBoth);                                         // [0x45beb90] Final|Native|Public|BlueprintCallable 
	// bool HasAuthority();                                                                                                     // [0x45beb60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetVerticalDistanceTo(class AActor* OtherActor);                                                                   // [0x45beac0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector GetVelocity();                                                                                                   // [0x45bea80] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FTransform GetTransform();                                                                                               // [0x45bea30] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// bool GetTickableWhenPaused();                                                                                            // [0x45bea00] Final|Native|Public|BlueprintCallable 
	// float GetSquaredHorizontalDistanceTo(class AActor* OtherActor);                                                          // [0x45be960] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetSquaredDistanceTo(class AActor* OtherActor);                                                                    // [0x45be8c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// TEnumAsByte<ENetRole> GetRemoteRole();                                                                                   // [0x45be8a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// uint32_t GetPrimitiveEntityType();                                                                                       // [0x45be880] Final|Native|Public  
	// FName GetPrimitiveBlueprintTypeName();                                                                                   // [0x45be850] Final|Native|Public  
	// class UChildActorComponent* GetParentComponent();                                                                        // [0x45be820] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class AActor* GetParentActor();                                                                                          // [0x45be7f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class AActor* GetOwner();                                                                                                // [0x45be7d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void GetOverlappingComponents(TArray<UPrimitiveComponent*>& OverlappingComponents);                                      // [0x45be720] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// void GetOverlappingActors(TArray<AActor*>& OverlappingActors, class UClass* ClassFilter);                                // [0x45be620] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// TEnumAsByte<ENetRole> GetLocalRole();                                                                                    // [0xc2ea50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetLifeSpan();                                                                                                     // [0x45be5e0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FTransform GetLevelTransform();                                                                                          // [0x45be580] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// class ULevel* GetLevel();                                                                                                // [0x45be550] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// TEnumAsByte<EKuroNetMode> GetKuroNetMode();                                                                              // [0x45be530] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FTransform GetInverseTransform();                                                                                        // [0x45be4e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// class AController* GetInstigatorController();                                                                            // [0x45be4b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class APawn* GetInstigator();                                                                                            // [0x45be480] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector GetInputVectorAxisValue(FKey InputAxisKey);                                                                      // [0x45be360] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// float GetInputAxisValue(FName InputAxisName);                                                                            // [0x45be2b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetInputAxisKeyValue(FKey InputAxisKey);                                                                           // [0x45be1a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetHorizontalDotProductTo(class AActor* OtherActor);                                                               // [0x45be100] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetHorizontalDistanceTo(class AActor* OtherActor);                                                                 // [0x45be060] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetGameTimeSinceCreation();                                                                                        // [0x45be030] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetDotProductTo(class AActor* OtherActor);                                                                         // [0x45bdf90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetDistanceTo(class AActor* OtherActor);                                                                           // [0x45bdef0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// TArray<UActorComponent*> GetComponentsByTag(class UClass* ComponentClass, FName Tag);                                    // [0x45bddb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// TArray<UActorComponent*> GetComponentsByInterface(class UClass* Interface);                                              // [0x45bdcd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UActorComponent* GetComponentByClass(class UClass* ComponentClass);                                                // [0x45bdc30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class AActor* GetAttachRootParentActor();                                                                                // [0x45bda00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FName GetAttachParentSocketName();                                                                                       // [0x45bd9c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class AActor* GetAttachParentActor();                                                                                    // [0x45bd990] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void GetAttachedActors(TArray<AActor*>& OutActors, bool bResetArray);                                                    // [0x45bdb30] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// void GetAttachedActorDescendants(TArray<AActor*>& OutActors, bool bResetArray);                                          // [0x45bda30] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// void GetAllChildActors(TArray<AActor*>& ChildActors, bool bIncludeDescendants);                                          // [0x45bd890] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// FVector GetActorUpVector();                                                                                              // [0x45bd820] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// float GetActorTimeDilation();                                                                                            // [0x45bd7f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetActorTickInterval();                                                                                            // [0x45bd7c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector GetActorScale3D();                                                                                               // [0x45bd780] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetActorRightVector();                                                                                           // [0x45bd710] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetActorRelativeScale3D();                                                                                       // [0x45bd6d0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetActorForwardVector();                                                                                         // [0x45bd660] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// void GetActorEyesViewPoint(FVector& OutLocation, FRotator& OutRotation);                                                 // [0x45bd570] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// bool GetActorEnableCollision();                                                                                          // [0x45bd550] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void GetActorBounds(bool bOnlyCollidingComponents, FVector& Origin, FVector& BoxExtent, bool bIncludeFromChildActors);   // [0x45bd3c0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// void ForceNetUpdate();                                                                                                   // [0x45bd3a0] Native|Public|BlueprintCallable 
	// void FlushNetDormancy();                                                                                                 // [0x45bd380] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// void FinishAddComponent(class UActorComponent* Component, bool bManualAttachment, FTransform& RelativeTransform);        // [0x45bd220] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void EnableInput(class APlayerController* PlayerController);                                                             // [0x45bd190] Native|Public|BlueprintCallable 
	// void DisableInput(class APlayerController* PlayerController);                                                            // [0x45bd100] Native|Public|BlueprintCallable 
	// void DetachRootComponentFromParent(bool bMaintainWorldPosition);                                                         // [0x45bd070] Final|Native|Public|BlueprintCallable 
	// void ClearMoveIgnoreActors(bool bClearBoth);                                                                             // [0x45bcfe0] Final|Native|Public|BlueprintCallable 
	// void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);                                         // [0x45bcf50] Native|Public|BlueprintCallable 
	// void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);                                                          // [0x45bcec0] Native|Public|BlueprintCallable 
	// class UActorComponent* AddComponentByClass(class UClass* Class, bool bManualAttachment, FTransform& RelativeTransform, bool bDeferredFinish, FName ComponentName); // [0x45bcca0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// class UActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, FTransform& RelativeTransform, class UObject* ComponentTemplateContext, bool bDeferredFinish); // [0x45bca90] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool ActorHasTag(FName Tag);                                                                                             // [0x45bc9e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.DebugTextInfo
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 pad: 0x0000
struct FDebugTextInfo
{ 
	class AActor*                                      SrcActor;                                                   // 0x0000   (0x0008)  
	FVector                                            SrcActorOffset;                                             // 0x0008   (0x000C)  
	FVector                                            SrcActorDesiredOffset;                                      // 0x0014   (0x000C)  
	FString                                            DebugText;                                                  // 0x0020   (0x0010)  
	float                                              TimeRemaining;                                              // 0x0030   (0x0004)  
	float                                              Duration;                                                   // 0x0034   (0x0004)  
	FColor                                             TextColor;                                                  // 0x0038   (0x0004)  
	bool                                               bAbsoluteLocation : 1;                                      // 0x003C:0 (0x0001)  
	bool                                               bKeepAttachedToActor : 1;                                   // 0x003C:1 (0x0001)  
	bool                                               bDrawShadow : 1;                                            // 0x003C:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x003D   (0x0003)  MISSED
	FVector                                            OrigActorLocation;                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x004C   (0x0004)  MISSED
	class UFont*                                       Font;                                                       // 0x0050   (0x0008)  
	float                                              FontScale;                                                  // 0x0058   (0x0004)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/Engine.HUD
/// Size: 0x00F0 (240 bytes) (0x0002A8 - 0x000398) align 8 pad: 0x0000
class AHUD : public AActor
{ 
public:
	class APlayerController*                           PlayerOwner;                                                // 0x02A8   (0x0008)  
	bool                                               bLostFocusPaused : 1;                                       // 0x02B0:0 (0x0001)  
	bool                                               bShowHUD : 1;                                               // 0x02B0:1 (0x0001)  
	bool                                               bShowDebugInfo : 1;                                         // 0x02B0:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x02B1   (0x0003)  MISSED
	int32_t                                            CurrentTargetIndex;                                         // 0x02B4   (0x0004)  
	bool                                               bShowHitBoxDebugInfo : 1;                                   // 0x02B8:0 (0x0001)  
	bool                                               bShowOverlays : 1;                                          // 0x02B8:1 (0x0001)  
	bool                                               bEnableDebugTextShadow : 1;                                 // 0x02B8:2 (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x02B9   (0x0007)  MISSED
	TArray<class AActor*>                              PostRenderedActors;                                         // 0x02C0   (0x0010)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x02D0   (0x0008)  MISSED
	TArray<FName>                                      DebugDisplay;                                               // 0x02D8   (0x0010)  
	TArray<FName>                                      ToggledDebugCategories;                                     // 0x02E8   (0x0010)  
	class UCanvas*                                     Canvas;                                                     // 0x02F8   (0x0008)  
	class UCanvas*                                     DebugCanvas;                                                // 0x0300   (0x0008)  
	TArray<FDebugTextInfo>                             DebugTextList;                                              // 0x0308   (0x0010)  
	class UClass*                                      ShowDebugTargetDesiredClass;                                // 0x0318   (0x0008)  
	class AActor*                                      ShowDebugTargetActor;                                       // 0x0320   (0x0008)  
	unsigned char                                      UnknownData03_7[0x70];                                      // 0x0328   (0x0070)  MISSED
	// void ShowHUD();                                                                                                          // [0x46255d0] Exec|Native|Public   
	// void ShowDebugToggleSubCategory(FName Category);                                                                         // [0x4644e00] Final|Exec|Native|Public 
	// void ShowDebugForReticleTargetToggle(class UClass* DesiredClass);                                                        // [0x4644d70] Final|Exec|Native|Public 
	// void ShowDebug(FName DebugType);                                                                                         // [0x4644cc0] Exec|Native|Public   
	// void RemoveDebugText(class AActor* SrcActor, bool bLeaveDurationText);                                                   // [0x4644bf0] Final|Net|NetReliableNative|Event|Public|NetClient 
	// void RemoveAllDebugStrings();                                                                                            // [0x4644bd0] Final|Net|NetReliableNative|Event|Public|NetClient 
	// void ReceiveHitBoxRelease(FName BoxName);                                                                                // [0x25a7960] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// void ReceiveHitBoxEndCursorOver(FName BoxName);                                                                          // [0x25a7960] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// void ReceiveHitBoxClick(FName BoxName);                                                                                  // [0x25a7960] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// void ReceiveHitBoxBeginCursorOver(FName BoxName);                                                                        // [0x25a7960] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// void ReceiveDrawHUD(int32_t SizeX, int32_t SizeY);                                                                       // [0x25a7960] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// FVector Project(FVector Location);                                                                                       // [0x4644720] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// void PreviousDebugTarget();                                                                                              // [0x4603400] Exec|Native|Public   
	// void NextDebugTarget();                                                                                                  // [0x463b990] Exec|Native|Public   
	// void GetTextSize(FString Text, float& OutWidth, float& OutHeight, class UFont* Font, float Scale);                       // [0x4643aa0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// class APlayerController* GetOwningPlayerController();                                                                    // [0x20496a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class APawn* GetOwningPawn();                                                                                            // [0x4643a70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void GetActorsInSelectionRectangle(class UClass* ClassFilter, FVector2D& FirstPoint, FVector2D& SecondPoint, TArray<AActor*>& OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed); // [0x4643410] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void DrawTextureSimple(class UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);         // [0x4643260] Final|Native|Public|BlueprintCallable 
	// void DrawTexture(class UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, FLinearColor TintColor, TEnumAsByte<EBlendMode> BlendMode, float Scale, bool bScalePosition, float Rotation, FVector2D RotPivot); // [0x4642e00] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void DrawText(FString Text, FLinearColor TextColor, float ScreenX, float ScreenY, class UFont* Font, float Scale, bool bScalePosition); // [0x4642bc0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void DrawRect(FLinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);                       // [0x4642a00] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void DrawMaterialTriangle(class UMaterialInterface* Material, FVector2D V0_Pos, FVector2D V1_Pos, FVector2D V2_Pos, FVector2D V0_UV, FVector2D V1_UV, FVector2D V2_UV, FLinearColor V0_Color, FLinearColor V1_Color, FLinearColor V2_Color); // [0x4642710] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void DrawMaterialSimple(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition); // [0x46424f0] Final|Native|Public|BlueprintCallable 
	// void DrawMaterial(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, FVector2D RotPivot); // [0x4642120] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, FLinearColor LineColor, float LineThickness); // [0x4641f20] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void Deproject(float ScreenX, float ScreenY, FVector& WorldPosition, FVector& WorldDirection);                           // [0x4641da0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// void AddHitBox(FVector2D Position, FVector2D Size, FName InName, bool bConsumesInput, int32_t Priority);                 // [0x4641a70] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void AddDebugText(FString DebugText, class AActor* SrcActor, float Duration, FVector Offset, FVector DesiredOffset, FColor TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, class UFont* InFont, float FontScale, bool bDrawShadow); // [0x46416b0] Final|Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
};

/// Class /Script/Engine.Pawn
/// Size: 0x0060 (96 bytes) (0x0002A8 - 0x000308) align 8 pad: 0x0000
class APawn : public AActor
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x02A8   (0x0008)  MISSED
	bool                                               bUseControllerRotationPitch : 1;                            // 0x02B0:0 (0x0001)  
	bool                                               bUseControllerRotationYaw : 1;                              // 0x02B0:1 (0x0001)  
	bool                                               bUseControllerRotationRoll : 1;                             // 0x02B0:2 (0x0001)  
	bool                                               bCanAffectNavigationGeneration : 1;                         // 0x02B0:3 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x02B1   (0x0003)  MISSED
	float                                              BaseEyeHeight;                                              // 0x02B4   (0x0004)  
	TEnumAsByte<EAutoReceiveInput>                     AutoPossessPlayer;                                          // 0x02B8   (0x0001)  
	EAutoPossessAI                                     AutoPossessAI;                                              // 0x02B9   (0x0001)  
	char                                               RemoteViewPitch;                                            // 0x02BA   (0x0001)  
	unsigned char                                      UnknownData02_6[0x5];                                       // 0x02BB   (0x0005)  MISSED
	class UClass*                                      AIControllerClass;                                          // 0x02C0   (0x0008)  
	class APlayerState*                                PlayerState;                                                // 0x02C8   (0x0008)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x02D0   (0x0008)  MISSED
	class AController*                                 LastHitBy;                                                  // 0x02D8   (0x0008)  
	class AController*                                 Controller;                                                 // 0x02E0   (0x0008)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x02E8   (0x0004)  MISSED
	FVector                                            ControlInputVector;                                         // 0x02EC   (0x000C)  
	FVector                                            LastControlInputVector;                                     // 0x02F8   (0x000C)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x0304   (0x0004)  MISSED
	// void SpawnDefaultController();                                                                                           // [0x46f9ed0] Native|Public|BlueprintCallable 
	// void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);                                                // [0x46f8e90] Final|Native|Public|BlueprintCallable 
	// void ReceiveUnpossessed(class AController* OldController);                                                               // [0x25a7960] Event|Public|BlueprintEvent 
	// void ReceivePossessed(class AController* NewController);                                                                 // [0x25a7960] Event|Public|BlueprintEvent 
	// void PawnMakeNoise(float Loudness, FVector NoiseLocation, bool bUseNoiseMakerLocation, class AActor* NoiseMaker);        // [0x46f8400] Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable 
	// void OnRep_PlayerState();                                                                                                // [0x978cc0] Native|Public        
	// void OnRep_Controller();                                                                                                 // [0x46f83e0] Native|Public        
	// void LaunchPawn(FVector LaunchVelocity, bool bXYOverride, bool bZOverride);                                              // [0x46f81a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// FVector K2_GetMovementInputVector();                                                                                     // [0x46f8040] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// bool IsPlayerControlled();                                                                                               // [0x460c0b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsPawnControlled();                                                                                                 // [0x46f8170] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsMoveInputIgnored();                                                                                               // [0x46f8110] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsLocallyControlled();                                                                                              // [0x46f80e0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsControlled();                                                                                                     // [0x46f80b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsBotControlled();                                                                                                  // [0x462a630] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector GetPendingMovementInputVector();                                                                                 // [0x46f8040] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetNavAgentLocation();                                                                                           // [0x46f7f80] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// class UPawnMovementComponent* GetMovementComponent();                                                                    // [0xc07f50] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class AActor* GetMovementBaseActor(class APawn* Pawn);                                                                   // [0x46f7ef0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FVector GetLastMovementInputVector();                                                                                    // [0x46f7eb0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FRotator GetControlRotation();                                                                                           // [0x46f7d80] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// class AController* GetController();                                                                                      // [0x46f7dc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FRotator GetBaseAimRotation();                                                                                           // [0x46f7b80] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// void DetachFromControllerPendingDestroy();                                                                               // [0x46f7b60] Native|Public|BlueprintCallable 
	// FVector ConsumeMovementInputVector();                                                                                    // [0x46f7b20] Native|Public|HasDefaults|BlueprintCallable 
	// void AddMovementInput(FVector WorldDirection, float ScaleValue, bool bForce);                                            // [0x46f75b0] Native|Public|HasDefaults|BlueprintCallable 
	// void AddControllerYawInput(float Val);                                                                                   // [0x46f7440] Native|Public|BlueprintCallable 
	// void AddControllerRollInput(float Val);                                                                                  // [0x46f73b0] Native|Public|BlueprintCallable 
	// void AddControllerPitchInput(float Val);                                                                                 // [0x46f7320] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.DefaultPawn
/// Size: 0x0028 (40 bytes) (0x000308 - 0x000330) align 8 pad: 0x0000
class ADefaultPawn : public APawn
{ 
public:
	float                                              BaseTurnRate;                                               // 0x0308   (0x0004)  
	float                                              BaseLookUpRate;                                             // 0x030C   (0x0004)  
	class UPawnMovementComponent*                      MovementComponent;                                          // 0x0310   (0x0008)  
	class USphereComponent*                            CollisionComponent;                                         // 0x0318   (0x0008)  
	class UStaticMeshComponent*                        MeshComponent;                                              // 0x0320   (0x0008)  
	bool                                               bAddDefaultMovementBindings : 1;                            // 0x0328:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0329   (0x0007)  MISSED
	// void TurnAtRate(float Rate);                                                                                             // [0x4616620] Native|Public|BlueprintCallable 
	// void MoveUp_World(float Val);                                                                                            // [0x4615690] Native|Public|BlueprintCallable 
	// void MoveRight(float Val);                                                                                               // [0x4615600] Native|Public|BlueprintCallable 
	// void MoveForward(float Val);                                                                                             // [0x4615570] Native|Public|BlueprintCallable 
	// void LookUpAtRate(float Rate);                                                                                           // [0x46154e0] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.BlueprintCore
/// Size: 0x0028 (40 bytes) (0x000030 - 0x000058) align 8 pad: 0x0000
class UBlueprintCore : public UObject
{ 
public:
	class UClass*                                      SkeletonGeneratedClass;                                     // 0x0030   (0x0008)  
	class UClass*                                      GeneratedClass;                                             // 0x0038   (0x0008)  
	bool                                               bLegacyNeedToPurgeSkelRefs;                                 // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	FGuid                                              BlueprintGuid;                                              // 0x0044   (0x0010)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Struct /Script/Engine.BPComponentClassOverride
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FBPComponentClassOverride
{ 
	FName                                              ComponentName;                                              // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	class UClass*                                      ComponentClass;                                             // 0x0010   (0x0008)  
};

/// Class /Script/Engine.Blueprint
/// Size: 0x0050 (80 bytes) (0x000058 - 0x0000A8) align 8 pad: 0x0000
class UBlueprint : public UBlueprintCore
{ 
public:
	class UClass*                                      ParentClass;                                                // 0x0058   (0x0008)  
	TEnumAsByte<EBlueprintType>                        BlueprintType;                                              // 0x0060   (0x0001)  
	bool                                               bRecompileOnLoad : 1;                                       // 0x0061:0 (0x0001)  
	bool                                               bHasBeenRegenerated : 1;                                    // 0x0061:1 (0x0001)  
	bool                                               bIsRegeneratingOnLoad : 1;                                  // 0x0061:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0062   (0x0002)  MISSED
	int32_t                                            BlueprintSystemVersion;                                     // 0x0064   (0x0004)  
	class USimpleConstructionScript*                   SimpleConstructionScript;                                   // 0x0068   (0x0008)  
	TArray<class UActorComponent*>                     ComponentTemplates;                                         // 0x0070   (0x0010)  
	TArray<class UTimelineTemplate*>                   Timelines;                                                  // 0x0080   (0x0010)  
	TArray<FBPComponentClassOverride>                  ComponentClassOverrides;                                    // 0x0090   (0x0010)  
	class UInheritableComponentHandler*                InheritableComponentHandler;                                // 0x00A0   (0x0008)  
};

/// Class /Script/Engine.BlueprintAsyncActionBase
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UBlueprintAsyncActionBase : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0030   (0x0008)  MISSED
	// void Activate();                                                                                                         // [0x14b2530] Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.LightingChannels
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FLightingChannels
{ 
	bool                                               bChannel0 : 1;                                              // 0x0000:0 (0x0001)  
	bool                                               bChannel1 : 1;                                              // 0x0000:1 (0x0001)  
	bool                                               bChannel2 : 1;                                              // 0x0000:2 (0x0001)  
};

/// Struct /Script/Engine.CustomPrimitiveData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FCustomPrimitiveData
{ 
	TArray<float>                                      Data;                                                       // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.CollisionResponseContainer
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 1 pad: 0x0000
struct FCollisionResponseContainer
{ 
	TEnumAsByte<ECollisionResponse>                    WorldStatic;                                                // 0x0000   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    WorldDynamic;                                               // 0x0001   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    Pawn;                                                       // 0x0002   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    Visibility;                                                 // 0x0003   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    Camera;                                                     // 0x0004   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    PhysicsBody;                                                // 0x0005   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    Vehicle;                                                    // 0x0006   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    Destructible;                                               // 0x0007   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    EngineTraceChannel1;                                        // 0x0008   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    EngineTraceChannel2;                                        // 0x0009   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    EngineTraceChannel3;                                        // 0x000A   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    EngineTraceChannel4;                                        // 0x000B   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    EngineTraceChannel5;                                        // 0x000C   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    EngineTraceChannel6;                                        // 0x000D   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel1;                                          // 0x000E   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel2;                                          // 0x000F   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel3;                                          // 0x0010   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel4;                                          // 0x0011   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel5;                                          // 0x0012   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel6;                                          // 0x0013   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel7;                                          // 0x0014   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel8;                                          // 0x0015   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel9;                                          // 0x0016   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel10;                                         // 0x0017   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel11;                                         // 0x0018   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel12;                                         // 0x0019   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel13;                                         // 0x001A   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel14;                                         // 0x001B   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel15;                                         // 0x001C   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel16;                                         // 0x001D   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel17;                                         // 0x001E   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel18;                                         // 0x001F   (0x0001)  
};

/// Struct /Script/Engine.ResponseChannel
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FResponseChannel
{ 
	FName                                              Channel;                                                    // 0x0000   (0x000C)  
	TEnumAsByte<ECollisionResponse>                    Response;                                                   // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Struct /Script/Engine.CollisionResponse
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FCollisionResponse
{ 
	FCollisionResponseContainer                        ResponseToChannels;                                         // 0x0000   (0x0020)  
	TArray<FResponseChannel>                           ResponseArray;                                              // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.WalkableSlopeOverride
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FWalkableSlopeOverride
{ 
	TEnumAsByte<EWalkableSlopeBehavior>                WalkableSlopeBehavior;                                      // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              WalkableSlopeAngle;                                         // 0x0004   (0x0004)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0008   (0x0008)  MISSED
};

/// Struct /Script/Engine.BodyInstance
/// Size: 0x0148 (328 bytes) (0x000018 - 0x000160) align 8 pad: 0x0000
struct FBodyInstance : FBodyInstanceCore
{ 
	unsigned char                                      UnknownData00_3[0x6];                                       // 0x0018   (0x0006)  MISSED
	TEnumAsByte<ECollisionChannel>                     ObjectType;                                                 // 0x001E   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x001F   (0x0001)  MISSED
	TEnumAsByte<ECollisionEnabled>                     CollisionEnabled;                                           // 0x0020   (0x0001)  
	unsigned char                                      UnknownData02_6[0x38];                                      // 0x0021   (0x0038)  MISSED
	ESleepFamily                                       SleepFamily;                                                // 0x0059   (0x0001)  
	TEnumAsByte<EDOFMode>                              DOFMode;                                                    // 0x005A   (0x0001)  
	bool                                               bUseCCD : 1;                                                // 0x005B:0 (0x0001)  
	bool                                               bIgnoreAnalyticCollisions : 1;                              // 0x005B:1 (0x0001)  
	bool                                               bNotifyRigidBodyCollision : 1;                              // 0x005B:2 (0x0001)  
	unsigned char                                      UnknownBit03 : 1;                                           // 0x005B:3 (0x0001)  MISSED
	bool                                               bLockTranslation : 1;                                       // 0x005B:4 (0x0001)  
	bool                                               bLockRotation : 1;                                          // 0x005B:5 (0x0001)  
	bool                                               bLockXTranslation : 1;                                      // 0x005B:6 (0x0001)  
	bool                                               bLockYTranslation : 1;                                      // 0x005B:7 (0x0001)  
	bool                                               bLockZTranslation : 1;                                      // 0x005C:0 (0x0001)  
	bool                                               bLockXRotation : 1;                                         // 0x005C:1 (0x0001)  
	bool                                               bLockYRotation : 1;                                         // 0x005C:2 (0x0001)  
	bool                                               bLockZRotation : 1;                                         // 0x005C:3 (0x0001)  
	bool                                               bOverrideMaxAngularVelocity : 1;                            // 0x005C:4 (0x0001)  
	unsigned char                                      UnknownBit04 : 1;                                           // 0x005C:5 (0x0001)  MISSED
	unsigned char                                      UnknownBit05 : 1;                                           // 0x005C:6 (0x0001)  MISSED
	bool                                               bOverrideMaxDepenetrationVelocity : 1;                      // 0x005C:7 (0x0001)  
	bool                                               bOverrideWalkableSlopeOnInstance : 1;                       // 0x005D:0 (0x0001)  
	bool                                               bInterpolateWhenSubStepping : 1;                            // 0x005D:1 (0x0001)  
	unsigned char                                      UnknownData06_5[0xE];                                       // 0x005E   (0x000E)  MISSED
	FName                                              CollisionProfileName;                                       // 0x006C   (0x000C)  
	char                                               PositionSolverIterationCount;                               // 0x0078   (0x0001)  
	char                                               VelocitySolverIterationCount;                               // 0x0079   (0x0001)  
	unsigned char                                      UnknownData07_6[0x6];                                       // 0x007A   (0x0006)  MISSED
	FCollisionResponse                                 CollisionResponses;                                         // 0x0080   (0x0030)  
	float                                              MaxDepenetrationVelocity;                                   // 0x00B0   (0x0004)  
	float                                              MassInKgOverride;                                           // 0x00B4   (0x0004)  
	unsigned char                                      UnknownData08_6[0x8];                                       // 0x00B8   (0x0008)  MISSED
	float                                              LinearDamping;                                              // 0x00C0   (0x0004)  
	float                                              AngularDamping;                                             // 0x00C4   (0x0004)  
	FVector                                            CustomDOFPlaneNormal;                                       // 0x00C8   (0x000C)  
	FVector                                            COMNudge;                                                   // 0x00D4   (0x000C)  
	float                                              MassScale;                                                  // 0x00E0   (0x0004)  
	FVector                                            InertiaTensorScale;                                         // 0x00E4   (0x000C)  
	unsigned char                                      UnknownData09_6[0x10];                                      // 0x00F0   (0x0010)  MISSED
	FWalkableSlopeOverride                             WalkableSlopeOverride;                                      // 0x0100   (0x0010)  
	class UPhysicalMaterial*                           PhysMaterialOverride;                                       // 0x0110   (0x0008)  
	float                                              MaxAngularVelocity;                                         // 0x0118   (0x0004)  
	float                                              CustomSleepThresholdMultiplier;                             // 0x011C   (0x0004)  
	float                                              StabilizationThresholdMultiplier;                           // 0x0120   (0x0004)  
	float                                              PhysicsBlendWeight;                                         // 0x0124   (0x0004)  
	unsigned char                                      UnknownData10_7[0x38];                                      // 0x0128   (0x0038)  MISSED
};

/// Class /Script/Engine.PrimitiveComponent
/// Size: 0x02C8 (712 bytes) (0x000218 - 0x0004E0) align 16 pad: 0x0000
class UPrimitiveComponent : public USceneComponent
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0218   (0x0008)  MISSED
	float                                              MinDrawDistance;                                            // 0x0220   (0x0004)  
	float                                              LDMaxDrawDistance;                                          // 0x0224   (0x0004)  
	float                                              FOVOverride;                                                // 0x0228   (0x0004)  
	float                                              CachedMaxDrawDistance;                                      // 0x022C   (0x0004)  
	TEnumAsByte<ESceneDepthPriorityGroup>              DepthPriorityGroup;                                         // 0x0230   (0x0001)  
	TEnumAsByte<ESceneDepthPriorityGroup>              ViewOwnerDepthPriorityGroup;                                // 0x0231   (0x0001)  
	TEnumAsByte<EIndirectLightingCacheQuality>         IndirectLightingCacheQuality;                               // 0x0232   (0x0001)  
	ELightmapType                                      LightmapType;                                               // 0x0233   (0x0001)  
	bool                                               bUseMaxLODAsImposter : 1;                                   // 0x0234:0 (0x0001)  
	bool                                               bIsKuroLandscape : 1;                                       // 0x0234:1 (0x0001)  
	bool                                               bIsKuroHLOD : 1;                                            // 0x0234:2 (0x0001)  
	bool                                               bBatchImpostersAsInstances : 1;                             // 0x0234:3 (0x0001)  
	bool                                               bNeverDistanceCull : 1;                                     // 0x0234:4 (0x0001)  
	unsigned char                                      UnknownBit01 : 1;                                           // 0x0234:5 (0x0001)  MISSED
	unsigned char                                      UnknownBit02 : 1;                                           // 0x0234:6 (0x0001)  MISSED
	unsigned char                                      UnknownBit03 : 1;                                           // 0x0234:7 (0x0001)  MISSED
	unsigned char                                      UnknownBit04 : 1;                                           // 0x0235:0 (0x0001)  MISSED
	bool                                               bAlwaysCreatePhysicsState : 1;                              // 0x0235:1 (0x0001)  
	bool                                               bKuroPassiveCollision : 1;                                  // 0x0235:2 (0x0001)  
	bool                                               bKuroPassiveCollisionUpdateOverlapsWhenEnterOverlap : 1;    // 0x0235:3 (0x0001)  
	unsigned char                                      UnknownData05_3[0x52];                                      // 0x0236   (0x0052)  MISSED
	bool                                               bGenerateOverlapEvents : 1;                                 // 0x0288:0 (0x0001)  
	bool                                               bMultiBodyOverlap : 1;                                      // 0x0288:1 (0x0001)  
	bool                                               bTraceComplexOnMove : 1;                                    // 0x0288:2 (0x0001)  
	bool                                               bReturnMaterialOnMove : 1;                                  // 0x0288:3 (0x0001)  
	bool                                               bUseViewOwnerDepthPriorityGroup : 1;                        // 0x0288:4 (0x0001)  
	bool                                               bAllowCullDistanceVolume : 1;                               // 0x0288:5 (0x0001)  
	bool                                               bHasMotionBlurVelocityMeshes : 1;                           // 0x0288:6 (0x0001)  
	bool                                               bVisibleInReflectionCaptures : 1;                           // 0x0288:7 (0x0001)  
	bool                                               bVisibleInRealTimeSkyCaptures : 1;                          // 0x0289:0 (0x0001)  
	bool                                               bVisibleInRayTracing : 1;                                   // 0x0289:1 (0x0001)  
	bool                                               bRenderInMainPass : 1;                                      // 0x0289:2 (0x0001)  
	bool                                               bRenderInDepthPass : 1;                                     // 0x0289:3 (0x0001)  
	bool                                               bReceivesDecals : 1;                                        // 0x0289:4 (0x0001)  
	bool                                               bOwnerNoSee : 1;                                            // 0x0289:5 (0x0001)  
	bool                                               bOnlyOwnerSee : 1;                                          // 0x0289:6 (0x0001)  
	bool                                               bTreatAsBackgroundForOcclusion : 1;                         // 0x0289:7 (0x0001)  
	bool                                               bUseAsOccluder : 1;                                         // 0x028A:0 (0x0001)  
	bool                                               bSelectable : 1;                                            // 0x028A:1 (0x0001)  
	bool                                               bForceMipStreaming : 1;                                     // 0x028A:2 (0x0001)  
	bool                                               bHasPerInstanceHitProxies : 1;                              // 0x028A:3 (0x0001)  
	bool                                               CastShadow : 1;                                             // 0x028A:4 (0x0001)  
	bool                                               MobileCastShadow : 1;                                       // 0x028A:5 (0x0001)  
	bool                                               IsUIScenePrimitive : 1;                                     // 0x028A:6 (0x0001)  
	bool                                               IsHiddenInUiSceneState : 1;                                 // 0x028A:7 (0x0001)  
	unsigned char                                      UnknownData06_3[0xE];                                       // 0x028C   (0x000E)  MISSED
	unsigned char                                      UnknownBit07 : 1;                                           // 0x029A:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit08 : 1;                                           // 0x029A:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit09 : 1;                                           // 0x029A:2 (0x0001)  MISSED
	bool                                               bIsLGUIAfterBlur : 1;                                       // 0x029A:3 (0x0001)  
	bool                                               bIsLGUIBeforeBloom : 1;                                     // 0x029A:4 (0x0001)  
	bool                                               bForbidCastToonShadow : 1;                                  // 0x029A:5 (0x0001)  
	bool                                               bCastShadowWhenInCaveOrIndoor : 1;                          // 0x029A:6 (0x0001)  
	unsigned char                                      UnknownData10_3[0x1];                                       // 0x029B   (0x0001)  MISSED
	bool                                               bAffectDynamicIndirectLighting : 1;                         // 0x029C:0 (0x0001)  
	bool                                               bAffectDistanceFieldLighting : 1;                           // 0x029C:1 (0x0001)  
	bool                                               bCastDynamicShadow : 1;                                     // 0x029C:2 (0x0001)  
	bool                                               bCastStaticShadow : 1;                                      // 0x029C:3 (0x0001)  
	bool                                               bCastVolumetricTranslucentShadow : 1;                       // 0x029C:4 (0x0001)  
	bool                                               bCastContactShadow : 1;                                     // 0x029C:5 (0x0001)  
	bool                                               bSelfShadowOnly : 1;                                        // 0x029C:6 (0x0001)  
	bool                                               bCastFarShadow : 1;                                         // 0x029C:7 (0x0001)  
	bool                                               bCastFarShadowOnMobile : 1;                                 // 0x029D:0 (0x0001)  
	bool                                               bCastInsetShadow : 1;                                       // 0x029D:1 (0x0001)  
	bool                                               bCastCinematicShadow : 1;                                   // 0x029D:2 (0x0001)  
	bool                                               bCastHiddenShadow : 1;                                      // 0x029D:3 (0x0001)  
	bool                                               bCastShadowAsTwoSided : 1;                                  // 0x029D:4 (0x0001)  
	bool                                               bLightAsIfStatic : 1;                                       // 0x029D:5 (0x0001)  
	bool                                               bLightAttachmentsAsGroup : 1;                               // 0x029D:6 (0x0001)  
	bool                                               bExcludeFromLightAttachmentGroup : 1;                       // 0x029D:7 (0x0001)  
	bool                                               bReceiveMobileCSMShadows : 1;                               // 0x029E:0 (0x0001)  
	bool                                               bSingleSampleShadowFromStationaryLights : 1;                // 0x029E:1 (0x0001)  
	bool                                               bIgnoreRadialImpulse : 1;                                   // 0x029E:2 (0x0001)  
	bool                                               bIgnoreRadialForce : 1;                                     // 0x029E:3 (0x0001)  
	bool                                               bApplyImpulseOnDamage : 1;                                  // 0x029E:4 (0x0001)  
	bool                                               bReplicatePhysicsToAutonomousProxy : 1;                     // 0x029E:5 (0x0001)  
	bool                                               bFillCollisionUnderneathForNavmesh : 1;                     // 0x029E:6 (0x0001)  
	bool                                               AlwaysLoadOnClient : 1;                                     // 0x029E:7 (0x0001)  
	bool                                               AlwaysLoadOnServer : 1;                                     // 0x029F:0 (0x0001)  
	bool                                               bUseEditorCompositing : 1;                                  // 0x029F:1 (0x0001)  
	bool                                               bRenderCustomDepth : 1;                                     // 0x029F:2 (0x0001)  
	TEnumAsByte<EHasCustomNavigableGeometry>           bHasCustomNavigableGeometry;                                // 0x02A0   (0x0001)  
	unsigned char                                      UnknownData11_6[0x7];                                       // 0x02A1   (0x0007)  MISSED
	bool                                               bCanCharacterStandOn;                                       // 0x02A8   (0x0001)  
	TEnumAsByte<ECanBeCharacterBase>                   CanCharacterStepUpOn;                                       // 0x02A9   (0x0001)  
	FLightingChannels                                  LightingChannels;                                           // 0x02AA   (0x0001)  
	ERendererStencilMask                               CustomDepthStencilWriteMask;                                // 0x02AB   (0x0001)  
	int32_t                                            CustomDepthStencilValue;                                    // 0x02AC   (0x0004)  
	FCustomPrimitiveData                               CustomPrimitiveData;                                        // 0x02B0   (0x0010)  
	FCustomPrimitiveData                               CustomPrimitiveDataInternal;                                // 0x02C0   (0x0010)  
	float                                              ExposeToCinematicsCustomLightYaw;                           // 0x02D0   (0x0004)  
	float                                              ExposeToCinematicsCustomLightFactor;                        // 0x02D4   (0x0004)  
	unsigned char                                      UnknownData12_6[0x8];                                       // 0x02D8   (0x0008)  MISSED
	int32_t                                            TranslucencySortPriority;                                   // 0x02E0   (0x0004)  
	int32_t                                            VisibilityId;                                               // 0x02E4   (0x0004)  
	TArray<class URuntimeVirtualTexture*>              RuntimeVirtualTextures;                                     // 0x02E8   (0x0010)  
	int8_t                                             VirtualTextureLodBias;                                      // 0x02F8   (0x0001)  
	int8_t                                             VirtualTextureCullMips;                                     // 0x02F9   (0x0001)  
	int8_t                                             VirtualTextureMinCoverage;                                  // 0x02FA   (0x0001)  
	ERuntimeVirtualTextureMainPassType                 VirtualTextureRenderPassType;                               // 0x02FB   (0x0001)  
	unsigned char                                      UnknownData13_6[0x4];                                       // 0x02FC   (0x0004)  MISSED
	float                                              LpvBiasMultiplier;                                          // 0x0300   (0x0004)  
	unsigned char                                      UnknownData14_6[0x8];                                       // 0x0304   (0x0008)  MISSED
	float                                              BoundsScale;                                                // 0x030C   (0x0004)  
	unsigned char                                      UnknownData15_6[0x10];                                      // 0x0310   (0x0010)  MISSED
	TArray<class AActor*>                              MoveIgnoreActors;                                           // 0x0320   (0x0010)  
	TArray<class UPrimitiveComponent*>                 MoveIgnoreComponents;                                       // 0x0330   (0x0010)  
	unsigned char                                      UnknownData16_6[0x10];                                      // 0x0340   (0x0010)  MISSED
	FBodyInstance                                      BodyInstance;                                               // 0x0350   (0x0160)  
	SDK_UNDEFINED(1,30) /* FMulticastSparseDelegate */ __um(OnComponentHit);                                       // 0x04B0   (0x0001)  
	SDK_UNDEFINED(1,31) /* FMulticastSparseDelegate */ __um(OnComponentBeginOverlap);                              // 0x04B1   (0x0001)  
	SDK_UNDEFINED(1,32) /* FMulticastSparseDelegate */ __um(OnComponentBeginOverlapBlock);                         // 0x04B2   (0x0001)  
	SDK_UNDEFINED(1,33) /* FMulticastSparseDelegate */ __um(OnComponentBeginOverlapNoGcAlloc);                     // 0x04B3   (0x0001)  
	SDK_UNDEFINED(1,34) /* FMulticastSparseDelegate */ __um(OnComponentEndOverlap);                                // 0x04B4   (0x0001)  
	SDK_UNDEFINED(1,35) /* FMulticastSparseDelegate */ __um(OnComponentWake);                                      // 0x04B5   (0x0001)  
	SDK_UNDEFINED(1,36) /* FMulticastSparseDelegate */ __um(OnComponentSleep);                                     // 0x04B6   (0x0001)  
	unsigned char                                      UnknownData17_6[0x1];                                       // 0x04B7   (0x0001)  MISSED
	SDK_UNDEFINED(1,37) /* FMulticastSparseDelegate */ __um(OnBeginCursorOver);                                    // 0x04B8   (0x0001)  
	SDK_UNDEFINED(1,38) /* FMulticastSparseDelegate */ __um(OnEndCursorOver);                                      // 0x04B9   (0x0001)  
	SDK_UNDEFINED(1,39) /* FMulticastSparseDelegate */ __um(OnClicked);                                            // 0x04BA   (0x0001)  
	SDK_UNDEFINED(1,40) /* FMulticastSparseDelegate */ __um(OnReleased);                                           // 0x04BB   (0x0001)  
	SDK_UNDEFINED(1,41) /* FMulticastSparseDelegate */ __um(OnInputTouchBegin);                                    // 0x04BC   (0x0001)  
	SDK_UNDEFINED(1,42) /* FMulticastSparseDelegate */ __um(OnInputTouchEnd);                                      // 0x04BD   (0x0001)  
	SDK_UNDEFINED(1,43) /* FMulticastSparseDelegate */ __um(OnInputTouchEnter);                                    // 0x04BE   (0x0001)  
	SDK_UNDEFINED(1,44) /* FMulticastSparseDelegate */ __um(OnInputTouchLeave);                                    // 0x04BF   (0x0001)  
	unsigned char                                      UnknownData18_6[0x18];                                      // 0x04C0   (0x0018)  MISSED
	class UPrimitiveComponent*                         LODParentPrimitive;                                         // 0x04D8   (0x0008)  
	// bool WasRecentlyRendered(float Tolerance);                                                                               // [0x471cfc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void WakeRigidBody(FName BoneName);                                                                                      // [0x471cf10] Native|Public|BlueprintCallable 
	// void WakeAllRigidBodies();                                                                                               // [0x471cef0] Native|Public|BlueprintCallable 
	// void SetWalkableSlopeOverride(FWalkableSlopeOverride& NewOverride);                                                      // [0x471ce40] Native|Public|HasOutParms|BlueprintCallable 
	// void SetUseOutlineStencilTestSectionMask(bool UseSectionMask, TArray<int32_t> SectionMasks);                             // [0x471cd10] Final|Native|Public|BlueprintCallable 
	// void SetUseOutlineStencilTest(bool bValue);                                                                              // [0x471cc80] Final|Native|Public|BlueprintCallable 
	// void SetUseEnableBattleSectionMask(bool UseSectionMask, TArray<int32_t> SectionMasks);                                   // [0x471cb50] Final|Native|Public|BlueprintCallable 
	// void SetUseEnableBattleMaskSectionMask(bool UseSectionMask, TArray<int32_t> SectionMasks);                               // [0x471ca20] Final|Native|Public|BlueprintCallable 
	// void SetUseEnableBattleMask(bool bValue);                                                                                // [0x471c990] Final|Native|Public|BlueprintCallable 
	// void SetUseEnableBattle(bool bValue);                                                                                    // [0x471c900] Final|Native|Public|BlueprintCallable 
	// void SetUseCustomAlphaTestSectionMask(bool UseSectionMask, TArray<int32_t> SectionMasks);                                // [0x471c7d0] Final|Native|Public|BlueprintCallable 
	// void SetUseCustomAlphaTest(bool bValue);                                                                                 // [0x471c740] Final|Native|Public|BlueprintCallable 
	// void SetUseCCD(bool InUseCCD, FName BoneName);                                                                           // [0x471c640] Native|Public|BlueprintCallable 
	// void SetTranslucentSortPriority(int32_t NewTranslucentSortPriority);                                                     // [0x471c5b0] Final|Native|Public|BlueprintCallable 
	// void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);                         // [0x471c520] Final|Native|Public|BlueprintCallable 
	// void SetSimulatePhysics(bool bSimulate);                                                                                 // [0x471c490] Native|Public|BlueprintCallable 
	// void SetRenderInMainPass(bool bValue);                                                                                   // [0x471c400] Final|Native|Public|BlueprintCallable 
	// void SetRenderCustomDepth(bool bValue);                                                                                  // [0x471c370] Final|Native|Public|BlueprintCallable 
	// void SetReceivesDecals(bool bNewReceivesDecals);                                                                         // [0x471c2e0] Final|Native|Public|BlueprintCallable 
	// void SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial);                                                  // [0x471bbd0] Native|Public|BlueprintCallable 
	// void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);                      // [0x471c1b0] Final|Native|Public|BlueprintCallable 
	// void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);                      // [0x471c070] Final|Native|Public|BlueprintCallable 
	// void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);                               // [0x471c070] Final|Native|Public|BlueprintCallable 
	// void SetPhysicsLinearVelocity(FVector NewVel, bool bAddToCurrent, FName BoneName);                                       // [0x471bf20] Native|Public|HasDefaults|BlueprintCallable 
	// void SetPhysicsAngularVelocityInRadians(FVector NewAngVel, bool bAddToCurrent, FName BoneName);                          // [0x471bdd0] Native|Public|HasDefaults|BlueprintCallable 
	// void SetPhysicsAngularVelocityInDegrees(FVector NewAngVel, bool bAddToCurrent, FName BoneName);                          // [0x471bc60] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetPhysicsAngularVelocity(FVector NewAngVel, bool bAddToCurrent, FName BoneName);                                   // [0x471bc60] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetOwnerNoSee(bool bNewOwnerNoSee);                                                                                 // [0x471bb40] Final|Native|Public|BlueprintCallable 
	// void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);                                                                             // [0x471bab0] Final|Native|Public|BlueprintCallable 
	// void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);                                                     // [0x471ba20] Native|Public|BlueprintCallable 
	// void SetMeshShadingRate(TEnumAsByte<EMaterialShadingRate> InMeshShadingRate);                                            // [0x471b9a0] Final|Native|Public|BlueprintCallable 
	// void SetMaterialByName(FName MaterialSlotName, class UMaterialInterface* Material);                                      // [0x471b8b0] Native|Public|BlueprintCallable 
	// void SetMaterial(int32_t ElementIndex, class UMaterialInterface* Material);                                              // [0x471b7e0] Native|Public|BlueprintCallable 
	// void SetMassScale(FName BoneName, float InMassScale);                                                                    // [0x471b6f0] Native|Public|BlueprintCallable 
	// void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);                                            // [0x471b5b0] Native|Public|BlueprintCallable 
	// void SetLinearDamping(float InDamping);                                                                                  // [0x471b520] Native|Public|BlueprintCallable 
	// void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);                                                // [0x471b3f0] Final|Native|Public|BlueprintCallable 
	// void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);                                                        // [0x471b360] Final|Native|Public|BlueprintCallable 
	// void SetLGUISortPriority(int32_t NewTranslucentSortPriority);                                                            // [0x471b2d0] Final|Native|Public|BlueprintCallable 
	// void SetLGUIOverlay(bool IsLGUIOverlayIn);                                                                               // [0x471b240] Final|Native|Public|BlueprintCallable 
	// void SetLGUIBeforeBloom(bool IsLGUIAfterBlur);                                                                           // [0x471b1b0] Final|Native|Public|BlueprintCallable 
	// void SetLGUIAfterPP(bool IsLGUIAfterPPIn);                                                                               // [0x471b120] Final|Native|Public|BlueprintCallable 
	// void SetLGUIAfterBlur(bool IsLGUIAfterBlur);                                                                             // [0x471b090] Final|Native|Public|BlueprintCallable 
	// void SetLGUI(bool IsLGUIIn);                                                                                             // [0x471b000] Final|Native|Public|BlueprintCallable 
	// void SetIsUIScenePrimitive(bool bValue);                                                                                 // [0x471af70] Final|Native|Public|BlueprintCallable 
	// void SetIsKuroLandscape(bool InIsKuroLandscape);                                                                         // [0x471aee0] Final|Native|Public|BlueprintCallable 
	// void SetIsKuroHLOD(bool InIsKuroHLOD);                                                                                   // [0x471ae50] Final|Native|Public|BlueprintCallable 
	// void SetIsHiddenInUiSceneState(bool bValue);                                                                             // [0x471adc0] Final|Native|Public|BlueprintCallable 
	// void SetIsCastShadowWhenInCaveOrIndoor(bool IsCastShadowWhenInCaveOrIndoor);                                             // [0x471ad30] Final|Native|Public|BlueprintCallable 
	// void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);                                                            // [0x471aca0] Final|Native|Public|BlueprintCallable 
	// void SetFOVOverride(float NewFOV);                                                                                       // [0x471ac20] Final|Native|Public|BlueprintCallable 
	// void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);                                        // [0x471ab90] Final|Native|Public|BlueprintCallable 
	// void SetEnableGravity(bool bGravityEnabled);                                                                             // [0x471ab00] Native|Public|BlueprintCallable 
	// void SetDefaultCustomPrimitiveDataVector4(int32_t DataIndex, FVector4 Value);                                            // [0x471aa20] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetDefaultCustomPrimitiveDataVector3(int32_t DataIndex, FVector Value);                                             // [0x471a940] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetDefaultCustomPrimitiveDataVector2(int32_t DataIndex, FVector2D Value);                                           // [0x471a870] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetDefaultCustomPrimitiveDataFloat(int32_t DataIndex, float Value);                                                 // [0x471a7a0] Final|Native|Public|BlueprintCallable 
	// void SetCustomPrimitiveDataVector4(int32_t DataIndex, FVector4 Value);                                                   // [0x471a6c0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetCustomPrimitiveDataVector3(int32_t DataIndex, FVector Value);                                                    // [0x471a5e0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetCustomPrimitiveDataVector2(int32_t DataIndex, FVector2D Value);                                                  // [0x471a510] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetCustomPrimitiveDataFloat(int32_t DataIndex, float Value);                                                        // [0x471a440] Final|Native|Public|BlueprintCallable 
	// void SetCustomDepthStencilWriteMask(ERendererStencilMask WriteMaskBit);                                                  // [0x471a3c0] Final|Native|Public|BlueprintCallable 
	// void SetCustomDepthStencilValue(int32_t Value);                                                                          // [0x471a330] Final|Native|Public|BlueprintCallable 
	// void SetCullDistance(float NewCullDistance);                                                                             // [0x471a2b0] Final|Native|Public|BlueprintCallable 
	// void SetConstraintMode(TEnumAsByte<EDOFMode> ConstraintMode);                                                            // [0x471a230] Native|Public|BlueprintCallable 
	// void SetCollisionResponseToChannels(FCollisionResponseContainer& NewReponses);                                           // [0x471a190] Native|Public|HasOutParms|BlueprintCallable 
	// void SetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel, TEnumAsByte<ECollisionResponse> NewResponse); // [0x471a0c0] Native|Public|BlueprintCallable 
	// void SetCollisionResponseToAllChannels(TEnumAsByte<ECollisionResponse> NewResponse);                                     // [0x471a040] Native|Public|BlueprintCallable 
	// void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);                                        // [0x4719f50] Native|Public|BlueprintCallable 
	// void SetCollisionObjectType(TEnumAsByte<ECollisionChannel> Channel);                                                     // [0x4719ed0] Native|Public|BlueprintCallable 
	// void SetCollisionEnabled(TEnumAsByte<ECollisionEnabled> NewType);                                                        // [0x4719e50] Native|Public|BlueprintCallable 
	// void SetCenterOfMass(FVector CenterOfMassOffset, FName BoneName);                                                        // [0x4719d50] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetCastShadow(bool NewCastShadow);                                                                                  // [0x4719cc0] Final|Native|Public|BlueprintCallable 
	// void SetCastInsetShadow(bool bInCastInsetShadow);                                                                        // [0x4719c30] Final|Native|Public|BlueprintCallable 
	// void SetCastFarShadowOnMobile(bool NewValue);                                                                            // [0x4719ba0] Final|Native|Public|BlueprintCallable 
	// void SetCastFarShadow(bool NewValue);                                                                                    // [0x4719b10] Final|Native|Public|BlueprintCallable 
	// void SetBoundsScale(float NewBoundsScale);                                                                               // [0x4719a90] Final|Native|Public|BlueprintCallable 
	// void SetAngularDamping(float InDamping);                                                                                 // [0x4719a00] Native|Public|BlueprintCallable 
	// void SetAllUseCCD(bool InUseCCD);                                                                                        // [0x4719970] Native|Public|BlueprintCallable 
	// void SetAllPhysicsLinearVelocity(FVector NewVel, bool bAddToCurrent);                                                    // [0x4719890] Native|Public|HasDefaults|BlueprintCallable 
	// void SetAllPhysicsAngularVelocityInRadians(FVector& NewAngVel, bool bAddToCurrent);                                      // [0x47197a0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetAllPhysicsAngularVelocityInDegrees(FVector& NewAngVel, bool bAddToCurrent);                                      // [0x4719680] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetAllMassScale(float InMassScale);                                                                                 // [0x47195f0] Native|Public|BlueprintCallable 
	// FVector ScaleByMomentOfInertia(FVector InputVector, FName BoneName);                                                     // [0x47194d0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// void ResetCustomPrimitiveData();                                                                                         // [0x47194b0] Final|Native|Public|BlueprintCallable 
	// void PutRigidBodyToSleep(FName BoneName);                                                                                // [0x4719410] Final|Native|Public|BlueprintCallable 
	// void KuroSetPassiveCollision(bool bPassiveCollision, bool bUpdateOverlaps);                                              // [0x4719310] Final|Native|Public|BlueprintCallable 
	// void KuroRemovePassiveProxyChannel(TEnumAsByte<ECollisionChannel> CollisionChannel);                                     // [0x47191d0] Final|Native|Public|BlueprintCallable 
	// void KuroAddPassiveProxyChannel(TEnumAsByte<ECollisionChannel> CollisionChannel);                                        // [0x4719140] Final|Native|Public|BlueprintCallable 
	// bool K2_SphereTraceComponent(FVector TraceStart, FVector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit); // [0x4718d90] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool K2_SphereOverlapComponent(FVector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit); // [0x4718a30] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool K2_LineTraceComponent(FVector TraceStart, FVector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit); // [0x47186c0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool K2_IsQueryCollisionEnabled();                                                                                       // [0x4718680] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool K2_IsPhysicsCollisionEnabled();                                                                                     // [0x4718640] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool K2_IsCollisionEnabled();                                                                                            // [0x4718600] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool K2_BoxOverlapComponent(FVector InBoxCentre, FBox InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit); // [0x4718280] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool IsOverlappingComponent(class UPrimitiveComponent* OtherComp);                                                       // [0x47181e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsOverlappingActor(class AActor* Other);                                                                            // [0x4718140] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsGravityEnabled();                                                                                                 // [0x4718110] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsAnyRigidBodyAwake();                                                                                              // [0x47180e0] Native|Public|BlueprintCallable|BlueprintPure 
	// void IgnoreComponentWhenMoving(class UPrimitiveComponent* Component, bool bShouldIgnore);                                // [0x4718010] Final|Native|Public|BlueprintCallable 
	// void IgnoreActorWhenMoving(class AActor* Actor, bool bShouldIgnore);                                                     // [0x4717f40] Final|Native|Public|BlueprintCallable 
	// FWalkableSlopeOverride GetWalkableSlopeOverride();                                                                       // [0x4717f10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector GetPhysicsLinearVelocityAtPoint(FVector Point, FName BoneName);                                                  // [0x4717df0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// FVector GetPhysicsLinearVelocity(FName BoneName);                                                                        // [0x4717d30] Final|Native|Public|HasDefaults|BlueprintCallable 
	// FVector GetPhysicsAngularVelocityInRadians(FName BoneName);                                                              // [0x4717c70] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetPhysicsAngularVelocityInDegrees(FName BoneName);                                                              // [0x4717b90] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetPhysicsAngularVelocity(FName BoneName);                                                                       // [0x4717b90] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// void GetOverlappingComponents(TArray<UPrimitiveComponent*>& OutOverlappingComponents);                                   // [0x4717ae0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// void GetOverlappingActors(TArray<AActor*>& OverlappingActors, class UClass* ClassFilter);                                // [0x47179e0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetNumMaterials();                                                                                               // [0x47179b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UMaterialInterface* GetMaterialFromCollisionFaceIndex(int32_t FaceIndex, int32_t& SectionIndex);                   // [0x47178d0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// class UMaterialInterface* GetMaterial(int32_t ElementIndex);                                                             // [0x4717830] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetMassScale(FName BoneName);                                                                                      // [0x4717770] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetMass();                                                                                                         // [0x4717730] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetLinearDamping();                                                                                                // [0x47176f0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector GetInertiaTensor(FName BoneName);                                                                                // [0x4717620] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// bool GetGenerateOverlapEvents();                                                                                         // [0x47175f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetCustomPrimitiveDataByIndex(int32_t Index);                                                                      // [0x4717550] Final|Native|Public|BlueprintCallable 
	// TEnumAsByte<ECollisionResponse> GetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel);                   // [0x47174c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FName GetCollisionProfileName();                                                                                         // [0x4717480] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// TEnumAsByte<ECollisionChannel> GetCollisionObjectType();                                                                 // [0x4717450] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// TEnumAsByte<ECollisionEnabled> GetCollisionEnabled();                                                                    // [0x4717420] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetClosestPointOnCollision(FVector& Point, FVector& OutPointOnBody, FName BoneName);                               // [0x47172d0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetCenterOfMass(FName BoneName);                                                                                 // [0x4717210] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// float GetAngularDamping();                                                                                               // [0x47171d0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UMaterialInstanceDynamic* CreateDynamicMaterialInstance(int32_t ElementIndex, class UMaterialInterface* SourceMaterial, FName OptionalName); // [0x47170a0] Native|Public|BlueprintCallable 
	// class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int32_t ElementIndex, class UMaterialInterface* Parent); // [0x4716fd0] Native|Public|BlueprintCallable 
	// class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int32_t ElementIndex);                               // [0x4716f30] Native|Public|BlueprintCallable 
	// TArray<UPrimitiveComponent*> CopyArrayOfMoveIgnoreComponents();                                                          // [0x4716eb0] Final|Native|Public|BlueprintCallable 
	// TArray<AActor*> CopyArrayOfMoveIgnoreActors();                                                                           // [0x4716e30] Final|Native|Public|BlueprintCallable 
	// void ClearMoveIgnoreComponents();                                                                                        // [0x4716e00] Final|Native|Public|BlueprintCallable 
	// void ClearMoveIgnoreActors();                                                                                            // [0x4716de0] Final|Native|Public|BlueprintCallable 
	// bool CanCharacterStepUp(class APawn* Pawn);                                                                              // [0x4716d40] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void AddTorqueInRadians(FVector Torque, FName BoneName, bool bAccelChange);                                              // [0x4716a90] Native|Public|HasDefaults|BlueprintCallable 
	// void AddTorqueInDegrees(FVector Torque, FName BoneName, bool bAccelChange);                                              // [0x4716bd0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void AddTorque(FVector Torque, FName BoneName, bool bAccelChange);                                                       // [0x4716a90] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void AddRadialImpulse(FVector Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bVelChange); // [0x47168b0] Native|Public|HasDefaults|BlueprintCallable 
	// void AddRadialForce(FVector Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bAccelChange); // [0x47166d0] Native|Public|HasDefaults|BlueprintCallable 
	// void AddImpulseAtLocation(FVector Impulse, FVector Location, FName BoneName);                                            // [0x4716580] Native|Public|HasDefaults|BlueprintCallable 
	// void AddImpulse(FVector Impulse, FName BoneName, bool bVelChange);                                                       // [0x4716440] Native|Public|HasDefaults|BlueprintCallable 
	// void AddForceAtLocationLocal(FVector Force, FVector Location, FName BoneName);                                           // [0x47162f0] Native|Public|HasDefaults|BlueprintCallable 
	// void AddForceAtLocation(FVector Force, FVector Location, FName BoneName);                                                // [0x47161a0] Native|Public|HasDefaults|BlueprintCallable 
	// void AddForce(FVector Force, FName BoneName, bool bAccelChange);                                                         // [0x4716060] Native|Public|HasDefaults|BlueprintCallable 
	// void AddAngularImpulseInRadians(FVector Impulse, FName BoneName, bool bVelChange);                                       // [0x4715f20] Native|Public|HasDefaults|BlueprintCallable 
	// void AddAngularImpulseInDegrees(FVector Impulse, FName BoneName, bool bVelChange);                                       // [0x4715db0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void AddAngularImpulse(FVector Impulse, FName BoneName, bool bVelChange);                                                // [0x4715c70] Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.MeshComponent
/// Size: 0x0030 (48 bytes) (0x0004E0 - 0x000510) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class UMeshComponent : public UPrimitiveComponent
{ 
public:
	TArray<class UMaterialInterface*>                  OverrideMaterials;                                          // 0x04E0   (0x0010)  
	unsigned char                                      UnknownData00_6[0x10];                                      // 0x04F0   (0x0010)  MISSED
	bool                                               bEnableMaterialParameterCaching : 1;                        // 0x0500:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0501   (0x0007)  MISSED
	// void SetVectorParameterValueOnMaterials(FName ParameterName, FVector ParameterValue);                                    // [0x46de500] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetScalarParameterValueOnMaterials(FName ParameterName, float ParameterValue);                                      // [0x46de410] Final|Native|Public|BlueprintCallable 
	// void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int32_t CinematicTextureGroups);                // [0x46de210] Native|Public|BlueprintCallable 
	// bool IsMaterialSlotNameValid(FName MaterialSlotName);                                                                    // [0x46de150] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// TArray<FName> GetMaterialSlotNames();                                                                                    // [0x46de050] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// TArray<UMaterialInterface*> GetMaterials();                                                                              // [0x46de0d0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetMaterialIndex(FName MaterialSlotName);                                                                        // [0x46ddf90] Native|Public|BlueprintCallable|BlueprintPure|Const 
};
#pragma pack(pop)

/// Class /Script/Engine.FXSystemComponent
/// Size: 0x0000 (0 bytes) (0x0004E0 - 0x0004E0) align 16 pad: 0x0000
class UFXSystemComponent : public UPrimitiveComponent
{ 
public:
	// void SetVectorParameter(FName ParameterName, FVector Param);                                                             // [0x46f43a0] Native|Public|HasDefaults|BlueprintCallable 
	// void SetUseAutoManageAttachment(bool bAutoManage);                                                                       // [0x46f4310] Native|Public|BlueprintCallable 
	// void SetIntParameter(FName ParameterName, int32_t Param);                                                                // [0x46f3f20] Native|Public|BlueprintCallable 
	// void SetFloatParameter(FName ParameterName, float Param);                                                                // [0x46f3e30] Native|Public|BlueprintCallable 
	// void SetEmitterEnable(FName EmitterName, bool bNewEnableState);                                                          // [0x46f3d40] Native|Public|BlueprintCallable 
	// void SetColorParameter(FName ParameterName, FLinearColor Param);                                                         // [0x46f3c50] Native|Public|HasDefaults|BlueprintCallable 
	// void SetBoolParameter(FName ParameterName, bool Param);                                                                  // [0x46f3b60] Native|Public|BlueprintCallable 
	// void SetAutoAttachmentParameters(class USceneComponent* Parent, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule); // [0x46f3230] Native|Public|BlueprintCallable 
	// void SetActorParameter(FName ParameterName, class AActor* Param);                                                        // [0x46f2ff0] Native|Public|BlueprintCallable 
	// void ReleaseToPool();                                                                                                    // [0x46f2fd0] Native|Public|BlueprintCallable 
	// class UFXSystemAsset* GetFXSystemAsset();                                                                                // [0x46f2eb0] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.AssetUserData
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UAssetUserData : public UObject
{ 
public:
};

/// Class /Script/Engine.PrimaryDataAsset
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UPrimaryDataAsset : public UDataAsset
{ 
public:
};

/// Class /Script/Engine.FXSystemAsset
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UFXSystemAsset : public UObject
{ 
public:
	uint32_t                                           MaxPoolSize;                                                // 0x0030   (0x0004)  
	uint32_t                                           PoolPrimeSize;                                              // 0x0034   (0x0004)  
};

/// Class /Script/Engine.AnimNotify
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UAnimNotify : public UObject
{ 
public:
	bool                                               NeedSimulate;                                               // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_7[0xF];                                       // 0x0031   (0x000F)  MISSED
	// bool Received_Notify(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);                        // [0x25a7960] Event|Public|BlueprintEvent|Const 
	// FString GetNotifyName();                                                                                                 // [0xbe2290] Native|Event|Public|BlueprintEvent|Const 
};

/// Class /Script/Engine.AnimNotifyState
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UAnimNotifyState : public UObject
{ 
public:
	bool                                               bOnlyTriggerInMainAnim;                                     // 0x0030   (0x0001)  
	bool                                               NeedSimulateBegin;                                          // 0x0031   (0x0001)  
	bool                                               NeedSimulateTick;                                           // 0x0032   (0x0001)  
	bool                                               NeedSimulateEnd;                                            // 0x0033   (0x0001)  
	bool                                               bRestartWithReplay;                                         // 0x0034   (0x0001)  
	unsigned char                                      UnknownData00_7[0xB];                                       // 0x0035   (0x000B)  MISSED
	// bool Received_NotifyTick(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime); // [0x25a7960] Event|Public|BlueprintEvent|Const 
	// bool Received_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);                     // [0x25a7960] Event|Public|BlueprintEvent|Const 
	// bool Received_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration); // [0x25a7960] Event|Public|BlueprintEvent|Const 
	// FString GetNotifyName();                                                                                                 // [0xbe2290] Native|Event|Public|BlueprintEvent|Const 
	// float GetCurrentTriggerOffsetInThisNotifyTick();                                                                         // [0xc10840] Final|Native|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.Controller
/// Size: 0x0080 (128 bytes) (0x0002A8 - 0x000328) align 8 pad: 0x0000
class AController : public AActor
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x02A8   (0x0008)  MISSED
	class APlayerState*                                PlayerState;                                                // 0x02B0   (0x0008)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x02B8   (0x0008)  MISSED
	SDK_UNDEFINED(16,45) /* FMulticastInlineDelegate */ __um(OnInstigatedAnyDamage);                               // 0x02C0   (0x0010)  
	FName                                              StateName;                                                  // 0x02D0   (0x000C)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x02DC   (0x0004)  MISSED
	class APawn*                                       Pawn;                                                       // 0x02E0   (0x0008)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x02E8   (0x0008)  MISSED
	class ACharacter*                                  Character;                                                  // 0x02F0   (0x0008)  
	class USceneComponent*                             TransformComponent;                                         // 0x02F8   (0x0008)  
	unsigned char                                      UnknownData04_6[0x18];                                      // 0x0300   (0x0018)  MISSED
	FRotator                                           ControlRotation;                                            // 0x0318   (0x000C)  
	bool                                               bAttachToPawn : 1;                                          // 0x0324:0 (0x0001)  
	unsigned char                                      UnknownData05_7[0x3];                                       // 0x0325   (0x0003)  MISSED
	// void UnPossess();                                                                                                        // [0x460c710] Final|Native|Public|BlueprintCallable 
	// void StopMovement();                                                                                                     // [0x460c6f0] Native|Public|BlueprintCallable 
	// void SetInitialLocationAndRotation(FVector& NewLocation, FRotator& NewRotation);                                         // [0x460c600] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetIgnoreMoveInput(bool bNewMoveInput);                                                                             // [0x460c570] Native|Public|BlueprintCallable 
	// void SetIgnoreLookInput(bool bNewLookInput);                                                                             // [0x460c4e0] Native|Public|BlueprintCallable 
	// void SetControlRotation(FRotator& NewRotation);                                                                          // [0x460c450] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void ResetIgnoreMoveInput();                                                                                             // [0x460c430] Native|Public|BlueprintCallable 
	// void ResetIgnoreLookInput();                                                                                             // [0x460c410] Native|Public|BlueprintCallable 
	// void ResetIgnoreInputFlags();                                                                                            // [0x460c3f0] Native|Public|BlueprintCallable 
	// void ReceiveUnPossess(class APawn* UnpossessedPawn);                                                                     // [0x25a7960] Event|Protected|BlueprintEvent 
	// void ReceivePossess(class APawn* PossessedPawn);                                                                         // [0x25a7960] Event|Protected|BlueprintEvent 
	// void ReceiveInstigatedAnyDamage(float Damage, class UDamageType* DamageType, class AActor* DamagedActor, class AActor* DamageCauser); // [0x25a7960] BlueprintAuthorityOnly|Event|Protected|BlueprintEvent 
	// void Possess(class APawn* InPawn);                                                                                       // [0x460c360] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// void OnRep_PlayerState();                                                                                                // [0x460c340] Native|Public        
	// void OnRep_Pawn();                                                                                                       // [0x460c320] Native|Public        
	// bool LineOfSightTo(class AActor* Other, FVector ViewPoint, bool bAlternateChecks);                                       // [0x460c1f0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// class APawn* K2_GetPawn();                                                                                               // [0x460c1c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsPlayerController();                                                                                               // [0x460c190] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsMoveInputIgnored();                                                                                               // [0x460c160] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsLookInputIgnored();                                                                                               // [0x460c130] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsLocalPlayerController();                                                                                          // [0x460c0e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsLocalController();                                                                                                // [0x460c0b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class AActor* GetViewTarget();                                                                                           // [0x460c080] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FRotator GetDesiredRotation();                                                                                           // [0x460bde0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FRotator GetControlRotation();                                                                                           // [0x460bda0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// void ClientSetRotation(FRotator NewRotation, bool bResetCamera);                                                         // [0x460bc70] Net|NetReliableNative|Event|Public|HasDefaults|NetClient|NetValidate 
	// void ClientSetLocation(FVector NewLocation, FRotator NewRotation);                                                       // [0x460bb30] Net|NetReliableNative|Event|Public|HasDefaults|NetClient|NetValidate 
	// class APlayerController* CastToPlayerController();                                                                       // [0x460bb00] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.ExtraMaterialInfo
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FExtraMaterialInfo
{ 
	TArray<int32_t>                                    MaterialIndexs;                                             // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.StaticMeshComponentLODInfo
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align 8 pad: 0x0000
struct FStaticMeshComponentLODInfo
{ 
	unsigned char                                      UnknownData00_2[0x90];                                      // 0x0000   (0x0090)  MISSED
};

/// Struct /Script/Engine.StreamingTextureBuildInfo
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FStreamingTextureBuildInfo
{ 
	uint32_t                                           PackedRelativeBox;                                          // 0x0000   (0x0004)  
	int32_t                                            TextureLevelIndex;                                          // 0x0004   (0x0004)  
	float                                              TexelFactor;                                                // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.LightmassPrimitiveSettings
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FLightmassPrimitiveSettings
{ 
	bool                                               bUseTwoSidedLighting : 1;                                   // 0x0000:0 (0x0001)  
	bool                                               bShadowIndirectOnly : 1;                                    // 0x0000:1 (0x0001)  
	bool                                               bUseEmissiveForStaticLighting : 1;                          // 0x0000:2 (0x0001)  
	bool                                               bUseVertexNormalForHemisphereGather : 1;                    // 0x0000:3 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              EmissiveLightFalloffExponent;                               // 0x0004   (0x0004)  
	float                                              EmissiveLightExplicitInfluenceRadius;                       // 0x0008   (0x0004)  
	float                                              EmissiveBoost;                                              // 0x000C   (0x0004)  
	float                                              DiffuseBoost;                                               // 0x0010   (0x0004)  
	float                                              FullyOccludedSamplesFraction;                               // 0x0014   (0x0004)  
};

/// Class /Script/Engine.StaticMeshComponent
/// Size: 0x0088 (136 bytes) (0x000508 - 0x000590) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class UStaticMeshComponent : public UMeshComponent
{ 
public:
	int32_t                                            ForcedLodModel;                                             // 0x0508   (0x0004)  
	int32_t                                            PreviousLODLevel;                                           // 0x050C   (0x0004)  
	int32_t                                            MinLOD;                                                     // 0x0510   (0x0004)  
	int32_t                                            SubDivisionStepSize;                                        // 0x0514   (0x0004)  
	bool                                               bOverrideScreenSizeCullRatio : 1;                           // 0x0518:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0519   (0x0003)  MISSED
	float                                              ScreenSizeCullRatioOverride;                                // 0x051C   (0x0004)  
	class UStaticMesh*                                 StaticMesh;                                                 // 0x0520   (0x0008)  
	TArray<FExtraMaterialInfo>                         ExtraMaterialInfos;                                         // 0x0528   (0x0010)  
	FColor                                             WireframeColorOverride;                                     // 0x0538   (0x0004)  
	bool                                               bEvaluateWorldPositionOffset : 1;                           // 0x053C:0 (0x0001)  
	bool                                               bOverrideWireframeColor : 1;                                // 0x053C:1 (0x0001)  
	bool                                               bOverrideMinLOD : 1;                                        // 0x053C:2 (0x0001)  
	bool                                               bOverrideNavigationExport : 1;                              // 0x053C:3 (0x0001)  
	bool                                               bForceNavigationObstacle : 1;                               // 0x053C:4 (0x0001)  
	bool                                               bDisallowMeshPaintPerInstance : 1;                          // 0x053C:5 (0x0001)  
	bool                                               bIgnoreInstanceForTextureStreaming : 1;                     // 0x053C:6 (0x0001)  
	bool                                               bOverrideLightMapRes : 1;                                   // 0x053C:7 (0x0001)  
	bool                                               bCastDistanceFieldIndirectShadow : 1;                       // 0x053D:0 (0x0001)  
	bool                                               bOverrideDistanceFieldSelfShadowBias : 1;                   // 0x053D:1 (0x0001)  
	bool                                               bUseSubDivisions : 1;                                       // 0x053D:2 (0x0001)  
	bool                                               bUseDefaultCollision : 1;                                   // 0x053D:3 (0x0001)  
	bool                                               bReverseCulling : 1;                                        // 0x053D:4 (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x053E   (0x0002)  MISSED
	int32_t                                            OverriddenLightMapRes;                                      // 0x0540   (0x0004)  
	float                                              DistanceFieldIndirectShadowMinVisibility;                   // 0x0544   (0x0004)  
	float                                              DistanceFieldSelfShadowBias;                                // 0x0548   (0x0004)  
	float                                              StreamingDistanceMultiplier;                                // 0x054C   (0x0004)  
	TArray<FStaticMeshComponentLODInfo>                LODData;                                                    // 0x0550   (0x0010)  
	TArray<FStreamingTextureBuildInfo>                 StreamingTextureData;                                       // 0x0560   (0x0010)  
	FLightmassPrimitiveSettings                        LightmassSettings;                                          // 0x0570   (0x0018)  
	// bool SetStaticMesh(class UStaticMesh* NewMesh);                                                                          // [0x4759ff0] Native|Public|BlueprintCallable 
	// void SetReverseCulling(bool ReverseCulling);                                                                             // [0x4759da0] Final|Native|Public|BlueprintCallable 
	// void SetForcedLodModel(int32_t NewForcedLodModel);                                                                       // [0x47598c0] Final|Native|Public|BlueprintCallable 
	// void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue);                                                          // [0x4759830] Final|Native|Public|BlueprintCallable 
	// void SetDistanceFieldSelfShadowBias(float NewValue);                                                                     // [0x47595b0] Final|Native|Public|BlueprintCallable 
	// void OnRep_StaticMesh(class UStaticMesh* OldStaticMesh);                                                                 // [0x4759520] Final|Native|Public  
	// void GetLocalBounds(FVector& Min, FVector& Max);                                                                         // [0x4759380] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};
#pragma pack(pop)

/// Struct /Script/Engine.InstancedStaticMeshInstanceData
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 16 pad: 0x0000
struct FInstancedStaticMeshInstanceData
{ 
	FMatrix                                            Transform;                                                  // 0x0000   (0x0040)  
};

/// Struct /Script/Engine.InstancedStaticMeshMappingInfo
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 pad: 0x0000
struct FInstancedStaticMeshMappingInfo
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Class /Script/Engine.InstancedStaticMeshComponent
/// Size: 0x00B8 (184 bytes) (0x000588 - 0x000640) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class UInstancedStaticMeshComponent : public UStaticMeshComponent
{ 
public:
	TArray<FInstancedStaticMeshInstanceData>           PerInstanceSMData;                                          // 0x0588   (0x0010)  
	bool                                               bUseCustomRandomValue : 1;                                  // 0x0598:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0599   (0x0003)  MISSED
	float                                              BaseRandomValue;                                            // 0x059C   (0x0004)  
	EKuroISMCullingType                                KuroCullingType;                                            // 0x05A0   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x05A1   (0x0003)  MISSED
	int32_t                                            NumCustomDataFloats;                                        // 0x05A4   (0x0004)  
	TArray<float>                                      PerInstanceSMCustomData;                                    // 0x05A8   (0x0010)  
	int32_t                                            InstancingRandomSeed;                                       // 0x05B8   (0x0004)  
	int32_t                                            InstanceStartCullDistance;                                  // 0x05BC   (0x0004)  
	int32_t                                            InstanceEndCullDistance;                                    // 0x05C0   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x05C4   (0x0004)  MISSED
	TArray<int32_t>                                    InstanceReorderTable;                                       // 0x05C8   (0x0010)  
	unsigned char                                      UnknownData03_6[0x48];                                      // 0x05D8   (0x0048)  MISSED
	int32_t                                            NumPendingLightmaps;                                        // 0x0620   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0624   (0x0004)  MISSED
	TArray<FInstancedStaticMeshMappingInfo>            CachedMappings;                                             // 0x0628   (0x0010)  
	// bool UpdateInstanceTransform(int32_t InstanceIndex, FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // [0x4649190] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetKuroCullType(EKuroISMCullingType InCullType);                                                                    // [0x4649110] Final|Native|Public|BlueprintCallable 
	// bool SetCustomDataValue(int32_t InstanceIndex, int32_t CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty); // [0x4648f30] Native|Public|BlueprintCallable 
	// void SetCullDistances(int32_t StartCullDistance, int32_t EndCullDistance);                                               // [0x4648e60] Final|Native|Public|BlueprintCallable 
	// bool RemoveInstance(int32_t InstanceIndex);                                                                              // [0x4648da0] Native|Public|BlueprintCallable 
	// int32_t GetISMNumCustomDataFloats();                                                                                     // [0x46484c0] Native|Public|BlueprintCallable 
	// bool GetInstanceTransform(int32_t InstanceIndex, FTransform& OutInstanceTransform, bool bWorldSpace);                    // [0x46485f0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// TArray<int32_t> GetInstancesOverlappingSphere(FVector& Center, float Radius, bool bSphereInWorldSpace);                  // [0x4648880] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// TArray<int32_t> GetInstancesOverlappingBox(FBox& Box, bool bBoxInWorldSpace);                                            // [0x4648750] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// float GetInstancePerInstanceSMCustomData(int32_t DataIndex);                                                             // [0x4648550] Native|Public|BlueprintCallable 
	// int32_t GetInstanceCount();                                                                                              // [0x4648520] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void FillRandomValue(float InBaseRandomValue, float InRandomValue, bool bMarkRenderStateDirty);                          // [0x4647f70] Final|Native|Public|BlueprintCallable 
	// void ClearInstances();                                                                                                   // [0x4647f50] Native|Public|BlueprintCallable 
	// bool BatchUpdateInstancesTransforms(int32_t StartInstanceIndex, TArray<FTransform>& NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // [0x4647d50] Native|Public|HasOutParms|BlueprintCallable 
	// bool BatchUpdateInstancesTransform(int32_t StartInstanceIndex, int32_t NumInstances, FTransform& NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // [0x4647b00] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void AddZeroToPerInstanceSMCustomData(int32_t CustomDataNum, int32_t Count);                                             // [0x4647a30] Native|Public|BlueprintCallable 
	// int32_t AddInstanceWorldSpace(FTransform& WorldTransform);                                                               // [0x46477a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// TArray<int32_t> AddInstances(TArray<FTransform>& InstanceTransforms, bool bShouldReturnIndices, bool bWorldSpace);       // [0x4647880] Native|Public|HasOutParms|BlueprintCallable 
	// int32_t AddInstance(FTransform& InstanceTransform);                                                                      // [0x46476c0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};
#pragma pack(pop)

/// Struct /Script/Engine.GeomSelection
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FGeomSelection
{ 
	int32_t                                            Type;                                                       // 0x0000   (0x0004)  
	int32_t                                            Index;                                                      // 0x0004   (0x0004)  
	int32_t                                            SelectionIndex;                                             // 0x0008   (0x0004)  
};

/// Class /Script/Engine.Brush
/// Size: 0x0038 (56 bytes) (0x0002A8 - 0x0002E0) align 8 pad: 0x0000
class ABrush : public AActor
{ 
public:
	TEnumAsByte<EBrushType>                            BrushType;                                                  // 0x02A8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x02A9   (0x0003)  MISSED
	FColor                                             BrushColor;                                                 // 0x02AC   (0x0004)  
	int32_t                                            PolyFlags;                                                  // 0x02B0   (0x0004)  
	bool                                               bColored : 1;                                               // 0x02B4:0 (0x0001)  
	bool                                               bSolidWhenSelected : 1;                                     // 0x02B4:1 (0x0001)  
	bool                                               bPlaceableFromClassBrowser : 1;                             // 0x02B4:2 (0x0001)  
	bool                                               bNotForClientOrServer : 1;                                  // 0x02B4:3 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x02B5   (0x0003)  MISSED
	class UModel*                                      Brush;                                                      // 0x02B8   (0x0008)  
	class UBrushComponent*                             BrushComponent;                                             // 0x02C0   (0x0008)  
	bool                                               bInManipulation : 1;                                        // 0x02C8:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x02C9   (0x0007)  MISSED
	TArray<FGeomSelection>                             SavedSelections;                                            // 0x02D0   (0x0010)  
};

/// Class /Script/Engine.Volume
/// Size: 0x0000 (0 bytes) (0x0002E0 - 0x0002E0) align 8 pad: 0x0000
class AVolume : public ABrush
{ 
public:
};

/// Struct /Script/Engine.BasedMovementInfo
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FBasedMovementInfo
{ 
	class UPrimitiveComponent*                         MovementBase;                                               // 0x0000   (0x0008)  
	FName                                              BoneName;                                                   // 0x0008   (0x000C)  
	FVector_NetQuantize100                             Location;                                                   // 0x0014   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x0020   (0x000C)  
	bool                                               bServerHasBaseComponent;                                    // 0x002C   (0x0001)  
	bool                                               bRelativeRotation;                                          // 0x002D   (0x0001)  
	bool                                               bServerHasVelocity;                                         // 0x002E   (0x0001)  
	unsigned char                                      UnknownData00_7[0x9];                                       // 0x002F   (0x0009)  MISSED
};

/// Struct /Script/Engine.RootMotionSourceSettings
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FRootMotionSourceSettings
{ 
	char                                               Flags;                                                      // 0x0000   (0x0001)  
};

/// Struct /Script/Engine.Vector_NetQuantize10
/// Size: 0x0000 (0 bytes) (0x00000C - 0x00000C) align 4 pad: 0x0000
struct FVector_NetQuantize10 : FVector
{ 
};

/// Struct /Script/Engine.RootMotionSourceGroup
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FRootMotionSourceGroup
{ 
	unsigned char                                      UnknownData00_7[0x28];                                      // 0x0000   (0x0028)  MISSED
	bool                                               bHasAdditiveSources : 1;                                    // 0x0028:0 (0x0001)  
	bool                                               bHasOverrideSources : 1;                                    // 0x0028:1 (0x0001)  
	bool                                               bHasOverrideSourcesWithIgnoreZAccumulate : 1;               // 0x0028:2 (0x0001)  
	bool                                               bIsAdditiveVelocityApplied : 1;                             // 0x0028:3 (0x0001)  
	FRootMotionSourceSettings                          LastAccumulatedSettings;                                    // 0x0029   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x002A   (0x0002)  MISSED
	FVector_NetQuantize10                              LastPreAdditiveVelocity;                                    // 0x002C   (0x000C)  
};

/// Struct /Script/Engine.RootMotionMovementParams
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 16 pad: 0x0000
struct FRootMotionMovementParams
{ 
	bool                                               bHasRootMotion;                                             // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              BlendWeight;                                                // 0x0004   (0x0004)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0008   (0x0008)  MISSED
	FTransform                                         RootMotionTransform;                                        // 0x0010   (0x0030)  
};

/// Struct /Script/Engine.RepRootMotionMontage
/// Size: 0x0098 (152 bytes) (0x000000 - 0x000098) align 8 pad: 0x0000
struct FRepRootMotionMontage
{ 
	bool                                               bIsActive;                                                  // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	class UAnimMontage*                                AnimMontage;                                                // 0x0008   (0x0008)  
	float                                              Position;                                                   // 0x0010   (0x0004)  
	FVector_NetQuantize100                             Location;                                                   // 0x0014   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x0020   (0x000C)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x002C   (0x0004)  MISSED
	class UPrimitiveComponent*                         MovementBase;                                               // 0x0030   (0x0008)  
	FName                                              MovementBaseBoneName;                                       // 0x0038   (0x000C)  
	bool                                               bRelativePosition;                                          // 0x0044   (0x0001)  
	bool                                               bRelativeRotation;                                          // 0x0045   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x0046   (0x0002)  MISSED
	FRootMotionSourceGroup                             AuthoritativeRootMotion;                                    // 0x0048   (0x0038)  
	FVector_NetQuantize10                              Acceleration;                                               // 0x0080   (0x000C)  
	FVector_NetQuantize10                              LinearVelocity;                                             // 0x008C   (0x000C)  
};

/// Struct /Script/Engine.SimulatedRootMotionReplicatedMove
/// Size: 0x00A0 (160 bytes) (0x000000 - 0x0000A0) align 8 pad: 0x0000
struct FSimulatedRootMotionReplicatedMove
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	FRepRootMotionMontage                              RootMotion;                                                 // 0x0008   (0x0098)  
};

/// Struct /Script/Engine.KuroRepRootMotionMontage
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 pad: 0x0000
struct FKuroRepRootMotionMontage
{ 
	bool                                               bIsActive;                                                  // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              Position;                                                   // 0x0004   (0x0004)  
	FVector                                            Location;                                                   // 0x0008   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x0014   (0x000C)  
	FString                                            MovementBaseBoneName;                                       // 0x0020   (0x0010)  
	bool                                               bRelativePosition;                                          // 0x0030   (0x0001)  
	bool                                               bRelativeRotation;                                          // 0x0031   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0032   (0x0002)  MISSED
	FVector                                            Acceleration;                                               // 0x0034   (0x000C)  
	FVector                                            LinearVelocity;                                             // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Class /Script/Engine.Character
/// Size: 0x0298 (664 bytes) (0x000308 - 0x0005A0) align 16 pad: 0x0000
class ACharacter : public APawn
{ 
public:
	class USkeletalMeshComponent*                      Mesh;                                                       // 0x0308   (0x0008)  
	class UCharacterMovementComponent*                 CharacterMovement;                                          // 0x0310   (0x0008)  
	class UCapsuleComponent*                           CapsuleComponent;                                           // 0x0318   (0x0008)  
	FBasedMovementInfo                                 BasedMovement;                                              // 0x0320   (0x0038)  
	FBasedMovementInfo                                 ReplicatedBasedMovement;                                    // 0x0358   (0x0038)  
	float                                              AnimRootMotionTranslationScale;                             // 0x0390   (0x0004)  
	FVector                                            BaseTranslationOffset;                                      // 0x0394   (0x000C)  
	FQuat                                              BaseRotationOffset;                                         // 0x03A0   (0x0010)  
	float                                              ReplicatedServerLastTransformUpdateTimeStamp;               // 0x03B0   (0x0004)  
	float                                              ReplayLastTransformUpdateTimeStamp;                         // 0x03B4   (0x0004)  
	char                                               ReplicatedMovementMode;                                     // 0x03B8   (0x0001)  
	bool                                               bInBaseReplication;                                         // 0x03B9   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x03BA   (0x0002)  MISSED
	float                                              CrouchedEyeHeight;                                          // 0x03BC   (0x0004)  
	bool                                               bIsCrouched : 1;                                            // 0x03C0:0 (0x0001)  
	bool                                               bProxyIsJumpForceApplied : 1;                               // 0x03C0:1 (0x0001)  
	bool                                               bPressedJump : 1;                                           // 0x03C0:2 (0x0001)  
	bool                                               bClientUpdating : 1;                                        // 0x03C0:3 (0x0001)  
	bool                                               bClientWasFalling : 1;                                      // 0x03C0:4 (0x0001)  
	bool                                               bClientResimulateRootMotion : 1;                            // 0x03C0:5 (0x0001)  
	bool                                               bClientResimulateRootMotionSources : 1;                     // 0x03C0:6 (0x0001)  
	bool                                               bSimGravityDisabled : 1;                                    // 0x03C0:7 (0x0001)  
	bool                                               bClientCheckEncroachmentOnNetUpdate : 1;                    // 0x03C1:0 (0x0001)  
	bool                                               bServerMoveIgnoreRootMotion : 1;                            // 0x03C1:1 (0x0001)  
	bool                                               bWasJumping : 1;                                            // 0x03C1:2 (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x03C2   (0x0002)  MISSED
	float                                              JumpKeyHoldTime;                                            // 0x03C4   (0x0004)  
	float                                              JumpForceTimeRemaining;                                     // 0x03C8   (0x0004)  
	float                                              ProxyJumpForceStartedTime;                                  // 0x03CC   (0x0004)  
	float                                              JumpMaxHoldTime;                                            // 0x03D0   (0x0004)  
	int32_t                                            JumpMaxCount;                                               // 0x03D4   (0x0004)  
	int32_t                                            JumpCurrentCount;                                           // 0x03D8   (0x0004)  
	int32_t                                            JumpCurrentCountPreJump;                                    // 0x03DC   (0x0004)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x03E0   (0x0008)  MISSED
	SDK_UNDEFINED(16,46) /* FMulticastInlineDelegate */ __um(OnReachedJumpApex);                                   // 0x03E8   (0x0010)  
	unsigned char                                      UnknownData03_6[0x10];                                      // 0x03F8   (0x0010)  MISSED
	SDK_UNDEFINED(16,47) /* FMulticastInlineDelegate */ __um(MovementModeChangedDelegate);                         // 0x0408   (0x0010)  
	SDK_UNDEFINED(16,48) /* FMulticastInlineDelegate */ __um(OnCharacterMovementUpdated);                          // 0x0418   (0x0010)  
	FRootMotionSourceGroup                             SavedRootMotion;                                            // 0x0428   (0x0038)  
	FRootMotionMovementParams                          ClientRootMotionParams;                                     // 0x0460   (0x0040)  
	TArray<FSimulatedRootMotionReplicatedMove>         RootMotionRepMoves;                                         // 0x04A0   (0x0010)  
	FRepRootMotionMontage                              RepRootMotion;                                              // 0x04B0   (0x0098)  
	FKuroRepRootMotionMontage                          KuroRepRootMotion;                                          // 0x0548   (0x0050)  
	unsigned char                                      UnknownData04_7[0x8];                                       // 0x0598   (0x0008)  MISSED
	// void UnCrouch(bool bClientSimulation);                                                                                   // [0x4601880] Native|Public|BlueprintCallable 
	// void StopJumping();                                                                                                      // [0x4601860] Native|Public|BlueprintCallable 
	// void StopAnimMontage(class UAnimMontage* AnimMontage);                                                                   // [0x46017d0] Native|Public|BlueprintCallable 
	// void SetKuroReplicatedMovementMode(char Mode);                                                                           // [0x4601750] Final|Native|Public|BlueprintCallable 
	// void SetAnimRootMotionTranslationScale(float InAnimRootMotionTranslationScale);                                          // [0x46013f0] Final|Native|Public|BlueprintCallable 
	// void ServerMovePacked(FCharacterServerMovePackedBits PackedBits);                                                        // [0x4601300] Net|Native|Event|Public|NetServer|NetValidate 
	// void ServerMoveOld(float OldTimeStamp, FVector_NetQuantize10 OldAccel, char OldMoveFlags);                               // [0x4601190] Net|Native|Event|Public|NetServer|NetValidate 
	// void ServerMoveNoBase(float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, char ClientMovementMode); // [0x4600ef0] Net|Native|Event|Public|NetServer|NetValidate 
	// void ServerMoveDualNoBase(float TimeStamp0, FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, char ClientMovementMode); // [0x4600af0] Net|Native|Event|Public|NetServer|NetValidate 
	// void ServerMoveDualHybridRootMotion(float TimeStamp0, FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, char ClientMovementMode); // [0x4600620] Net|Native|Event|Public|NetServer|NetValidate 
	// void ServerMoveDual(float TimeStamp0, FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, char ClientMovementMode); // [0x4600150] Net|Native|Event|Public|NetServer|NetValidate 
	// void ServerMove(float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, char ClientMovementMode); // [0x45ffdf0] Net|Native|Event|Public|NetServer|NetValidate 
	// void RootMotionDebugClientPrintOnScreen(FString InString);                                                               // [0x45ffd50] Net|NetReliableNative|Event|Public|NetClient 
	// float PlayAnimMontage(class UAnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);                        // [0x45ffc10] Native|Public|BlueprintCallable 
	// void OnWalkingOffLedge(FVector& PreviousFloorImpactNormal, FVector& PreviousFloorContactNormal, FVector& PreviousLocation, float TimeDelta); // [0x45ffa70] Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// void OnRep_RootMotion();                                                                                                 // [0x45ffa50] Final|Native|Public  
	// void OnRep_ReplicatedBasedMovement();                                                                                    // [0x952d70] Native|Public|BlueprintCallable 
	// void OnRep_ReplayLastTransformUpdateTimeStamp();                                                                         // [0x45ffa30] Final|Native|Public  
	// void OnRep_KuroRootMotion();                                                                                             // [0x45ffa10] Final|Native|Public|BlueprintCallable 
	// void OnRep_IsCrouched();                                                                                                 // [0x45ff9f0] Native|Public        
	// void OnLaunched(FVector LaunchVelocity, bool bXYOverride, bool bZOverride);                                              // [0x25a7960] Event|Public|HasDefaults|BlueprintEvent 
	// void OnLanded(FHitResult& Hit);                                                                                          // [0x25a7960] Event|Public|HasOutParms|BlueprintEvent 
	// void OnJumped();                                                                                                         // [0x45ff9d0] Native|Event|Public|BlueprintEvent 
	// void LaunchCharacter(FVector LaunchVelocity, bool bXYOverride, bool bZOverride);                                         // [0x45ff8a0] Native|Public|HasDefaults|BlueprintCallable 
	// void KuroReplicateRootMotion(FKuroRepRootMotionMontage& Data);                                                           // [0x25a7960] Event|Public|HasOutParms|BlueprintEvent 
	// void KuroReplicateDataToServer(FKuroRepMovement& RepMovement, char MovementMode);                                        // [0x25a7960] Event|Public|HasOutParms|BlueprintEvent 
	// void KuroPreNetReceive();                                                                                                // [0x45ff830] Native|Public|BlueprintCallable 
	// void KuroPostNetReceive();                                                                                               // [0x45ff810] Native|Public|BlueprintCallable 
	// void Kuro_ServerMovePacked(FKuroCharacterNetworkMoveData& Data);                                                         // [0x25a7960] Event|Public|HasOutParms|BlueprintEvent 
	// void Kuro_OnRep_ReplicatedBasedMovement();                                                                               // [0x45ff880] Native|Public|BlueprintCallable 
	// bool Kuro_IsJumpProvidingForce();                                                                                        // [0x45ff850] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void K2_UpdateCustomMovement(float DeltaTime);                                                                           // [0x25a7960] Event|Public|BlueprintEvent 
	// void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);                                             // [0x25a7960] Event|Public|BlueprintEvent 
	// void K2_OnMovementModeChanged(TEnumAsByte<EMovementMode> PrevMovementMode, TEnumAsByte<EMovementMode> NewMovementMode, char PrevCustomMode, char NewCustomMode); // [0x25a7960] Event|Public|BlueprintEvent 
	// void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);                                               // [0x25a7960] Event|Public|BlueprintEvent 
	// void Jump();                                                                                                             // [0x45ff7f0] Native|Public|BlueprintCallable 
	// bool IsPlayingRootMotion();                                                                                              // [0x45ff7c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsPlayingNetworkedRootMotionMontage();                                                                              // [0x45ff790] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsJumpProvidingForce();                                                                                             // [0x45ff760] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool HasAnyRootMotion();                                                                                                 // [0x45ff730] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// char GetKuroReplicatedMovementMode();                                                                                    // [0x45ff190] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UAnimMontage* GetCurrentMontage();                                                                                 // [0x45ff160] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector GetBaseTranslationOffset();                                                                                      // [0x45ff130] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FRotator GetBaseRotationOffsetRotator();                                                                                 // [0x45ff0e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// float GetAnimRootMotionTranslationScale();                                                                               // [0x45ff0b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void Crouch(bool bClientSimulation);                                                                                     // [0x45ff020] Native|Public|BlueprintCallable 
	// void ClientVeryShortAdjustPosition(float Timestamp, FVector NewLoc, class UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // [0x45fedd0] Net|Native|Event|Public|HasDefaults|NetClient 
	// void ClientMoveResponsePacked(FCharacterMoveResponsePackedBits PackedBits);                                              // [0x45fece0] Net|Native|Event|Public|NetClient|NetValidate 
	// void ClientCheatWalk();                                                                                                  // [0x45fecc0] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientCheatGhost();                                                                                                 // [0x45feca0] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientCheatFly();                                                                                                   // [0x45fec80] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientAdjustRootMotionSourcePosition(float Timestamp, FRootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // [0x45fe740] Net|Native|Event|Public|HasDefaults|NetClient 
	// void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // [0x45fe400] Net|Native|Event|Public|HasDefaults|NetClient 
	// void ClientAdjustPosition(float Timestamp, FVector NewLoc, FVector NewVel, class UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // [0x45fe160] Net|Native|Event|Public|HasDefaults|NetClient 
	// void ClientAckGoodMove(float Timestamp);                                                                                 // [0x45fe0e0] Net|Native|Event|Public|NetClient 
	// bool CanJumpInternal();                                                                                                  // [0x45fe0b0] Native|Event|Protected|BlueprintEvent|Const 
	// bool CanJump();                                                                                                          // [0x45fe080] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool CanCrouch();                                                                                                        // [0x45fe050] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void CacheInitialMeshOffset(FVector MeshRelativeLocation, FRotator MeshRelativeRotation);                                // [0x45fdf60] Native|Public|HasDefaults|BlueprintCallable 
};

/// Struct /Script/Engine.ActiveForceFeedbackEffect
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FActiveForceFeedbackEffect
{ 
	class UForceFeedbackEffect*                        ForceFeedbackEffect;                                        // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0008   (0x0018)  MISSED
};

/// Class /Script/Engine.PlayerController
/// Size: 0x02F0 (752 bytes) (0x000328 - 0x000618) align 8 pad: 0x0000
class APlayerController : public AController
{ 
public:
	class UPlayer*                                     Player;                                                     // 0x0328   (0x0008)  
	class APawn*                                       AcknowledgedPawn;                                           // 0x0330   (0x0008)  
	class UInterpTrackInstDirector*                    ControllingDirTrackInst;                                    // 0x0338   (0x0008)  
	class AHUD*                                        MyHUD;                                                      // 0x0340   (0x0008)  
	bool                                               ChangeRotationOnPossess : 1;                                // 0x0348:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0349   (0x0007)  MISSED
	class APlayerCameraManager*                        PlayerCameraManager;                                        // 0x0350   (0x0008)  
	class UClass*                                      PlayerCameraManagerClass;                                   // 0x0358   (0x0008)  
	bool                                               bAutoManageActiveCameraTarget;                              // 0x0360   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0361   (0x0003)  MISSED
	FRotator                                           TargetViewRotation;                                         // 0x0364   (0x000C)  
	unsigned char                                      UnknownData02_6[0xC];                                       // 0x0370   (0x000C)  MISSED
	float                                              SmoothTargetViewRotationSpeed;                              // 0x037C   (0x0004)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0380   (0x0008)  MISSED
	TArray<class AActor*>                              HiddenActors;                                               // 0x0388   (0x0010)  
	SDK_UNDEFINED(16,49) /* TArray<TWeakObjectPtr<UPrimitiveComponent*>> */ __um(HiddenPrimitiveComponents);       // 0x0398   (0x0010)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x03A8   (0x0004)  MISSED
	float                                              LastSpectatorStateSynchTime;                                // 0x03AC   (0x0004)  
	FVector                                            LastSpectatorSyncLocation;                                  // 0x03B0   (0x000C)  
	FRotator                                           LastSpectatorSyncRotation;                                  // 0x03BC   (0x000C)  
	int32_t                                            ClientCap;                                                  // 0x03C8   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x03CC   (0x0004)  MISSED
	class UCheatManager*                               CheatManager;                                               // 0x03D0   (0x0008)  
	class UClass*                                      CheatClass;                                                 // 0x03D8   (0x0008)  
	class UPlayerInput*                                PlayerInput;                                                // 0x03E0   (0x0008)  
	TArray<FActiveForceFeedbackEffect>                 ActiveForceFeedbackEffects;                                 // 0x03E8   (0x0010)  
	unsigned char                                      UnknownData06_6[0x70];                                      // 0x03F8   (0x0070)  MISSED
	unsigned char                                      UnknownBit07 : 1;                                           // 0x0468:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit08 : 1;                                           // 0x0468:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit09 : 1;                                           // 0x0468:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit10 : 1;                                           // 0x0468:3 (0x0001)  MISSED
	bool                                               bPlayerIsWaiting : 1;                                       // 0x0468:4 (0x0001)  
	unsigned char                                      UnknownData11_5[0x3];                                       // 0x0469   (0x0003)  MISSED
	char                                               NetPlayerIndex;                                             // 0x046C   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3B];                                      // 0x046D   (0x003B)  MISSED
	class UNetConnection*                              PendingSwapConnection;                                      // 0x04A8   (0x0008)  
	class UNetConnection*                              NetConnection;                                              // 0x04B0   (0x0008)  
	unsigned char                                      UnknownData13_6[0xC];                                       // 0x04B8   (0x000C)  MISSED
	float                                              InputYawScale;                                              // 0x04C4   (0x0004)  
	float                                              InputPitchScale;                                            // 0x04C8   (0x0004)  
	float                                              InputRollScale;                                             // 0x04CC   (0x0004)  
	bool                                               bShowMouseCursor : 1;                                       // 0x04D0:0 (0x0001)  
	bool                                               bEnableClickEvents : 1;                                     // 0x04D0:1 (0x0001)  
	bool                                               bEnableTouchEvents : 1;                                     // 0x04D0:2 (0x0001)  
	bool                                               bEnableMouseOverEvents : 1;                                 // 0x04D0:3 (0x0001)  
	bool                                               bEnableTouchOverEvents : 1;                                 // 0x04D0:4 (0x0001)  
	bool                                               bForceFeedbackEnabled : 1;                                  // 0x04D0:5 (0x0001)  
	unsigned char                                      UnknownData14_5[0x3];                                       // 0x04D1   (0x0003)  MISSED
	float                                              ForceFeedbackScale;                                         // 0x04D4   (0x0004)  
	TArray<FKey>                                       ClickEventKeys;                                             // 0x04D8   (0x0010)  
	TEnumAsByte<EMouseCursor>                          DefaultMouseCursor;                                         // 0x04E8   (0x0001)  
	TEnumAsByte<EMouseCursor>                          CurrentMouseCursor;                                         // 0x04E9   (0x0001)  
	TEnumAsByte<ECollisionChannel>                     DefaultClickTraceChannel;                                   // 0x04EA   (0x0001)  
	TEnumAsByte<ECollisionChannel>                     CurrentClickTraceChannel;                                   // 0x04EB   (0x0001)  
	float                                              HitResultTraceDistance;                                     // 0x04EC   (0x0004)  
	uint16_t                                           SeamlessTravelCount;                                        // 0x04F0   (0x0002)  
	uint16_t                                           LastCompletedSeamlessTravelCount;                           // 0x04F2   (0x0002)  
	unsigned char                                      UnknownData15_6[0x4];                                       // 0x04F4   (0x0004)  MISSED
	class AActor*                                      SeamlessCameraActor;                                        // 0x04F8   (0x0008)  
	bool                                               bUseSeamlessCameraActor : 1;                                // 0x0500:0 (0x0001)  
	unsigned char                                      UnknownData16_5[0x77];                                      // 0x0501   (0x0077)  MISSED
	class UInputComponent*                             InactiveStateInputComponent;                                // 0x0578   (0x0008)  
	unsigned char                                      UnknownBit17 : 1;                                           // 0x0580:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit18 : 1;                                           // 0x0580:1 (0x0001)  MISSED
	bool                                               bShouldPerformFullTickWhenPaused : 1;                       // 0x0580:2 (0x0001)  
	unsigned char                                      UnknownData19_5[0x17];                                      // 0x0581   (0x0017)  MISSED
	class UTouchInterface*                             CurrentTouchInterface;                                      // 0x0598   (0x0008)  
	unsigned char                                      UnknownData20_6[0x50];                                      // 0x05A0   (0x0050)  MISSED
	class ASpectatorPawn*                              SpectatorPawn;                                              // 0x05F0   (0x0008)  
	unsigned char                                      UnknownData21_6[0x4];                                       // 0x05F8   (0x0004)  MISSED
	bool                                               bIsLocalPlayerController;                                   // 0x05FC   (0x0001)  
	unsigned char                                      UnknownData22_6[0x3];                                       // 0x05FD   (0x0003)  MISSED
	FVector                                            SpawnLocation;                                              // 0x0600   (0x000C)  
	unsigned char                                      UnknownData23_7[0xC];                                       // 0x060C   (0x000C)  MISSED
	// bool WasInputKeyJustReleased(FKey Key);                                                                                  // [0x470dfa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool WasInputKeyJustPressed(FKey Key);                                                                                   // [0x470de90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void ToggleSpeaking(bool bInSpeaking);                                                                                   // [0x470de00] Exec|Native|Public   
	// void TestServerLevelVisibilityChange(FName PackageName, FName Filename);                                                 // [0x470dd00] Final|Exec|Native|Private 
	// void SwitchLevel(FString URL);                                                                                           // [0x470dc60] Exec|Native|Public   
	// void StopHapticEffect(EControllerHand Hand);                                                                             // [0x470dbe0] Final|Native|Public|BlueprintCallable 
	// void StartFire(char FireModeNum);                                                                                        // [0x470db60] Exec|Native|Public   
	// void SetVirtualJoystickVisibility(bool bVisible);                                                                        // [0x470dad0] Native|Public|BlueprintCallable 
	// void SetViewTargetWithBlend(class AActor* NewViewTarget, float BlendTime, TEnumAsByte<EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing, bool bKuroEnableBlend); // [0x470d8f0] Native|Public|BlueprintCallable 
	// void SetName(FString S);                                                                                                 // [0x470d850] Exec|Native|Public   
	// void SetMouseLocation(int32_t X, int32_t Y);                                                                             // [0x470d780] Final|Native|Public|BlueprintCallable 
	// void SetMouseCursorWidget(TEnumAsByte<EMouseCursor> Cursor, class UUserWidget* CursorWidget);                            // [0x470d6b0] Final|Native|Public|BlueprintCallable 
	// void SetHapticsByValue(float Frequency, float Amplitude, EControllerHand Hand);                                          // [0x470d5a0] Final|Native|Public|BlueprintCallable 
	// void SetDisableHaptics(bool bNewDisabled);                                                                               // [0x470d510] Native|Public|BlueprintCallable 
	// void SetControllerLightColor(FColor Color);                                                                              // [0x470d490] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning); // [0x470d2b0] Native|Public|BlueprintCallable 
	// void SetAudioListenerOverride(class USceneComponent* AttachToComponent, FVector Location, FRotator Rotation);            // [0x470d180] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetAudioListenerAttenuationOverride(class USceneComponent* AttachToComponent, FVector AttenuationLocationOVerride); // [0x470d0a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void ServerViewSelf(FViewTargetTransitionParams TransitionParams);                                                       // [0x470cfa0] Net|Native|Event|Public|NetServer|NetValidate 
	// void ServerViewPrevPlayer();                                                                                             // [0x470cf50] Net|Native|Event|Public|NetServer|NetValidate 
	// void ServerViewNextPlayer();                                                                                             // [0x470cf00] Net|Native|Event|Public|NetServer|NetValidate 
	// void ServerVerifyViewTarget();                                                                                           // [0x470ceb0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// void ServerUpdateMultipleLevelsVisibility(TArray<FUpdateLevelVisibilityLevelInfo> LevelVisibilities);                    // [0x470cdf0] Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// void ServerUpdateLevelVisibility(FUpdateLevelVisibilityLevelInfo LevelVisibility);                                       // [0x470cd30] Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// void ServerUpdateCamera(FVector_NetQuantize CamLoc, int32_t CamPitchAndYaw);                                             // [0x470cc00] Net|Native|Event|Public|NetServer|NetValidate 
	// void ServerUnmutePlayer(FUniqueNetIdRepl PlayerId);                                                                      // [0x470ca80] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// void ServerToggleAILogging();                                                                                            // [0x470ca30] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// void ServerShortTimeout();                                                                                               // [0x470c9e0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// void ServerSetSpectatorWaiting(bool bWaiting);                                                                           // [0x470c920] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// void ServerSetSpectatorLocation(FVector NewLoc, FRotator NewRot);                                                        // [0x470c7e0] Net|Native|Event|Public|NetServer|HasDefaults|NetValidate 
	// void ServerRestartPlayer();                                                                                              // [0x470c790] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// void ServerPause();                                                                                                      // [0x470c740] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// void ServerNotifyLoadedWorld(FName WorldPackageName);                                                                    // [0x470c660] Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// void ServerMutePlayer(FUniqueNetIdRepl PlayerId);                                                                        // [0x470c4e0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// void ServerExecRPC(FString msg);                                                                                         // [0x470c420] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// void ServerExec(FString msg);                                                                                            // [0x470c380] Final|Exec|Native|Public 
	// void ServerCheckClientPossessionReliable();                                                                              // [0x470c330] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// void ServerCheckClientPossession();                                                                                      // [0x470c2e0] Net|Native|Event|Public|NetServer|NetValidate 
	// void ServerChangeName(FString S);                                                                                        // [0x470c220] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// void ServerCamera(FName NewMode);                                                                                        // [0x470c130] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// void ServerAcknowledgePossession(class APawn* P);                                                                        // [0x470c070] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// void SendToConsole(FString Command);                                                                                     // [0x470bfd0] Exec|Native|Public   
	// void RestartLevel();                                                                                                     // [0x470bfb0] Exec|Native|Public   
	// void ResetControllerLightColor();                                                                                        // [0x470bf90] Final|Native|Public|BlueprintCallable 
	// bool ProjectWorldLocationToScreen(FVector WorldLocation, FVector2D& ScreenLocation, bool bPlayerViewportRelative);       // [0x470be50] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// void PlayHapticEffect(class UHapticFeedbackEffect_Base* HapticEffect, EControllerHand Hand, float Scale, bool bLoop);    // [0x470bcf0] Final|Native|Public|BlueprintCallable 
	// void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, TEnumAsByte<EDynamicForceFeedbackAction> Action, FLatentActionInfo LatentInfo); // [0x470ba40] Final|Native|Private|BlueprintCallable 
	// void Pause();                                                                                                            // [0x470ba20] Exec|Native|Public   
	// void OnServerStartedVisualLogger(bool bIsLogging);                                                                       // [0x470b990] Net|NetReliableNative|Event|Public|NetClient 
	// void LocalTravel(FString URL);                                                                                           // [0x470b8f0] Exec|Native|Public   
	// void K2_ClientTravel(FString URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless);                                  // [0x470b7c0] Final|Native|Public|BlueprintCallable 
	// void K2_ClientPlayForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused); // [0x470b610] Final|Native|Public|BlueprintCallable 
	// bool IsInputKeyDown(FKey Key);                                                                                           // [0x470b500] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void GetViewportSize(int32_t& SizeX, int32_t& SizeY);                                                                    // [0x470b420] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// class ASpectatorPawn* GetSpectatorPawn();                                                                                // [0x470b400] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool GetMousePosition(float& LocationX, float& LocationY);                                                               // [0x470b310] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// FVector GetInputVectorKeyState(FKey Key);                                                                                // [0x470b1f0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// void GetInputTouchState(TEnumAsByte<ETouchIndex> FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed); // [0x470b060] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// void GetInputMouseDelta(float& DeltaX, float& DeltaY);                                                                   // [0x470af80] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// void GetInputMotionState(FVector& Tilt, FVector& RotationRate, FVector& Gravity, FVector& Acceleration);                 // [0x470adf0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// float GetInputKeyTimeDown(FKey Key);                                                                                     // [0x470ace0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void GetInputAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float& StickX, float& StickY);             // [0x470abb0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// float GetInputAnalogKeyState(FKey Key);                                                                                  // [0x470aaa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class AHUD* GetHUD();                                                                                                    // [0x470a070] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool GetHitResultUnderFingerForObjects(TEnumAsByte<ETouchIndex> FingerIndex, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, FHitResult& HitResult); // [0x470a8d0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// bool GetHitResultUnderFingerByChannel(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, FHitResult& HitResult); // [0x470a720] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// bool GetHitResultUnderFinger(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, FHitResult& HitResult); // [0x470a570] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// bool GetHitResultUnderCursorForObjects(TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, FHitResult& HitResult); // [0x470a3e0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// bool GetHitResultUnderCursorByChannel(TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, FHitResult& HitResult); // [0x470a240] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// bool GetHitResultUnderCursor(TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, FHitResult& HitResult);    // [0x470a0a0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// FVector GetFocalLocation();                                                                                              // [0x470a030] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// void FOV(float NewFOV);                                                                                                  // [0x4709fa0] Exec|Native|Public   
	// void EnableCheats();                                                                                                     // [0x4709f80] Exec|Native|Public   
	// bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, FVector& WorldLocation, FVector& WorldDirection);      // [0x4709df0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// bool DeprojectMousePositionToWorld(FVector& WorldLocation, FVector& WorldDirection);                                     // [0x4709cf0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// void ConsoleKey(FKey Key);                                                                                               // [0x4709be0] Exec|Native|Public   
	// void ClientWasKicked(FText KickReason);                                                                                  // [0x4709b20] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientVoiceHandshakeComplete();                                                                                     // [0x4709b00] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientUpdateMultipleLevelsStreamingStatus(TArray<FUpdateLevelStreamingLevelStatus> LevelStatuses);                  // [0x4709a60] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int32_t LODIndex); // [0x47098a0] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientUnmutePlayer(FUniqueNetIdRepl PlayerId);                                                                      // [0x4709770] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientTravelInternal(FString URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, FGuid MapPackageGuid);       // [0x47095f0] Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
	// void ClientTravel(FString URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, FGuid MapPackageGuid);               // [0x4709470] Final|Native|Public|HasDefaults 
	// void ClientTeamMessage(class APlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);                 // [0x47092f0] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientStopForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, FName Tag);                                // [0x4709200] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// void ClientStopCameraShakesFromSource(class UCameraShakeSourceComponent* SourceComponent, bool bImmediately);            // [0x4709130] Final|Native|Public|BlueprintCallable 
	// void ClientStopCameraShake(class UClass* Shake, bool bImmediately);                                                      // [0x4709060] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// void ClientStopCameraAnim(class UCameraAnim* AnimToStop);                                                                // [0x4708fd0] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientStartOnlineSession();                                                                                         // [0x4708fb0] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientStartCameraShakeFromSource(class UClass* Shake, class UCameraShakeSourceComponent* SourceComponent);          // [0x4708ee0] Final|Native|Public|BlueprintCallable 
	// void ClientStartCameraShake(class UClass* Shake, float Scale, ECameraShakePlaySpace PlaySpace, FRotator UserPlaySpaceRot); // [0x4708d70] Net|Native|Event|Public|HasDefaults|NetClient|BlueprintCallable 
	// void ClientSpawnCameraLensEffect(class UClass* LensEffectEmitterClass);                                                  // [0x4708ce0] Net|Native|Event|Public|NetClient|BlueprintCallable 
	// void ClientSetViewTarget(class AActor* A, FViewTargetTransitionParams TransitionParams);                                 // [0x4708bd0] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientSetSpectatorWaiting(bool bWaiting);                                                                           // [0x4708b40] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientSetHUD(class UClass* NewHUDClass);                                                                            // [0x4708ab0] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// void ClientSetForceMipLevelsToBeResident(class UMaterialInterface* Material, float ForceDuration, int32_t CinematicTextureGroups); // [0x47089a0] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);       // [0x4708820] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientSetCameraMode(FName NewCamMode);                                                                              // [0x4708770] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientSetCameraFade(bool bEnableFading, FColor FadeColor, FVector2D FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished); // [0x4708560] Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
	// void ClientSetBlockOnAsyncLoading();                                                                                     // [0x4708540] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientReturnToMainMenuWithTextReason(FText ReturnReason);                                                           // [0x4708480] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientReturnToMainMenu(FString ReturnReason);                                                                       // [0x47083e0] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientRetryClientRestart(class APawn* NewPawn);                                                                     // [0x4708350] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientRestart(class APawn* NewPawn);                                                                                // [0x47082c0] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientReset();                                                                                                      // [0x47082a0] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientRepObjRef(class UObject* Object);                                                                             // [0x4708210] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientReceiveLocalizedMessage(class UClass* Message, int32_t Switch, class APlayerState* RelatedPlayerState, class APlayerState* RelatedPlayerState1, class UObject* OptionalObject); // [0x4708070] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientPrestreamTextures(class AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int32_t CinematicTextureGroups); // [0x4707f10] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);                                                   // [0x4707de0] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientPlaySoundAtLocation(class USoundBase* Sound, FVector Location, float VolumeMultiplier, float PitchMultiplier); // [0x4707c70] Net|Native|Event|Public|HasDefaults|NetClient 
	// void ClientPlaySound(class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);                            // [0x4707b60] Net|Native|Event|Public|NetClient 
	// void ClientPlayForceFeedback_Internal(class UForceFeedbackEffect* ForceFeedbackEffect, FForceFeedbackParameters Params); // [0x4707a70] Final|Net|Native|Event|Private|NetClient 
	// void ClientPlayCameraAnim(class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, ECameraShakePlaySpace Space, FRotator CustomPlaySpace); // [0x47077a0] Net|Native|Event|Public|HasDefaults|NetClient|BlueprintCallable 
	// void ClientMutePlayer(FUniqueNetIdRepl PlayerId);                                                                        // [0x4707670] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientMessage(FString S, FName Type, float MsgLifeTime);                                                            // [0x4707520] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientIgnoreMoveInput(bool bIgnore);                                                                                // [0x4707490] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientIgnoreLookInput(bool bIgnore);                                                                                // [0x4707400] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientGotoState(FName NewState);                                                                                    // [0x4707350] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner);                                                        // [0x4707280] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientForceGarbageCollection();                                                                                     // [0x4707260] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientFlushLevelStreaming();                                                                                        // [0x4707240] Final|Net|NetReliableNative|Event|Public|NetClient 
	// void ClientEndOnlineSession();                                                                                           // [0x4707220] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientEnableNetworkVoice(bool bEnable);                                                                             // [0x4707190] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientCommitMapChange();                                                                                            // [0x4707170] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientClearCameraLensEffects();                                                                                     // [0x4707150] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// void ClientCapBandwidth(int32_t Cap);                                                                                    // [0x47070c0] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientCancelPendingMapChange();                                                                                     // [0x47070a0] Net|NetReliableNative|Event|Public|NetClient 
	// void ClientAddTextureStreamingLoc(FVector InLoc, float Duration, bool bOverrideLocation);                                // [0x4706f70] Final|Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
	// void ClearAudioListenerOverride();                                                                                       // [0x4706f50] Final|Native|Public|BlueprintCallable 
	// void ClearAudioListenerAttenuationOverride();                                                                            // [0x4706f30] Final|Native|Public|BlueprintCallable 
	// bool CanRestartPlayer();                                                                                                 // [0x4706f00] Native|Public|BlueprintCallable 
	// void Camera(FName NewMode);                                                                                              // [0x4706e50] Exec|Native|Public   
	// void AddYawInput(float Val);                                                                                             // [0x4706dc0] Native|Public|BlueprintCallable 
	// void AddRollInput(float Val);                                                                                            // [0x4706d30] Native|Public|BlueprintCallable 
	// void AddPitchInput(float Val);                                                                                           // [0x4706ca0] Native|Public|BlueprintCallable 
	// void ActivateTouchInterface(class UTouchInterface* NewTouchInterface);                                                   // [0x4706c10] Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.ForceFeedbackChannelDetails
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align 8 pad: 0x0000
struct FForceFeedbackChannelDetails
{ 
	bool                                               bAffectsLeftLarge : 1;                                      // 0x0000:0 (0x0001)  
	bool                                               bAffectsLeftSmall : 1;                                      // 0x0000:1 (0x0001)  
	bool                                               bAffectsRightLarge : 1;                                     // 0x0000:2 (0x0001)  
	bool                                               bAffectsRightSmall : 1;                                     // 0x0000:3 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	FRuntimeFloatCurve                                 Curve;                                                      // 0x0008   (0x0088)  
};

/// Class /Script/Engine.ForceFeedbackEffect
/// Size: 0x0018 (24 bytes) (0x000030 - 0x000048) align 8 pad: 0x0000
class UForceFeedbackEffect : public UObject
{ 
public:
	TArray<FForceFeedbackChannelDetails>               ChannelDetails;                                             // 0x0030   (0x0010)  
	float                                              Duration;                                                   // 0x0040   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Engine.Info
/// Size: 0x0000 (0 bytes) (0x0002A8 - 0x0002A8) align 8 pad: 0x0000
class AInfo : public AActor
{ 
public:
};

/// Struct /Script/Engine.SplineCurves
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align 8 pad: 0x0000
struct FSplineCurves
{ 
	FInterpCurveVector                                 Position;                                                   // 0x0000   (0x0018)  
	FInterpCurveQuat                                   Rotation;                                                   // 0x0018   (0x0018)  
	FInterpCurveVector                                 Scale;                                                      // 0x0030   (0x0018)  
	FInterpCurveFloat                                  ReparamTable;                                               // 0x0048   (0x0018)  
	class USplineMetadata*                             MetaData;                                                   // 0x0060   (0x0008)  
	uint32_t                                           Version;                                                    // 0x0068   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x006C   (0x0004)  MISSED
};

/// Class /Script/Engine.SplineComponent
/// Size: 0x0100 (256 bytes) (0x0004E0 - 0x0005E0) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class USplineComponent : public UPrimitiveComponent
{ 
public:
	FSplineCurves                                      SplineCurves;                                               // 0x04E0   (0x0070)  
	FInterpCurveVector                                 SplineInfo;                                                 // 0x0550   (0x0018)  
	FInterpCurveQuat                                   SplineRotInfo;                                              // 0x0568   (0x0018)  
	FInterpCurveVector                                 SplineScaleInfo;                                            // 0x0580   (0x0018)  
	FInterpCurveFloat                                  SplineReparamTable;                                         // 0x0598   (0x0018)  
	bool                                               bAllowSplineEditingPerInstance;                             // 0x05B0   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x05B1   (0x0003)  MISSED
	int32_t                                            ReparamStepsPerSegment;                                     // 0x05B4   (0x0004)  
	float                                              Duration;                                                   // 0x05B8   (0x0004)  
	bool                                               bStationaryEndpoints;                                       // 0x05BC   (0x0001)  
	bool                                               bSplineHasBeenEdited;                                       // 0x05BD   (0x0001)  
	bool                                               bModifiedByConstructionScript;                              // 0x05BE   (0x0001)  
	bool                                               bInputSplinePointsToConstructionScript;                     // 0x05BF   (0x0001)  
	bool                                               bDrawDebug;                                                 // 0x05C0   (0x0001)  
	bool                                               bClosedLoop;                                                // 0x05C1   (0x0001)  
	bool                                               bLoopPositionOverride;                                      // 0x05C2   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x05C3   (0x0001)  MISSED
	float                                              LoopPosition;                                               // 0x05C4   (0x0004)  
	FVector                                            DefaultUpVector;                                            // 0x05C8   (0x000C)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x05D4   (0x0004)  MISSED
	// void UpdateSpline();                                                                                                     // [0x47524a0] Native|Public|BlueprintCallable 
	// void SetWorldLocationAtSplinePoint(int32_t PointIndex, FVector& InLocation);                                             // [0x47523c0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetUpVectorAtSplinePoint(int32_t PointIndex, FVector& InUpVector, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x4752250] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetUnselectedSplineSegmentColor(FLinearColor& SegmentColor);                                                        // [0x4751a00] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetTangentsAtSplinePoint(int32_t PointIndex, FVector& InArriveTangent, FVector& InLeaveTangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x4752080] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetTangentColor(FLinearColor& TangentColor);                                                                        // [0x4751a00] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetTangentAtSplinePoint(int32_t PointIndex, FVector& InTangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x4751f10] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetSplineWorldPoints(TArray<FVector>& Points);                                                                      // [0x4751e60] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetSplinePointType(int32_t PointIndex, TEnumAsByte<ESplinePointType> Type, bool bUpdateSpline);                     // [0x4751c20] Final|Native|Public|BlueprintCallable 
	// void SetSplinePoints(TArray<FVector>& Points, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);  // [0x4751d30] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetSplineLocalPoints(TArray<FVector>& Points);                                                                      // [0x4751b70] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetSelectedSplineSegmentColor(FLinearColor& SegmentColor);                                                          // [0x4751a00] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetScaleAtSplinePoint(int32_t PointIndex, FVector& InScaleVector, bool bUpdateSpline);                              // [0x47518f0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetRotationAtSplinePoint(int32_t PointIndex, FRotator& InRotation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x4751780] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetLocationAtSplinePoint(int32_t PointIndex, FVector& InLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x4751610] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetDrawDebug(bool bShow);                                                                                           // [0x4751580] Final|Native|Public|BlueprintCallable 
	// void SetDefaultUpVector(FVector& UpVector, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                         // [0x47514a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);                                         // [0x4751380] Final|Native|Public|BlueprintCallable 
	// void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);                                                              // [0x47512b0] Final|Native|Public|BlueprintCallable 
	// void RemoveSplinePoint(int32_t Index, bool bUpdateSpline);                                                               // [0x47511e0] Final|Native|Public|BlueprintCallable 
	// bool IsClosedLoop();                                                                                                     // [0x47511b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector GetWorldTangentAtDistanceAlongSpline(float Distance);                                                            // [0x4751100] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FRotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);                                                  // [0x4751010] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FRotator GetWorldRotationAtDistanceAlongSpline(float Distance);                                                          // [0x4750f60] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);                                                   // [0x4750e70] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetWorldLocationAtSplinePoint(int32_t PointIndex);                                                               // [0x4750dc0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetWorldLocationAtDistanceAlongSpline(float Distance);                                                           // [0x4750d10] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);                                                  // [0x4750c20] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetWorldDirectionAtDistanceAlongSpline(float Distance);                                                          // [0x4750b70] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetVectorPropertyAtSplinePoint(int32_t Index, FName PropertyName);                                               // [0x4750a70] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName);                                              // [0x4750960] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetUpVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);   // [0x4750830] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetUpVectorAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);               // [0x4750750] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetUpVectorAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                   // [0x4750660] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetUpVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);           // [0x4750570] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FTransform GetTransformAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity, bool bUseScale); // [0x47503d0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FTransform GetTransformAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale); // [0x4750280] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FTransform GetTransformAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale); // [0x4750120] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FTransform GetTransformAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale); // [0x474ffc0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetTangentAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);    // [0x474fe90] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetTangentAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                // [0x474e500] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetTangentAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                    // [0x474fda0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetTangentAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);            // [0x474fcb0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// TEnumAsByte<ESplinePointType> GetSplinePointType(int32_t PointIndex);                                                    // [0x474fc10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetSplineLength();                                                                                                 // [0x474fbe0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector GetScaleAtTime(float Time, bool bUseConstantVelocity);                                                           // [0x474fa60] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetScaleAtSplinePoint(int32_t PointIndex);                                                                       // [0x474f9b0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetScaleAtSplineInputKey(float InKey);                                                                           // [0x474f910] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetScaleAtDistanceAlongSpline(float Distance);                                                                   // [0x474f870] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FRotator GetRotationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);  // [0x474f740] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FRotator GetRotationAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);              // [0x474f660] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FRotator GetRotationAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                  // [0x474f570] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FRotator GetRotationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);          // [0x474f480] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// float GetRollAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);         // [0x474f360] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetRollAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                     // [0x474f290] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetRollAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                         // [0x474f1b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetRollAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                 // [0x474f0d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector GetRightVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity); // [0x474efa0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetRightVectorAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);            // [0x474eec0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetRightVectorAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                // [0x474edd0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetRightVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);        // [0x474ece0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetNumberOfSplineSegments();                                                                                     // [0x474ecb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetNumberOfSplinePoints();                                                                                       // [0x474ec80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector GetLocationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);   // [0x474eb50] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetLocationAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);               // [0x474ea70] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetLocationAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                   // [0x474e980] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetLocationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);           // [0x474e890] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// void GetLocationAndTangentAtSplinePoint(int32_t PointIndex, FVector& Location, FVector& Tangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x474e710] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// void GetLocalLocationAndTangentAtSplinePoint(int32_t PointIndex, FVector& LocalLocation, FVector& LocalTangent);         // [0x474e5e0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetLeaveTangentAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);           // [0x474e500] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// float GetInputKeyAtDistanceAlongSpline(float Distance);                                                                  // [0x474e460] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetFloatPropertyAtSplinePoint(int32_t Index, FName PropertyName);                                                  // [0x474e370] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName);                                                 // [0x474e270] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetDistanceAlongSplineAtSplinePoint(int32_t PointIndex);                                                           // [0x474e1d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetDistanceAlongSplineAtSplineInputKey(float InKey);                                                               // [0x474e130] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector GetDirectionAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);  // [0x474e000] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetDirectionAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);              // [0x474df20] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetDirectionAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                  // [0x474de30] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetDirectionAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);          // [0x474dd40] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetDefaultUpVector(TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                                         // [0x474dca0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetArriveTangentAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);          // [0x474dbc0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector FindUpVectorClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x474dad0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FTransform FindTransformClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale); // [0x474d970] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector FindTangentClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);  // [0x474d880] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector FindScaleClosestToWorldLocation(FVector& WorldLocation);                                                         // [0x474d7d0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FRotator FindRotationClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x474d6e0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// float FindRollClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);       // [0x474d600] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector FindRightVectorClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x474d510] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector FindLocationClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x474d420] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// float FindInputKeyClosestToWorldLocation(FVector& WorldLocation);                                                        // [0x474d380] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector FindDirectionClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x474d290] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// void ClearSplinePoints(bool bUpdateSpline);                                                                              // [0x474d200] Final|Native|Public|BlueprintCallable 
	// void AddSplineWorldPoint(FVector& Position);                                                                             // [0x474d160] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void AddSplinePointAtIndex(FVector& Position, int32_t Index, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x474cff0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void AddSplinePoint(FVector& Position, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);         // [0x474ced0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void AddSplineLocalPoint(FVector& Position);                                                                             // [0x474ce40] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void AddPoints(TArray<FSplinePoint>& Points, bool bUpdateSpline);                                                        // [0x474cd40] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void AddPoint(FSplinePoint& Point, bool bUpdateSpline);                                                                  // [0x474cc30] Final|Native|Public|HasOutParms|BlueprintCallable 
};
#pragma pack(pop)

/// Struct /Script/Engine.WeightedBlendable
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FWeightedBlendable
{ 
	float                                              Weight;                                                     // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	class UObject*                                     Object;                                                     // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.WeightedBlendables
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FWeightedBlendables
{ 
	TArray<FWeightedBlendable>                         Array;                                                      // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.PostProcessSettings
/// Size: 0x0600 (1536 bytes) (0x000000 - 0x000600) align 16 pad: 0x0000
struct FPostProcessSettings
{ 
	bool                                               bOverride_WhiteTemp : 1;                                    // 0x0000:0 (0x0001)  
	bool                                               bOverride_WhiteTint : 1;                                    // 0x0000:1 (0x0001)  
	bool                                               bOverride_ColorSaturation : 1;                              // 0x0000:2 (0x0001)  
	bool                                               bOverride_ColorContrast : 1;                                // 0x0000:3 (0x0001)  
	bool                                               bOverride_ColorGamma : 1;                                   // 0x0000:4 (0x0001)  
	bool                                               bOverride_ColorGain : 1;                                    // 0x0000:5 (0x0001)  
	bool                                               bOverride_ColorOffset : 1;                                  // 0x0000:6 (0x0001)  
	bool                                               bOverride_ColorSaturationShadows : 1;                       // 0x0000:7 (0x0001)  
	bool                                               bOverride_ColorContrastShadows : 1;                         // 0x0001:0 (0x0001)  
	bool                                               bOverride_ColorGammaShadows : 1;                            // 0x0001:1 (0x0001)  
	bool                                               bOverride_ColorGainShadows : 1;                             // 0x0001:2 (0x0001)  
	bool                                               bOverride_ColorOffsetShadows : 1;                           // 0x0001:3 (0x0001)  
	bool                                               bOverride_ColorSaturationMidtones : 1;                      // 0x0001:4 (0x0001)  
	bool                                               bOverride_ColorContrastMidtones : 1;                        // 0x0001:5 (0x0001)  
	bool                                               bOverride_ColorGammaMidtones : 1;                           // 0x0001:6 (0x0001)  
	bool                                               bOverride_ColorGainMidtones : 1;                            // 0x0001:7 (0x0001)  
	bool                                               bOverride_ColorOffsetMidtones : 1;                          // 0x0002:0 (0x0001)  
	bool                                               bOverride_ColorSaturationHighlights : 1;                    // 0x0002:1 (0x0001)  
	bool                                               bOverride_ColorContrastHighlights : 1;                      // 0x0002:2 (0x0001)  
	bool                                               bOverride_ColorGammaHighlights : 1;                         // 0x0002:3 (0x0001)  
	bool                                               bOverride_ColorGainHighlights : 1;                          // 0x0002:4 (0x0001)  
	bool                                               bOverride_ColorOffsetHighlights : 1;                        // 0x0002:5 (0x0001)  
	bool                                               bOverride_ColorCorrectionShadowsMax : 1;                    // 0x0002:6 (0x0001)  
	bool                                               bOverride_ColorCorrectionHighlightsMin : 1;                 // 0x0002:7 (0x0001)  
	bool                                               bOverride_BlueCorrection : 1;                               // 0x0003:0 (0x0001)  
	bool                                               bOverride_ExpandGamut : 1;                                  // 0x0003:1 (0x0001)  
	bool                                               bOverride_ToneCurveAmount : 1;                              // 0x0003:2 (0x0001)  
	bool                                               bOverride_FilmWhitePoint : 1;                               // 0x0003:3 (0x0001)  
	bool                                               bOverride_FilmSaturation : 1;                               // 0x0003:4 (0x0001)  
	bool                                               bOverride_FilmChannelMixerRed : 1;                          // 0x0003:5 (0x0001)  
	bool                                               bOverride_FilmChannelMixerGreen : 1;                        // 0x0003:6 (0x0001)  
	bool                                               bOverride_FilmChannelMixerBlue : 1;                         // 0x0003:7 (0x0001)  
	bool                                               bOverride_FilmContrast : 1;                                 // 0x0004:0 (0x0001)  
	bool                                               bOverride_FilmDynamicRange : 1;                             // 0x0004:1 (0x0001)  
	bool                                               bOverride_FilmHealAmount : 1;                               // 0x0004:2 (0x0001)  
	bool                                               bOverride_FilmToeAmount : 1;                                // 0x0004:3 (0x0001)  
	bool                                               bOverride_FilmShadowTint : 1;                               // 0x0004:4 (0x0001)  
	bool                                               bOverride_FilmShadowTintBlend : 1;                          // 0x0004:5 (0x0001)  
	bool                                               bOverride_FilmShadowTintAmount : 1;                         // 0x0004:6 (0x0001)  
	bool                                               bOverride_FilmSlope : 1;                                    // 0x0004:7 (0x0001)  
	bool                                               bOverride_FilmToe : 1;                                      // 0x0005:0 (0x0001)  
	bool                                               bOverride_FilmShoulder : 1;                                 // 0x0005:1 (0x0001)  
	bool                                               bOverride_FilmBlackClip : 1;                                // 0x0005:2 (0x0001)  
	bool                                               bOverride_FilmWhiteClip : 1;                                // 0x0005:3 (0x0001)  
	bool                                               bOverride_SceneColorTint : 1;                               // 0x0005:4 (0x0001)  
	bool                                               bOverride_TranslucentColorTint : 1;                         // 0x0005:5 (0x0001)  
	bool                                               bOverride_SceneColorDesaturate : 1;                         // 0x0005:6 (0x0001)  
	bool                                               bOverride_TranslucentColorDesaturate : 1;                   // 0x0005:7 (0x0001)  
	bool                                               bOverride_EnableSPD : 1;                                    // 0x0006:0 (0x0001)  
	bool                                               bOverride_SceneFringeIntensity : 1;                         // 0x0006:1 (0x0001)  
	bool                                               bOverride_ChromaticAberrationStartOffset : 1;               // 0x0006:2 (0x0001)  
	bool                                               bOverride_AmbientCubemapTint : 1;                           // 0x0006:3 (0x0001)  
	bool                                               bOverride_AmbientCubemapIntensity : 1;                      // 0x0006:4 (0x0001)  
	bool                                               bOverride_BloomMethod : 1;                                  // 0x0006:5 (0x0001)  
	bool                                               bOverride_BloomIntensity : 1;                               // 0x0006:6 (0x0001)  
	bool                                               bOverride_KuroFoliageMaterialAO : 1;                        // 0x0006:7 (0x0001)  
	bool                                               bOverride_KuroFoliageScreenSpaceAO : 1;                     // 0x0007:0 (0x0001)  
	bool                                               bOverride_KuroBloomIntensity : 1;                           // 0x0007:1 (0x0001)  
	bool                                               bOverride_KuroBloomThreshold : 1;                           // 0x0007:2 (0x0001)  
	bool                                               bOverride_KuroBloomCombineParameter : 1;                    // 0x0007:3 (0x0001)  
	bool                                               bOverride_KuroBloomStreakIntensity : 1;                     // 0x0007:4 (0x0001)  
	bool                                               bOverride_KuroBloomStreakThreshold : 1;                     // 0x0007:5 (0x0001)  
	bool                                               bOverride_KuroBloomStreakLength : 1;                        // 0x0007:6 (0x0001)  
	bool                                               bOverride_KuroBloomStreakMipLevel : 1;                      // 0x0007:7 (0x0001)  
	bool                                               bOverride_KuroBloomStreakRatio : 1;                         // 0x0008:0 (0x0001)  
	bool                                               bOverride_KuroBloomStreakOrientation : 1;                   // 0x0008:1 (0x0001)  
	bool                                               bOverride_BlackWhiteFlashIntensity : 1;                     // 0x0008:2 (0x0001)  
	bool                                               bOverride_BlackWhiteFlashFactor : 1;                        // 0x0008:3 (0x0001)  
	bool                                               bOverride_BlackWhiteFlashThreshold : 1;                     // 0x0008:4 (0x0001)  
	bool                                               bOverride_BlackWhiteFlashBlackAreaColor : 1;                // 0x0008:5 (0x0001)  
	bool                                               bOverride_BlackWhiteFlashWhiteAreaColor : 1;                // 0x0008:6 (0x0001)  
	bool                                               bOverride_KuroRadialBlurIntensity : 1;                      // 0x0008:7 (0x0001)  
	bool                                               bOverride_KuroRadialBlurRadius : 1;                         // 0x0009:0 (0x0001)  
	bool                                               bOverride_KuroRadialBlurHardness : 1;                       // 0x0009:1 (0x0001)  
	bool                                               bOverride_KuroRadialBlurCenter : 1;                         // 0x0009:2 (0x0001)  
	bool                                               bOverride_KuroRadialBlurPassNumber : 1;                     // 0x0009:3 (0x0001)  
	bool                                               bOverride_KuroRadialBlurSampleNumber : 1;                   // 0x0009:4 (0x0001)  
	bool                                               bOverride_KuroRadialBlurMask : 1;                           // 0x0009:5 (0x0001)  
	bool                                               bOverride_KuroRadialBlurMaskScale : 1;                      // 0x0009:6 (0x0001)  
	bool                                               bOverride_KuroRadialBlurMaskOffset : 1;                     // 0x0009:7 (0x0001)  
	bool                                               bOverride_BloomThreshold : 1;                               // 0x000A:0 (0x0001)  
	bool                                               bOverride_Bloom1Tint : 1;                                   // 0x000A:1 (0x0001)  
	bool                                               bOverride_Bloom1Size : 1;                                   // 0x000A:2 (0x0001)  
	bool                                               bOverride_Bloom2Size : 1;                                   // 0x000A:3 (0x0001)  
	bool                                               bOverride_Bloom2Tint : 1;                                   // 0x000A:4 (0x0001)  
	bool                                               bOverride_Bloom3Tint : 1;                                   // 0x000A:5 (0x0001)  
	bool                                               bOverride_Bloom3Size : 1;                                   // 0x000A:6 (0x0001)  
	bool                                               bOverride_Bloom4Tint : 1;                                   // 0x000A:7 (0x0001)  
	bool                                               bOverride_Bloom4Size : 1;                                   // 0x000B:0 (0x0001)  
	bool                                               bOverride_Bloom5Tint : 1;                                   // 0x000B:1 (0x0001)  
	bool                                               bOverride_Bloom5Size : 1;                                   // 0x000B:2 (0x0001)  
	bool                                               bOverride_Bloom6Tint : 1;                                   // 0x000B:3 (0x0001)  
	bool                                               bOverride_Bloom6Size : 1;                                   // 0x000B:4 (0x0001)  
	bool                                               bOverride_BloomSizeScale : 1;                               // 0x000B:5 (0x0001)  
	bool                                               bOverride_BloomConvolutionTexture : 1;                      // 0x000B:6 (0x0001)  
	bool                                               bOverride_BloomConvolutionSize : 1;                         // 0x000B:7 (0x0001)  
	bool                                               bOverride_BloomConvolutionCenterUV : 1;                     // 0x000C:0 (0x0001)  
	bool                                               bOverride_BloomConvolutionPreFilter : 1;                    // 0x000C:1 (0x0001)  
	bool                                               bOverride_BloomConvolutionPreFilterMin : 1;                 // 0x000C:2 (0x0001)  
	bool                                               bOverride_BloomConvolutionPreFilterMax : 1;                 // 0x000C:3 (0x0001)  
	bool                                               bOverride_BloomConvolutionPreFilterMult : 1;                // 0x000C:4 (0x0001)  
	bool                                               bOverride_BloomConvolutionBufferScale : 1;                  // 0x000C:5 (0x0001)  
	bool                                               bOverride_BloomDirtMaskIntensity : 1;                       // 0x000C:6 (0x0001)  
	bool                                               bOverride_BloomDirtMaskTint : 1;                            // 0x000C:7 (0x0001)  
	bool                                               bOverride_BloomDirtMask : 1;                                // 0x000D:0 (0x0001)  
	bool                                               bOverride_CameraShutterSpeed : 1;                           // 0x000D:1 (0x0001)  
	bool                                               bOverride_CameraISO : 1;                                    // 0x000D:2 (0x0001)  
	bool                                               bOverride_AutoExposureMethod : 1;                           // 0x000D:3 (0x0001)  
	bool                                               bOverride_AutoExposureLowPercent : 1;                       // 0x000D:4 (0x0001)  
	bool                                               bOverride_AutoExposureHighPercent : 1;                      // 0x000D:5 (0x0001)  
	bool                                               bOverride_AutoExposureMinBrightness : 1;                    // 0x000D:6 (0x0001)  
	bool                                               bOverride_AutoExposureMaxBrightness : 1;                    // 0x000D:7 (0x0001)  
	bool                                               bOverride_AutoExposureCalibrationConstant : 1;              // 0x000E:0 (0x0001)  
	bool                                               bOverride_AutoExposureSpeedUp : 1;                          // 0x000E:1 (0x0001)  
	bool                                               bOverride_AutoExposureSpeedDown : 1;                        // 0x000E:2 (0x0001)  
	bool                                               bOverride_AutoExposureBias : 1;                             // 0x000E:3 (0x0001)  
	bool                                               bOverride_AutoExposureBiasCurve : 1;                        // 0x000E:4 (0x0001)  
	bool                                               bOverride_AutoExposureMeterMask : 1;                        // 0x000E:5 (0x0001)  
	bool                                               bOverride_AutoExposureApplyPhysicalCameraExposure : 1;      // 0x000E:6 (0x0001)  
	bool                                               bOverride_HistogramLogMin : 1;                              // 0x000E:7 (0x0001)  
	bool                                               bOverride_HistogramLogMax : 1;                              // 0x000F:0 (0x0001)  
	bool                                               bOverride_LensFlareIntensity : 1;                           // 0x000F:1 (0x0001)  
	bool                                               bOverride_LensFlareTint : 1;                                // 0x000F:2 (0x0001)  
	bool                                               bOverride_LensFlareTints : 1;                               // 0x000F:3 (0x0001)  
	bool                                               bOverride_LensFlareBokehSize : 1;                           // 0x000F:4 (0x0001)  
	bool                                               bOverride_LensFlareBokehShape : 1;                          // 0x000F:5 (0x0001)  
	bool                                               bOverride_LensFlareThreshold : 1;                           // 0x000F:6 (0x0001)  
	bool                                               bOverride_LensFlareOnlySun : 1;                             // 0x000F:7 (0x0001)  
	bool                                               bOverride_LensFlareSunRange : 1;                            // 0x0010:0 (0x0001)  
	bool                                               bOverride_LensFlareSunPosition : 1;                         // 0x0010:1 (0x0001)  
	bool                                               bOverride_VignetteIntensity : 1;                            // 0x0010:2 (0x0001)  
	bool                                               bOverride_GrainIntensity : 1;                               // 0x0010:3 (0x0001)  
	bool                                               bOverride_GrainJitter : 1;                                  // 0x0010:4 (0x0001)  
	bool                                               bOverride_AmbientOcclusionIntensity : 1;                    // 0x0010:5 (0x0001)  
	bool                                               bOverride_AmbientOcclusionStaticFraction : 1;               // 0x0010:6 (0x0001)  
	bool                                               bOverride_AmbientOcclusionRadius : 1;                       // 0x0010:7 (0x0001)  
	bool                                               bOverride_AmbientOcclusionFadeDistance : 1;                 // 0x0011:0 (0x0001)  
	bool                                               bOverride_AmbientOcclusionFadeRadius : 1;                   // 0x0011:1 (0x0001)  
	bool                                               bOverride_AmbientOcclusionDistance : 1;                     // 0x0011:2 (0x0001)  
	bool                                               bOverride_AmbientOcclusionRadiusInWS : 1;                   // 0x0011:3 (0x0001)  
	bool                                               bOverride_AmbientOcclusionPower : 1;                        // 0x0011:4 (0x0001)  
	bool                                               bOverride_AmbientOcclusionBias : 1;                         // 0x0011:5 (0x0001)  
	bool                                               bOverride_AmbientOcclusionQuality : 1;                      // 0x0011:6 (0x0001)  
	bool                                               bOverride_AmbientOcclusionMipBlend : 1;                     // 0x0011:7 (0x0001)  
	bool                                               bOverride_AmbientOcclusionMipScale : 1;                     // 0x0012:0 (0x0001)  
	bool                                               bOverride_AmbientOcclusionMipThreshold : 1;                 // 0x0012:1 (0x0001)  
	bool                                               bOverride_AmbientOcclusionTemporalBlendWeight : 1;          // 0x0012:2 (0x0001)  
	unsigned char                                      UnknownData00_3[0x1];                                       // 0x0013   (0x0001)  MISSED
	bool                                               bOverride_RayTracingAO : 1;                                 // 0x0014:0 (0x0001)  
	bool                                               bOverride_RayTracingAOSamplesPerPixel : 1;                  // 0x0014:1 (0x0001)  
	bool                                               bOverride_RayTracingAOIntensity : 1;                        // 0x0014:2 (0x0001)  
	bool                                               bOverride_RayTracingAORadius : 1;                           // 0x0014:3 (0x0001)  
	unsigned char                                      UnknownData01_3[0x3];                                       // 0x0015   (0x0003)  MISSED
	bool                                               bOverride_LPVIntensity : 1;                                 // 0x0018:0 (0x0001)  
	bool                                               bOverride_LPVDirectionalOcclusionIntensity : 1;             // 0x0018:1 (0x0001)  
	bool                                               bOverride_LPVDirectionalOcclusionRadius : 1;                // 0x0018:2 (0x0001)  
	bool                                               bOverride_LPVDiffuseOcclusionExponent : 1;                  // 0x0018:3 (0x0001)  
	bool                                               bOverride_LPVSpecularOcclusionExponent : 1;                 // 0x0018:4 (0x0001)  
	bool                                               bOverride_LPVDiffuseOcclusionIntensity : 1;                 // 0x0018:5 (0x0001)  
	bool                                               bOverride_LPVSpecularOcclusionIntensity : 1;                // 0x0018:6 (0x0001)  
	bool                                               bOverride_LPVSize : 1;                                      // 0x0018:7 (0x0001)  
	bool                                               bOverride_LPVSecondaryOcclusionIntensity : 1;               // 0x0019:0 (0x0001)  
	bool                                               bOverride_LPVSecondaryBounceIntensity : 1;                  // 0x0019:1 (0x0001)  
	bool                                               bOverride_LPVGeometryVolumeBias : 1;                        // 0x0019:2 (0x0001)  
	bool                                               bOverride_LPVVplInjectionBias : 1;                          // 0x0019:3 (0x0001)  
	bool                                               bOverride_LPVEmissiveInjectionIntensity : 1;                // 0x0019:4 (0x0001)  
	bool                                               bOverride_LPVFadeRange : 1;                                 // 0x0019:5 (0x0001)  
	bool                                               bOverride_LPVDirectionalOcclusionFadeRange : 1;             // 0x0019:6 (0x0001)  
	bool                                               bOverride_IndirectLightingColor : 1;                        // 0x0019:7 (0x0001)  
	bool                                               bOverride_IndirectLightingIntensity : 1;                    // 0x001A:0 (0x0001)  
	bool                                               bOverride_ColorGradingIntensity : 1;                        // 0x001A:1 (0x0001)  
	bool                                               bOverride_ColorGradingLUT : 1;                              // 0x001A:2 (0x0001)  
	bool                                               bOverride_DepthOfFieldFocalDistance : 1;                    // 0x001A:3 (0x0001)  
	bool                                               bOverride_DepthOfFieldFstop : 1;                            // 0x001A:4 (0x0001)  
	bool                                               bOverride_DepthOfFieldMinFstop : 1;                         // 0x001A:5 (0x0001)  
	bool                                               bOverride_DepthOfFieldBladeCount : 1;                       // 0x001A:6 (0x0001)  
	bool                                               bOverride_DepthOfFieldForegroundBlur : 1;                   // 0x001A:7 (0x0001)  
	bool                                               bOverride_DepthOfFieldSensorWidth : 1;                      // 0x001B:0 (0x0001)  
	bool                                               bOverride_DepthOfFieldDepthBlurRadius : 1;                  // 0x001B:1 (0x0001)  
	bool                                               bOverride_DepthOfFieldDepthBlurAmount : 1;                  // 0x001B:2 (0x0001)  
	bool                                               bOverride_DepthOfFieldFocalRegion : 1;                      // 0x001B:3 (0x0001)  
	bool                                               bOverride_DepthOfFieldNearTransitionRegion : 1;             // 0x001B:4 (0x0001)  
	bool                                               bOverride_DepthOfFieldFarTransitionRegion : 1;              // 0x001B:5 (0x0001)  
	bool                                               bOverride_DepthOfFieldScale : 1;                            // 0x001B:6 (0x0001)  
	bool                                               bOverride_DepthOfFieldNearBlurSize : 1;                     // 0x001B:7 (0x0001)  
	bool                                               bOverride_DepthOfFieldFarBlurSize : 1;                      // 0x001C:0 (0x0001)  
	bool                                               bOverride_MobileHQGaussian : 1;                             // 0x001C:1 (0x0001)  
	bool                                               bOverride_KuroDangerToggle : 1;                             // 0x001C:2 (0x0001)  
	bool                                               bOverride_DepthOfFieldOcclusion : 1;                        // 0x001C:3 (0x0001)  
	bool                                               bOverride_DepthOfFieldSkyFocusDistance : 1;                 // 0x001C:4 (0x0001)  
	bool                                               bOverride_DepthOfFieldVignetteSize : 1;                     // 0x001C:5 (0x0001)  
	bool                                               bOverride_MotionBlurAmount : 1;                             // 0x001C:6 (0x0001)  
	bool                                               bOverride_MotionBlurMax : 1;                                // 0x001C:7 (0x0001)  
	bool                                               bOverride_MotionBlurTargetFPS : 1;                          // 0x001D:0 (0x0001)  
	bool                                               bOverride_MotionBlurPerObjectSize : 1;                      // 0x001D:1 (0x0001)  
	bool                                               bOverride_ScreenPercentage : 1;                             // 0x001D:2 (0x0001)  
	bool                                               bOverride_ScreenSpaceReflectionIntensity : 1;               // 0x001D:3 (0x0001)  
	bool                                               bOverride_ScreenSpaceReflectionQuality : 1;                 // 0x001D:4 (0x0001)  
	bool                                               bOverride_ScreenSpaceReflectionMaxRoughness : 1;            // 0x001D:5 (0x0001)  
	bool                                               bOverride_KuroSMAAEdgeType : 1;                             // 0x001D:6 (0x0001)  
	bool                                               bOverride_KuroSMAAQualityPreset : 1;                        // 0x001D:7 (0x0001)  
	bool                                               bOverride_KuroSMAAPredicationThreshold : 1;                 // 0x001E:0 (0x0001)  
	bool                                               bOverride_KuroSMAAPredicationScale : 1;                     // 0x001E:1 (0x0001)  
	bool                                               bOverride_KuroSMAAPredicationStrength : 1;                  // 0x001E:2 (0x0001)  
	bool                                               bOverride_KuroSMAADebug : 1;                                // 0x001E:3 (0x0001)  
	bool                                               bOverride_KuroSMAAThreshold : 1;                            // 0x001E:4 (0x0001)  
	bool                                               bOverride_KuroSMAALocalContrastFactor : 1;                  // 0x001E:5 (0x0001)  
	bool                                               bOverride_KuroSMAAMaxSearchSteps : 1;                       // 0x001E:6 (0x0001)  
	bool                                               bOverride_KuroSMAADiagonalDetect : 1;                       // 0x001E:7 (0x0001)  
	bool                                               bOverride_KuroSMAACornerDetect : 1;                         // 0x001F:0 (0x0001)  
	bool                                               bOverride_KuroSMAAMaxDiagonalSearchSteps : 1;               // 0x001F:1 (0x0001)  
	bool                                               bOverride_KuroSMAACornerRounding : 1;                       // 0x001F:2 (0x0001)  
	bool                                               bOverride_KuroTonemapA : 1;                                 // 0x001F:3 (0x0001)  
	bool                                               bOverride_KuroTonemapB : 1;                                 // 0x001F:4 (0x0001)  
	bool                                               bOverride_KuroTonemapC : 1;                                 // 0x001F:5 (0x0001)  
	bool                                               bOverride_KuroTonemapD : 1;                                 // 0x001F:6 (0x0001)  
	bool                                               bOverride_KuroTonemapE : 1;                                 // 0x001F:7 (0x0001)  
	bool                                               bOverride_KuroTonemapF : 1;                                 // 0x0020:0 (0x0001)  
	bool                                               bOverride_ScreenSpaceReflectionRoughnessScale : 1;          // 0x0020:1 (0x0001)  
	unsigned char                                      UnknownData02_3[0x3];                                       // 0x0021   (0x0003)  MISSED
	bool                                               bOverride_ReflectionsType : 1;                              // 0x0024:0 (0x0001)  
	bool                                               bOverride_RayTracingReflectionsMaxRoughness : 1;            // 0x0024:1 (0x0001)  
	bool                                               bOverride_RayTracingReflectionsMaxBounces : 1;              // 0x0024:2 (0x0001)  
	bool                                               bOverride_RayTracingReflectionsSamplesPerPixel : 1;         // 0x0024:3 (0x0001)  
	bool                                               bOverride_RayTracingReflectionsShadows : 1;                 // 0x0024:4 (0x0001)  
	bool                                               bOverride_RayTracingReflectionsTranslucency : 1;            // 0x0024:5 (0x0001)  
	bool                                               bOverride_TranslucencyType : 1;                             // 0x0024:6 (0x0001)  
	bool                                               bOverride_RayTracingTranslucencyMaxRoughness : 1;           // 0x0024:7 (0x0001)  
	bool                                               bOverride_RayTracingTranslucencyRefractionRays : 1;         // 0x0025:0 (0x0001)  
	bool                                               bOverride_RayTracingTranslucencySamplesPerPixel : 1;        // 0x0025:1 (0x0001)  
	bool                                               bOverride_RayTracingTranslucencyShadows : 1;                // 0x0025:2 (0x0001)  
	bool                                               bOverride_RayTracingTranslucencyRefraction : 1;             // 0x0025:3 (0x0001)  
	bool                                               bOverride_RayTracingGI : 1;                                 // 0x0025:4 (0x0001)  
	bool                                               bOverride_RayTracingGIMaxBounces : 1;                       // 0x0025:5 (0x0001)  
	bool                                               bOverride_RayTracingGISamplesPerPixel : 1;                  // 0x0025:6 (0x0001)  
	bool                                               bOverride_PathTracingMaxBounces : 1;                        // 0x0025:7 (0x0001)  
	bool                                               bOverride_PathTracingSamplesPerPixel : 1;                   // 0x0026:0 (0x0001)  
	unsigned char                                      UnknownData03_3[0x1];                                       // 0x0027   (0x0001)  MISSED
	bool                                               bKuroDangerToggle : 1;                                      // 0x0028:0 (0x0001)  
	bool                                               bMobileHQGaussian : 1;                                      // 0x0028:1 (0x0001)  
	TEnumAsByte<EKuroSMAAEdgePassMethod>               KuroSMAAEdgeType;                                           // 0x0029   (0x0001)  
	TEnumAsByte<EKuroSMAAQualityLevel>                 KuroSMAAQualityPreset;                                      // 0x002A   (0x0001)  
	TEnumAsByte<EKuroSMAADebugPass>                    KuroSMAADebug;                                              // 0x002B   (0x0001)  
	float                                              KuroSMAAPredicationThreshold;                               // 0x002C   (0x0004)  
	float                                              KuroSMAAPredicationScale;                                   // 0x0030   (0x0004)  
	float                                              KuroSMAAPredicationStrength;                                // 0x0034   (0x0004)  
	float                                              KuroSMAAThreshold;                                          // 0x0038   (0x0004)  
	float                                              KuroSMAALocalContrastFactor;                                // 0x003C   (0x0004)  
	int32_t                                            KuroSMAAMaxSearchSteps;                                     // 0x0040   (0x0004)  
	bool                                               KuroSMAADiagonalDetect : 1;                                 // 0x0044:0 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0045   (0x0003)  MISSED
	int32_t                                            KuroSMAAMaxDiagonalSearchSteps;                             // 0x0048   (0x0004)  
	bool                                               KuroSMAACornerDetect : 1;                                   // 0x004C:0 (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x004D   (0x0003)  MISSED
	int32_t                                            KuroSMAACornerRounding;                                     // 0x0050   (0x0004)  
	float                                              KuroTonemapA;                                               // 0x0054   (0x0004)  
	float                                              KuroTonemapB;                                               // 0x0058   (0x0004)  
	float                                              KuroTonemapC;                                               // 0x005C   (0x0004)  
	float                                              KuroTonemapD;                                               // 0x0060   (0x0004)  
	float                                              KuroTonemapE;                                               // 0x0064   (0x0004)  
	float                                              KuroTonemapF;                                               // 0x0068   (0x0004)  
	TEnumAsByte<EBloomMethod>                          BloomMethod;                                                // 0x006C   (0x0001)  
	TEnumAsByte<EAutoExposureMethod>                   AutoExposureMethod;                                         // 0x006D   (0x0001)  
	unsigned char                                      UnknownData06_6[0x2];                                       // 0x006E   (0x0002)  MISSED
	float                                              WhiteTemp;                                                  // 0x0070   (0x0004)  
	float                                              WhiteTint;                                                  // 0x0074   (0x0004)  
	unsigned char                                      UnknownData07_6[0x8];                                       // 0x0078   (0x0008)  MISSED
	FVector4                                           ColorSaturation;                                            // 0x0080   (0x0010)  
	FVector4                                           ColorContrast;                                              // 0x0090   (0x0010)  
	FVector4                                           ColorGamma;                                                 // 0x00A0   (0x0010)  
	FVector4                                           ColorGain;                                                  // 0x00B0   (0x0010)  
	FVector4                                           ColorOffset;                                                // 0x00C0   (0x0010)  
	FVector4                                           ColorSaturationShadows;                                     // 0x00D0   (0x0010)  
	FVector4                                           ColorContrastShadows;                                       // 0x00E0   (0x0010)  
	FVector4                                           ColorGammaShadows;                                          // 0x00F0   (0x0010)  
	FVector4                                           ColorGainShadows;                                           // 0x0100   (0x0010)  
	FVector4                                           ColorOffsetShadows;                                         // 0x0110   (0x0010)  
	FVector4                                           ColorSaturationMidtones;                                    // 0x0120   (0x0010)  
	FVector4                                           ColorContrastMidtones;                                      // 0x0130   (0x0010)  
	FVector4                                           ColorGammaMidtones;                                         // 0x0140   (0x0010)  
	FVector4                                           ColorGainMidtones;                                          // 0x0150   (0x0010)  
	FVector4                                           ColorOffsetMidtones;                                        // 0x0160   (0x0010)  
	FVector4                                           ColorSaturationHighlights;                                  // 0x0170   (0x0010)  
	FVector4                                           ColorContrastHighlights;                                    // 0x0180   (0x0010)  
	FVector4                                           ColorGammaHighlights;                                       // 0x0190   (0x0010)  
	FVector4                                           ColorGainHighlights;                                        // 0x01A0   (0x0010)  
	FVector4                                           ColorOffsetHighlights;                                      // 0x01B0   (0x0010)  
	float                                              ColorCorrectionHighlightsMin;                               // 0x01C0   (0x0004)  
	float                                              ColorCorrectionShadowsMax;                                  // 0x01C4   (0x0004)  
	float                                              BlueCorrection;                                             // 0x01C8   (0x0004)  
	float                                              ExpandGamut;                                                // 0x01CC   (0x0004)  
	float                                              ToneCurveAmount;                                            // 0x01D0   (0x0004)  
	float                                              FilmSlope;                                                  // 0x01D4   (0x0004)  
	float                                              FilmToe;                                                    // 0x01D8   (0x0004)  
	float                                              FilmShoulder;                                               // 0x01DC   (0x0004)  
	float                                              FilmBlackClip;                                              // 0x01E0   (0x0004)  
	float                                              FilmWhiteClip;                                              // 0x01E4   (0x0004)  
	FLinearColor                                       FilmWhitePoint;                                             // 0x01E8   (0x0010)  
	FLinearColor                                       FilmShadowTint;                                             // 0x01F8   (0x0010)  
	float                                              FilmShadowTintBlend;                                        // 0x0208   (0x0004)  
	float                                              FilmShadowTintAmount;                                       // 0x020C   (0x0004)  
	float                                              FilmSaturation;                                             // 0x0210   (0x0004)  
	FLinearColor                                       FilmChannelMixerRed;                                        // 0x0214   (0x0010)  
	FLinearColor                                       FilmChannelMixerGreen;                                      // 0x0224   (0x0010)  
	FLinearColor                                       FilmChannelMixerBlue;                                       // 0x0234   (0x0010)  
	float                                              FilmContrast;                                               // 0x0244   (0x0004)  
	float                                              FilmToeAmount;                                              // 0x0248   (0x0004)  
	float                                              FilmHealAmount;                                             // 0x024C   (0x0004)  
	float                                              FilmDynamicRange;                                           // 0x0250   (0x0004)  
	FLinearColor                                       SceneColorTint;                                             // 0x0254   (0x0010)  
	FLinearColor                                       TranslucentColorTint;                                       // 0x0264   (0x0010)  
	float                                              SceneColorDesaturate;                                       // 0x0274   (0x0004)  
	float                                              TranslucentColorDesaturate;                                 // 0x0278   (0x0004)  
	bool                                               EnableSPD : 1;                                              // 0x027C:0 (0x0001)  
	unsigned char                                      UnknownData08_5[0x3];                                       // 0x027D   (0x0003)  MISSED
	float                                              SceneFringeIntensity;                                       // 0x0280   (0x0004)  
	float                                              ChromaticAberrationStartOffset;                             // 0x0284   (0x0004)  
	float                                              KuroFoliageMaterialAO;                                      // 0x0288   (0x0004)  
	float                                              KuroFoliageScreenSpaceAO;                                   // 0x028C   (0x0004)  
	float                                              KuroBloomIntensity;                                         // 0x0290   (0x0004)  
	float                                              KuroBloomThreshold;                                         // 0x0294   (0x0004)  
	unsigned char                                      UnknownData09_6[0x8];                                       // 0x0298   (0x0008)  MISSED
	FVector4                                           KuroBloomCombineParameter;                                  // 0x02A0   (0x0010)  
	float                                              KuroBloomStreakIntensity;                                   // 0x02B0   (0x0004)  
	float                                              KuroBloomStreakThreshold;                                   // 0x02B4   (0x0004)  
	float                                              KuroBloomStreakLength;                                      // 0x02B8   (0x0004)  
	float                                              KuroBloomStreakMipLevel;                                    // 0x02BC   (0x0004)  
	float                                              KuroBloomStreakRatio;                                       // 0x02C0   (0x0004)  
	float                                              KuroBloomStreakOrientation;                                 // 0x02C4   (0x0004)  
	float                                              BlackWhiteFlashIntensity;                                   // 0x02C8   (0x0004)  
	float                                              BlackWhiteFlashFactor;                                      // 0x02CC   (0x0004)  
	float                                              BlackWhiteFlashThreshold;                                   // 0x02D0   (0x0004)  
	FLinearColor                                       BlackWhiteFlashBlackAreaColor;                              // 0x02D4   (0x0010)  
	FLinearColor                                       BlackWhiteFlashWhiteAreaColor;                              // 0x02E4   (0x0010)  
	float                                              KuroRadialBlurIntensity;                                    // 0x02F4   (0x0004)  
	FVector2D                                          KuroRadialBlurCenter;                                       // 0x02F8   (0x0008)  
	float                                              KuroRadialBlurRadius;                                       // 0x0300   (0x0004)  
	float                                              KuroRadialBlurHardness;                                     // 0x0304   (0x0004)  
	int32_t                                            KuroRadialBlurPassNumber;                                   // 0x0308   (0x0004)  
	int32_t                                            KuroRadialBlurSampleNumber;                                 // 0x030C   (0x0004)  
	class UTexture*                                    KuroRadialBlurMask;                                         // 0x0310   (0x0008)  
	FVector2D                                          KuroRadialBlurMaskScale;                                    // 0x0318   (0x0008)  
	FVector2D                                          KuroRadialBlurMaskOffset;                                   // 0x0320   (0x0008)  
	float                                              BloomIntensity;                                             // 0x0328   (0x0004)  
	float                                              BloomThreshold;                                             // 0x032C   (0x0004)  
	float                                              BloomSizeScale;                                             // 0x0330   (0x0004)  
	float                                              Bloom1Size;                                                 // 0x0334   (0x0004)  
	float                                              Bloom2Size;                                                 // 0x0338   (0x0004)  
	float                                              Bloom3Size;                                                 // 0x033C   (0x0004)  
	float                                              Bloom4Size;                                                 // 0x0340   (0x0004)  
	float                                              Bloom5Size;                                                 // 0x0344   (0x0004)  
	float                                              Bloom6Size;                                                 // 0x0348   (0x0004)  
	FLinearColor                                       Bloom1Tint;                                                 // 0x034C   (0x0010)  
	FLinearColor                                       Bloom2Tint;                                                 // 0x035C   (0x0010)  
	FLinearColor                                       Bloom3Tint;                                                 // 0x036C   (0x0010)  
	FLinearColor                                       Bloom4Tint;                                                 // 0x037C   (0x0010)  
	FLinearColor                                       Bloom5Tint;                                                 // 0x038C   (0x0010)  
	FLinearColor                                       Bloom6Tint;                                                 // 0x039C   (0x0010)  
	float                                              BloomConvolutionSize;                                       // 0x03AC   (0x0004)  
	class UTexture2D*                                  BloomConvolutionTexture;                                    // 0x03B0   (0x0008)  
	FVector2D                                          BloomConvolutionCenterUV;                                   // 0x03B8   (0x0008)  
	float                                              BloomConvolutionPreFilterMin;                               // 0x03C0   (0x0004)  
	float                                              BloomConvolutionPreFilterMax;                               // 0x03C4   (0x0004)  
	float                                              BloomConvolutionPreFilterMult;                              // 0x03C8   (0x0004)  
	float                                              BloomConvolutionBufferScale;                                // 0x03CC   (0x0004)  
	class UTexture*                                    BloomDirtMask;                                              // 0x03D0   (0x0008)  
	float                                              BloomDirtMaskIntensity;                                     // 0x03D8   (0x0004)  
	FLinearColor                                       BloomDirtMaskTint;                                          // 0x03DC   (0x0010)  
	FLinearColor                                       AmbientCubemapTint;                                         // 0x03EC   (0x0010)  
	float                                              AmbientCubemapIntensity;                                    // 0x03FC   (0x0004)  
	class UTextureCube*                                AmbientCubemap;                                             // 0x0400   (0x0008)  
	float                                              CameraShutterSpeed;                                         // 0x0408   (0x0004)  
	float                                              CameraISO;                                                  // 0x040C   (0x0004)  
	float                                              DepthOfFieldFstop;                                          // 0x0410   (0x0004)  
	float                                              DepthOfFieldMinFstop;                                       // 0x0414   (0x0004)  
	int32_t                                            DepthOfFieldBladeCount;                                     // 0x0418   (0x0004)  
	bool                                               bUseForegroundBlur : 1;                                     // 0x041C:0 (0x0001)  
	unsigned char                                      UnknownData10_5[0x3];                                       // 0x041D   (0x0003)  MISSED
	float                                              AutoExposureBias;                                           // 0x0420   (0x0004)  
	float                                              AutoExposureBiasBackup;                                     // 0x0424   (0x0004)  
	bool                                               bOverride_AutoExposureBiasBackup : 1;                       // 0x0428:0 (0x0001)  
	unsigned char                                      UnknownData11_3[0x3];                                       // 0x0429   (0x0003)  MISSED
	bool                                               AutoExposureApplyPhysicalCameraExposure : 1;                // 0x042C:0 (0x0001)  
	unsigned char                                      UnknownData12_5[0x3];                                       // 0x042D   (0x0003)  MISSED
	class UCurveFloat*                                 AutoExposureBiasCurve;                                      // 0x0430   (0x0008)  
	class UTexture*                                    AutoExposureMeterMask;                                      // 0x0438   (0x0008)  
	float                                              AutoExposureLowPercent;                                     // 0x0440   (0x0004)  
	float                                              AutoExposureHighPercent;                                    // 0x0444   (0x0004)  
	float                                              AutoExposureMinBrightness;                                  // 0x0448   (0x0004)  
	float                                              AutoExposureMaxBrightness;                                  // 0x044C   (0x0004)  
	float                                              AutoExposureSpeedUp;                                        // 0x0450   (0x0004)  
	float                                              AutoExposureSpeedDown;                                      // 0x0454   (0x0004)  
	float                                              HistogramLogMin;                                            // 0x0458   (0x0004)  
	float                                              HistogramLogMax;                                            // 0x045C   (0x0004)  
	float                                              AutoExposureCalibrationConstant;                            // 0x0460   (0x0004)  
	float                                              LensFlareIntensity;                                         // 0x0464   (0x0004)  
	FLinearColor                                       LensFlareTint;                                              // 0x0468   (0x0010)  
	float                                              LensFlareBokehSize;                                         // 0x0478   (0x0004)  
	float                                              LensFlareThreshold;                                         // 0x047C   (0x0004)  
	class UTexture*                                    LensFlareBokehShape;                                        // 0x0480   (0x0008)  
	TArray<FLinearColor>                               LensFlareTints;                                             // 0x0488   (0x0010)  
	bool                                               LensFlareOnlySun : 1;                                       // 0x0498:0 (0x0001)  
	unsigned char                                      UnknownData13_5[0x3];                                       // 0x0499   (0x0003)  MISSED
	float                                              LensFlareSunRange;                                          // 0x049C   (0x0004)  
	FVector4                                           LensFlareSunPosition;                                       // 0x04A0   (0x0010)  
	float                                              VignetteIntensity;                                          // 0x04B0   (0x0004)  
	float                                              GrainJitter;                                                // 0x04B4   (0x0004)  
	float                                              GrainIntensity;                                             // 0x04B8   (0x0004)  
	float                                              AmbientOcclusionIntensity;                                  // 0x04BC   (0x0004)  
	float                                              AmbientOcclusionStaticFraction;                             // 0x04C0   (0x0004)  
	float                                              AmbientOcclusionRadius;                                     // 0x04C4   (0x0004)  
	bool                                               AmbientOcclusionRadiusInWS : 1;                             // 0x04C8:0 (0x0001)  
	unsigned char                                      UnknownData14_5[0x3];                                       // 0x04C9   (0x0003)  MISSED
	float                                              AmbientOcclusionFadeDistance;                               // 0x04CC   (0x0004)  
	float                                              AmbientOcclusionFadeRadius;                                 // 0x04D0   (0x0004)  
	float                                              AmbientOcclusionDistance;                                   // 0x04D4   (0x0004)  
	float                                              AmbientOcclusionPower;                                      // 0x04D8   (0x0004)  
	float                                              AmbientOcclusionBias;                                       // 0x04DC   (0x0004)  
	float                                              AmbientOcclusionQuality;                                    // 0x04E0   (0x0004)  
	float                                              AmbientOcclusionMipBlend;                                   // 0x04E4   (0x0004)  
	float                                              AmbientOcclusionMipScale;                                   // 0x04E8   (0x0004)  
	float                                              AmbientOcclusionMipThreshold;                               // 0x04EC   (0x0004)  
	float                                              AmbientOcclusionTemporalBlendWeight;                        // 0x04F0   (0x0004)  
	bool                                               RayTracingAO : 1;                                           // 0x04F4:0 (0x0001)  
	unsigned char                                      UnknownData15_5[0x3];                                       // 0x04F5   (0x0003)  MISSED
	int32_t                                            RayTracingAOSamplesPerPixel;                                // 0x04F8   (0x0004)  
	float                                              RayTracingAOIntensity;                                      // 0x04FC   (0x0004)  
	float                                              RayTracingAORadius;                                         // 0x0500   (0x0004)  
	FLinearColor                                       IndirectLightingColor;                                      // 0x0504   (0x0010)  
	float                                              IndirectLightingIntensity;                                  // 0x0514   (0x0004)  
	ERayTracingGlobalIlluminationType                  RayTracingGIType;                                           // 0x0518   (0x0001)  
	unsigned char                                      UnknownData16_6[0x3];                                       // 0x0519   (0x0003)  MISSED
	int32_t                                            RayTracingGIMaxBounces;                                     // 0x051C   (0x0004)  
	int32_t                                            RayTracingGISamplesPerPixel;                                // 0x0520   (0x0004)  
	float                                              ColorGradingIntensity;                                      // 0x0524   (0x0004)  
	class UTexture*                                    ColorGradingLUT;                                            // 0x0528   (0x0008)  
	float                                              DepthOfFieldSensorWidth;                                    // 0x0530   (0x0004)  
	float                                              DepthOfFieldFocalDistance;                                  // 0x0534   (0x0004)  
	float                                              DepthOfFieldDepthBlurAmount;                                // 0x0538   (0x0004)  
	float                                              DepthOfFieldDepthBlurRadius;                                // 0x053C   (0x0004)  
	float                                              DepthOfFieldFocalRegion;                                    // 0x0540   (0x0004)  
	float                                              DepthOfFieldNearTransitionRegion;                           // 0x0544   (0x0004)  
	float                                              DepthOfFieldFarTransitionRegion;                            // 0x0548   (0x0004)  
	float                                              DepthOfFieldScale;                                          // 0x054C   (0x0004)  
	float                                              DepthOfFieldNearBlurSize;                                   // 0x0550   (0x0004)  
	float                                              DepthOfFieldFarBlurSize;                                    // 0x0554   (0x0004)  
	float                                              DepthOfFieldOcclusion;                                      // 0x0558   (0x0004)  
	float                                              DepthOfFieldSkyFocusDistance;                               // 0x055C   (0x0004)  
	float                                              DepthOfFieldVignetteSize;                                   // 0x0560   (0x0004)  
	float                                              MotionBlurAmount;                                           // 0x0564   (0x0004)  
	float                                              MotionBlurMax;                                              // 0x0568   (0x0004)  
	int32_t                                            MotionBlurTargetFPS;                                        // 0x056C   (0x0004)  
	float                                              MotionBlurPerObjectSize;                                    // 0x0570   (0x0004)  
	float                                              LPVIntensity;                                               // 0x0574   (0x0004)  
	float                                              LPVVplInjectionBias;                                        // 0x0578   (0x0004)  
	float                                              LPVSize;                                                    // 0x057C   (0x0004)  
	float                                              LPVSecondaryOcclusionIntensity;                             // 0x0580   (0x0004)  
	float                                              LPVSecondaryBounceIntensity;                                // 0x0584   (0x0004)  
	float                                              LPVGeometryVolumeBias;                                      // 0x0588   (0x0004)  
	float                                              LPVEmissiveInjectionIntensity;                              // 0x058C   (0x0004)  
	float                                              LPVDirectionalOcclusionIntensity;                           // 0x0590   (0x0004)  
	float                                              LPVDirectionalOcclusionRadius;                              // 0x0594   (0x0004)  
	float                                              LPVDiffuseOcclusionExponent;                                // 0x0598   (0x0004)  
	float                                              LPVSpecularOcclusionExponent;                               // 0x059C   (0x0004)  
	float                                              LPVDiffuseOcclusionIntensity;                               // 0x05A0   (0x0004)  
	float                                              LPVSpecularOcclusionIntensity;                              // 0x05A4   (0x0004)  
	EReflectionsType                                   ReflectionsType;                                            // 0x05A8   (0x0001)  
	unsigned char                                      UnknownData17_6[0x3];                                       // 0x05A9   (0x0003)  MISSED
	float                                              ScreenSpaceReflectionIntensity;                             // 0x05AC   (0x0004)  
	float                                              ScreenSpaceReflectionQuality;                               // 0x05B0   (0x0004)  
	float                                              ScreenSpaceReflectionMaxRoughness;                          // 0x05B4   (0x0004)  
	float                                              RayTracingReflectionsMaxRoughness;                          // 0x05B8   (0x0004)  
	int32_t                                            RayTracingReflectionsMaxBounces;                            // 0x05BC   (0x0004)  
	int32_t                                            RayTracingReflectionsSamplesPerPixel;                       // 0x05C0   (0x0004)  
	EReflectedAndRefractedRayTracedShadows             RayTracingReflectionsShadows;                               // 0x05C4   (0x0001)  
	bool                                               RayTracingReflectionsTranslucency : 1;                      // 0x05C5:0 (0x0001)  
	ETranslucencyType                                  TranslucencyType;                                           // 0x05C6   (0x0001)  
	unsigned char                                      UnknownData18_6[0x1];                                       // 0x05C7   (0x0001)  MISSED
	float                                              RayTracingTranslucencyMaxRoughness;                         // 0x05C8   (0x0004)  
	int32_t                                            RayTracingTranslucencyRefractionRays;                       // 0x05CC   (0x0004)  
	int32_t                                            RayTracingTranslucencySamplesPerPixel;                      // 0x05D0   (0x0004)  
	EReflectedAndRefractedRayTracedShadows             RayTracingTranslucencyShadows;                              // 0x05D4   (0x0001)  
	bool                                               RayTracingTranslucencyRefraction : 1;                       // 0x05D5:0 (0x0001)  
	unsigned char                                      UnknownData19_5[0x2];                                       // 0x05D6   (0x0002)  MISSED
	int32_t                                            PathTracingMaxBounces;                                      // 0x05D8   (0x0004)  
	int32_t                                            PathTracingSamplesPerPixel;                                 // 0x05DC   (0x0004)  
	float                                              LPVFadeRange;                                               // 0x05E0   (0x0004)  
	float                                              LPVDirectionalOcclusionFadeRange;                           // 0x05E4   (0x0004)  
	float                                              ScreenPercentage;                                           // 0x05E8   (0x0004)  
	unsigned char                                      UnknownData20_6[0x4];                                       // 0x05EC   (0x0004)  MISSED
	FWeightedBlendables                                WeightedBlendables;                                         // 0x05F0   (0x0010)  
};

/// Class /Script/Engine.PostProcessComponent
/// Size: 0x0628 (1576 bytes) (0x000218 - 0x000840) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class UPostProcessComponent : public USceneComponent
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0218   (0x0008)  MISSED
	FPostProcessSettings                               Settings;                                                   // 0x0220   (0x0600)  
	float                                              Priority;                                                   // 0x0820   (0x0004)  
	float                                              BlendRadius;                                                // 0x0824   (0x0004)  
	float                                              BlendWeight;                                                // 0x0828   (0x0004)  
	bool                                               bEnabled : 1;                                               // 0x082C:0 (0x0001)  
	bool                                               bUnbound : 1;                                               // 0x082C:1 (0x0001)  
	bool                                               bIsUISceneRendering : 1;                                    // 0x082C:2 (0x0001)  
	unsigned char                                      UnknownData01_7[0xB];                                       // 0x082D   (0x000B)  MISSED
	// void SetPriority(float InPriority);                                                                                      // [0x4713020] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void AddOrUpdateBlendable(TScriptInterface<Class> InBlendableObject, float InWeight);                                    // [0x4711f30] Final|RequiredAPI|Native|Public|BlueprintCallable 
};
#pragma pack(pop)

/// Class /Script/Engine.PostProcessVolume
/// Size: 0x0630 (1584 bytes) (0x0002E0 - 0x000910) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class APostProcessVolume : public AVolume
{ 
public:
	unsigned char                                      UnknownData00_3[0x10];                                      // 0x02E0   (0x0010)  MISSED
	FPostProcessSettings                               Settings;                                                   // 0x02F0   (0x0600)  
	float                                              Priority;                                                   // 0x08F0   (0x0004)  
	float                                              BlendRadius;                                                // 0x08F4   (0x0004)  
	float                                              BlendWeight;                                                // 0x08F8   (0x0004)  
	bool                                               bEnabled : 1;                                               // 0x08FC:0 (0x0001)  
	bool                                               bUnbound : 1;                                               // 0x08FC:1 (0x0001)  
	bool                                               bIsUISceneRendering : 1;                                    // 0x08FC:2 (0x0001)  
	unsigned char                                      UnknownData01_7[0xB];                                       // 0x08FD   (0x000B)  MISSED
	// void AddOrUpdateBlendable(TScriptInterface<Class> InBlendableObject, float InWeight);                                    // [0x4711de0] Final|Native|Public|BlueprintCallable 
};
#pragma pack(pop)

/// Class /Script/Engine.DynamicSubsystem
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UDynamicSubsystem : public USubsystem
{ 
public:
};

/// Class /Script/Engine.EngineSubsystem
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UEngineSubsystem : public UDynamicSubsystem
{ 
public:
};

/// Class /Script/Engine.SaveGame
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class USaveGame : public UObject
{ 
public:
};

/// Class /Script/Engine.GameModeBase
/// Size: 0x00A0 (160 bytes) (0x0002A8 - 0x000348) align 8 pad: 0x0000
class AGameModeBase : public AInfo
{ 
public:
	FString                                            OptionsString;                                              // 0x02A8   (0x0010)  
	class UClass*                                      GameSessionClass;                                           // 0x02B8   (0x0008)  
	class UClass*                                      GameStateClass;                                             // 0x02C0   (0x0008)  
	class UClass*                                      PlayerControllerClass;                                      // 0x02C8   (0x0008)  
	class UClass*                                      PlayerStateClass;                                           // 0x02D0   (0x0008)  
	class UClass*                                      HUDClass;                                                   // 0x02D8   (0x0008)  
	class UClass*                                      DefaultPawnClass;                                           // 0x02E0   (0x0008)  
	class UClass*                                      SpectatorClass;                                             // 0x02E8   (0x0008)  
	class UClass*                                      ReplaySpectatorPlayerControllerClass;                       // 0x02F0   (0x0008)  
	class UClass*                                      ServerStatReplicatorClass;                                  // 0x02F8   (0x0008)  
	class AGameSession*                                GameSession;                                                // 0x0300   (0x0008)  
	class AGameStateBase*                              GameState;                                                  // 0x0308   (0x0008)  
	class AServerStatReplicator*                       ServerStatReplicator;                                       // 0x0310   (0x0008)  
	FText                                              DefaultPlayerName;                                          // 0x0318   (0x0018)  
	bool                                               bUseSeamlessTravel : 1;                                     // 0x0330:0 (0x0001)  
	bool                                               bStartPlayersAsSpectators : 1;                              // 0x0330:1 (0x0001)  
	bool                                               bPauseable : 1;                                             // 0x0330:2 (0x0001)  
	unsigned char                                      UnknownData00_7[0x17];                                      // 0x0331   (0x0017)  MISSED
	// void StartPlay();                                                                                                        // [0x462b190] Native|Public|BlueprintCallable 
	// class APawn* SpawnDefaultPawnFor(class AController* NewPlayer, class AActor* StartSpot);                                 // [0x462b0a0] Native|Event|Public|BlueprintEvent 
	// class APawn* SpawnDefaultPawnAtTransform(class AController* NewPlayer, FTransform& SpawnTransform);                      // [0x462af80] Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// bool ShouldReset(class AActor* ActorToReset);                                                                            // [0x462aee0] Native|Event|Public|BlueprintEvent 
	// void ReturnToMainMenuHost();                                                                                             // [0x462ac80] Native|Public|BlueprintCallable 
	// void RestartPlayerAtTransform(class AController* NewPlayer, FTransform& SpawnTransform);                                 // [0x462ab60] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void RestartPlayerAtPlayerStart(class AController* NewPlayer, class AActor* StartSpot);                                  // [0x462aa90] Native|Public|BlueprintCallable 
	// void RestartPlayer(class AController* NewPlayer);                                                                        // [0x462aa00] Native|Public|BlueprintCallable 
	// void ResetLevel();                                                                                                       // [0x462a9c0] Native|Public|BlueprintCallable 
	// bool PlayerCanRestart(class APlayerController* Player);                                                                  // [0x462a8c0] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// bool MustSpectate(class APlayerController* NewPlayerController);                                                         // [0x462a820] Native|Event|Public|BlueprintEvent|Const 
	// void K2_PostLogin(class APlayerController* NewPlayer);                                                                   // [0x25a7960] Event|Public|BlueprintEvent 
	// void K2_OnSwapPlayerControllers(class APlayerController* OldPC, class APlayerController* NewPC);                         // [0x25a7960] Event|Protected|BlueprintEvent 
	// void K2_OnRestartPlayer(class AController* NewPlayer);                                                                   // [0x25a7960] Event|Public|BlueprintEvent 
	// void K2_OnLogout(class AController* ExitingController);                                                                  // [0x25a7960] Event|Public|BlueprintEvent 
	// void K2_OnChangeName(class AController* Other, FString NewName, bool bNameChange);                                       // [0x25a7960] Event|Public|BlueprintEvent 
	// class AActor* K2_FindPlayerStart(class AController* Player, FString IncomingName);                                       // [0x462a730] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// void InitStartSpot(class AActor* StartSpot, class AController* NewPlayer);                                               // [0x462a660] Native|Event|Public|BlueprintEvent 
	// void InitializeHUDForPlayer(class APlayerController* NewPlayer);                                                         // [0xc37ed0] Native|Event|Protected|BlueprintEvent 
	// bool HasMatchStarted();                                                                                                  // [0x460c0b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool HasMatchEnded();                                                                                                    // [0x462a630] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void HandleStartingNewPlayer(class APlayerController* NewPlayer);                                                        // [0x462a5a0] Native|Event|Public|BlueprintEvent 
	// int32_t GetNumSpectators();                                                                                              // [0x462a570] Native|Public|BlueprintCallable 
	// int32_t GetNumPlayers();                                                                                                 // [0x462a540] Native|Public|BlueprintCallable 
	// class UClass* GetDefaultPawnClassForController(class AController* InController);                                         // [0x462a470] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// class AActor* FindPlayerStart(class AController* Player, FString IncomingName);                                          // [0x462a370] Native|Event|Public|BlueprintEvent 
	// class AActor* ChoosePlayerStart(class AController* Player);                                                              // [0x462a190] Native|Event|Public|BlueprintEvent 
	// void ChangePlayerController(class UClass* NewPlayerControllerClass);                                                     // [0x462a100] Native|Public|BlueprintCallable 
	// void ChangeName(class AController* Controller, FString NewName, bool bNameChange);                                       // [0x4629fd0] Native|Public|BlueprintCallable 
	// bool CanSpectate(class APlayerController* Viewer, class APlayerState* ViewTarget);                                       // [0x4629f00] Native|Event|Public|BlueprintEvent 
};

/// Class /Script/Engine.GameMode
/// Size: 0x0050 (80 bytes) (0x000348 - 0x000398) align 8 pad: 0x0000
class AGameMode : public AGameModeBase
{ 
public:
	FName                                              MatchState;                                                 // 0x0348   (0x000C)  
	bool                                               bDelayedStart : 1;                                          // 0x0354:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0355   (0x0003)  MISSED
	int32_t                                            NumSpectators;                                              // 0x0358   (0x0004)  
	int32_t                                            NumPlayers;                                                 // 0x035C   (0x0004)  
	int32_t                                            NumBots;                                                    // 0x0360   (0x0004)  
	float                                              MinRespawnDelay;                                            // 0x0364   (0x0004)  
	int32_t                                            NumTravellingPlayers;                                       // 0x0368   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x036C   (0x0004)  MISSED
	class UClass*                                      EngineMessageClass;                                         // 0x0370   (0x0008)  
	TArray<class APlayerState*>                        InactivePlayerArray;                                        // 0x0378   (0x0010)  
	float                                              InactivePlayerStateLifeSpan;                                // 0x0388   (0x0004)  
	int32_t                                            MaxInactivePlayers;                                         // 0x038C   (0x0004)  
	bool                                               bHandleDedicatedServerReplays;                              // 0x0390   (0x0001)  
	unsigned char                                      UnknownData02_7[0x7];                                       // 0x0391   (0x0007)  MISSED
	// void StartMatch();                                                                                                       // [0x462b170] Native|Public|BlueprintCallable 
	// void SetBandwidthLimit(float AsyncIOBandwidthLimit);                                                                     // [0x462ad40] Exec|Native|Public   
	// void Say(FString msg);                                                                                                   // [0x462aca0] Exec|Native|Public|BlueprintCallable 
	// void RestartGame();                                                                                                      // [0x462a9e0] Native|Public|BlueprintCallable 
	// bool ReadyToStartMatch();                                                                                                // [0x462a990] Native|Event|Protected|BlueprintEvent 
	// bool ReadyToEndMatch();                                                                                                  // [0x462a960] Native|Event|Protected|BlueprintEvent 
	// void K2_OnSetMatchState(FName NewState);                                                                                 // [0x25a7960] Event|Protected|BlueprintEvent 
	// bool IsMatchInProgress();                                                                                                // [0x45fe050] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FName GetMatchState();                                                                                                   // [0x462a510] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void EndMatch();                                                                                                         // [0x462a350] Native|Public|BlueprintCallable 
	// void AbortMatch();                                                                                                       // [0x4629c80] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.ShapeComponent
/// Size: 0x0020 (32 bytes) (0x0004E0 - 0x000500) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class UShapeComponent : public UPrimitiveComponent
{ 
public:
	class UBodySetup*                                  ShapeBodySetup;                                             // 0x04E0   (0x0008)  
	class UClass*                                      AreaClass;                                                  // 0x04E8   (0x0008)  
	FColor                                             ShapeColor;                                                 // 0x04F0   (0x0004)  
	bool                                               bDrawOnlyIfSelected : 1;                                    // 0x04F4:0 (0x0001)  
	bool                                               bShouldCollideWhenPlacing : 1;                              // 0x04F4:1 (0x0001)  
	bool                                               bDynamicObstacle : 1;                                       // 0x04F4:2 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x04F5   (0x0003)  MISSED
};
#pragma pack(pop)

/// Class /Script/Engine.BoxComponent
/// Size: 0x0018 (24 bytes) (0x0004F8 - 0x000510) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class UBoxComponent : public UShapeComponent
{ 
public:
	FVector                                            BoxExtent;                                                  // 0x04F8   (0x000C)  
	float                                              LineThickness;                                              // 0x0504   (0x0004)  
	// void SetBoxExtent(FVector InBoxExtent, bool bUpdateOverlaps);                                                            // [0x45f68f0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// FVector GetUnscaledBoxExtent();                                                                                          // [0x45f65e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetScaledBoxExtent();                                                                                            // [0x45f6580] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};
#pragma pack(pop)

/// Class /Script/Engine.CapsuleComponent
/// Size: 0x0008 (8 bytes) (0x0004F8 - 0x000500) align 16 pad: 0x0000
class UCapsuleComponent : public UShapeComponent
{ 
public:
	float                                              CapsuleHalfHeight;                                          // 0x04F8   (0x0004)  
	float                                              CapsuleRadius;                                              // 0x04FC   (0x0004)  
	// void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);                                           // [0x4601630] Final|Native|Public|BlueprintCallable 
	// void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);                                                               // [0x4601550] Final|Native|Public|BlueprintCallable 
	// void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);                                                       // [0x4601470] Final|Native|Public|BlueprintCallable 
	// void GetUnscaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere);                  // [0x45ff640] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// void GetUnscaledCapsuleSize(float& OutRadius, float& OutHalfHeight);                                                     // [0x45ff550] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// float GetUnscaledCapsuleRadius();                                                                                        // [0x45ff530] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();                                                                  // [0x45ff500] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetUnscaledCapsuleHalfHeight();                                                                                    // [0x45ff4e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetShapeScale();                                                                                                   // [0x45ff4a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void GetScaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere);                    // [0x45ff380] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// void GetScaledCapsuleSize(float& OutRadius, float& OutHalfHeight);                                                       // [0x45ff270] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// float GetScaledCapsuleRadius();                                                                                          // [0x45ff230] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetScaledCapsuleHalfHeight_WithoutHemisphere();                                                                    // [0x45ff1e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetScaledCapsuleHalfHeight();                                                                                      // [0x45ff1b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.VertexOffsetUsage
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FVertexOffsetUsage
{ 
	int32_t                                            Usage;                                                      // 0x0000   (0x0004)  
};

/// Struct /Script/Engine.SkelMeshComponentLODInfo
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align 8 pad: 0x0000
struct FSkelMeshComponentLODInfo
{ 
	TArray<bool>                                       HiddenMaterials;                                            // 0x0000   (0x0010)  
	unsigned char                                      UnknownData00_7[0x38];                                      // 0x0010   (0x0038)  MISSED
};

/// Class /Script/Engine.SkinnedMeshComponent
/// Size: 0x02C8 (712 bytes) (0x000508 - 0x0007D0) align 16 pad: 0x0000
class USkinnedMeshComponent : public UMeshComponent
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0508   (0x0008)  MISSED
	class USkeletalMesh*                               SkeletalMesh;                                               // 0x0510   (0x0008)  
	TArray<FExtraMaterialInfo>                         ExtraMaterialInfos;                                         // 0x0518   (0x0010)  
	SDK_UNDEFINED(8,50) /* TWeakObjectPtr<USkinnedMeshComponent*> */ __um(MasterPoseComponent);                    // 0x0528   (0x0008)  
	TArray<ESkinCacheUsage>                            SkinCacheUsage;                                             // 0x0530   (0x0010)  
	TArray<FVertexOffsetUsage>                         VertexOffsetUsage;                                          // 0x0540   (0x0010)  
	unsigned char                                      UnknownData01_6[0x90];                                      // 0x0550   (0x0090)  MISSED
	TArray<FMatrix>                                    ComponentSpaceMatricesWithShears;                           // 0x05E0   (0x0010)  
	unsigned char                                      UnknownData02_6[0xB8];                                      // 0x05F0   (0x00B8)  MISSED
	class UPhysicsAsset*                               PhysicsAssetOverride;                                       // 0x06A8   (0x0008)  
	int32_t                                            ForcedLodModel;                                             // 0x06B0   (0x0004)  
	int32_t                                            MinLodModel;                                                // 0x06B4   (0x0004)  
	bool                                               bOverrideMinLOD : 1;                                        // 0x06B8:0 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x06B9   (0x0003)  MISSED
	int32_t                                            MaxLodModel;                                                // 0x06BC   (0x0004)  
	bool                                               bOverrideMaxLod : 1;                                        // 0x06C0:0 (0x0001)  
	bool                                               bEnableMaxLod : 1;                                          // 0x06C0:1 (0x0001)  
	unsigned char                                      UnknownData04_5[0xF];                                       // 0x06C1   (0x000F)  MISSED
	float                                              StreamingDistanceMultiplier;                                // 0x06D0   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x06D4   (0x0004)  MISSED
	class UTextRenderComponent*                        LODTextComponent;                                           // 0x06D8   (0x0008)  
	class UTextRenderComponent*                        DistanceTextComponent;                                      // 0x06E0   (0x0008)  
	unsigned char                                      UnknownData06_6[0x8];                                       // 0x06E8   (0x0008)  MISSED
	TArray<FSkelMeshComponentLODInfo>                  LODInfo;                                                    // 0x06F0   (0x0010)  
	unsigned char                                      UnknownData07_6[0x24];                                      // 0x0700   (0x0024)  MISSED
	EVisibilityBasedAnimTickOption                     VisibilityBasedAnimTickOption;                              // 0x0724   (0x0001)  
	unsigned char                                      UnknownData08_6[0x1];                                       // 0x0725   (0x0001)  MISSED
	unsigned char                                      UnknownBit09 : 1;                                           // 0x0726:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit10 : 1;                                           // 0x0726:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit11 : 1;                                           // 0x0726:2 (0x0001)  MISSED
	bool                                               bUseBoundsFromMasterPoseComponent : 1;                      // 0x0726:3 (0x0001)  
	bool                                               bForceWireframe : 1;                                        // 0x0726:4 (0x0001)  
	bool                                               bDisplayBones : 1;                                          // 0x0726:5 (0x0001)  
	bool                                               bDisableMorphTarget : 1;                                    // 0x0726:6 (0x0001)  
	bool                                               bHideSkin : 1;                                              // 0x0726:7 (0x0001)  
	bool                                               bPerBoneMotionBlur : 1;                                     // 0x0727:0 (0x0001)  
	bool                                               bComponentUseFixedSkelBounds : 1;                           // 0x0727:1 (0x0001)  
	bool                                               bConsiderAllBodiesForBounds : 1;                            // 0x0727:2 (0x0001)  
	bool                                               bSyncAttachParentLOD : 1;                                   // 0x0727:3 (0x0001)  
	bool                                               bCanHighlightSelectedSections : 1;                          // 0x0727:4 (0x0001)  
	bool                                               bRecentlyRendered : 1;                                      // 0x0727:5 (0x0001)  
	bool                                               bCastCapsuleDirectShadow : 1;                               // 0x0727:6 (0x0001)  
	bool                                               bCastCapsuleIndirectShadow : 1;                             // 0x0727:7 (0x0001)  
	bool                                               bCPUSkinning : 1;                                           // 0x0728:0 (0x0001)  
	bool                                               bEnableUpdateRateOptimizations : 1;                         // 0x0728:1 (0x0001)  
	bool                                               bDisplayDebugUpdateRateOptimizations : 1;                   // 0x0728:2 (0x0001)  
	bool                                               bRenderStatic : 1;                                          // 0x0728:3 (0x0001)  
	bool                                               bIgnoreMasterPoseComponentLOD : 1;                          // 0x0728:4 (0x0001)  
	unsigned char                                      UnknownBit12 : 1;                                           // 0x0728:5 (0x0001)  MISSED
	unsigned char                                      UnknownBit13 : 1;                                           // 0x0728:6 (0x0001)  MISSED
	bool                                               bCachedLocalBoundsUpToDate : 1;                             // 0x0728:7 (0x0001)  
	unsigned char                                      UnknownBit14 : 1;                                           // 0x0729:0 (0x0001)  MISSED
	bool                                               bForceMeshObjectUpdate : 1;                                 // 0x0729:1 (0x0001)  
	unsigned char                                      UnknownData15_5[0x2];                                       // 0x072A   (0x0002)  MISSED
	float                                              CapsuleIndirectShadowMinVisibility;                         // 0x072C   (0x0004)  
	unsigned char                                      UnknownData16_6[0x8];                                       // 0x0730   (0x0008)  MISSED
	int32_t                                            ComponentLODBias;                                           // 0x0738   (0x0004)  
	bool                                               bEnableGlobalLODBias : 1;                                   // 0x073C:0 (0x0001)  
	unsigned char                                      UnknownData17_5[0xF];                                       // 0x073D   (0x000F)  MISSED
	FBoxSphereBounds                                   CachedWorldSpaceBounds;                                     // 0x074C   (0x001C)  
	unsigned char                                      UnknownData18_6[0x8];                                       // 0x0768   (0x0008)  MISSED
	FMatrix                                            CachedWorldToLocalTransform;                                // 0x0770   (0x0040)  
	unsigned char                                      UnknownData19_7[0x20];                                      // 0x07B0   (0x0020)  MISSED
	// bool UseSkeletalMeshBounds();                                                                                            // [0x473e590] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void UnloadSkinWeightProfile(FName InProfileName);                                                                       // [0x473e4f0] Final|Native|Public|BlueprintCallable 
	// void UnHideBoneByName(FName BoneName);                                                                                   // [0x473e450] Final|Native|Public|BlueprintCallable 
	// void TransformToBoneSpace(FName BoneName, FVector InPosition, FRotator InRotation, FVector& OutPosition, FRotator& OutRotation); // [0x473e260] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// void TransformFromBoneSpace(FName BoneName, FVector InPosition, FRotator InRotation, FVector& OutPosition, FRotator& OutRotation); // [0x473e070] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void ShowMaterialSection(int32_t MaterialID, int32_t SectionIndex, bool bShow, int32_t LODIndex);                        // [0x473df20] Final|Native|Public|BlueprintCallable 
	// void ShowAllMaterialSections(int32_t LODIndex);                                                                          // [0x473de90] Final|Native|Public|BlueprintCallable 
	// void SetVertexOffsetUsage(int32_t LODIndex, int32_t Usage);                                                              // [0x473ddc0] Final|Native|Public|BlueprintCallable 
	// void SetVertexColorOverride_LinearColor(int32_t LODIndex, TArray<FLinearColor>& VertexColors);                           // [0x473dcd0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// bool SetSkinWeightProfile(FName InProfileName);                                                                          // [0x473dc20] Final|Native|Public|BlueprintCallable 
	// void SetSkinWeightOverride(int32_t LODIndex, TArray<FSkelMeshSkinWeightInfo>& SkinWeights);                              // [0x473db30] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetSkeletalMesh(class USkeletalMesh* NewMesh, bool bReinitPose);                                                    // [0x473da60] Native|Public|BlueprintCallable 
	// void SetRenderStatic(bool bNewValue);                                                                                    // [0x473d9d0] Final|Native|Public|BlueprintCallable 
	// void SetPreSkinningOffsets(int32_t LODIndex, TArray<FVector> Offsets);                                                   // [0x473d8a0] Final|Native|Public|BlueprintCallable 
	// void SetPostSkinningOffsets(int32_t LODIndex, TArray<FVector> Offsets);                                                  // [0x473d770] Final|Native|Public|BlueprintCallable 
	// void SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset, bool bForceReInit);                                           // [0x473d6a0] Native|Public|BlueprintCallable 
	// void SetOverrideMaxlod(bool InOverride);                                                                                 // [0x473d610] Final|Native|Public|BlueprintCallable 
	// void SetMinLOD(int32_t InNewMinLOD);                                                                                     // [0x473d580] Final|Native|Public|BlueprintCallable 
	// void SetMaxLOD(int32_t InNewMaxLOD);                                                                                     // [0x473d4f0] Final|Native|Public|BlueprintCallable 
	// void SetMasterPoseComponent(class USkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);                     // [0x473d420] Final|Native|Public|BlueprintCallable 
	// void SetLODBias(int32_t InLODBias);                                                                                      // [0x473d390] Final|Native|Public|BlueprintCallable 
	// void SetForcedLOD(int32_t InNewForcedLOD);                                                                               // [0x473d300] Final|Native|Public|BlueprintCallable 
	// void SetEnableMaxLod(bool InEnable);                                                                                     // [0x473d270] Final|Native|Public|BlueprintCallable 
	// void SetCastCapsuleIndirectShadow(bool bNewValue);                                                                       // [0x473d1e0] Final|Native|Public|BlueprintCallable 
	// void SetCastCapsuleDirectShadow(bool bNewValue);                                                                         // [0x473d150] Final|Native|Public|BlueprintCallable 
	// void SetCapsuleIndirectShadowMinVisibility(float NewValue);                                                              // [0x473d0d0] Final|Native|Public|BlueprintCallable 
	// bool SetAnimUpdateRateParameters(FAnimUpdateRateParameters& AnimUpdateRateParamsIn);                                     // [0x473cfc0] Final|Native|Public|HasOutParms|Const 
	// bool IsUsingSkinWeightProfile();                                                                                         // [0x473cf90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsMaterialSectionShown(int32_t MaterialID, int32_t LODIndex);                                                       // [0x473cec0] Final|Native|Public|BlueprintCallable 
	// bool IsBoneHiddenByName(FName BoneName);                                                                                 // [0x473ce10] Final|Native|Public|BlueprintCallable 
	// void HideBoneByName(FName BoneName, TEnumAsByte<EPhysBodyOp> PhysBodyOption);                                            // [0x473cbf0] Final|Native|Public|BlueprintCallable 
	// int32_t GetVertexOffsetUsage(int32_t LODIndex);                                                                          // [0x473cb50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, float& OutTwistAngle, float& OutSwingAngle);        // [0x473ca00] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// FName GetSocketBoneName(FName InSocketName);                                                                             // [0x473c890] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector GetRefPosePosition(int32_t BoneIndex);                                                                           // [0x473c7e0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// int32_t GetPredictedLODLevel();                                                                                          // [0x473c7b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FName GetParentBone(FName BoneName);                                                                                     // [0x473c6f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetNumLODs();                                                                                                    // [0x473c6c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetNumBones();                                                                                                   // [0x473c690] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetMeshObjectLODLevel();                                                                                         // [0x473c660] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetForcedLOD();                                                                                                  // [0x473c630] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FTransform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);                                                 // [0x473c4f0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FName GetCurrentSkinWeightProfileName();                                                                                 // [0x473c4c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FName GetBoneName(int32_t BoneIndex);                                                                                    // [0x473c410] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetBoneIndex(FName BoneName);                                                                                    // [0x473c360] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool GetAnimUpdateRateParameters(FAnimUpdateRateParameters& AnimUpdateRateParamsOut);                                    // [0x473c250] Final|Native|Public|HasOutParms|Const 
	// FName FindClosestBone_K2(FVector TestLocation, FVector& BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);     // [0x473c0a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// void ClearVertexColorOverride(int32_t LODIndex);                                                                         // [0x473c010] Final|Native|Public|BlueprintCallable 
	// void ClearSkinWeightProfile();                                                                                           // [0x473bff0] Final|Native|Public|BlueprintCallable 
	// void ClearSkinWeightOverride(int32_t LODIndex);                                                                          // [0x473bf60] Final|Native|Public|BlueprintCallable 
	// bool CanUseSkelMeshBounds();                                                                                             // [0x473bf30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool BoneIsChildOf(FName BoneName, FName ParentBoneName);                                                                // [0x473be20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.SingleAnimationPlayData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FSingleAnimationPlayData
{ 
	class UAnimationAsset*                             AnimToPlay;                                                 // 0x0000   (0x0008)  
	bool                                               bSavedLooping : 1;                                          // 0x0008:0 (0x0001)  
	bool                                               bSavedPlaying : 1;                                          // 0x0008:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0009   (0x0003)  MISSED
	float                                              SavedPosition;                                              // 0x000C   (0x0004)  
	float                                              SavedPlayRate;                                              // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Class /Script/Engine.SkeletalMeshComponent
/// Size: 0x0910 (2320 bytes) (0x0007D0 - 0x0010E0) align 16 pad: 0x0000
class USkeletalMeshComponent : public USkinnedMeshComponent
{ 
public:
	class UAnimBlueprintGeneratedClass*                AnimBlueprintGeneratedClass;                                // 0x07D0   (0x0008)  
	class UClass*                                      AnimClass;                                                  // 0x07D8   (0x0008)  
	class UAnimInstance*                               AnimScriptInstance;                                         // 0x07E0   (0x0008)  
	class UAnimInstance*                               PostProcessAnimInstance;                                    // 0x07E8   (0x0008)  
	class UClass*                                      KuroPostProcessAnimBlueprint;                               // 0x07F0   (0x0008)  
	FSingleAnimationPlayData                           AnimationData;                                              // 0x07F8   (0x0018)  
	unsigned char                                      UnknownData00_6[0x10];                                      // 0x0810   (0x0010)  MISSED
	FVector                                            RootBoneTranslation;                                        // 0x0820   (0x000C)  
	FVector                                            LineCheckBoundsScale;                                       // 0x082C   (0x000C)  
	unsigned char                                      UnknownData01_6[0x30];                                      // 0x0838   (0x0030)  MISSED
	bool                                               bRenderInKuroXRayPass : 1;                                  // 0x0868:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0869   (0x0003)  MISSED
	FLinearColor                                       KuroXRayColor;                                              // 0x086C   (0x0010)  
	bool                                               bOverrideSkeletalMeshScreenSizeCullRatio : 1;               // 0x087C:0 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x087D   (0x0003)  MISSED
	float                                              SkeletalMeshScreenSizeCullRatio;                            // 0x0880   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0884   (0x0004)  MISSED
	TArray<class UAnimInstance*>                       LinkedInstances;                                            // 0x0888   (0x0010)  
	TArray<FTransform>                                 CachedBoneSpaceTransforms;                                  // 0x0898   (0x0010)  
	TArray<FTransform>                                 CachedComponentSpaceTransforms;                             // 0x08A8   (0x0010)  
	TArray<FVector>                                    BoneSpaceShears;                                            // 0x08B8   (0x0010)  
	TArray<FVector>                                    CachedBoneSpaceShears;                                      // 0x08C8   (0x0010)  
	TArray<FVector>                                    CachedComponentSpaceShears;                                 // 0x08D8   (0x0010)  
	unsigned char                                      UnknownData05_6[0x150];                                     // 0x08E8   (0x0150)  MISSED
	float                                              GlobalAnimRateScale;                                        // 0x0A38   (0x0004)  
	TEnumAsByte<EKinematicBonesUpdateToPhysics>        KinematicBonesUpdateType;                                   // 0x0A3C   (0x0001)  
	TEnumAsByte<EPhysicsTransformUpdateMode>           PhysicsTransformUpdateMode;                                 // 0x0A3D   (0x0001)  
	unsigned char                                      UnknownData06_6[0x1];                                       // 0x0A3E   (0x0001)  MISSED
	TEnumAsByte<EAnimationMode>                        AnimationMode;                                              // 0x0A3F   (0x0001)  
	unsigned char                                      UnknownData07_6[0x1];                                       // 0x0A40   (0x0001)  MISSED
	bool                                               bDisablePostProcessBlueprint : 1;                           // 0x0A41:0 (0x0001)  
	unsigned char                                      UnknownBit08 : 1;                                           // 0x0A41:1 (0x0001)  MISSED
	bool                                               bUpdateOverlapsOnAnimationFinalize : 1;                     // 0x0A41:2 (0x0001)  
	unsigned char                                      UnknownBit09 : 1;                                           // 0x0A41:3 (0x0001)  MISSED
	bool                                               bHasValidBodies : 1;                                        // 0x0A41:4 (0x0001)  
	bool                                               bBlendPhysics : 1;                                          // 0x0A41:5 (0x0001)  
	bool                                               bEnablePhysicsOnDedicatedServer : 1;                        // 0x0A41:6 (0x0001)  
	bool                                               bUpdateJointsFromAnimation : 1;                             // 0x0A41:7 (0x0001)  
	bool                                               bDisableClothSimulation : 1;                                // 0x0A42:0 (0x0001)  
	unsigned char                                      UnknownData10_3[0x5];                                       // 0x0A43   (0x0005)  MISSED
	unsigned char                                      UnknownBit11 : 1;                                           // 0x0A48:0 (0x0001)  MISSED
	bool                                               bDisableRigidBodyAnimNode : 1;                              // 0x0A48:1 (0x0001)  
	bool                                               bAllowAnimCurveEvaluation : 1;                              // 0x0A48:2 (0x0001)  
	bool                                               bDisableAnimCurves : 1;                                     // 0x0A48:3 (0x0001)  
	unsigned char                                      UnknownBit12 : 1;                                           // 0x0A48:4 (0x0001)  MISSED
	unsigned char                                      UnknownBit13 : 1;                                           // 0x0A48:5 (0x0001)  MISSED
	unsigned char                                      UnknownBit14 : 1;                                           // 0x0A48:6 (0x0001)  MISSED
	bool                                               bCollideWithEnvironment : 1;                                // 0x0A48:7 (0x0001)  
	bool                                               bCollideWithAttachedChildren : 1;                           // 0x0A49:0 (0x0001)  
	bool                                               bLocalSpaceSimulation : 1;                                  // 0x0A49:1 (0x0001)  
	bool                                               bResetAfterTeleport : 1;                                    // 0x0A49:2 (0x0001)  
	unsigned char                                      UnknownBit15 : 1;                                           // 0x0A49:3 (0x0001)  MISSED
	bool                                               bDeferKinematicBoneUpdate : 1;                              // 0x0A49:4 (0x0001)  
	bool                                               bNoSkeletonUpdate : 1;                                      // 0x0A49:5 (0x0001)  
	bool                                               bEnableShearAnim : 1;                                       // 0x0A49:6 (0x0001)  
	bool                                               bPauseAnims : 1;                                            // 0x0A49:7 (0x0001)  
	bool                                               bUseRefPoseOnInitAnim : 1;                                  // 0x0A4A:0 (0x0001)  
	bool                                               bEnablePerPolyCollision : 1;                                // 0x0A4A:1 (0x0001)  
	bool                                               bForceRefpose : 1;                                          // 0x0A4A:2 (0x0001)  
	bool                                               bOnlyAllowAutonomousTickPose : 1;                           // 0x0A4A:3 (0x0001)  
	bool                                               bIsAutonomousTickPose : 1;                                  // 0x0A4A:4 (0x0001)  
	bool                                               bOldForceRefPose : 1;                                       // 0x0A4A:5 (0x0001)  
	bool                                               bShowPrePhysBones : 1;                                      // 0x0A4A:6 (0x0001)  
	bool                                               bRequiredBonesUpToDate : 1;                                 // 0x0A4A:7 (0x0001)  
	bool                                               bAnimTreeInitialised : 1;                                   // 0x0A4B:0 (0x0001)  
	bool                                               bIncludeComponentLocationIntoBounds : 1;                    // 0x0A4B:1 (0x0001)  
	bool                                               bEnableLineCheckWithBounds : 1;                             // 0x0A4B:2 (0x0001)  
	bool                                               bUseBendingElements : 1;                                    // 0x0A4B:3 (0x0001)  
	bool                                               bUseTetrahedralConstraints : 1;                             // 0x0A4B:4 (0x0001)  
	bool                                               bUseThinShellVolumeConstraints : 1;                         // 0x0A4B:5 (0x0001)  
	bool                                               bUseSelfCollisions : 1;                                     // 0x0A4B:6 (0x0001)  
	bool                                               bUseContinuousCollisionDetection : 1;                       // 0x0A4B:7 (0x0001)  
	bool                                               bPropagateCurvesToSlaves : 1;                               // 0x0A4C:0 (0x0001)  
	bool                                               bSkipKinematicUpdateWhenInterpolating : 1;                  // 0x0A4C:1 (0x0001)  
	bool                                               bSkipBoundsUpdateWhenInterpolating : 1;                     // 0x0A4C:2 (0x0001)  
	unsigned char                                      UnknownBit16 : 1;                                           // 0x0A4C:3 (0x0001)  MISSED
	unsigned char                                      UnknownBit17 : 1;                                           // 0x0A4C:4 (0x0001)  MISSED
	bool                                               bMaybeShearingPose : 1;                                     // 0x0A4C:5 (0x0001)  
	bool                                               bNeedsQueuedAnimEventsDispatched : 1;                       // 0x0A4C:6 (0x0001)  
	unsigned char                                      UnknownData18_5[0x1];                                       // 0x0A4D   (0x0001)  MISSED
	uint16_t                                           CachedAnimCurveUidVersion;                                  // 0x0A4E   (0x0002)  
	EClothMassMode                                     MassMode;                                                   // 0x0A50   (0x0001)  
	unsigned char                                      UnknownData19_6[0x3];                                       // 0x0A51   (0x0003)  MISSED
	float                                              UniformMass;                                                // 0x0A54   (0x0004)  
	float                                              TotalMass;                                                  // 0x0A58   (0x0004)  
	float                                              Density;                                                    // 0x0A5C   (0x0004)  
	float                                              MinPerParticleMass;                                         // 0x0A60   (0x0004)  
	float                                              ClothBlendWeight;                                           // 0x0A64   (0x0004)  
	float                                              EdgeStiffness;                                              // 0x0A68   (0x0004)  
	float                                              BendingStiffness;                                           // 0x0A6C   (0x0004)  
	float                                              AreaStiffness;                                              // 0x0A70   (0x0004)  
	float                                              VolumeStiffness;                                            // 0x0A74   (0x0004)  
	float                                              StrainLimitingStiffness;                                    // 0x0A78   (0x0004)  
	float                                              ShapeTargetStiffness;                                       // 0x0A7C   (0x0004)  
	bool                                               bWaitForParallelClothTask;                                  // 0x0A80   (0x0001)  
	unsigned char                                      UnknownData20_6[0x7];                                       // 0x0A81   (0x0007)  MISSED
	TArray<FName>                                      DisallowedAnimCurves;                                       // 0x0A88   (0x0010)  
	class UBodySetup*                                  BodySetup;                                                  // 0x0A98   (0x0008)  
	unsigned char                                      UnknownData21_6[0x8];                                       // 0x0AA0   (0x0008)  MISSED
	SDK_UNDEFINED(16,51) /* FMulticastInlineDelegate */ __um(OnConstraintBroken);                                  // 0x0AA8   (0x0010)  
	class UClass*                                      ClothingSimulationFactory;                                  // 0x0AB8   (0x0008)  
	unsigned char                                      UnknownData22_6[0xC8];                                      // 0x0AC0   (0x00C8)  MISSED
	float                                              TeleportDistanceThreshold;                                  // 0x0B88   (0x0004)  
	float                                              TeleportRotationThreshold;                                  // 0x0B8C   (0x0004)  
	unsigned char                                      UnknownData23_6[0x8];                                       // 0x0B90   (0x0008)  MISSED
	uint32_t                                           LastPoseTickFrame;                                          // 0x0B98   (0x0004)  
	unsigned char                                      UnknownData24_6[0x54];                                      // 0x0B9C   (0x0054)  MISSED
	class UClothingSimulationInteractor*               ClothingInteractor;                                         // 0x0BF0   (0x0008)  
	unsigned char                                      UnknownData25_6[0xC8];                                      // 0x0BF8   (0x00C8)  MISSED
	SDK_UNDEFINED(16,52) /* FMulticastInlineDelegate */ __um(OnAnimInitialized);                                   // 0x0CC0   (0x0010)  
	unsigned char                                      UnknownData26_7[0x410];                                     // 0x0CD0   (0x0410)  MISSED
	// void UnlinkAnimClassLayers(class UClass* InClass);                                                                       // [0x4738040] Final|Native|Public|BlueprintCallable 
	// void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);                                                   // [0x4737fb0] Final|Native|Public|BlueprintCallable 
	// void ToggleDisablePostProcessBlueprint();                                                                                // [0x4737f90] Final|Native|Public|BlueprintCallable 
	// void TermBodiesBelow(FName ParentBoneName);                                                                              // [0x4737ef0] Final|Native|Public|BlueprintCallable 
	// void SuspendClothingSimulation();                                                                                        // [0x4737ed0] Final|Native|Public|BlueprintCallable 
	// void Stop();                                                                                                             // [0x4737eb0] Final|Native|Public|BlueprintCallable 
	// void SnapshotPose(FPoseSnapshot& Snapshot);                                                                              // [0x4737de0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetUpdateClothInEditor(bool NewUpdateState);                                                                        // [0xfcf0a0] Final|Native|Public|BlueprintCallable 
	// void SetUpdateAnimationInEditor(bool NewUpdateState);                                                                    // [0xfcf0a0] Final|Native|Public|BlueprintCallable 
	// void SetTeleportRotationThreshold(float Threshold);                                                                      // [0x4737d60] Final|Native|Public|BlueprintCallable 
	// void SetTeleportDistanceThreshold(float Threshold);                                                                      // [0x4737ce0] Final|Native|Public|BlueprintCallable 
	// void SetSkeletalMeshScreenSizeCullRatio(float Value);                                                                    // [0x4737c60] Final|Native|Public|BlueprintCallable 
	// void SetRenderInKuroXRayPass(bool bValue);                                                                               // [0x4737bd0] Final|Native|Public|BlueprintCallable 
	// void SetPosition(float InPos, bool bFireNotifies);                                                                       // [0x4737af0] Final|Native|Public|BlueprintCallable 
	// void SetPlayRate(float Rate);                                                                                            // [0x4737a70] Final|Native|Public|BlueprintCallable 
	// void SetPhysicsBlendWeight(float PhysicsBlendWeight);                                                                    // [0x47379f0] Final|Native|Public|BlueprintCallable 
	// void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);             // [0x47378c0] Native|Public|BlueprintCallable 
	// void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);                                         // [0x4737790] Final|Native|Public|BlueprintCallable 
	// void SetKuroXRayColor(FLinearColor InKuroXRayColor);                                                                     // [0x4737700] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetEnablePhysicsBlending(bool bNewBlendPhysics);                                                                    // [0x4737670] Final|Native|Public|BlueprintCallable 
	// void SetEnableOverrideSkeletalMeshScreenSizeCullRatio(bool bValue);                                                      // [0x47375e0] Final|Native|Public|BlueprintCallable 
	// void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);                           // [0x47374b0] Final|Native|Public|BlueprintCallable 
	// void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);                                                          // [0x47373b0] Final|Native|Public|BlueprintCallable 
	// void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);                                                         // [0x4737320] Final|Native|Public|BlueprintCallable 
	// void SetDisableAnimCurves(bool bInDisableAnimCurves);                                                                    // [0x4737290] Final|Native|Public|BlueprintCallable 
	// void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);                                             // [0x47371a0] Final|Native|Public|BlueprintCallable 
	// void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);                                  // [0x4737060] Final|Native|Public|BlueprintCallable 
	// void SetClothMaxDistanceScale(float Scale);                                                                              // [0x4736fe0] Final|Native|Public|BlueprintCallable 
	// void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);                                 // [0x4736ee0] Native|Public|BlueprintCallable 
	// void SetAnimClass(class UClass* NewClass);                                                                               // [0x4736cb0] Native|Public|BlueprintCallable 
	// void SetAnimationRibbonAsset(class UAnimationAsset* NewRibbonAsset);                                                     // [0x4736e50] Final|Native|Public|BlueprintCallable 
	// void SetAnimationMode(TEnumAsByte<EAnimationMode> InAnimationMode);                                                      // [0x4736dd0] Final|Native|Public|BlueprintCallable 
	// void SetAnimation(class UAnimationAsset* NewAnimToPlay);                                                                 // [0x4736d40] Final|Native|Public|BlueprintCallable 
	// void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);          // [0x4736b30] Final|Native|Public|BlueprintCallable 
	// void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);                                                         // [0x4736960] Final|Native|Public|BlueprintCallable 
	// void SetAllowedAnimCurvesEvaluation(TArray<FName>& List, bool bAllow);                                                   // [0x4736a30] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetAllowAnimCurveEvaluation(bool bInAllow);                                                                         // [0x47368d0] Final|Native|Public|BlueprintCallable 
	// void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);      // [0x47367a0] Final|Native|Public|BlueprintCallable 
	// void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);      // [0x4736670] Final|Native|Public|BlueprintCallable 
	// void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);   // [0x4736500] Final|Native|Public|BlueprintCallable 
	// void SetAllBodiesSimulatePhysics(bool bNewSimulate);                                                                     // [0x4736470] Final|Native|Public|BlueprintCallable 
	// void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);                              // [0x4736390] Final|Native|Public|BlueprintCallable 
	// void SetAllBodiesBelowSimulatePhysics(FName& InBoneName, bool bNewSimulate, bool bIncludeSelf);                          // [0x4736260] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetAllBodiesBelowPhysicsBlendWeight(FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf); // [0x47360d0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void ResumeClothingSimulation();                                                                                         // [0x47360b0] Final|Native|Public|BlueprintCallable 
	// void ResetClothTeleportMode();                                                                                           // [0x4736090] Final|Native|Public|BlueprintCallable 
	// void ResetAnimInstanceDynamics(ETeleportType InTeleportType);                                                            // [0x4736010] Final|Native|Public|BlueprintCallable 
	// void ResetAllowedAnimCurveEvaluation();                                                                                  // [0x4735ff0] Final|Native|Public|BlueprintCallable 
	// void ResetAllBodiesSimulatePhysics();                                                                                    // [0x4735fd0] Final|Native|Public|BlueprintCallable 
	// void PlayAnimation(class UAnimationAsset* NewAnimToPlay, bool bLooping);                                                 // [0x4735f00] Final|Native|Public|BlueprintCallable 
	// void Play(bool bLooping);                                                                                                // [0x4735e70] Final|Native|Public|BlueprintCallable 
	// void OverrideAnimationData(class UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate); // [0x4735cb0] Final|Native|Public|BlueprintCallable 
	// void LinkAnimGraphByTag(FName InTag, class UClass* InClass);                                                             // [0x4735bc0] Final|Native|Public|BlueprintCallable 
	// void LinkAnimClassLayers(class UClass* InClass);                                                                         // [0x4735b30] Final|Native|Public|BlueprintCallable 
	// bool K2_GetClosestPointOnPhysicsAsset(FVector& WorldPosition, FVector& ClosestWorldPosition, FVector& Normal, FName& BoneName, float& Distance); // [0x4735920] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// bool IsPlaying();                                                                                                        // [0x47358f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsClothingSimulationSuspended();                                                                                    // [0x47358c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsBodyGravityEnabled(FName BoneName);                                                                               // [0x4735810] Final|Native|Public|BlueprintCallable 
	// bool HasValidAnimationInstance();                                                                                        // [0x47357e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetTeleportRotationThreshold();                                                                                    // [0x47357b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetTeleportDistanceThreshold();                                                                                    // [0x47357b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool GetStringAttribute_Ref(FName& BoneName, FName& AttributeName, FString& OutValue, ECustomBoneAttributeLookup LookupType); // [0x47355f0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// bool GetStringAttribute(FName& BoneName, FName& AttributeName, FString DefaultValue, FString& OutValue, ECustomBoneAttributeLookup LookupType); // [0x47353b0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// float GetSkeletalMeshScreenSizeCullRatio();                                                                              // [0x4735370] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector GetSkeletalCenterOfMass();                                                                                       // [0x4735330] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// bool GetRenderInKuroXRayPass();                                                                                          // [0x4735300] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UAnimInstance* GetPostProcessInstance();                                                                           // [0x47352d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetPosition();                                                                                                     // [0x47352a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetPlayRate();                                                                                                     // [0x4735270] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetMorphTarget(FName MorphTargetName);                                                                             // [0x47351c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UAnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);                                                   // [0x4735110] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UAnimInstance* GetLinkedAnimLayerInstanceByClass(class UClass* InClass);                                           // [0x4735070] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void GetLinkedAnimGraphInstancesByTag(FName InTag, TArray<UAnimInstance*>& OutLinkedInstances);                          // [0x4734f70] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// class UAnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);                                                       // [0x4734ec0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector4 GetKuroXRayColor();                                                                                             // [0x4734e80] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// bool GetIntegerAttribute_Ref(FName& BoneName, FName& AttributeName, int32_t& OutValue, ECustomBoneAttributeLookup LookupType); // [0x4734cc0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// bool GetIntegerAttribute(FName& BoneName, FName& AttributeName, int32_t DefaultValue, int32_t& OutValue, ECustomBoneAttributeLookup LookupType); // [0x4734af0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// bool GetFloatAttribute_Ref(FName& BoneName, FName& AttributeName, float& OutValue, ECustomBoneAttributeLookup LookupType); // [0x4734930] Final|Native|Public|HasOutParms|BlueprintCallable 
	// bool GetFloatAttribute(FName& BoneName, FName& AttributeName, float DefaultValue, float& OutValue, ECustomBoneAttributeLookup LookupType); // [0x4734760] Final|Native|Public|HasOutParms|BlueprintCallable 
	// bool GetEnableOverrideSkeletalMeshScreenSizeCullRatio();                                                                 // [0x4734730] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool GetDisablePostProcessBlueprint();                                                                                   // [0x4734700] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool GetDisableAnimCurves();                                                                                             // [0x47346d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void GetCurrentJointAngles(FName InBoneName, float& Swing1Angle, float& TwistAngle, float& Swing2Angle);                 // [0x4734520] Final|Native|Public|HasOutParms|BlueprintCallable 
	// float GetClothMaxDistanceScale();                                                                                        // [0x47344c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UClothingSimulationInteractor* GetClothingSimulationInteractor();                                                  // [0x47344f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetBoneMass(FName BoneName, bool bScaleMass);                                                                      // [0x47343c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UAnimInstance* GetAnimInstance();                                                                                  // [0x4734360] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UClass* GetAnimClass();                                                                                            // [0x4734330] Final|Native|Public  
	// TEnumAsByte<EAnimationMode> GetAnimationMode();                                                                          // [0x4734390] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool GetAllowRigidBodyAnimNode();                                                                                        // [0x47342d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool GetAllowedAnimCurveEvaluate();                                                                                      // [0x4734300] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void ForceClothNextUpdateTeleportAndReset();                                                                             // [0x47342b0] Final|Native|Public|BlueprintCallable 
	// void ForceClothNextUpdateTeleport();                                                                                     // [0x4734290] Final|Native|Public|BlueprintCallable 
	// FName FindConstraintBoneName(int32_t ConstraintIndex);                                                                   // [0x47341e0] Final|Native|Public|BlueprintCallable 
	// void ClearMorphTargets();                                                                                                // [0x47341c0] Final|Native|Public|BlueprintCallable 
	// void BreakConstraint(FVector Impulse, FVector HitLocation, FName InBoneName);                                            // [0x4734070] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void BindClothToMasterPoseComponent();                                                                                   // [0x4734050] Final|Native|Public|BlueprintCallable 
	// void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);                                                           // [0x4733f60] Final|Native|Public|BlueprintCallable 
	// void AddImpulseToAllBodiesBelow(FVector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);                    // [0x4733de0] Native|Public|HasDefaults|BlueprintCallable 
	// void AddForceToAllBodiesBelow(FVector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);                      // [0x4733c60] Native|Public|HasDefaults|BlueprintCallable 
	// void AccumulateAllBodiesBelowPhysicsBlendWeight(FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType); // [0x4733b40] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Struct /Script/Engine.AnimNotifyEventReference
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FAnimNotifyEventReference
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	class UObject*                                     NotifySource;                                               // 0x0008   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0010   (0x0008)  MISSED
};

/// Struct /Script/Engine.AnimNotifyQueue
/// Size: 0x0078 (120 bytes) (0x000000 - 0x000078) align 8 pad: 0x0000
struct FAnimNotifyQueue
{ 
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0000   (0x0010)  MISSED
	TArray<FAnimNotifyEventReference>                  AnimNotifies;                                               // 0x0010   (0x0010)  
	SDK_UNDEFINED(80,53) /* TMap<FName, FAnimNotifyArray> */ __um(UnfilteredMontageAnimNotifies);                  // 0x0020   (0x0050)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0070   (0x0008)  MISSED
};

/// Struct /Script/Engine.AnimLinkableElement
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FAnimLinkableElement
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	class UAnimMontage*                                LinkedMontage;                                              // 0x0008   (0x0008)  
	int32_t                                            SlotIndex;                                                  // 0x0010   (0x0004)  
	int32_t                                            SegmentIndex;                                               // 0x0014   (0x0004)  
	TEnumAsByte<EAnimLinkMethod>                       LinkMethod;                                                 // 0x0018   (0x0001)  
	TEnumAsByte<EAnimLinkMethod>                       CachedLinkMethod;                                           // 0x0019   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x001A   (0x0002)  MISSED
	float                                              SegmentBeginTime;                                           // 0x001C   (0x0004)  
	float                                              SegmentLength;                                              // 0x0020   (0x0004)  
	float                                              LinkValue;                                                  // 0x0024   (0x0004)  
	class UAnimSequenceBase*                           LinkedSequence;                                             // 0x0028   (0x0008)  
};

/// Struct /Script/Engine.AnimNotifyEvent
/// Size: 0x0098 (152 bytes) (0x000030 - 0x0000C8) align 8 pad: 0x0000
struct FAnimNotifyEvent : FAnimLinkableElement
{ 
	float                                              DisplayTime;                                                // 0x0030   (0x0004)  
	float                                              TriggerTimeOffset;                                          // 0x0034   (0x0004)  
	float                                              EndTriggerTimeOffset;                                       // 0x0038   (0x0004)  
	float                                              TriggerWeightThreshold;                                     // 0x003C   (0x0004)  
	FName                                              NotifyName;                                                 // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x004C   (0x0004)  MISSED
	class UAnimNotify*                                 Notify;                                                     // 0x0050   (0x0008)  
	class UAnimNotifyState*                            NotifyStateClass;                                           // 0x0058   (0x0008)  
	float                                              Duration;                                                   // 0x0060   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0064   (0x0004)  MISSED
	FAnimLinkableElement                               EndLink;                                                    // 0x0068   (0x0030)  
	bool                                               bConvertedFromBranchingPoint;                               // 0x0098   (0x0001)  
	TEnumAsByte<EMontageNotifyTickType>                MontageTickType;                                            // 0x0099   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x009A   (0x0002)  MISSED
	float                                              NotifyTriggerChance;                                        // 0x009C   (0x0004)  
	TEnumAsByte<ENotifyFilterType>                     NotifyFilterType;                                           // 0x00A0   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x00A1   (0x0003)  MISSED
	int32_t                                            NotifyFilterLOD;                                            // 0x00A4   (0x0004)  
	bool                                               bTriggerOnDedicatedServer;                                  // 0x00A8   (0x0001)  
	bool                                               bTriggerOnFollower;                                         // 0x00A9   (0x0001)  
	bool                                               bForceTriggerOnState;                                       // 0x00AA   (0x0001)  
	unsigned char                                      UnknownData04_6[0x1];                                       // 0x00AB   (0x0001)  MISSED
	int32_t                                            TrackIndex;                                                 // 0x00AC   (0x0004)  
	unsigned char                                      UnknownData05_7[0x18];                                      // 0x00B0   (0x0018)  MISSED
};

/// Class /Script/Engine.AnimInstance
/// Size: 0x0350 (848 bytes) (0x000030 - 0x000380) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class UAnimInstance : public UObject
{ 
public:
	class USkeleton*                                   CurrentSkeleton;                                            // 0x0030   (0x0008)  
	TEnumAsByte<ERootMotionMode>                       RootMotionMode;                                             // 0x0038   (0x0001)  
	bool                                               bUseMultiThreadedAnimationUpdate : 1;                       // 0x0039:0 (0x0001)  
	bool                                               bResultWithUnSafeThreadFunction;                            // 0x003A   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x003B   (0x0001)  MISSED
	FName                                              AnimOrigin;                                                 // 0x003C   (0x000C)  
	bool                                               bUsingCopyPoseFromMesh : 1;                                 // 0x0048:0 (0x0001)  
	unsigned char                                      UnknownBit01 : 1;                                           // 0x0048:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit02 : 1;                                           // 0x0048:2 (0x0001)  MISSED
	bool                                               bReceiveNotifiesFromLinkedInstances : 1;                    // 0x0048:3 (0x0001)  
	bool                                               bPropagateNotifiesToLinkedInstances : 1;                    // 0x0048:4 (0x0001)  
	unsigned char                                      UnknownData03_5[0x7];                                       // 0x0049   (0x0007)  MISSED
	SDK_UNDEFINED(80,54) /* TMap<FName, UAnimSequence*> */ __um(RibbonAnims);                                      // 0x0050   (0x0050)  
	bool                                               bQueueMontageEvents : 1;                                    // 0x00A0:0 (0x0001)  
	unsigned char                                      UnknownData04_5[0x17];                                      // 0x00A1   (0x0017)  MISSED
	bool                                               bEnableAnimCurvesFilter;                                    // 0x00B8   (0x0001)  
	unsigned char                                      UnknownData05_6[0x7];                                       // 0x00B9   (0x0007)  MISSED
	TArray<FName>                                      AnimCurvesToFilter;                                         // 0x00C0   (0x0010)  
	bool                                               bShouldRestoreAnimCurvesToFilter;                           // 0x00D0   (0x0001)  
	bool                                               bEnableAnimCurvesFilterBackup;                              // 0x00D1   (0x0001)  
	unsigned char                                      UnknownData06_6[0x6];                                       // 0x00D2   (0x0006)  MISSED
	TArray<FName>                                      AnimCurvesToFilterBackup;                                   // 0x00D8   (0x0010)  
	FString                                            DebugDestructText;                                          // 0x00E8   (0x0010)  
	SDK_UNDEFINED(16,55) /* FMulticastInlineDelegate */ __um(OnMontageBlendingOut);                                // 0x00F8   (0x0010)  
	SDK_UNDEFINED(16,56) /* FMulticastInlineDelegate */ __um(OnMontageStarted);                                    // 0x0108   (0x0010)  
	SDK_UNDEFINED(16,57) /* FMulticastInlineDelegate */ __um(OnMontageEnded);                                      // 0x0118   (0x0010)  
	SDK_UNDEFINED(16,58) /* FMulticastInlineDelegate */ __um(OnAllMontageInstancesEnded);                          // 0x0128   (0x0010)  
	unsigned char                                      UnknownData07_6[0x88];                                      // 0x0138   (0x0088)  MISSED
	FAnimNotifyQueue                                   NotifyQueue;                                                // 0x01C0   (0x0078)  
	TArray<FAnimNotifyEvent>                           ActiveAnimNotifyState;                                      // 0x0238   (0x0010)  
	unsigned char                                      UnknownData08_7[0x130];                                     // 0x0248   (0x0130)  MISSED
	// void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);                                                        // [0x45d0120] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// void UnlinkAnimClassLayers(class UClass* InClass);                                                                       // [0x45d0090] Final|Native|Public|BlueprintCallable 
	// class APawn* TryGetPawnOwner();                                                                                          // [0xbf7a30] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool SyncAnimStates(class UAnimInstance* Other);                                                                         // [0x45cfff0] Final|Native|Public|BlueprintCallable 
	// void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);                                                        // [0x45cff00] Final|Native|Public|BlueprintCallable 
	// void SnapshotPose(FPoseSnapshot& Snapshot);                                                                              // [0x45cfe30] Native|Public|HasOutParms|BlueprintCallable 
	// void SetStateOrder(TArray<int32_t> Orders);                                                                              // [0x45cfd40] Final|Native|Public|BlueprintCallable 
	// void SetStateMachineNetMode(bool isNetMode);                                                                             // [0x45cfcb0] Final|Native|Public|BlueprintCallable 
	// void SetRootMotionMode(TEnumAsByte<ERootMotionMode> Value);                                                              // [0x45c25e0] Final|Native|Public|BlueprintCallable 
	// void SetReceiveNotifiesFromLinkedInstances(bool bSet);                                                                   // [0x45cfc20] Final|Native|Public|BlueprintCallable 
	// void SetPropagateNotifiesToLinkedInstances(bool bSet);                                                                   // [0x45cfb90] Final|Native|Public|BlueprintCallable 
	// void SetMorphTarget(FName MorphTargetName, float Value);                                                                 // [0x45cfaa0] Final|Native|Public|BlueprintCallable 
	// void SavePoseSnapshot(FName SnapshotName);                                                                               // [0x45cf9f0] Native|Public|BlueprintCallable 
	// void ResetDynamics(ETeleportType InTeleportType);                                                                        // [0x45cf970] Final|Native|Public|BlueprintCallable 
	// void RemoveForceUpdateSlotNameWhenMontageBlend(FName SlotName);                                                          // [0x45cf8d0] Final|Native|Public|BlueprintCallable 
	// class UAnimMontage* PlaySlotAnimationAsDynamicMontage(class UAnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32_t LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt, bool bStopAllMontages); // [0x45cf610] Final|Native|Public|BlueprintCallable 
	// float PlaySlotAnimation(class UAnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32_t LoopCount); // [0x45cf420] Final|Native|Public|BlueprintCallable 
	// void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);                                                     // [0x45cf330] Final|Native|Public|BlueprintCallable 
	// void Montage_Stop(float InBlendOutTime, class UAnimMontage* Montage);                                                    // [0x45cf260] Final|Native|Public|BlueprintCallable 
	// void Montage_SetPosition(class UAnimMontage* Montage, float NewPosition);                                                // [0x45cf190] Final|Native|Public|BlueprintCallable 
	// void Montage_SetPlayRate(class UAnimMontage* Montage, float NewPlayRate);                                                // [0x45cf0c0] Final|Native|Public|BlueprintCallable 
	// void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, class UAnimMontage* Montage);                  // [0x45cef80] Final|Native|Public|BlueprintCallable 
	// void Montage_Resume(class UAnimMontage* Montage);                                                                        // [0x45ceef0] Final|Native|Public|BlueprintCallable 
	// float Montage_Play(class UAnimMontage* MontageToPlay, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages); // [0x45ced40] Final|Native|Public|BlueprintCallable 
	// void Montage_Pause(class UAnimMontage* Montage);                                                                         // [0x45cecb0] Final|Native|Public|BlueprintCallable 
	// void Montage_MuteAllMontage();                                                                                           // [0x45cec90] Final|Native|Public|BlueprintCallable 
	// void Montage_JumpToSectionsEnd(FName SectionName, class UAnimMontage* Montage);                                          // [0x45ceba0] Final|Native|Public|BlueprintCallable 
	// void Montage_JumpToSection(FName SectionName, class UAnimMontage* Montage);                                              // [0x45ceab0] Final|Native|Public|BlueprintCallable 
	// bool Montage_IsPlaying(class UAnimMontage* Montage);                                                                     // [0x45cea10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool Montage_IsActive(class UAnimMontage* Montage);                                                                      // [0x45ce970] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float Montage_GetPosition(class UAnimMontage* Montage);                                                                  // [0x45ce8d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float Montage_GetPlayRate(class UAnimMontage* Montage);                                                                  // [0x45ce830] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool Montage_GetIsStopped(class UAnimMontage* Montage);                                                                  // [0x45ce790] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FName Montage_GetCurrentSection(class UAnimMontage* Montage);                                                            // [0x45ce6e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float Montage_GetBlendTime(class UAnimMontage* Montage);                                                                 // [0x45ce640] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void LockAIResources(bool bLockMovement, bool LockAILogic);                                                              // [0x45ce570] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// void LinkAnimGraphByTag(FName InTag, class UClass* InClass);                                                             // [0x45ce480] Final|Native|Public|BlueprintCallable 
	// void LinkAnimClassLayers(class UClass* InClass);                                                                         // [0x45ce3f0] Final|Native|Public|BlueprintCallable 
	// bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder); // [0x45ce250] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsPlayingSlotAnimation(class UAnimSequenceBase* Asset, FName SlotNodeName);                                         // [0x45ce160] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsKuroForceFlying();                                                                                                // [0x45ce130] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// bool IsAnyMontagePlaying();                                                                                              // [0x45ce100] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);                                                       // [0x45cdff0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool HasKuroRootMotionAnim();                                                                                            // [0x45cdfc0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, float& OutMarkerTime);                                    // [0x45cde70] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// FMarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);                                                     // [0x45cdda0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool GetStateOrder(TArray<int32_t>& Orders);                                                                             // [0x45cdce0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// float GetRelevantAnimTimeRemainingFraction(int32_t MachineIndex, int32_t StateIndex);                                    // [0x45cdc10] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// float GetRelevantAnimTimeRemaining(int32_t MachineIndex, int32_t StateIndex);                                            // [0x45cdb40] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// float GetRelevantAnimTimeFraction(int32_t MachineIndex, int32_t StateIndex);                                             // [0x45cda70] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// float GetRelevantAnimTime(int32_t MachineIndex, int32_t StateIndex);                                                     // [0x45cd9a0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// float GetRelevantAnimLength(int32_t MachineIndex, int32_t StateIndex);                                                   // [0x45cd8d0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// bool GetReceiveNotifiesFromLinkedInstances();                                                                            // [0x45cd8a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool GetPropagateNotifiesToLinkedInstances();                                                                            // [0x45cd870] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class USkeletalMeshComponent* GetOwningComponent();                                                                      // [0x45cd840] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class AActor* GetOwningActor();                                                                                          // [0x45cd810] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void GetOriginStateOder(TArray<int32_t>& Orders);                                                                        // [0x45cd760] Final|Native|Public|HasOutParms|BlueprintCallable 
	// FString GetMainAnimsDebugText();                                                                                         // [0x45cd6e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetMainAnimsCurveValueWithDelta(FName CurveName, float DeltaTime);                                                 // [0x45cd5e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void GetMainAnims(TArray<FName>& Anims, TArray<float>& Weights, TArray<float>& CurrentTimes, TArray<float>& PlayRates);  // [0x45cd400] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void GetLinkedAnimLayerInstancesByGroup(FName InGroup, TArray<UAnimInstance*>& OutLinkedInstances);                      // [0x45cd300] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// class UAnimInstance* GetLinkedAnimLayerInstanceByGroupAndClass(FName InGroup, class UClass* InClass);                    // [0x45cd200] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UAnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);                                                   // [0x45cd150] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UAnimInstance* GetLinkedAnimLayerInstanceByClass(class UClass* InClass);                                           // [0x45cd0b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void GetLinkedAnimGraphInstancesByTag(FName InTag, TArray<UAnimInstance*>& OutLinkedInstances);                          // [0x45ccfb0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// class UAnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);                                                       // [0x45ccf00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetInstanceTransitionTimeElapsedFraction(int32_t MachineIndex, int32_t TransitionIndex);                           // [0x45cce30] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// float GetInstanceTransitionTimeElapsed(int32_t MachineIndex, int32_t TransitionIndex);                                   // [0x45ccd60] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// float GetInstanceTransitionCrossfadeDuration(int32_t MachineIndex, int32_t TransitionIndex);                             // [0x45ccc90] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// float GetInstanceStateWeight(int32_t MachineIndex, int32_t StateIndex);                                                  // [0x45ccbc0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// float GetInstanceMachineWeight(int32_t MachineIndex);                                                                    // [0x45ccb20] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// float GetInstanceCurrentStateElapsedTime(int32_t MachineIndex);                                                          // [0x45cca80] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// float GetInstanceAssetPlayerTimeFromEndFraction(int32_t AssetPlayerIndex);                                               // [0x45cc9e0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// float GetInstanceAssetPlayerTimeFromEnd(int32_t AssetPlayerIndex);                                                       // [0x45cc940] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// float GetInstanceAssetPlayerTimeFraction(int32_t AssetPlayerIndex);                                                      // [0x45cc8a0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// float GetInstanceAssetPlayerTime(int32_t AssetPlayerIndex);                                                              // [0x45cc800] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// float GetInstanceAssetPlayerLength(int32_t AssetPlayerIndex);                                                            // [0x45cc760] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// float GetCurveValue(FName CurveName);                                                                                    // [0x45cc6b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FName GetCurrentStateName(int32_t MachineIndex);                                                                         // [0x45cc600] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// class UAnimMontage* GetCurrentActiveMontage();                                                                           // [0x45cc5d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FString GetAnimsDebugText();                                                                                             // [0x45cc550] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void GetAllCurveNames(TArray<FName>& OutNames);                                                                          // [0x45cc4a0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// void GetActiveCurveNames(EAnimCurveType CurveType, TArray<FName>& OutNames);                                             // [0x45cc3b0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// void ForceSetCurrentMontageBlendTime(float BlendTime, class UAnimMontage* Montage);                                      // [0x45cc2e0] Final|Native|Public|BlueprintCallable 
	// FRootMotionMovementParams ConsumeExtractedRootMotion(float ALPHA);                                                       // [0x45cc210] Final|Native|Public  
	// void ClearMorphTargets();                                                                                                // [0x45cc1f0] Final|Native|Public|BlueprintCallable 
	// void ClearMontage();                                                                                                     // [0x45cc1d0] Final|Native|Public|BlueprintCallable 
	// float CalculateDirection(FVector& Velocity, FRotator& BaseRotation);                                                     // [0x45cc0d0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// void BlueprintUpdateAnimation(float DeltaTimeX);                                                                         // [0x25a7960] Event|Public|BlueprintEvent 
	// void BlueprintPostEvaluateAnimation();                                                                                   // [0x25a7960] Event|Public|BlueprintEvent 
	// void BlueprintLinkedAnimationLayersInitialized();                                                                        // [0x25a7960] Event|Public|BlueprintEvent 
	// void BlueprintInitializeAnimation();                                                                                     // [0x25a7960] Event|Public|BlueprintEvent 
	// void BlueprintBeginPlay();                                                                                               // [0x25a7960] Event|Public|BlueprintEvent 
	// void AddForceUpdateSlotNameWhenMontageBlend(FName SlotName);                                                             // [0x45cc030] Final|Native|Public|BlueprintCallable 
};
#pragma pack(pop)

/// Class /Script/Engine.GameInstance
/// Size: 0x0180 (384 bytes) (0x000030 - 0x0001B0) align 8 pad: 0x0000
class UGameInstance : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x10];                                      // 0x0030   (0x0010)  MISSED
	TArray<class ULocalPlayer*>                        LocalPlayers;                                               // 0x0040   (0x0010)  
	class UOnlineSession*                              OnlineSession;                                              // 0x0050   (0x0008)  
	TArray<class UObject*>                             ReferencedObjects;                                          // 0x0058   (0x0010)  
	unsigned char                                      UnknownData01_6[0x18];                                      // 0x0068   (0x0018)  MISSED
	SDK_UNDEFINED(16,59) /* FMulticastInlineDelegate */ __um(OnPawnControllerChangedDelegates);                    // 0x0080   (0x0010)  
	unsigned char                                      UnknownData02_7[0x120];                                     // 0x0090   (0x0120)  MISSED
	// void ReceiveShutdown();                                                                                                  // [0x25a7960] Event|Public|BlueprintEvent 
	// void ReceiveInit();                                                                                                      // [0x25a7960] Event|Public|BlueprintEvent 
	// void HandleTravelError(TEnumAsByte<ETravelFailure> FailureType);                                                         // [0x25a7960] Event|Public|BlueprintEvent 
	// void HandleNetworkError(TEnumAsByte<ENetworkFailure> FailureType, bool bIsServer);                                       // [0x25a7960] Event|Public|BlueprintEvent 
	// void DebugRemovePlayer(int32_t ControllerId);                                                                            // [0x462a2c0] Exec|Native|Public   
	// void DebugCreatePlayer(int32_t ControllerId);                                                                            // [0x462a230] Exec|Native|Public   
};

/// Class /Script/Engine.GameInstanceSubsystem
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UGameInstanceSubsystem : public USubsystem
{ 
public:
};

/// Class /Script/Engine.CameraShakeBase
/// Size: 0x0080 (128 bytes) (0x000030 - 0x0000B0) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class UCameraShakeBase : public UObject
{ 
public:
	bool                                               bSingleInstance;                                            // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	float                                              ShakeScale;                                                 // 0x0034   (0x0004)  
	class APlayerCameraManager*                        CameraManager;                                              // 0x0038   (0x0008)  
	unsigned char                                      UnknownData01_7[0x68];                                      // 0x0040   (0x0068)  MISSED
};
#pragma pack(pop)

/// Struct /Script/Engine.FOscillator
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FFOscillator
{ 
	float                                              Amplitude;                                                  // 0x0000   (0x0004)  
	float                                              Frequency;                                                  // 0x0004   (0x0004)  
	TEnumAsByte<EInitialOscillatorOffset>              InitialOffset;                                              // 0x0008   (0x0001)  
	EOscillatorWaveform                                Waveform;                                                   // 0x0009   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x000A   (0x0002)  MISSED
};

/// Struct /Script/Engine.ROscillator
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align 4 pad: 0x0000
struct FROscillator
{ 
	FFOscillator                                       Pitch;                                                      // 0x0000   (0x000C)  
	FFOscillator                                       Yaw;                                                        // 0x000C   (0x000C)  
	FFOscillator                                       Roll;                                                       // 0x0018   (0x000C)  
};

/// Struct /Script/Engine.VOscillator
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align 4 pad: 0x0000
struct FVOscillator
{ 
	FFOscillator                                       X;                                                          // 0x0000   (0x000C)  
	FFOscillator                                       Y;                                                          // 0x000C   (0x000C)  
	FFOscillator                                       Z;                                                          // 0x0018   (0x000C)  
};

/// Class /Script/Engine.MatineeCameraShake
/// Size: 0x00E8 (232 bytes) (0x0000A8 - 0x000190) align 16 pad: 0x0000
class UMatineeCameraShake : public UCameraShakeBase
{ 
public:
	float                                              OscillationDuration;                                        // 0x00A8   (0x0004)  
	float                                              OscillationBlendInTime;                                     // 0x00AC   (0x0004)  
	float                                              OscillationBlendOutTime;                                    // 0x00B0   (0x0004)  
	FROscillator                                       RotOscillation;                                             // 0x00B4   (0x0024)  
	FVOscillator                                       LocOscillation;                                             // 0x00D8   (0x0024)  
	FFOscillator                                       FOVOscillation;                                             // 0x00FC   (0x000C)  
	int32_t                                            Priority;                                                   // 0x0108   (0x0004)  
	int32_t                                            Group;                                                      // 0x010C   (0x0004)  
	float                                              AnimPlayRate;                                               // 0x0110   (0x0004)  
	float                                              AnimScale;                                                  // 0x0114   (0x0004)  
	float                                              AnimBlendInTime;                                            // 0x0118   (0x0004)  
	float                                              AnimBlendOutTime;                                           // 0x011C   (0x0004)  
	float                                              RandomAnimSegmentDuration;                                  // 0x0120   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0124   (0x0004)  MISSED
	class UCameraAnim*                                 Anim;                                                       // 0x0128   (0x0008)  
	bool                                               bRandomAnimSegment : 1;                                     // 0x0130:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0131   (0x0003)  MISSED
	float                                              OscillatorTimeRemaining;                                    // 0x0134   (0x0004)  
	class UCameraAnimInst*                             AnimInst;                                                   // 0x0138   (0x0008)  
	unsigned char                                      UnknownData02_7[0x50];                                      // 0x0140   (0x0050)  MISSED
	// void ReceiveStopShake(bool bImmediately);                                                                                // [0x25a7960] Event|Public|BlueprintEvent 
	// void ReceivePlayShake(float Scale);                                                                                      // [0x25a7960] Event|Public|BlueprintEvent 
	// bool ReceiveIsFinished();                                                                                                // [0x45fad20] Native|Event|Public|BlueprintEvent|Const 
	// void BlueprintUpdateCameraShake(float DeltaTime, float ALPHA, FMinimalViewInfo& POV, FMinimalViewInfo& ModifiedPOV);     // [0x25a7960] Event|Public|HasOutParms|BlueprintEvent 
};

/// Class /Script/Engine.NavigationPartitionSystemBase
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UNavigationPartitionSystemBase : public UObject
{ 
public:
};

/// Struct /Script/Engine.StreamingLevelsToConsider
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FStreamingLevelsToConsider
{ 
	TArray<class ULevelStreaming*>                     StreamingLevels;                                            // 0x0000   (0x0010)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0010   (0x0018)  MISSED
};

/// Struct /Script/Engine.LevelCollection
/// Size: 0x0078 (120 bytes) (0x000000 - 0x000078) align 8 pad: 0x0000
struct FLevelCollection
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	class AGameStateBase*                              GameState;                                                  // 0x0008   (0x0008)  
	class UNetDriver*                                  NetDriver;                                                  // 0x0010   (0x0008)  
	class UDemoNetDriver*                              DemoNetDriver;                                              // 0x0018   (0x0008)  
	class ULevel*                                      PersistentLevel;                                            // 0x0020   (0x0008)  
	SDK_UNDEFINED(80,60) /* TSet<ULevel*> */           __um(Levels);                                               // 0x0028   (0x0050)  
};

/// Struct /Script/Engine.WorldPSCPool
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align 8 pad: 0x0000
struct FWorldPSCPool
{ 
	SDK_UNDEFINED(80,61) /* TMap<UParticleSystem*, FPSCPool> */ __um(WorldParticleSystemPools);                    // 0x0000   (0x0050)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0050   (0x0008)  MISSED
};

/// Class /Script/Engine.World
/// Size: 0x07A8 (1960 bytes) (0x000030 - 0x0007D8) align 8 pad: 0x0000
class UWorld : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0030   (0x0008)  MISSED
	class ULevel*                                      PersistentLevel;                                            // 0x0038   (0x0008)  
	class UNetDriver*                                  NetDriver;                                                  // 0x0040   (0x0008)  
	class ULineBatchComponent*                         LineBatcher;                                                // 0x0048   (0x0008)  
	class ULineBatchComponent*                         PersistentLineBatcher;                                      // 0x0050   (0x0008)  
	class ULineBatchComponent*                         ForegroundLineBatcher;                                      // 0x0058   (0x0008)  
	class AGameNetworkManager*                         NetworkManager;                                             // 0x0060   (0x0008)  
	class UPhysicsCollisionHandler*                    PhysicsCollisionHandler;                                    // 0x0068   (0x0008)  
	TArray<class UObject*>                             ExtraReferencedObjects;                                     // 0x0070   (0x0010)  
	TArray<class UObject*>                             PerModuleDataObjects;                                       // 0x0080   (0x0010)  
	TArray<class ULevelStreaming*>                     StreamingLevels;                                            // 0x0090   (0x0010)  
	FStreamingLevelsToConsider                         StreamingLevelsToConsider;                                  // 0x00A0   (0x0028)  
	FString                                            StreamingLevelsPrefix;                                      // 0x00C8   (0x0010)  
	class ULevel*                                      CurrentLevelPendingVisibility;                              // 0x00D8   (0x0008)  
	class ULevel*                                      NextPreferredLevelPendingVisibility;                        // 0x00E0   (0x0008)  
	class ULevel*                                      CurrentLevelPendingInvisibility;                            // 0x00E8   (0x0008)  
	class UDemoNetDriver*                              DemoNetDriver;                                              // 0x00F0   (0x0008)  
	class AParticleEventManager*                       MyParticleEventManager;                                     // 0x00F8   (0x0008)  
	class APhysicsVolume*                              DefaultPhysicsVolume;                                       // 0x0100   (0x0008)  
	unsigned char                                      UnknownData01_6[0x16];                                      // 0x0108   (0x0016)  MISSED
	unsigned char                                      UnknownBit02 : 1;                                           // 0x011E:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit03 : 1;                                           // 0x011E:1 (0x0001)  MISSED
	bool                                               bAreConstraintsDirty : 1;                                   // 0x011E:2 (0x0001)  
	unsigned char                                      UnknownData04_5[0x1];                                       // 0x011F   (0x0001)  MISSED
	class UNavigationSystemBase*                       NavigationSystem;                                           // 0x0120   (0x0008)  
	class UNavigationPartitionSystemBase*              NavigationPartitionSystem;                                  // 0x0128   (0x0008)  
	class URoadNetNavigationSystemBase*                RoadNetNavigationSystem;                                    // 0x0130   (0x0008)  
	class UAudioGlobalSystemBase*                      AudioGlobalSystem;                                          // 0x0138   (0x0008)  
	class AGameModeBase*                               AuthorityGameMode;                                          // 0x0140   (0x0008)  
	class AGameStateBase*                              GameState;                                                  // 0x0148   (0x0008)  
	class UAISystemBase*                               AISystem;                                                   // 0x0150   (0x0008)  
	class UAvoidanceManager*                           AvoidanceManager;                                           // 0x0158   (0x0008)  
	TArray<class ULevel*>                              Levels;                                                     // 0x0160   (0x0010)  
	TArray<FLevelCollection>                           LevelCollections;                                           // 0x0170   (0x0010)  
	unsigned char                                      UnknownData05_6[0x28];                                      // 0x0180   (0x0028)  MISSED
	class UGameInstance*                               OwningGameInstance;                                         // 0x01A8   (0x0008)  
	TArray<class UMaterialParameterCollectionInstance*> ParameterCollectionInstances;                              // 0x01B0   (0x0010)  
	class UCanvas*                                     CanvasForRenderingToTarget;                                 // 0x01C0   (0x0008)  
	class UCanvas*                                     CanvasForDrawMaterialToRenderTarget;                        // 0x01C8   (0x0008)  
	unsigned char                                      UnknownData06_6[0x50];                                      // 0x01D0   (0x0050)  MISSED
	SDK_UNDEFINED(80,62) /* TSet<UActorComponent*> */  __um(ComponentsThatNeedPreEndOfFrameSync);                  // 0x0220   (0x0050)  
	TArray<class UActorComponent*>                     ComponentsThatNeedEndOfFrameUpdate;                         // 0x0270   (0x0010)  
	TArray<class UActorComponent*>                     ComponentsThatNeedEndOfFrameUpdate_OnGameThread;            // 0x0280   (0x0010)  
	unsigned char                                      UnknownData07_6[0x390];                                     // 0x0290   (0x0390)  MISSED
	class UWorldComposition*                           WorldComposition;                                           // 0x0620   (0x0008)  
	unsigned char                                      UnknownData08_6[0x90];                                      // 0x0628   (0x0090)  MISSED
	FWorldPSCPool                                      PSCPool;                                                    // 0x06B8   (0x0058)  
	unsigned char                                      UnknownData09_7[0xC8];                                      // 0x0710   (0x00C8)  MISSED
	// class AWorldSettings* K2_GetWorldSettings();                                                                             // [0x4766820] Final|Native|Public|BlueprintCallable 
	// void HandleTimelineScrubbed();                                                                                           // [0x4766800] Final|Native|Public  
};

/// Class /Script/Engine.RoadNetNavigationSystemBase
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class URoadNetNavigationSystemBase : public UObject
{ 
public:
};

/// Class /Script/Engine.KuroPhysicsSplitSystemBase
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UKuroPhysicsSplitSystemBase : public UWorldSubsystem
{ 
public:
};

/// Class /Script/Engine.BlueprintGeneratedClass
/// Size: 0x00F8 (248 bytes) (0x000240 - 0x000338) align 8 pad: 0x0000
class UBlueprintGeneratedClass : public UClass
{ 
public:
	int32_t                                            NumReplicatedProperties;                                    // 0x0240   (0x0004)  
	bool                                               bHasNativizedParent : 1;                                    // 0x0244:0 (0x0001)  
	bool                                               bHasCookedComponentInstancingData : 1;                      // 0x0244:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0245   (0x0003)  MISSED
	TArray<class UDynamicBlueprintBinding*>            DynamicBindingObjects;                                      // 0x0248   (0x0010)  
	TArray<class UActorComponent*>                     ComponentTemplates;                                         // 0x0258   (0x0010)  
	TArray<class UTimelineTemplate*>                   Timelines;                                                  // 0x0268   (0x0010)  
	TArray<FBPComponentClassOverride>                  ComponentClassOverrides;                                    // 0x0278   (0x0010)  
	class USimpleConstructionScript*                   SimpleConstructionScript;                                   // 0x0288   (0x0008)  
	class UInheritableComponentHandler*                InheritableComponentHandler;                                // 0x0290   (0x0008)  
	class UStructProperty*                             UberGraphFramePointerProperty;                              // 0x0298   (0x0008)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x02A0   (0x0008)  MISSED
	class UFunction*                                   UberGraphFunction;                                          // 0x02A8   (0x0008)  
	SDK_UNDEFINED(80,63) /* TMap<FName, FBlueprintCookedComponentInstancingData> */ __um(CookedComponentInstancingData); // 0x02B0   (0x0050)  
	unsigned char                                      UnknownData02_7[0x38];                                      // 0x0300   (0x0038)  MISSED
};

/// Struct /Script/Engine.BakedStateExitTransition
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FBakedStateExitTransition
{ 
	int32_t                                            CanTakeDelegateIndex;                                       // 0x0000   (0x0004)  
	int32_t                                            CustomResultNodeIndex;                                      // 0x0004   (0x0004)  
	int32_t                                            TransitionIndex;                                            // 0x0008   (0x0004)  
	bool                                               bDesiredTransitionReturnValue;                              // 0x000C   (0x0001)  
	bool                                               bAutomaticRemainingTimeRule;                                // 0x000D   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x000E   (0x0002)  MISSED
	TArray<int32_t>                                    PoseEvaluatorLinks;                                         // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.BakedAnimationState
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 pad: 0x0000
struct FBakedAnimationState
{ 
	bool                                               AllowSimulate;                                              // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FName                                              StateName;                                                  // 0x0004   (0x000C)  
	TArray<FBakedStateExitTransition>                  Transitions;                                                // 0x0010   (0x0010)  
	int32_t                                            StateRootNodeIndex;                                         // 0x0020   (0x0004)  
	int32_t                                            StartNotify;                                                // 0x0024   (0x0004)  
	int32_t                                            EndNotify;                                                  // 0x0028   (0x0004)  
	int32_t                                            FullyBlendedNotify;                                         // 0x002C   (0x0004)  
	bool                                               bIsAConduit;                                                // 0x0030   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	int32_t                                            EntryRuleNodeIndex;                                         // 0x0034   (0x0004)  
	TArray<int32_t>                                    PlayerNodeIndices;                                          // 0x0038   (0x0010)  
	TArray<int32_t>                                    LayerNodeIndices;                                           // 0x0048   (0x0010)  
	bool                                               bAlwaysResetOnEntry;                                        // 0x0058   (0x0001)  
	unsigned char                                      UnknownData02_7[0x7];                                       // 0x0059   (0x0007)  MISSED
};

/// Struct /Script/Engine.AnimationStateBase
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FAnimationStateBase
{ 
	FName                                              StateName;                                                  // 0x0000   (0x000C)  
};

/// Struct /Script/Engine.AnimationTransitionBetweenStates
/// Size: 0x003C (60 bytes) (0x00000C - 0x000048) align 8 pad: 0x0000
struct FAnimationTransitionBetweenStates : FAnimationStateBase
{ 
	bool                                               AllowSimulate;                                              // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	int32_t                                            PreviousState;                                              // 0x0010   (0x0004)  
	int32_t                                            NextState;                                                  // 0x0014   (0x0004)  
	float                                              CrossfadeDuration;                                          // 0x0018   (0x0004)  
	int32_t                                            StartNotify;                                                // 0x001C   (0x0004)  
	int32_t                                            EndNotify;                                                  // 0x0020   (0x0004)  
	int32_t                                            InterruptNotify;                                            // 0x0024   (0x0004)  
	EAlphaBlendOption                                  BlendMode;                                                  // 0x0028   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0029   (0x0007)  MISSED
	class UCurveFloat*                                 CustomCurve;                                                // 0x0030   (0x0008)  
	class UBlendProfile*                               BlendProfile;                                               // 0x0038   (0x0008)  
	TEnumAsByte<ETransitionLogicType>                  LogicType;                                                  // 0x0040   (0x0001)  
	unsigned char                                      UnknownData02_7[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Struct /Script/Engine.BakedAnimationStateMachine
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FBakedAnimationStateMachine
{ 
	FName                                              MachineName;                                                // 0x0000   (0x000C)  
	int32_t                                            InitialState;                                               // 0x000C   (0x0004)  
	TArray<FBakedAnimationState>                       States;                                                     // 0x0010   (0x0010)  
	TArray<FAnimationTransitionBetweenStates>          Transitions;                                                // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.ExposedValueCopyRecord
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FExposedValueCopyRecord
{ 
	int32_t                                            CopyIndex;                                                  // 0x0000   (0x0004)  
	EPostCopyOperation                                 PostCopyOperation;                                          // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Struct /Script/Engine.ExposedValueHandler
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align 8 pad: 0x0000
struct FExposedValueHandler
{ 
	FName                                              BoundFunction;                                              // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	TArray<FExposedValueCopyRecord>                    CopyRecords;                                                // 0x0010   (0x0010)  
	class UFunction*                                   Function;                                                   // 0x0020   (0x0008)  
	unsigned char                                      UnknownData01_7[0x30];                                      // 0x0028   (0x0030)  MISSED
};

/// Class /Script/Engine.AnimBlueprintGeneratedClass
/// Size: 0x0298 (664 bytes) (0x000338 - 0x0005D0) align 8 pad: 0x0000
class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0338   (0x0008)  MISSED
	TArray<FBakedAnimationStateMachine>                BakedStateMachines;                                         // 0x0340   (0x0010)  
	class USkeleton*                                   TargetSkeleton;                                             // 0x0350   (0x0008)  
	TArray<FAnimNotifyEvent>                           AnimNotifies;                                               // 0x0358   (0x0010)  
	SDK_UNDEFINED(80,64) /* TMap<FName, FCachedPoseIndices> */ __um(OrderedSavedPoseIndicesMap);                   // 0x0368   (0x0050)  
	unsigned char                                      UnknownData01_6[0x80];                                      // 0x03B8   (0x0080)  MISSED
	TArray<FName>                                      SyncGroupNames;                                             // 0x0438   (0x0010)  
	TArray<FExposedValueHandler>                       EvaluateGraphExposedInputs;                                 // 0x0448   (0x0010)  
	SDK_UNDEFINED(80,65) /* TMap<FName, FGraphAssetPlayerInformation> */ __um(GraphAssetPlayerInformation);        // 0x0458   (0x0050)  
	SDK_UNDEFINED(80,66) /* TMap<FName, FAnimGraphBlendOptions> */ __um(GraphBlendOptions);                        // 0x04A8   (0x0050)  
	bool                                               bKuroOverrideAnimGraphInChildAnimClass;                     // 0x04F8   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x04F9   (0x0007)  MISSED
	class UAnimBlueprintGeneratedClass*                KuroOverrideAnimGraphParentClass;                           // 0x0500   (0x0008)  
	FPropertyAccessLibrary                             PropertyAccessLibrary;                                      // 0x0508   (0x00C8)  
};

/// Class /Script/Engine.AudioGlobalSystemBase
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UAudioGlobalSystemBase : public UObject
{ 
public:
};

/// Class /Script/Engine.Commandlet
/// Size: 0x0058 (88 bytes) (0x000030 - 0x000088) align 8 pad: 0x0000
class UCommandlet : public UObject
{ 
public:
	FString                                            HelpDescription;                                            // 0x0030   (0x0010)  
	FString                                            HelpUsage;                                                  // 0x0040   (0x0010)  
	FString                                            HelpWebLink;                                                // 0x0050   (0x0010)  
	TArray<FString>                                    HelpParamNames;                                             // 0x0060   (0x0010)  
	TArray<FString>                                    HelpParamDescriptions;                                      // 0x0070   (0x0010)  
	bool                                               IsServer : 1;                                               // 0x0080:0 (0x0001)  
	bool                                               IsClient : 1;                                               // 0x0080:1 (0x0001)  
	bool                                               IsEditor : 1;                                               // 0x0080:2 (0x0001)  
	bool                                               LogToConsole : 1;                                           // 0x0080:3 (0x0001)  
	bool                                               ShowErrorCount : 1;                                         // 0x0080:4 (0x0001)  
	bool                                               ShowProgress : 1;                                           // 0x0080:5 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Class /Script/Engine.SoundEffectSourcePreset
/// Size: 0x0000 (0 bytes) (0x000070 - 0x000070) align 8 pad: 0x0000
class USoundEffectSourcePreset : public USoundEffectPreset
{ 
public:
};

/// Struct /Script/Engine.PerPlatformInt
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FPerPlatformInt
{ 
	int32_t                                            Default;                                                    // 0x0000   (0x0004)  
};

/// Class /Script/Engine.StreamableRenderAsset
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000070) align 8 pad: 0x0000
class UStreamableRenderAsset : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x18];                                      // 0x0030   (0x0018)  MISSED
	double                                             ForceMipLevelsToBeResidentTimestamp;                        // 0x0048   (0x0008)  
	int32_t                                            NumCinematicMipLevels;                                      // 0x0050   (0x0004)  
	FPerPlatformInt                                    KuroRuntimeLODBias;                                         // 0x0054   (0x0004)  
	int32_t                                            StreamingIndex;                                             // 0x0058   (0x0004)  
	int32_t                                            CachedCombinedLODBias;                                      // 0x005C   (0x0004)  
	bool                                               NeverStream : 1;                                            // 0x0060:0 (0x0001)  
	bool                                               bGlobalForceMipLevelsToBeResident : 1;                      // 0x0060:1 (0x0001)  
	bool                                               bHasStreamingUpdatePending : 1;                             // 0x0060:2 (0x0001)  
	bool                                               bForceMiplevelsToBeResident : 1;                            // 0x0060:3 (0x0001)  
	bool                                               bIgnoreStreamingMipBias : 1;                                // 0x0060:4 (0x0001)  
	bool                                               bUseCinematicMipLevels : 1;                                 // 0x0060:5 (0x0001)  
	unsigned char                                      UnknownData01_7[0xF];                                       // 0x0061   (0x000F)  MISSED
};

/// Struct /Script/Engine.MeshUVChannelInfo
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FMeshUVChannelInfo
{ 
	bool                                               bInitialized;                                               // 0x0000   (0x0001)  
	bool                                               bOverrideDensities;                                         // 0x0001   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0002   (0x0002)  MISSED
	float                                              LocalUVDensities[4];                                        // 0x0004   (0x0010)  
};

/// Struct /Script/Engine.SkeletalMaterial
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FSkeletalMaterial
{ 
	class UMaterialInterface*                          MaterialInterface;                                          // 0x0000   (0x0008)  
	FName                                              MaterialSlotName;                                           // 0x0008   (0x000C)  
	FMeshUVChannelInfo                                 UVChannelData;                                              // 0x0014   (0x0014)  
};

/// Struct /Script/Engine.BoneMirrorInfo
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FBoneMirrorInfo
{ 
	int32_t                                            SourceIndex;                                                // 0x0000   (0x0004)  
	TEnumAsByte<EAxis>                                 BoneFlipAxis;                                               // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Struct /Script/Engine.PerPlatformFloat
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FPerPlatformFloat
{ 
	float                                              Default;                                                    // 0x0000   (0x0004)  
};

/// Struct /Script/Engine.SectionExtraMaterialMap
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FSectionExtraMaterialMap
{ 
	TArray<int32_t>                                    MaterialMap;                                                // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.SkeletalMeshBuildSettings
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FSkeletalMeshBuildSettings
{ 
	bool                                               bRecomputeNormals : 1;                                      // 0x0000:0 (0x0001)  
	bool                                               bRecomputeTangents : 1;                                     // 0x0000:1 (0x0001)  
	bool                                               bUseMikkTSpace : 1;                                         // 0x0000:2 (0x0001)  
	bool                                               bComputeWeightedNormals : 1;                                // 0x0000:3 (0x0001)  
	bool                                               bRemoveDegenerates : 1;                                     // 0x0000:4 (0x0001)  
	bool                                               bUseHighPrecisionTangentBasis : 1;                          // 0x0000:5 (0x0001)  
	bool                                               bUseFullPrecisionUVs : 1;                                   // 0x0000:6 (0x0001)  
	bool                                               bBuildAdjacencyBuffer : 1;                                  // 0x0000:7 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              ThresholdPosition;                                          // 0x0004   (0x0004)  
	float                                              ThresholdTangentNormal;                                     // 0x0008   (0x0004)  
	float                                              ThresholdUV;                                                // 0x000C   (0x0004)  
	float                                              MorphThresholdPosition;                                     // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_7[0x14];                                      // 0x0014   (0x0014)  MISSED
};

/// Struct /Script/Engine.SkeletalMeshOptimizationSettings
/// Size: 0x003C (60 bytes) (0x000000 - 0x00003C) align 4 pad: 0x0000
struct FSkeletalMeshOptimizationSettings
{ 
	TEnumAsByte<SkeletalMeshTerminationCriterion>      TerminationCriterion;                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              NumOfTrianglesPercentage;                                   // 0x0004   (0x0004)  
	float                                              NumOfVertPercentage;                                        // 0x0008   (0x0004)  
	uint32_t                                           MaxNumOfTriangles;                                          // 0x000C   (0x0004)  
	uint32_t                                           MaxNumOfVerts;                                              // 0x0010   (0x0004)  
	float                                              MaxDeviationPercentage;                                     // 0x0014   (0x0004)  
	TEnumAsByte<SkeletalMeshOptimizationType>          ReductionMethod;                                            // 0x0018   (0x0001)  
	TEnumAsByte<SkeletalMeshOptimizationImportance>    SilhouetteImportance;                                       // 0x0019   (0x0001)  
	TEnumAsByte<SkeletalMeshOptimizationImportance>    TextureImportance;                                          // 0x001A   (0x0001)  
	TEnumAsByte<SkeletalMeshOptimizationImportance>    ShadingImportance;                                          // 0x001B   (0x0001)  
	TEnumAsByte<SkeletalMeshOptimizationImportance>    SkinningImportance;                                         // 0x001C   (0x0001)  
	bool                                               bRemapMorphTargets : 1;                                     // 0x001D:0 (0x0001)  
	bool                                               bRecalcNormals : 1;                                         // 0x001D:1 (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x001E   (0x0002)  MISSED
	float                                              WeldingThreshold;                                           // 0x0020   (0x0004)  
	float                                              NormalsThreshold;                                           // 0x0024   (0x0004)  
	int32_t                                            MaxBonesPerVertex;                                          // 0x0028   (0x0004)  
	bool                                               bEnforceBoneBoundaries : 1;                                 // 0x002C:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x002D   (0x0003)  MISSED
	float                                              VolumeImportance;                                           // 0x0030   (0x0004)  
	bool                                               bLockEdges : 1;                                             // 0x0034:0 (0x0001)  
	bool                                               bLockColorBounaries : 1;                                    // 0x0034:1 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0035   (0x0003)  MISSED
	int32_t                                            BaseLOD;                                                    // 0x0038   (0x0004)  
};

/// Struct /Script/Engine.BoneReference
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FBoneReference
{ 
	FName                                              BoneName;                                                   // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x000C   (0x0008)  MISSED
};

/// Struct /Script/Engine.SkeletalMeshLODInfo
/// Size: 0x0118 (280 bytes) (0x000000 - 0x000118) align 8 pad: 0x0000
struct FSkeletalMeshLODInfo
{ 
	FPerPlatformFloat                                  ScreenSize;                                                 // 0x0000   (0x0004)  
	float                                              LODHysteresis;                                              // 0x0004   (0x0004)  
	FPerPlatformFloat                                  KuroLODDistance;                                            // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	TArray<int32_t>                                    LODMaterialMap;                                             // 0x0010   (0x0010)  
	TArray<FSectionExtraMaterialMap>                   LODSectionExtraMaterialMap;                                 // 0x0020   (0x0010)  
	FSkeletalMeshBuildSettings                         BuildSettings;                                              // 0x0030   (0x0028)  
	FSkeletalMeshOptimizationSettings                  ReductionSettings;                                          // 0x0058   (0x003C)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0094   (0x0004)  MISSED
	TArray<FBoneReference>                             BonesToRemove;                                              // 0x0098   (0x0010)  
	TArray<FBoneReference>                             BonesToPrioritize;                                          // 0x00A8   (0x0010)  
	float                                              WeightOfPrioritization;                                     // 0x00B8   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x00BC   (0x0004)  MISSED
	class UAnimSequence*                               BakePose;                                                   // 0x00C0   (0x0008)  
	class UAnimSequence*                               BakePoseOverride;                                           // 0x00C8   (0x0008)  
	FString                                            SourceImportFilename;                                       // 0x00D0   (0x0010)  
	ESkinCacheUsage                                    SkinCacheUsage;                                             // 0x00E0   (0x0001)  
	bool                                               bHasBeenSimplified : 1;                                     // 0x00E1:0 (0x0001)  
	bool                                               bHasPerLODVertexColors : 1;                                 // 0x00E1:1 (0x0001)  
	bool                                               bAllowCPUAccess : 1;                                        // 0x00E1:2 (0x0001)  
	bool                                               bSupportUniformlyDistributedSampling : 1;                   // 0x00E1:3 (0x0001)  
	bool                                               bEnableLODRemapping : 1;                                    // 0x00E1:4 (0x0001)  
	unsigned char                                      UnknownData03_5[0x6];                                       // 0x00E2   (0x0006)  MISSED
	SDK_UNDEFINED(48,67) /* TWeakObjectPtr<USkeletalMesh*> */ __um(LODRemappingMesh);                              // 0x00E8   (0x0030)  
};

/// Struct /Script/Engine.PerPlatformBool
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FPerPlatformBool
{ 
	bool                                               Default;                                                    // 0x0000   (0x0001)  
};

/// Struct /Script/Engine.SkeletalMeshSamplingRegionMaterialFilter
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FSkeletalMeshSamplingRegionMaterialFilter
{ 
	FName                                              MaterialName;                                               // 0x0000   (0x000C)  
};

/// Struct /Script/Engine.SkeletalMeshSamplingRegionBoneFilter
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FSkeletalMeshSamplingRegionBoneFilter
{ 
	FName                                              BoneName;                                                   // 0x0000   (0x000C)  
	bool                                               bIncludeOrExclude : 1;                                      // 0x000C:0 (0x0001)  
	bool                                               bApplyToChildren : 1;                                       // 0x000C:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Struct /Script/Engine.SkeletalMeshSamplingRegion
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FSkeletalMeshSamplingRegion
{ 
	FName                                              Name;                                                       // 0x0000   (0x000C)  
	int32_t                                            LODIndex;                                                   // 0x000C   (0x0004)  
	bool                                               bSupportUniformlyDistributedSampling : 1;                   // 0x0010:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0011   (0x0007)  MISSED
	TArray<FSkeletalMeshSamplingRegionMaterialFilter>  MaterialFilters;                                            // 0x0018   (0x0010)  
	TArray<FSkeletalMeshSamplingRegionBoneFilter>      BoneFilters;                                                // 0x0028   (0x0010)  
};

/// Struct /Script/Engine.SkeletalMeshSamplingLODBuiltData
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align 8 pad: 0x0000
struct FSkeletalMeshSamplingLODBuiltData
{ 
	unsigned char                                      UnknownData00_2[0x48];                                      // 0x0000   (0x0048)  MISSED
};

/// Struct /Script/Engine.SkeletalMeshSamplingRegionBuiltData
/// Size: 0x0078 (120 bytes) (0x000000 - 0x000078) align 8 pad: 0x0000
struct FSkeletalMeshSamplingRegionBuiltData
{ 
	unsigned char                                      UnknownData00_2[0x78];                                      // 0x0000   (0x0078)  MISSED
};

/// Struct /Script/Engine.SkeletalMeshSamplingBuiltData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FSkeletalMeshSamplingBuiltData
{ 
	TArray<FSkeletalMeshSamplingLODBuiltData>          WholeMeshBuiltData;                                         // 0x0000   (0x0010)  
	TArray<FSkeletalMeshSamplingRegionBuiltData>       RegionBuiltData;                                            // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.SkeletalMeshSamplingInfo
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FSkeletalMeshSamplingInfo
{ 
	TArray<FSkeletalMeshSamplingRegion>                Regions;                                                    // 0x0000   (0x0010)  
	FSkeletalMeshSamplingBuiltData                     BuiltData;                                                  // 0x0010   (0x0020)  
};

/// Struct /Script/Engine.SkinWeightProfileInfo
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FSkinWeightProfileInfo
{ 
	FName                                              Name;                                                       // 0x0000   (0x000C)  
	FPerPlatformBool                                   DefaultProfile;                                             // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	FPerPlatformInt                                    DefaultProfileFromLODIndex;                                 // 0x0010   (0x0004)  
};

/// Class /Script/Engine.SkeletalMesh
/// Size: 0x03B0 (944 bytes) (0x000070 - 0x000420) align 8 pad: 0x0000
class USkeletalMesh : public UStreamableRenderAsset
{ 
public:
	unsigned char                                      UnknownData00_3[0x20];                                      // 0x0070   (0x0020)  MISSED
	class USkeleton*                                   Skeleton;                                                   // 0x0090   (0x0008)  
	bool                                               bEnableBoneFold;                                            // 0x0098   (0x0001)  
	bool                                               bSphereLight;                                               // 0x0099   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x009A   (0x0006)  MISSED
	TArray<int32_t>                                    LODBoneFoldMapping;                                         // 0x00A0   (0x0010)  
	FBoxSphereBounds                                   ImportedBounds;                                             // 0x00B0   (0x001C)  
	FBoxSphereBounds                                   ExtendedBounds;                                             // 0x00CC   (0x001C)  
	FVector                                            PositiveBoundsExtension;                                    // 0x00E8   (0x000C)  
	FVector                                            NegativeBoundsExtension;                                    // 0x00F4   (0x000C)  
	bool                                               bEnableBoneBounds;                                          // 0x0100   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0101   (0x0003)  MISSED
	float                                              BoneBoundsExtension;                                        // 0x0104   (0x0004)  
	bool                                               bBoneBoundsApplyBounds;                                     // 0x0108   (0x0001)  
	bool                                               bUseSkeletalMeshBounds;                                     // 0x0109   (0x0001)  
	unsigned char                                      UnknownData03_6[0x6];                                       // 0x010A   (0x0006)  MISSED
	class USkeletalMeshBounds*                         SkeletalMeshBounds;                                         // 0x0110   (0x0008)  
	int32_t                                            NumSectionsBeforeCook;                                      // 0x0118   (0x0004)  
	int32_t                                            NumSectionsAfterCooked;                                     // 0x011C   (0x0004)  
	TArray<FSkeletalMaterial>                          Materials;                                                  // 0x0120   (0x0010)  
	TArray<FBoneMirrorInfo>                            SkelMirrorTable;                                            // 0x0130   (0x0010)  
	TArray<FSkeletalMeshLODInfo>                       LODInfo;                                                    // 0x0140   (0x0010)  
	unsigned char                                      UnknownData04_6[0x50];                                      // 0x0150   (0x0050)  MISSED
	FPerPlatformInt                                    MinLOD;                                                     // 0x01A0   (0x0004)  
	FPerPlatformInt                                    MaxLOD;                                                     // 0x01A4   (0x0004)  
	FPerPlatformInt                                    MaxOutlineLod;                                              // 0x01A8   (0x0004)  
	float                                              ScreenSizeCullRatio;                                        // 0x01AC   (0x0004)  
	FPerPlatformBool                                   DisableBelowMinLodStripping;                                // 0x01B0   (0x0001)  
	bool                                               bUseKuroLODDistance;                                        // 0x01B1   (0x0001)  
	TEnumAsByte<EAxis>                                 SkelMirrorAxis;                                             // 0x01B2   (0x0001)  
	TEnumAsByte<EAxis>                                 SkelMirrorFlipAxis;                                         // 0x01B3   (0x0001)  
	bool                                               bUseFullPrecisionUVs : 1;                                   // 0x01B4:0 (0x0001)  
	bool                                               bUseHighPrecisionTangentBasis : 1;                          // 0x01B4:1 (0x0001)  
	bool                                               bHasBeenSimplified : 1;                                     // 0x01B4:2 (0x0001)  
	bool                                               bHasVertexColors : 1;                                       // 0x01B4:3 (0x0001)  
	unsigned char                                      UnknownBit05 : 1;                                           // 0x01B4:4 (0x0001)  MISSED
	bool                                               bEnablePerPolyCollision : 1;                                // 0x01B4:5 (0x0001)  
	unsigned char                                      UnknownData06_5[0x3];                                       // 0x01B5   (0x0003)  MISSED
	class UBodySetup*                                  BodySetup;                                                  // 0x01B8   (0x0008)  
	class UPhysicsAsset*                               PhysicsAsset;                                               // 0x01C0   (0x0008)  
	class UPhysicsAsset*                               ShadowPhysicsAsset;                                         // 0x01C8   (0x0008)  
	TArray<class UKuroMaterialVariationCollection*>    KuroMaterialVariationAssets;                                // 0x01D0   (0x0010)  
	class UKuroMaterialVariationData*                  KuroMaterialVariationData;                                  // 0x01E0   (0x0008)  
	TArray<class UNodeMappingContainer*>               NodeMappingData;                                            // 0x01E8   (0x0010)  
	TArray<class UMorphTarget*>                        MorphTargets;                                               // 0x01F8   (0x0010)  
	unsigned char                                      UnknownData07_6[0x188];                                     // 0x0208   (0x0188)  MISSED
	class UClass*                                      PostProcessAnimBlueprint;                                   // 0x0390   (0x0008)  
	TArray<class UClothingAssetBase*>                  MeshClothingAssets;                                         // 0x0398   (0x0010)  
	FSkeletalMeshSamplingInfo                          SamplingInfo;                                               // 0x03A8   (0x0030)  
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x03D8   (0x0010)  
	TArray<class USkeletalMeshSocket*>                 Sockets;                                                    // 0x03E8   (0x0010)  
	unsigned char                                      UnknownData08_6[0x10];                                      // 0x03F8   (0x0010)  MISSED
	class USkeletalMesh*                               RemappingLODMesh;                                           // 0x0408   (0x0008)  
	TArray<FSkinWeightProfileInfo>                     SkinWeightProfiles;                                         // 0x0410   (0x0010)  
	// bool UseSkeletalMeshBounds();                                                                                            // [0x4731a90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void SetLODSettings(class USkeletalMeshLODSettings* InLODSettings);                                                      // [0xbf3a00] Final|Native|Public|BlueprintCallable 
	// void SetDefaultAnimatingRig(TWeakObjectPtr<UObject*> InAnimatingRig);                                                    // [0x4731980] Final|Native|Public|BlueprintCallable 
	// int32_t NumSockets();                                                                                                    // [0x4731950] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// TArray<FString> K2_GetAllMorphTargetNames();                                                                             // [0x4731870] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsSectionUsingCloth(int32_t InSectionIndex, bool bCheckCorrespondingSections);                                      // [0x47317a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsEnableBoneBounds();                                                                                               // [0xbf2dd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsContainSocket(FString InSocketName);                                                                              // [0x47316a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsBoneBoundsApplyBounds();                                                                                          // [0x4731680] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class USkeletalMeshSocket* GetSocketByIndex(int32_t Index);                                                              // [0x47315e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class USkeletalMeshBounds* GetSkeletalMeshBounds();                                                                      // [0x365f420] Final|Native|Public|BlueprintCallable 
	// int32_t GetRawBoneNum();                                                                                                 // [0x47315c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetNumTexCoords();                                                                                               // [0x4731590] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetNumSections();                                                                                                // [0x4731560] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UNodeMappingContainer* GetNodeMappingContainer(class UBlueprint* SourceAsset);                                     // [0x47314c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FBoxSphereBounds GetImportedBounds();                                                                                    // [0x4731470] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// TWeakObjectPtr<UObject*> GetDefaultAnimatingRig();                                                                       // [0x4731400] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// FBoxSphereBounds GetBounds();                                                                                            // [0x47313b0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// float GetBoneBoundsExtension();                                                                                          // [0x365f5c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class USkeletalMeshSocket* FindSocketInfo(FName InSocketName, FTransform& OutTransform, int32_t& OutBoneIndex, int32_t& OutIndex); // [0x47311e0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// class USkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, int32_t& OutIndex);                                    // [0x47310e0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// class USkeletalMeshSocket* FindSocket(FName InSocketName);                                                               // [0x4731030] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void EnableSkeletalMeshBounds(bool bEnable);                                                                             // [0x4730fa0] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.Kuro2DMapGenerateMatMapDetail
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 pad: 0x0000
struct FKuro2DMapGenerateMatMapDetail
{ 
	TArray<FString>                                    Generate2DMapLandMaterial;                                  // 0x0000   (0x0010)  
	TArray<FString>                                    Generate2DMapBuildingMaterial;                              // 0x0010   (0x0010)  
	TArray<FString>                                    Generate2DMapWaterMaterial;                                 // 0x0020   (0x0010)  
	TArray<FString>                                    Generate2DMapTreeMaterial;                                  // 0x0030   (0x0010)  
	TArray<FString>                                    Generate2DMapSpecil01Material;                              // 0x0040   (0x0010)  
	TArray<FString>                                    Generate2DMapSpecil02Material;                              // 0x0050   (0x0010)  
};

/// Struct /Script/Engine.Kuro2DMapGenerateMatMap
/// Size: 0x00D0 (208 bytes) (0x000000 - 0x0000D0) align 8 pad: 0x0000
struct FKuro2DMapGenerateMatMap
{ 
	FString                                            NameTagRegex;                                               // 0x0000   (0x0010)  
	FKuro2DMapGenerateMatMapDetail                     StaticMeshNameTag;                                          // 0x0010   (0x0060)  
	FKuro2DMapGenerateMatMapDetail                     ParentMaterial;                                             // 0x0070   (0x0060)  
};

/// Struct /Script/Engine.StatColorMapEntry
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FStatColorMapEntry
{ 
	float                                              In;                                                         // 0x0000   (0x0004)  
	FColor                                             Out;                                                        // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.StatColorMapping
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FStatColorMapping
{ 
	FString                                            StatName;                                                   // 0x0000   (0x0010)  
	TArray<FStatColorMapEntry>                         ColorMap;                                                   // 0x0010   (0x0010)  
	bool                                               DisableBlend : 1;                                           // 0x0020:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0021   (0x0007)  MISSED
};

/// Struct /Script/Engine.GameNameRedirect
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FGameNameRedirect
{ 
	FName                                              OldGameName;                                                // 0x0000   (0x000C)  
	FName                                              NewGameName;                                                // 0x000C   (0x000C)  
};

/// Struct /Script/Engine.ClassRedirect
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align 4 pad: 0x0000
struct FClassRedirect
{ 
	FName                                              ObjectName;                                                 // 0x0000   (0x000C)  
	FName                                              OldClassName;                                               // 0x000C   (0x000C)  
	FName                                              NewClassName;                                               // 0x0018   (0x000C)  
	FName                                              OldSubobjName;                                              // 0x0024   (0x000C)  
	FName                                              NewSubobjName;                                              // 0x0030   (0x000C)  
	FName                                              NewClassClass;                                              // 0x003C   (0x000C)  
	FName                                              NewClassPackage;                                            // 0x0048   (0x000C)  
	bool                                               InstanceOnly;                                               // 0x0054   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0055   (0x0003)  MISSED
};

/// Struct /Script/Engine.PluginRedirect
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FPluginRedirect
{ 
	FString                                            OldPluginName;                                              // 0x0000   (0x0010)  
	FString                                            NewPluginName;                                              // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.StructRedirect
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FStructRedirect
{ 
	FName                                              OldStructName;                                              // 0x0000   (0x000C)  
	FName                                              NewStructName;                                              // 0x000C   (0x000C)  
};

/// Struct /Script/Engine.DirectoryPath
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FDirectoryPath
{ 
	FString                                            Path;                                                       // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.DropNoteInfo
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FDropNoteInfo
{ 
	FVector                                            Location;                                                   // 0x0000   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x000C   (0x000C)  
	FString                                            Comment;                                                    // 0x0018   (0x0010)  
};

/// Struct /Script/Engine.NetDriverDefinition
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align 4 pad: 0x0000
struct FNetDriverDefinition
{ 
	FName                                              DefName;                                                    // 0x0000   (0x000C)  
	FName                                              DriverClassName;                                            // 0x000C   (0x000C)  
	FName                                              DriverClassNameFallback;                                    // 0x0018   (0x000C)  
};

/// Class /Script/Engine.Engine
/// Size: 0x11C0 (4544 bytes) (0x000030 - 0x0011F0) align 8 pad: 0x0000
class UEngine : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0030   (0x0008)  MISSED
	class UFont*                                       TinyFont;                                                   // 0x0038   (0x0008)  
	FSoftObjectPath                                    TinyFontName;                                               // 0x0040   (0x0020)  
	class UFont*                                       SmallFont;                                                  // 0x0060   (0x0008)  
	FSoftObjectPath                                    SmallFontName;                                              // 0x0068   (0x0020)  
	class UFont*                                       MediumFont;                                                 // 0x0088   (0x0008)  
	FSoftObjectPath                                    MediumFontName;                                             // 0x0090   (0x0020)  
	class UFont*                                       LargeFont;                                                  // 0x00B0   (0x0008)  
	FSoftObjectPath                                    LargeFontName;                                              // 0x00B8   (0x0020)  
	class UFont*                                       SubtitleFont;                                               // 0x00D8   (0x0008)  
	FSoftObjectPath                                    SubtitleFontName;                                           // 0x00E0   (0x0020)  
	TArray<class UFont*>                               AdditionalFonts;                                            // 0x0100   (0x0010)  
	TArray<FString>                                    AdditionalFontNames;                                        // 0x0110   (0x0010)  
	class UClass*                                      ConsoleClass;                                               // 0x0120   (0x0008)  
	FSoftClassPath                                     ConsoleClassName;                                           // 0x0128   (0x0020)  
	class UClass*                                      GameViewportClientClass;                                    // 0x0148   (0x0008)  
	FSoftClassPath                                     GameViewportClientClassName;                                // 0x0150   (0x0020)  
	class UClass*                                      LocalPlayerClass;                                           // 0x0170   (0x0008)  
	FSoftClassPath                                     LocalPlayerClassName;                                       // 0x0178   (0x0020)  
	class UClass*                                      WorldSettingsClass;                                         // 0x0198   (0x0008)  
	FSoftClassPath                                     WorldSettingsClassName;                                     // 0x01A0   (0x0020)  
	FSoftClassPath                                     NavigationSystemClassName;                                  // 0x01C0   (0x0020)  
	class UClass*                                      NavigationSystemClass;                                      // 0x01E0   (0x0008)  
	FSoftClassPath                                     NavigationSystemConfigClassName;                            // 0x01E8   (0x0020)  
	class UClass*                                      NavigationSystemConfigClass;                                // 0x0208   (0x0008)  
	FSoftClassPath                                     AvoidanceManagerClassName;                                  // 0x0210   (0x0020)  
	class UClass*                                      AvoidanceManagerClass;                                      // 0x0230   (0x0008)  
	FSoftClassPath                                     AIControllerClassName;                                      // 0x0238   (0x0020)  
	class UClass*                                      PhysicsCollisionHandlerClass;                               // 0x0258   (0x0008)  
	FSoftClassPath                                     PhysicsCollisionHandlerClassName;                           // 0x0260   (0x0020)  
	FSoftClassPath                                     GameUserSettingsClassName;                                  // 0x0280   (0x0020)  
	class UClass*                                      GameUserSettingsClass;                                      // 0x02A0   (0x0008)  
	class UGameUserSettings*                           GameUserSettings;                                           // 0x02A8   (0x0008)  
	class UClass*                                      LevelScriptActorClass;                                      // 0x02B0   (0x0008)  
	FSoftClassPath                                     LevelScriptActorClassName;                                  // 0x02B8   (0x0020)  
	FSoftClassPath                                     DefaultBlueprintBaseClassName;                              // 0x02D8   (0x0020)  
	FSoftClassPath                                     GameSingletonClassName;                                     // 0x02F8   (0x0020)  
	class UObject*                                     GameSingleton;                                              // 0x0318   (0x0008)  
	FSoftClassPath                                     AssetManagerClassName;                                      // 0x0320   (0x0020)  
	class UAssetManager*                               AssetManager;                                               // 0x0340   (0x0008)  
	class UTexture2D*                                  DefaultTexture;                                             // 0x0348   (0x0008)  
	FSoftObjectPath                                    DefaultTextureName;                                         // 0x0350   (0x0020)  
	class UTexture*                                    DefaultDiffuseTexture;                                      // 0x0370   (0x0008)  
	FSoftObjectPath                                    DefaultDiffuseTextureName;                                  // 0x0378   (0x0020)  
	class UTexture2D*                                  DefaultBSPVertexTexture;                                    // 0x0398   (0x0008)  
	FSoftObjectPath                                    DefaultBSPVertexTextureName;                                // 0x03A0   (0x0020)  
	class UTexture2D*                                  HighFrequencyNoiseTexture;                                  // 0x03C0   (0x0008)  
	FSoftObjectPath                                    HighFrequencyNoiseTextureName;                              // 0x03C8   (0x0020)  
	class UTexture2D*                                  DefaultBokehTexture;                                        // 0x03E8   (0x0008)  
	FSoftObjectPath                                    DefaultBokehTextureName;                                    // 0x03F0   (0x0020)  
	class UTexture2D*                                  DefaultBloomKernelTexture;                                  // 0x0410   (0x0008)  
	FSoftObjectPath                                    DefaultBloomKernelTextureName;                              // 0x0418   (0x0020)  
	class UMaterial*                                   WireframeMaterial;                                          // 0x0438   (0x0008)  
	FString                                            WireframeMaterialName;                                      // 0x0440   (0x0010)  
	class UMaterial*                                   VisGeoNormalMaterial;                                       // 0x0450   (0x0008)  
	FString                                            VisGeoNormalMaterialName;                                   // 0x0458   (0x0010)  
	class UMaterial*                                   DebugMeshMaterial;                                          // 0x0468   (0x0008)  
	FSoftObjectPath                                    DebugMeshMaterialName;                                      // 0x0470   (0x0020)  
	class UMaterial*                                   EmissiveMeshMaterial;                                       // 0x0490   (0x0008)  
	FSoftObjectPath                                    EmissiveMeshMaterialName;                                   // 0x0498   (0x0020)  
	class UMaterial*                                   LevelColorationLitMaterial;                                 // 0x04B8   (0x0008)  
	FString                                            LevelColorationLitMaterialName;                             // 0x04C0   (0x0010)  
	class UMaterial*                                   LevelColorationUnlitMaterial;                               // 0x04D0   (0x0008)  
	FString                                            LevelColorationUnlitMaterialName;                           // 0x04D8   (0x0010)  
	class UMaterial*                                   LightingTexelDensityMaterial;                               // 0x04E8   (0x0008)  
	FString                                            LightingTexelDensityName;                                   // 0x04F0   (0x0010)  
	class UMaterial*                                   ShadedLevelColorationLitMaterial;                           // 0x0500   (0x0008)  
	FString                                            ShadedLevelColorationLitMaterialName;                       // 0x0508   (0x0010)  
	class UMaterial*                                   ShadedLevelColorationUnlitMaterial;                         // 0x0518   (0x0008)  
	FString                                            ShadedLevelColorationUnlitMaterialName;                     // 0x0520   (0x0010)  
	SDK_UNDEFINED(80,68) /* TMap<FString, UMaterial*> */ __um(Generate2DMapParentMaterialMap);                     // 0x0530   (0x0050)  
	SDK_UNDEFINED(80,69) /* TMap<FString, UMaterial*> */ __um(Generate2DMapNameTagMap);                            // 0x0580   (0x0050)  
	FKuro2DMapGenerateMatMap                           Kuro2DMapGenerateMatMapJson;                                // 0x05D0   (0x00D0)  
	class UMaterial*                                   Generate2DMapLandMaterial;                                  // 0x06A0   (0x0008)  
	FString                                            Generate2DMapLandMaterialName;                              // 0x06A8   (0x0010)  
	class UMaterial*                                   Generate2DMapBuildingMaterial;                              // 0x06B8   (0x0008)  
	FString                                            Generate2DMapBuildingMaterialName;                          // 0x06C0   (0x0010)  
	class UMaterial*                                   Generate2DMapWaterMaterial;                                 // 0x06D0   (0x0008)  
	FString                                            Generate2DMapWaterMaterialName;                             // 0x06D8   (0x0010)  
	class UMaterial*                                   Generate2DMapTreeMaterial;                                  // 0x06E8   (0x0008)  
	FString                                            Generate2DMapTreeMaterialName;                              // 0x06F0   (0x0010)  
	class UMaterial*                                   Generate2DMapNoneMaterial;                                  // 0x0700   (0x0008)  
	FString                                            Generate2DMapNoneMaterialName;                              // 0x0708   (0x0010)  
	class UMaterial*                                   Generate2DMapSpecil01Material;                              // 0x0718   (0x0008)  
	FString                                            Generate2DMapSpecil01MaterialName;                          // 0x0720   (0x0010)  
	class UMaterial*                                   Generate2DMapSpecil02Material;                              // 0x0730   (0x0008)  
	FString                                            Generate2DMapSpecil02MaterialName;                          // 0x0738   (0x0010)  
	class UMaterial*                                   RemoveSurfaceMaterial;                                      // 0x0748   (0x0008)  
	FSoftObjectPath                                    RemoveSurfaceMaterialName;                                  // 0x0750   (0x0020)  
	class UMaterial*                                   VertexColorMaterial;                                        // 0x0770   (0x0008)  
	FString                                            VertexColorMaterialName;                                    // 0x0778   (0x0010)  
	class UMaterial*                                   VertexColorViewModeMaterial_ColorOnly;                      // 0x0788   (0x0008)  
	FString                                            VertexColorViewModeMaterialName_ColorOnly;                  // 0x0790   (0x0010)  
	class UMaterial*                                   VertexColorViewModeMaterial_AlphaAsColor;                   // 0x07A0   (0x0008)  
	FString                                            VertexColorViewModeMaterialName_AlphaAsColor;               // 0x07A8   (0x0010)  
	class UMaterial*                                   VertexColorViewModeMaterial_RedOnly;                        // 0x07B8   (0x0008)  
	FString                                            VertexColorViewModeMaterialName_RedOnly;                    // 0x07C0   (0x0010)  
	class UMaterial*                                   VertexColorViewModeMaterial_GreenOnly;                      // 0x07D0   (0x0008)  
	FString                                            VertexColorViewModeMaterialName_GreenOnly;                  // 0x07D8   (0x0010)  
	class UMaterial*                                   VertexColorViewModeMaterial_BlueOnly;                       // 0x07E8   (0x0008)  
	FString                                            VertexColorViewModeMaterialName_BlueOnly;                   // 0x07F0   (0x0010)  
	class UMaterial*                                   VertexColorViewModeMaterial_FlowArrow;                      // 0x0800   (0x0008)  
	FString                                            VertexColorViewModeMaterialName_FlowArrow;                  // 0x0808   (0x0010)  
	class UMaterial*                                   VertexColorViewModeMaterial_FlowWater;                      // 0x0818   (0x0008)  
	FString                                            VertexColorViewModeMaterialName_FlowWater;                  // 0x0820   (0x0010)  
	FSoftObjectPath                                    DebugEditorMaterialName;                                    // 0x0830   (0x0020)  
	class UMaterial*                                   ConstraintLimitMaterial;                                    // 0x0850   (0x0008)  
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialX;                                   // 0x0858   (0x0008)  
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialXAxis;                               // 0x0860   (0x0008)  
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialY;                                   // 0x0868   (0x0008)  
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialYAxis;                               // 0x0870   (0x0008)  
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialZ;                                   // 0x0878   (0x0008)  
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialZAxis;                               // 0x0880   (0x0008)  
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialPrismatic;                           // 0x0888   (0x0008)  
	class UMaterial*                                   InvalidLightmapSettingsMaterial;                            // 0x0890   (0x0008)  
	FSoftObjectPath                                    InvalidLightmapSettingsMaterialName;                        // 0x0898   (0x0020)  
	class UMaterial*                                   PreviewShadowsIndicatorMaterial;                            // 0x08B8   (0x0008)  
	FSoftObjectPath                                    PreviewShadowsIndicatorMaterialName;                        // 0x08C0   (0x0020)  
	class UMaterial*                                   ArrowMaterial;                                              // 0x08E0   (0x0008)  
	class UMaterialInstanceDynamic*                    ArrowMaterialYellow;                                        // 0x08E8   (0x0008)  
	FSoftObjectPath                                    ArrowMaterialName;                                          // 0x08F0   (0x0020)  
	FLinearColor                                       LightingOnlyBrightness;                                     // 0x0910   (0x0010)  
	TArray<FLinearColor>                               ShaderComplexityColors;                                     // 0x0920   (0x0010)  
	TArray<FLinearColor>                               QuadComplexityColors;                                       // 0x0930   (0x0010)  
	TArray<FLinearColor>                               LightComplexityColors;                                      // 0x0940   (0x0010)  
	TArray<FLinearColor>                               StationaryLightOverlapColors;                               // 0x0950   (0x0010)  
	TArray<FLinearColor>                               LODColorationColors;                                        // 0x0960   (0x0010)  
	TArray<FLinearColor>                               HLODColorationColors;                                       // 0x0970   (0x0010)  
	TArray<FLinearColor>                               StreamingAccuracyColors;                                    // 0x0980   (0x0010)  
	float                                              MaxPixelShaderAdditiveComplexityCount;                      // 0x0990   (0x0004)  
	float                                              MaxES3PixelShaderAdditiveComplexityCount;                   // 0x0994   (0x0004)  
	float                                              MinLightMapDensity;                                         // 0x0998   (0x0004)  
	float                                              IdealLightMapDensity;                                       // 0x099C   (0x0004)  
	float                                              MaxLightMapDensity;                                         // 0x09A0   (0x0004)  
	bool                                               bRenderLightMapDensityGrayscale : 1;                        // 0x09A4:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x09A5   (0x0003)  MISSED
	float                                              RenderLightMapDensityGrayscaleScale;                        // 0x09A8   (0x0004)  
	float                                              RenderLightMapDensityColorScale;                            // 0x09AC   (0x0004)  
	FLinearColor                                       LightMapDensityVertexMappedColor;                           // 0x09B0   (0x0010)  
	FLinearColor                                       LightMapDensitySelectedColor;                               // 0x09C0   (0x0010)  
	TArray<FStatColorMapping>                          StatColorMappings;                                          // 0x09D0   (0x0010)  
	class UPhysicalMaterial*                           DefaultPhysMaterial;                                        // 0x09E0   (0x0008)  
	FSoftObjectPath                                    DefaultPhysMaterialName;                                    // 0x09E8   (0x0020)  
	TArray<FGameNameRedirect>                          ActiveGameNameRedirects;                                    // 0x0A08   (0x0010)  
	TArray<FClassRedirect>                             ActiveClassRedirects;                                       // 0x0A18   (0x0010)  
	TArray<FPluginRedirect>                            ActivePluginRedirects;                                      // 0x0A28   (0x0010)  
	TArray<FStructRedirect>                            ActiveStructRedirects;                                      // 0x0A38   (0x0010)  
	class UTexture2D*                                  KuroSMAAAreaTexture;                                        // 0x0A48   (0x0008)  
	FSoftObjectPath                                    KuroSMAAAreaTextureName;                                    // 0x0A50   (0x0020)  
	class UTexture2D*                                  KuroSMAASearchTexture;                                      // 0x0A70   (0x0008)  
	FSoftObjectPath                                    KuroSMAASearchTextureName;                                  // 0x0A78   (0x0020)  
	class UTexture2D*                                  KuroStylizedRampTexture;                                    // 0x0A98   (0x0008)  
	FSoftObjectPath                                    KuroStylizedRampTextureName;                                // 0x0AA0   (0x0020)  
	class UTexture2D*                                  BlueNoiseTexture;                                           // 0x0AC0   (0x0008)  
	FSoftObjectPath                                    BlueNoiseTextureName;                                       // 0x0AC8   (0x0020)  
	class UTexture2D*                                  MiniFontTexture;                                            // 0x0AE8   (0x0008)  
	FSoftObjectPath                                    MiniFontTextureName;                                        // 0x0AF0   (0x0020)  
	class UTexture*                                    WeightMapPlaceholderTexture;                                // 0x0B10   (0x0008)  
	FSoftObjectPath                                    WeightMapPlaceholderTextureName;                            // 0x0B18   (0x0020)  
	class UTexture2D*                                  LightMapDensityTexture;                                     // 0x0B38   (0x0008)  
	FSoftObjectPath                                    LightMapDensityTextureName;                                 // 0x0B40   (0x0020)  
	class UTexture2D*                                  BlackTexture;                                               // 0x0B60   (0x0008)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x0B68   (0x0008)  MISSED
	class UGameViewportClient*                         GameViewport;                                               // 0x0B70   (0x0008)  
	TArray<FString>                                    DeferredCommands;                                           // 0x0B78   (0x0010)  
	float                                              NearClipPlane;                                              // 0x0B88   (0x0004)  
	bool                                               bSubtitlesEnabled : 1;                                      // 0x0B8C:0 (0x0001)  
	bool                                               bSubtitlesForcedOff : 1;                                    // 0x0B8C:1 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0B8D   (0x0003)  MISSED
	int32_t                                            MaximumLoopIterationCount;                                  // 0x0B90   (0x0004)  
	bool                                               bCanBlueprintsTickByDefault : 1;                            // 0x0B94:0 (0x0001)  
	bool                                               bOptimizeAnimBlueprintMemberVariableAccess : 1;             // 0x0B94:1 (0x0001)  
	bool                                               bAllowMultiThreadedAnimationUpdate : 1;                     // 0x0B94:2 (0x0001)  
	bool                                               bEnableEditorPSysRealtimeLOD : 1;                           // 0x0B94:3 (0x0001)  
	unsigned char                                      UnknownBit04 : 1;                                           // 0x0B94:4 (0x0001)  MISSED
	bool                                               bSmoothFrameRate : 1;                                       // 0x0B94:5 (0x0001)  
	bool                                               bUseFixedFrameRate : 1;                                     // 0x0B94:6 (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x0B95   (0x0003)  MISSED
	float                                              FixedFrameRate;                                             // 0x0B98   (0x0004)  
	FFloatRange                                        SmoothedFrameRateRange;                                     // 0x0B9C   (0x0010)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x0BAC   (0x0004)  MISSED
	class UEngineCustomTimeStep*                       CustomTimeStep;                                             // 0x0BB0   (0x0008)  
	unsigned char                                      UnknownData07_6[0x20];                                      // 0x0BB8   (0x0020)  MISSED
	FSoftClassPath                                     CustomTimeStepClassName;                                    // 0x0BD8   (0x0020)  
	class UTimecodeProvider*                           TimecodeProvider;                                           // 0x0BF8   (0x0008)  
	unsigned char                                      UnknownData08_6[0x20];                                      // 0x0C00   (0x0020)  MISSED
	FSoftClassPath                                     TimecodeProviderClassName;                                  // 0x0C20   (0x0020)  
	bool                                               bGenerateDefaultTimecode;                                   // 0x0C40   (0x0001)  
	unsigned char                                      UnknownData09_6[0x3];                                       // 0x0C41   (0x0003)  MISSED
	FFrameRate                                         GenerateDefaultTimecodeFrameRate;                           // 0x0C44   (0x0008)  
	float                                              GenerateDefaultTimecodeFrameDelay;                          // 0x0C4C   (0x0004)  
	bool                                               bCheckForMultiplePawnsSpawnedInAFrame : 1;                  // 0x0C50:0 (0x0001)  
	unsigned char                                      UnknownData10_5[0x3];                                       // 0x0C51   (0x0003)  MISSED
	int32_t                                            NumPawnsAllowedToBeSpawnedInAFrame;                         // 0x0C54   (0x0004)  
	bool                                               bShouldGenerateLowQualityLightmaps : 1;                     // 0x0C58:0 (0x0001)  
	unsigned char                                      UnknownData11_5[0x3];                                       // 0x0C59   (0x0003)  MISSED
	FColor                                             C_WorldBox;                                                 // 0x0C5C   (0x0004)  
	FColor                                             C_BrushWire;                                                // 0x0C60   (0x0004)  
	FColor                                             C_AddWire;                                                  // 0x0C64   (0x0004)  
	FColor                                             C_SubtractWire;                                             // 0x0C68   (0x0004)  
	FColor                                             C_SemiSolidWire;                                            // 0x0C6C   (0x0004)  
	FColor                                             C_NonSolidWire;                                             // 0x0C70   (0x0004)  
	FColor                                             C_WireBackground;                                           // 0x0C74   (0x0004)  
	FColor                                             C_ScaleBoxHi;                                               // 0x0C78   (0x0004)  
	FColor                                             C_VolumeCollision;                                          // 0x0C7C   (0x0004)  
	FColor                                             C_BSPCollision;                                             // 0x0C80   (0x0004)  
	FColor                                             C_OrthoBackground;                                          // 0x0C84   (0x0004)  
	FColor                                             C_Volume;                                                   // 0x0C88   (0x0004)  
	FColor                                             C_BrushShape;                                               // 0x0C8C   (0x0004)  
	float                                              StreamingDistanceFactor;                                    // 0x0C90   (0x0004)  
	unsigned char                                      UnknownData12_6[0x4];                                       // 0x0C94   (0x0004)  MISSED
	FDirectoryPath                                     GameScreenshotSaveDirectory;                                // 0x0C98   (0x0010)  
	ETransitionType                                    TransitionType;                                             // 0x0CA8   (0x0001)  
	unsigned char                                      UnknownData13_6[0x7];                                       // 0x0CA9   (0x0007)  MISSED
	FString                                            TransitionDescription;                                      // 0x0CB0   (0x0010)  
	FString                                            TransitionGameMode;                                         // 0x0CC0   (0x0010)  
	bool                                               bAllowMatureLanguage : 1;                                   // 0x0CD0:0 (0x0001)  
	unsigned char                                      UnknownData14_5[0x3];                                       // 0x0CD1   (0x0003)  MISSED
	float                                              CameraRotationThreshold;                                    // 0x0CD4   (0x0004)  
	float                                              CameraTranslationThreshold;                                 // 0x0CD8   (0x0004)  
	float                                              PrimitiveProbablyVisibleTime;                               // 0x0CDC   (0x0004)  
	float                                              MaxOcclusionPixelsFraction;                                 // 0x0CE0   (0x0004)  
	bool                                               bPauseOnLossOfFocus : 1;                                    // 0x0CE4:0 (0x0001)  
	unsigned char                                      UnknownData15_5[0x3];                                       // 0x0CE5   (0x0003)  MISSED
	int32_t                                            MaxParticleResize;                                          // 0x0CE8   (0x0004)  
	int32_t                                            MaxParticleResizeWarn;                                      // 0x0CEC   (0x0004)  
	TArray<FDropNoteInfo>                              PendingDroppedNotes;                                        // 0x0CF0   (0x0010)  
	float                                              NetClientTicksPerSecond;                                    // 0x0D00   (0x0004)  
	float                                              DisplayGamma;                                               // 0x0D04   (0x0004)  
	float                                              MinDesiredFrameRate;                                        // 0x0D08   (0x0004)  
	FLinearColor                                       DefaultSelectedMaterialColor;                               // 0x0D0C   (0x0010)  
	FLinearColor                                       SelectedMaterialColor;                                      // 0x0D1C   (0x0010)  
	FLinearColor                                       SelectionOutlineColor;                                      // 0x0D2C   (0x0010)  
	FLinearColor                                       SubduedSelectionOutlineColor;                               // 0x0D3C   (0x0010)  
	FLinearColor                                       SelectedMaterialColorOverride;                              // 0x0D4C   (0x0010)  
	bool                                               bIsOverridingSelectedColor;                                 // 0x0D5C   (0x0001)  
	unsigned char                                      UnknownData16_6[0x3];                                       // 0x0D5D   (0x0003)  MISSED
	bool                                               bEnableOnScreenDebugMessages : 1;                           // 0x0D60:0 (0x0001)  
	bool                                               bEnableOnScreenDebugMessagesDisplay : 1;                    // 0x0D60:1 (0x0001)  
	bool                                               bSuppressMapWarnings : 1;                                   // 0x0D60:2 (0x0001)  
	bool                                               bDisableAILogging : 1;                                      // 0x0D60:3 (0x0001)  
	unsigned char                                      UnknownData17_5[0x3];                                       // 0x0D61   (0x0003)  MISSED
	uint32_t                                           bEnableVisualLogRecordingOnStart;                           // 0x0D64   (0x0004)  
	int32_t                                            ScreenSaverInhibitorSemaphore;                              // 0x0D68   (0x0004)  
	bool                                               bLockReadOnlyLevels : 1;                                    // 0x0D6C:0 (0x0001)  
	unsigned char                                      UnknownData18_5[0x3];                                       // 0x0D6D   (0x0003)  MISSED
	FString                                            ParticleEventManagerClassPath;                              // 0x0D70   (0x0010)  
	float                                              SelectionHighlightIntensity;                                // 0x0D80   (0x0004)  
	float                                              BSPSelectionHighlightIntensity;                             // 0x0D84   (0x0004)  
	float                                              SelectionHighlightIntensityBillboards;                      // 0x0D88   (0x0004)  
	unsigned char                                      UnknownData19_6[0x26C];                                     // 0x0D8C   (0x026C)  MISSED
	TArray<FNetDriverDefinition>                       NetDriverDefinitions;                                       // 0x0FF8   (0x0010)  
	TArray<FString>                                    ServerActors;                                               // 0x1008   (0x0010)  
	TArray<FString>                                    RuntimeServerActors;                                        // 0x1018   (0x0010)  
	float                                              NetErrorLogInterval;                                        // 0x1028   (0x0004)  
	bool                                               bStartedLoadMapMovie : 1;                                   // 0x102C:0 (0x0001)  
	unsigned char                                      UnknownData20_5[0x1B];                                      // 0x102D   (0x001B)  MISSED
	int32_t                                            NextWorldContextHandle;                                     // 0x1048   (0x0004)  
	unsigned char                                      UnknownData21_7[0x1A4];                                     // 0x104C   (0x01A4)  MISSED
};

/// Class /Script/Engine.Player
/// Size: 0x0020 (32 bytes) (0x000030 - 0x000050) align 8 pad: 0x0000
class UPlayer : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0030   (0x0008)  MISSED
	class APlayerController*                           PlayerController;                                           // 0x0038   (0x0008)  
	int32_t                                            CurrentNetSpeed;                                            // 0x0040   (0x0004)  
	int32_t                                            ConfiguredInternetSpeed;                                    // 0x0044   (0x0004)  
	int32_t                                            ConfiguredLanSpeed;                                         // 0x0048   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Class /Script/Engine.LocalPlayer
/// Size: 0x0218 (536 bytes) (0x000050 - 0x000268) align 8 pad: 0x0000
class ULocalPlayer : public UPlayer
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0050   (0x0028)  MISSED
	class UGameViewportClient*                         ViewportClient;                                             // 0x0078   (0x0008)  
	unsigned char                                      UnknownData01_6[0x1C];                                      // 0x0080   (0x001C)  MISSED
	TEnumAsByte<EAspectRatioAxisConstraint>            AspectRatioAxisConstraint;                                  // 0x009C   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x009D   (0x0003)  MISSED
	class UClass*                                      PendingLevelPlayerControllerClass;                          // 0x00A0   (0x0008)  
	bool                                               bSentSplitJoin : 1;                                         // 0x00A8:0 (0x0001)  
	unsigned char                                      UnknownData03_5[0x17];                                      // 0x00A9   (0x0017)  MISSED
	int32_t                                            ControllerId;                                               // 0x00C0   (0x0004)  
	unsigned char                                      UnknownData04_7[0x1A4];                                     // 0x00C4   (0x01A4)  MISSED
};

/// Class /Script/Engine.LocalPlayerSubsystem
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class ULocalPlayerSubsystem : public USubsystem
{ 
public:
};

/// Class /Script/Engine.GameStateBase
/// Size: 0x0050 (80 bytes) (0x0002A8 - 0x0002F8) align 8 pad: 0x0000
class AGameStateBase : public AInfo
{ 
public:
	class UClass*                                      GameModeClass;                                              // 0x02A8   (0x0008)  
	class AGameModeBase*                               AuthorityGameMode;                                          // 0x02B0   (0x0008)  
	class UClass*                                      SpectatorClass;                                             // 0x02B8   (0x0008)  
	TArray<class APlayerState*>                        PlayerArray;                                                // 0x02C0   (0x0010)  
	bool                                               bReplicatedHasBegunPlay;                                    // 0x02D0   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x02D1   (0x0003)  MISSED
	float                                              ReplicatedWorldTimeSeconds;                                 // 0x02D4   (0x0004)  
	float                                              ServerWorldTimeSecondsDelta;                                // 0x02D8   (0x0004)  
	float                                              ServerWorldTimeSecondsUpdateFrequency;                      // 0x02DC   (0x0004)  
	unsigned char                                      UnknownData01_7[0x18];                                      // 0x02E0   (0x0018)  MISSED
	// void OnRep_SpectatorClass();                                                                                             // [0x460c340] Native|Protected     
	// void OnRep_ReplicatedWorldTimeSeconds();                                                                                 // [0x462b190] Native|Protected     
	// void OnRep_ReplicatedHasBegunPlay();                                                                                     // [0x463b990] Native|Protected     
	// void OnRep_GameModeClass();                                                                                              // [0x460c320] Native|Protected     
	// bool HasMatchStarted();                                                                                                  // [0x1f806b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool HasMatchEnded();                                                                                                    // [0x463b760] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool HasBegunPlay();                                                                                                     // [0x463b730] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetServerWorldTimeSeconds();                                                                                       // [0x463b600] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetPlayerStartTime(class AController* Controller);                                                                 // [0x463b110] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetPlayerRespawnDelay(class AController* Controller);                                                              // [0x463b070] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.GameState
/// Size: 0x0028 (40 bytes) (0x0002F8 - 0x000320) align 8 pad: 0x0000
class AGameState : public AGameStateBase
{ 
public:
	FName                                              MatchState;                                                 // 0x02F8   (0x000C)  
	FName                                              PreviousMatchState;                                         // 0x0304   (0x000C)  
	int32_t                                            ElapsedTime;                                                // 0x0310   (0x0004)  
	unsigned char                                      UnknownData00_7[0xC];                                       // 0x0314   (0x000C)  MISSED
	// void OnRep_MatchState();                                                                                                 // [0x463b970] Native|Public        
	// void OnRep_ElapsedTime();                                                                                                // [0x462a9c0] Native|Public        
};

/// Class /Script/Engine.ApplicationLifecycleComponent
/// Size: 0x0090 (144 bytes) (0x0000C0 - 0x000150) align 8 pad: 0x0000
class UApplicationLifecycleComponent : public UActorComponent
{ 
public:
	SDK_UNDEFINED(16,70) /* FMulticastInlineDelegate */ __um(ApplicationWillDeactivateDelegate);                   // 0x00C0   (0x0010)  
	SDK_UNDEFINED(16,71) /* FMulticastInlineDelegate */ __um(ApplicationHasReactivatedDelegate);                   // 0x00D0   (0x0010)  
	SDK_UNDEFINED(16,72) /* FMulticastInlineDelegate */ __um(ApplicationWillEnterBackgroundDelegate);              // 0x00E0   (0x0010)  
	SDK_UNDEFINED(16,73) /* FMulticastInlineDelegate */ __um(ApplicationHasEnteredForegroundDelegate);             // 0x00F0   (0x0010)  
	SDK_UNDEFINED(16,74) /* FMulticastInlineDelegate */ __um(ApplicationWillTerminateDelegate);                    // 0x0100   (0x0010)  
	SDK_UNDEFINED(16,75) /* FMulticastInlineDelegate */ __um(ApplicationShouldUnloadResourcesDelegate);            // 0x0110   (0x0010)  
	SDK_UNDEFINED(16,76) /* FMulticastInlineDelegate */ __um(ApplicationReceivedStartupArgumentsDelegate);         // 0x0120   (0x0010)  
	SDK_UNDEFINED(16,77) /* FMulticastInlineDelegate */ __um(OnTemperatureChangeDelegate);                         // 0x0130   (0x0010)  
	SDK_UNDEFINED(16,78) /* FMulticastInlineDelegate */ __um(OnLowPowerModeDelegate);                              // 0x0140   (0x0010)  
};

/// Class /Script/Engine.SkyLight
/// Size: 0x0010 (16 bytes) (0x0002A8 - 0x0002B8) align 8 pad: 0x0000
class ASkyLight : public AInfo
{ 
public:
	class USkyLightComponent*                          LightComponent;                                             // 0x02A8   (0x0008)  
	bool                                               bEnabled : 1;                                               // 0x02B0:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x02B1   (0x0007)  MISSED
	// void OnRep_bEnabled();                                                                                                   // [0x46255d0] Native|Public        
};

/// Class /Script/Engine.Texture
/// Size: 0x0080 (128 bytes) (0x000070 - 0x0000F0) align 8 pad: 0x0000
class UTexture : public UStreamableRenderAsset
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0070   (0x0008)  MISSED
	FGuid                                              LightingGuid;                                               // 0x0078   (0x0010)  
	int32_t                                            LODBias;                                                    // 0x0088   (0x0004)  
	TEnumAsByte<TextureCompressionSettings>            CompressionSettings;                                        // 0x008C   (0x0001)  
	TEnumAsByte<TextureFilter>                         Filter;                                                     // 0x008D   (0x0001)  
	bool                                               IsCreateAsync;                                              // 0x008E   (0x0001)  
	bool                                               IsForceKeepMipsData;                                        // 0x008F   (0x0001)  
	ETextureMipLoadOptions                             MipLoadOptions;                                             // 0x0090   (0x0001)  
	TEnumAsByte<TextureGroup>                          LODGroup;                                                   // 0x0091   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0092   (0x0002)  MISSED
	FPerPlatformFloat                                  DownScale;                                                  // 0x0094   (0x0004)  
	ETextureDownscaleOptions                           DownscaleOptions;                                           // 0x0098   (0x0001)  
	bool                                               SRGB : 1;                                                   // 0x0099:0 (0x0001)  
	bool                                               bNoTiling : 1;                                              // 0x0099:1 (0x0001)  
	bool                                               VirtualTextureStreaming : 1;                                // 0x0099:2 (0x0001)  
	bool                                               CompressionYCoCg : 1;                                       // 0x0099:3 (0x0001)  
	bool                                               bNotCreateResource : 1;                                     // 0x0099:4 (0x0001)  
	bool                                               bNotOfflineProcessed : 1;                                   // 0x0099:5 (0x0001)  
	bool                                               bAsyncResourceReleaseHasBeenStarted : 1;                    // 0x0099:6 (0x0001)  
	unsigned char                                      UnknownData02_5[0x6];                                       // 0x009A   (0x0006)  MISSED
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x00A0   (0x0010)  
	unsigned char                                      UnknownData03_7[0x40];                                      // 0x00B0   (0x0040)  MISSED
};

/// Class /Script/Engine.TextureCube
/// Size: 0x0058 (88 bytes) (0x0000F0 - 0x000148) align 8 pad: 0x0000
class UTextureCube : public UTexture
{ 
public:
	unsigned char                                      UnknownData00_1[0x58];                                      // 0x00F0   (0x0058)  MISSED
};

/// Class /Script/Engine.HierarchicalInstancedStaticMeshComponent
/// Size: 0x0108 (264 bytes) (0x000638 - 0x000740) align 16 pad: 0x0000
class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
{ 
public:
	unsigned char                                      UnknownData00_3[0x10];                                      // 0x0638   (0x0010)  MISSED
	TArray<int32_t>                                    SortedInstances;                                            // 0x0648   (0x0010)  
	int32_t                                            NumBuiltInstances;                                          // 0x0658   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x065C   (0x0004)  MISSED
	FBox                                               BuiltInstanceBounds;                                        // 0x0660   (0x001C)  
	FBox                                               UnbuiltInstanceBounds;                                      // 0x067C   (0x001C)  
	TArray<FBox>                                       UnbuiltInstanceBoundsList;                                  // 0x0698   (0x0010)  
	int32_t                                            BuiltBranchingFactor;                                       // 0x06A8   (0x0004)  
	int32_t                                            BuiltMinSplitVertices;                                      // 0x06AC   (0x0004)  
	bool                                               bEnableDensityScaling : 1;                                  // 0x06B0:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x06B1   (0x0007)  MISSED
	int32_t                                            OcclusionLayerNumNodes;                                     // 0x06B8   (0x0004)  
	FBoxSphereBounds                                   CacheMeshExtendedBounds;                                    // 0x06BC   (0x001C)  
	bool                                               bDisableCollision;                                          // 0x06D8   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x06D9   (0x0003)  MISSED
	int32_t                                            InstanceCountToRender;                                      // 0x06DC   (0x0004)  
	bool                                               bUseKuroFoliageSplitFactor;                                 // 0x06E0   (0x0001)  
	bool                                               bUseKuroMinVertsToSplitNode;                                // 0x06E1   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x06E2   (0x0002)  MISSED
	int32_t                                            KuroFoliageSplitFactor;                                     // 0x06E4   (0x0004)  
	int32_t                                            KuroMinVertsToSplitNde;                                     // 0x06E8   (0x0004)  
	unsigned char                                      UnknownData05_7[0x54];                                      // 0x06EC   (0x0054)  MISSED
	// void SetKuroFoliageSplitParam(bool bUseFoliageSPlitFactor, int32_t foliageSplitFactor, bool bUseMinVertsSplitNode, int32_t minVertsSplitNode); // [0x463e5e0] Final|Native|Public|BlueprintCallable 
	// bool RemoveInstances(TArray<int32_t>& InstancesToRemove);                                                                // [0x463e490] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.PartitionActor
/// Size: 0x0000 (0 bytes) (0x0002A8 - 0x0002A8) align 8 pad: 0x0000
class APartitionActor : public AActor
{ 
public:
};

/// Class /Script/Engine.ISMPartitionActor
/// Size: 0x0000 (0 bytes) (0x0002A8 - 0x0002A8) align 8 pad: 0x0000
class AISMPartitionActor : public APartitionActor
{ 
public:
};

/// Class /Script/Engine.StaticMeshActor
/// Size: 0x0010 (16 bytes) (0x0002A8 - 0x0002B8) align 8 pad: 0x0000
class AStaticMeshActor : public AActor
{ 
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                        // 0x02A8   (0x0008)  
	bool                                               bStaticMeshReplicateMovement;                               // 0x02B0   (0x0001)  
	ENavDataGatheringMode                              NavigationGeometryGatheringMode;                            // 0x02B1   (0x0001)  
	bool                                               bHideLogicallyOnBeginPlay : 1;                              // 0x02B2:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x5];                                       // 0x02B3   (0x0005)  MISSED
	// void SetMobility(TEnumAsByte<EComponentMobility> InMobility);                                                            // [0x4759b10] Final|Native|Public|BlueprintCallable 
	// void SetLogicallyShow(TEnumAsByte<ECollisionEnabled> Type);                                                              // [0x4759a90] Final|Native|Public|BlueprintCallable 
	// void SetLogicallyHidden();                                                                                               // [0x4759a70] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.LightmassMaterialInterfaceSettings
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FLightmassMaterialInterfaceSettings
{ 
	float                                              EmissiveBoost;                                              // 0x0000   (0x0004)  
	float                                              DiffuseBoost;                                               // 0x0004   (0x0004)  
	float                                              ExportResolutionScale;                                      // 0x0008   (0x0004)  
	bool                                               bCastShadowAsMasked : 1;                                    // 0x000C:0 (0x0001)  
	bool                                               bOverrideCastShadowAsMasked : 1;                            // 0x000C:1 (0x0001)  
	bool                                               bOverrideEmissiveBoost : 1;                                 // 0x000C:2 (0x0001)  
	bool                                               bOverrideDiffuseBoost : 1;                                  // 0x000C:3 (0x0001)  
	bool                                               bOverrideExportResolutionScale : 1;                         // 0x000C:4 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Struct /Script/Engine.MaterialTextureInfo
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FMaterialTextureInfo
{ 
	float                                              SamplingScale;                                              // 0x0000   (0x0004)  
	int32_t                                            UVChannelIndex;                                             // 0x0004   (0x0004)  
	FName                                              TextureName;                                                // 0x0008   (0x000C)  
};

/// Class /Script/Engine.MaterialInterface
/// Size: 0x0060 (96 bytes) (0x000030 - 0x000090) align 8 pad: 0x0000
class UMaterialInterface : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x10];                                      // 0x0030   (0x0010)  MISSED
	class USubsurfaceProfile*                          SubsurfaceProfile;                                          // 0x0040   (0x0008)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x0048   (0x0010)  MISSED
	FLightmassMaterialInterfaceSettings                LightmassSettings;                                          // 0x0058   (0x0010)  
	TArray<FMaterialTextureInfo>                       TextureStreamingData;                                       // 0x0068   (0x0010)  
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0078   (0x0010)  
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x0088   (0x0008)  MISSED
	// void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int32_t CinematicTextureGroups, bool bFastResponse); // [0x46da330] RequiredAPI|Native|Public|BlueprintCallable 
	// class UPhysicalMaterialMask* GetPhysicalMaterialMask();                                                                  // [0x46d9ab0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UPhysicalMaterial* GetPhysicalMaterialFromMap(int32_t Index);                                                      // [0x46d9a10] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UPhysicalMaterial* GetPhysicalMaterial();                                                                          // [0x3bad8c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FMaterialParameterInfo GetParameterInfo(TEnumAsByte<EMaterialParameterAssociation> Association, FName ParameterName, class UMaterialFunctionInterface* LayerFunction); // [0x46d98b0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UMaterial* GetBaseMaterial();                                                                                      // [0x46d9880] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.MaterialParameterInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FMaterialParameterInfo
{ 
	FName                                              Name;                                                       // 0x0000   (0x000C)  
	TEnumAsByte<EMaterialParameterAssociation>         Association;                                                // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	int32_t                                            Index;                                                      // 0x0010   (0x0004)  
	uint32_t                                           Flags;                                                      // 0x0014   (0x0004)  
};

/// Struct /Script/Engine.ScalarParameterValue
/// Size: 0x002C (44 bytes) (0x000000 - 0x00002C) align 4 pad: 0x0000
struct FScalarParameterValue
{ 
	FMaterialParameterInfo                             ParameterInfo;                                              // 0x0000   (0x0018)  
	float                                              ParameterValue;                                             // 0x0018   (0x0004)  
	FGuid                                              ExpressionGUID;                                             // 0x001C   (0x0010)  
};

/// Struct /Script/Engine.VectorParameterValue
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 4 pad: 0x0000
struct FVectorParameterValue
{ 
	FMaterialParameterInfo                             ParameterInfo;                                              // 0x0000   (0x0018)  
	FLinearColor                                       ParameterValue;                                             // 0x0018   (0x0010)  
	FGuid                                              ExpressionGUID;                                             // 0x0028   (0x0010)  
};

/// Struct /Script/Engine.TextureParameterValue
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FTextureParameterValue
{ 
	FMaterialParameterInfo                             ParameterInfo;                                              // 0x0000   (0x0018)  
	class UTexture*                                    ParameterValue;                                             // 0x0018   (0x0008)  
	FGuid                                              ExpressionGUID;                                             // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.RuntimeVirtualTextureParameterValue
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FRuntimeVirtualTextureParameterValue
{ 
	FMaterialParameterInfo                             ParameterInfo;                                              // 0x0000   (0x0018)  
	class URuntimeVirtualTexture*                      ParameterValue;                                             // 0x0018   (0x0008)  
	FGuid                                              ExpressionGUID;                                             // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.FontParameterValue
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FFontParameterValue
{ 
	FMaterialParameterInfo                             ParameterInfo;                                              // 0x0000   (0x0018)  
	class UFont*                                       FontValue;                                                  // 0x0018   (0x0008)  
	int32_t                                            FontPage;                                                   // 0x0020   (0x0004)  
	FGuid                                              ExpressionGUID;                                             // 0x0024   (0x0010)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Struct /Script/Engine.MaterialInstanceBasePropertyOverrides
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FMaterialInstanceBasePropertyOverrides
{ 
	bool                                               bOverride_OpacityMaskClipValue : 1;                         // 0x0000:0 (0x0001)  
	bool                                               bOverride_BlendMode : 1;                                    // 0x0000:1 (0x0001)  
	bool                                               bOverride_ShadingModel : 1;                                 // 0x0000:2 (0x0001)  
	bool                                               bOverride_DitheredLODTransition : 1;                        // 0x0000:3 (0x0001)  
	bool                                               bOverride_CastDynamicShadowAsMasked : 1;                    // 0x0000:4 (0x0001)  
	bool                                               bOverride_TwoSided : 1;                                     // 0x0000:5 (0x0001)  
	bool                                               bOverride_KuroWater : 1;                                    // 0x0000:6 (0x0001)  
	bool                                               TwoSided : 1;                                               // 0x0000:7 (0x0001)  
	bool                                               KuroWater : 1;                                              // 0x0001:0 (0x0001)  
	bool                                               bOverride_EnableSeparateTranslucency : 1;                   // 0x0001:1 (0x0001)  
	bool                                               bEnableSeparateTranslucency : 1;                            // 0x0001:2 (0x0001)  
	bool                                               bOverride_ShadingRate;                                      // 0x0002   (0x0001)  
	TEnumAsByte<EMaterialShadingRate>                  ShadingRate;                                                // 0x0003   (0x0001)  
	bool                                               DitheredLODTransition : 1;                                  // 0x0004:0 (0x0001)  
	bool                                               bCastDynamicShadowAsMasked : 1;                             // 0x0004:1 (0x0001)  
	TEnumAsByte<EBlendMode>                            BlendMode;                                                  // 0x0005   (0x0001)  
	TEnumAsByte<EMaterialShadingModel>                 ShadingModel;                                               // 0x0006   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0007   (0x0001)  MISSED
	float                                              OpacityMaskClipValue;                                       // 0x0008   (0x0004)  
	bool                                               bOverride_RenderQueue : 1;                                  // 0x000C:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x000D   (0x0001)  MISSED
	uint16_t                                           RenderQueue;                                                // 0x000E   (0x0002)  
	bool                                               bOverride_CustomAlphaTest : 1;                              // 0x0010:0 (0x0001)  
	bool                                               bCustomAlphaTest : 1;                                       // 0x0010:1 (0x0001)  
	bool                                               bOverride_EnableBattle : 1;                                 // 0x0010:2 (0x0001)  
	bool                                               bEnableBattle : 1;                                          // 0x0010:3 (0x0001)  
	bool                                               bOverride_EnableBattleMask : 1;                             // 0x0010:4 (0x0001)  
	bool                                               bEnableBattleMask : 1;                                      // 0x0010:5 (0x0001)  
	bool                                               bOverride_IsCharacterHairMat : 1;                           // 0x0010:6 (0x0001)  
	bool                                               bIsCharacterHairMat : 1;                                    // 0x0010:7 (0x0001)  
	bool                                               bOverride_IsCharacterHETMat : 1;                            // 0x0011:0 (0x0001)  
	bool                                               bIsCharacterHETMat : 1;                                     // 0x0011:1 (0x0001)  
	bool                                               bOverride_IsBackFace : 1;                                   // 0x0011:2 (0x0001)  
	bool                                               bIsBackFace : 1;                                            // 0x0011:3 (0x0001)  
	bool                                               bOverride_UseMobileDistortion : 1;                          // 0x0011:4 (0x0001)  
	bool                                               bUseMobileDistortion : 1;                                   // 0x0011:5 (0x0001)  
	bool                                               bOverride_IsLGUIMaterial : 1;                               // 0x0011:6 (0x0001)  
	bool                                               bIsLGUIMaterial : 1;                                        // 0x0011:7 (0x0001)  
	bool                                               bOverride_UseNormalDither : 1;                              // 0x0012:0 (0x0001)  
	bool                                               bUseNormalDither : 1;                                       // 0x0012:1 (0x0001)  
	bool                                               bOverride_NormalDitherScale : 1;                            // 0x0012:2 (0x0001)  
	unsigned char                                      UnknownData02_5[0x1];                                       // 0x0013   (0x0001)  MISSED
	float                                              NormalDitherScale;                                          // 0x0014   (0x0004)  
};

/// Struct /Script/Engine.StaticParameterBase
/// Size: 0x002C (44 bytes) (0x000000 - 0x00002C) align 4 pad: 0x0000
struct FStaticParameterBase
{ 
	FMaterialParameterInfo                             ParameterInfo;                                              // 0x0000   (0x0018)  
	bool                                               bOverride;                                                  // 0x0018   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0019   (0x0003)  MISSED
	FGuid                                              ExpressionGUID;                                             // 0x001C   (0x0010)  
};

/// Struct /Script/Engine.StaticSwitchParameter
/// Size: 0x0004 (4 bytes) (0x00002C - 0x000030) align 4 pad: 0x0000
struct FStaticSwitchParameter : FStaticParameterBase
{ 
	bool                                               Value;                                                      // 0x002C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x002D   (0x0003)  MISSED
};

/// Struct /Script/Engine.StaticComponentMaskParameter
/// Size: 0x0004 (4 bytes) (0x00002C - 0x000030) align 4 pad: 0x0000
struct FStaticComponentMaskParameter : FStaticParameterBase
{ 
	bool                                               R;                                                          // 0x002C   (0x0001)  
	bool                                               G;                                                          // 0x002D   (0x0001)  
	bool                                               B;                                                          // 0x002E   (0x0001)  
	bool                                               A;                                                          // 0x002F   (0x0001)  
};

/// Struct /Script/Engine.StaticTerrainLayerWeightParameter
/// Size: 0x0008 (8 bytes) (0x00002C - 0x000034) align 4 pad: 0x0000
struct FStaticTerrainLayerWeightParameter : FStaticParameterBase
{ 
	int32_t                                            WeightmapIndex;                                             // 0x002C   (0x0004)  
	bool                                               bWeightBasedBlend;                                          // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0031   (0x0003)  MISSED
};

/// Struct /Script/Engine.MaterialLayersFunctions
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 pad: 0x0000
struct FMaterialLayersFunctions
{ 
	TArray<class UMaterialFunctionInterface*>          Layers;                                                     // 0x0000   (0x0010)  
	TArray<class UMaterialFunctionInterface*>          Blends;                                                     // 0x0010   (0x0010)  
	TArray<bool>                                       LayerStates;                                                // 0x0020   (0x0010)  
	FString                                            KeyString;                                                  // 0x0030   (0x0010)  
};

/// Struct /Script/Engine.StaticMaterialLayersParameter
/// Size: 0x0044 (68 bytes) (0x00002C - 0x000070) align 8 pad: 0x0000
struct FStaticMaterialLayersParameter : FStaticParameterBase
{ 
	unsigned char                                      UnknownData00_3[0x4];                                       // 0x002C   (0x0004)  MISSED
	FMaterialLayersFunctions                           Value;                                                      // 0x0030   (0x0040)  
};

/// Struct /Script/Engine.StaticParameterSet
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 pad: 0x0000
struct FStaticParameterSet
{ 
	TArray<FStaticSwitchParameter>                     StaticSwitchParameters;                                     // 0x0000   (0x0010)  
	TArray<FStaticComponentMaskParameter>              StaticComponentMaskParameters;                              // 0x0010   (0x0010)  
	TArray<FStaticTerrainLayerWeightParameter>         TerrainLayerWeightParameters;                               // 0x0020   (0x0010)  
	TArray<FStaticMaterialLayersParameter>             MaterialLayersParameters;                                   // 0x0030   (0x0010)  
};

/// Struct /Script/Engine.MaterialCachedParameterEntry
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 pad: 0x0000
struct FMaterialCachedParameterEntry
{ 
	TArray<uint64_t>                                   NameHashes;                                                 // 0x0000   (0x0010)  
	TArray<FMaterialParameterInfo>                     ParameterInfos;                                             // 0x0010   (0x0010)  
	TArray<FGuid>                                      ExpressionGuids;                                            // 0x0020   (0x0010)  
	TArray<bool>                                       Overrides;                                                  // 0x0030   (0x0010)  
};

/// Struct /Script/Engine.MaterialCachedParameters
/// Size: 0x01A0 (416 bytes) (0x000000 - 0x0001A0) align 8 pad: 0x0000
struct FMaterialCachedParameters
{ 
	FMaterialCachedParameterEntry                      RuntimeEntries[5];                                          // 0x0000   (0x0140)  
	TArray<float>                                      ScalarValues;                                               // 0x0140   (0x0010)  
	TArray<FLinearColor>                               VectorValues;                                               // 0x0150   (0x0010)  
	TArray<class UTexture*>                            TextureValues;                                              // 0x0160   (0x0010)  
	TArray<class UFont*>                               FontValues;                                                 // 0x0170   (0x0010)  
	TArray<int32_t>                                    FontPageValues;                                             // 0x0180   (0x0010)  
	TArray<class URuntimeVirtualTexture*>              RuntimeVirtualTextureValues;                                // 0x0190   (0x0010)  
};

/// Class /Script/Engine.MaterialInstance
/// Size: 0x0338 (824 bytes) (0x000090 - 0x0003C8) align 8 pad: 0x0000
class UMaterialInstance : public UMaterialInterface
{ 
public:
	class UPhysicalMaterial*                           PhysMaterial;                                               // 0x0090   (0x0008)  
	class UPhysicalMaterial*                           PhysicalMaterialMap[8];                                     // 0x0098   (0x0040)  
	class UMaterialInterface*                          Parent;                                                     // 0x00D8   (0x0008)  
	bool                                               bHasStaticPermutationResource : 1;                          // 0x00E0:0 (0x0001)  
	bool                                               bOverrideSubsurfaceProfile : 1;                             // 0x00E0:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x17];                                      // 0x00E1   (0x0017)  MISSED
	TArray<FScalarParameterValue>                      ScalarParameterValues;                                      // 0x00F8   (0x0010)  
	TArray<FVectorParameterValue>                      VectorParameterValues;                                      // 0x0108   (0x0010)  
	TArray<FTextureParameterValue>                     TextureParameterValues;                                     // 0x0118   (0x0010)  
	TArray<FRuntimeVirtualTextureParameterValue>       RuntimeVirtualTextureParameterValues;                       // 0x0128   (0x0010)  
	TArray<FFontParameterValue>                        FontParameterValues;                                        // 0x0138   (0x0010)  
	FMaterialInstanceBasePropertyOverrides             BasePropertyOverrides;                                      // 0x0148   (0x0018)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x0160   (0x0010)  MISSED
	FStaticParameterSet                                StaticParameters;                                           // 0x0170   (0x0040)  
	FMaterialCachedParameters                          CachedLayerParameters;                                      // 0x01B0   (0x01A0)  
	int32_t                                            SubMaterialCount;                                           // 0x0350   (0x0004)  
	FIntPoint                                          CombineAtlasSize;                                           // 0x0354   (0x0008)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x035C   (0x0004)  MISSED
	TArray<int32_t>                                    ScalarParameterOffsets;                                     // 0x0360   (0x0010)  
	TArray<int32_t>                                    VectorParameterOffsets;                                     // 0x0370   (0x0010)  
	TArray<FVector4>                                   UVScaleOffsetInfos;                                         // 0x0380   (0x0010)  
	TArray<class UObject*>                             CachedReferencedTextures;                                   // 0x0390   (0x0010)  
	unsigned char                                      UnknownData03_7[0x28];                                      // 0x03A0   (0x0028)  MISSED
};

/// Class /Script/Engine.MaterialInstanceConstant
/// Size: 0x0008 (8 bytes) (0x0003C8 - 0x0003D0) align 8 pad: 0x0000
class UMaterialInstanceConstant : public UMaterialInstance
{ 
public:
	class UPhysicalMaterialMask*                       PhysMaterialMask;                                           // 0x03C8   (0x0008)  
	// FLinearColor K2_GetVectorParameterValue(FName ParameterName);                                                            // [0x46d9fd0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// class UTexture* K2_GetTextureParameterValue(FName ParameterName);                                                        // [0x46d9dc0] Final|Native|Public|BlueprintCallable 
	// float K2_GetScalarParameterValue(FName ParameterName);                                                                   // [0x46d9bb0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.MaterialExpression
/// Size: 0x0018 (24 bytes) (0x000030 - 0x000048) align 8 pad: 0x0000
class UMaterialExpression : public UObject
{ 
public:
	class UMaterial*                                   Material;                                                   // 0x0030   (0x0008)  
	class UMaterialFunction*                           Function;                                                   // 0x0038   (0x0008)  
	bool                                               bIsParameterExpression : 1;                                 // 0x0040:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionCustomOutput
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionCustomOutput : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.EngineCustomTimeStep
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UEngineCustomTimeStep : public UObject
{ 
public:
};

/// Class /Script/Engine.TimecodeProvider
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UTimecodeProvider : public UObject
{ 
public:
	float                                              FrameDelay;                                                 // 0x0030   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0034   (0x0004)  MISSED
	// FTimecode GetTimecode();                                                                                                 // [0x475fbe0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// ETimecodeProviderSynchronizationState GetSynchronizationState();                                                         // [0x475fbb0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FQualifiedFrameTime GetQualifiedFrameTime();                                                                             // [0x475fb70] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FFrameRate GetFrameRate();                                                                                               // [0x475fad0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FTimecode GetDelayedTimecode();                                                                                          // [0x475fa90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FQualifiedFrameTime GetDelayedQualifiedFrameTime();                                                                      // [0x475fa50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool FetchTimecode(FQualifiedFrameTime& OutFrameTime);                                                                   // [0x475f990] Native|Public|HasOutParms|BlueprintCallable 
	// void FetchAndUpdate();                                                                                                   // [0x3633740] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.DynamicBlueprintBinding
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UDynamicBlueprintBinding : public UObject
{ 
public:
};

/// Class /Script/Engine.CameraActor
/// Size: 0x0638 (1592 bytes) (0x0002A8 - 0x0008E0) align 16 pad: 0x0000
class ACameraActor : public AActor
{ 
public:
	TEnumAsByte<EAutoReceiveInput>                     AutoActivateForPlayer;                                      // 0x02A8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x02A9   (0x0007)  MISSED
	class UCameraComponent*                            CameraComponent;                                            // 0x02B0   (0x0008)  
	class USceneComponent*                             SceneComponent;                                             // 0x02B8   (0x0008)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x02C0   (0x0008)  MISSED
	bool                                               bConstrainAspectRatio : 1;                                  // 0x02C8:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x02C9   (0x0003)  MISSED
	float                                              AspectRatio;                                                // 0x02CC   (0x0004)  
	float                                              FOVAngle;                                                   // 0x02D0   (0x0004)  
	float                                              PostProcessBlendWeight;                                     // 0x02D4   (0x0004)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x02D8   (0x0008)  MISSED
	FPostProcessSettings                               PostProcessSettings;                                        // 0x02E0   (0x0600)  
	// int32_t GetAutoActivatePlayerIndex();                                                                                    // [0x45f63c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.CameraComponent
/// Size: 0x0678 (1656 bytes) (0x000218 - 0x000890) align 16 pad: 0x0000
class UCameraComponent : public USceneComponent
{ 
public:
	float                                              FieldOfView;                                                // 0x0218   (0x0004)  
	float                                              OrthoWidth;                                                 // 0x021C   (0x0004)  
	float                                              OrthoNearClipPlane;                                         // 0x0220   (0x0004)  
	float                                              OrthoFarClipPlane;                                          // 0x0224   (0x0004)  
	float                                              AspectRatio;                                                // 0x0228   (0x0004)  
	bool                                               bConstrainAspectRatio : 1;                                  // 0x022C:0 (0x0001)  
	bool                                               bUseFieldOfViewForLOD : 1;                                  // 0x022C:1 (0x0001)  
	bool                                               bLockToHmd : 1;                                             // 0x022C:2 (0x0001)  
	bool                                               bUsePawnControlRotation : 1;                                // 0x022C:3 (0x0001)  
	TEnumAsByte<ECameraProjectionMode>                 ProjectionMode;                                             // 0x022D   (0x0001)  
	unsigned char                                      UnknownData00_6[0x32];                                      // 0x022E   (0x0032)  MISSED
	float                                              PostProcessBlendWeight;                                     // 0x0260   (0x0004)  
	unsigned char                                      UnknownData01_6[0x2C];                                      // 0x0264   (0x002C)  MISSED
	FPostProcessSettings                               PostProcessSettings;                                        // 0x0290   (0x0600)  
	// void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);                                                              // [0x45f6de0] Final|Native|Public|BlueprintCallable 
	// void SetProjectionMode(TEnumAsByte<ECameraProjectionMode> InProjectionMode);                                             // [0x45f6ce0] Final|Native|Public|BlueprintCallable 
	// void SetPostProcessBlendWeight(float InPostProcessBlendWeight);                                                          // [0x45f6c60] Final|Native|Public|BlueprintCallable 
	// void SetOrthoWidth(float InOrthoWidth);                                                                                  // [0x45f6be0] Final|Native|Public|BlueprintCallable 
	// void SetOrthoNearClipPlane(float InOrthoNearClipPlane);                                                                  // [0x45f6b60] Final|Native|Public|BlueprintCallable 
	// void SetOrthoFarClipPlane(float InOrthoFarClipPlane);                                                                    // [0x45f6ae0] Final|Native|Public|BlueprintCallable 
	// void SetFieldOfView(float InFieldOfView);                                                                                // [0x3c2e380] Native|Public|BlueprintCallable 
	// void SetConstraintAspectRatio(bool bInConstrainAspectRatio);                                                             // [0x45f69d0] Final|Native|Public|BlueprintCallable 
	// void SetAspectRatio(float InAspectRatio);                                                                                // [0x45f6870] Final|Native|Public|BlueprintCallable 
	// void RemoveBlendable(TScriptInterface<Class> InBlendableObject);                                                         // [0x45f6740] Final|Native|Public|BlueprintCallable 
	// void OnCameraMeshHiddenChanged();                                                                                        // [0x95a130] Final|Native|Protected|BlueprintCallable 
	// void KuroGetAdditiveOffset(FTransform& OutAdditiveOffset, float& OutAdditiveFOVOffset);                                  // [0x45f6610] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// void GetCameraView(float DeltaTime, FMinimalViewInfo& DesiredView);                                                      // [0x45f63f0] Native|Public|HasOutParms|BlueprintCallable 
	// void AddOrUpdateBlendable(TScriptInterface<Class> InBlendableObject, float InWeight);                                    // [0x45f61e0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.Model
/// Size: 0x02B0 (688 bytes) (0x000030 - 0x0002E0) align 16 pad: 0x0000
class UModel : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x2B0];                                     // 0x0030   (0x02B0)  MISSED
};

/// Class /Script/Engine.Channel
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000078) align 8 pad: 0x0000
class UChannel : public UObject
{ 
public:
	class UNetConnection*                              Connection;                                                 // 0x0030   (0x0008)  
	unsigned char                                      UnknownData00_7[0x40];                                      // 0x0038   (0x0040)  MISSED
};

/// Class /Script/Engine.ActorChannel
/// Size: 0x0228 (552 bytes) (0x000078 - 0x0002A0) align 8 pad: 0x0000
class UActorChannel : public UChannel
{ 
public:
	class AActor*                                      Actor;                                                      // 0x0078   (0x0008)  
	unsigned char                                      UnknownData00_6[0xE8];                                      // 0x0080   (0x00E8)  MISSED
	TArray<class UObject*>                             CreateSubObjects;                                           // 0x0168   (0x0010)  
	unsigned char                                      UnknownData01_7[0x128];                                     // 0x0178   (0x0128)  MISSED
};

/// Class /Script/Engine.ActorDescContainer
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UActorDescContainer : public UObject
{ 
public:
	class UWorld*                                      World;                                                      // 0x0030   (0x0008)  
};

/// Class /Script/Engine.ActorPartitionSubsystem
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UActorPartitionSubsystem : public UWorldSubsystem
{ 
public:
};

/// Class /Script/Engine.AnimationAsset
/// Size: 0x0058 (88 bytes) (0x000030 - 0x000088) align 8 pad: 0x0000
class UAnimationAsset : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x10];                                      // 0x0030   (0x0010)  MISSED
	class USkeleton*                                   Skeleton;                                                   // 0x0040   (0x0008)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x0048   (0x0020)  MISSED
	TArray<class UAnimMetaData*>                       MetaData;                                                   // 0x0068   (0x0010)  
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0078   (0x0010)  
};

/// Struct /Script/Engine.InterpolationParameter
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FInterpolationParameter
{ 
	float                                              InterpolationTime;                                          // 0x0000   (0x0004)  
	TEnumAsByte<EFilterInterpolationType>              InterpolationType;                                          // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Struct /Script/Engine.PerBoneInterpolation
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FPerBoneInterpolation
{ 
	FBoneReference                                     BoneReference;                                              // 0x0000   (0x0014)  
	float                                              InterpolationSpeedPerSec;                                   // 0x0014   (0x0004)  
};

/// Struct /Script/Engine.BlendSample
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FBlendSample
{ 
	class UAnimSequence*                               Animation;                                                  // 0x0000   (0x0008)  
	FVector                                            SampleValue;                                                // 0x0008   (0x000C)  
	float                                              RateScale;                                                  // 0x0014   (0x0004)  
};

/// Struct /Script/Engine.EditorElement
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FEditorElement
{ 
	int32_t                                            Indices[3];                                                 // 0x0000   (0x000C)  
	float                                              Weights[3];                                                 // 0x000C   (0x000C)  
};

/// Struct /Script/Engine.BlendParameter
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FBlendParameter
{ 
	FString                                            DisplayName;                                                // 0x0000   (0x0010)  
	float                                              Min;                                                        // 0x0010   (0x0004)  
	float                                              Max;                                                        // 0x0014   (0x0004)  
	int32_t                                            GridNum;                                                    // 0x0018   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Class /Script/Engine.BlendSpaceBase
/// Size: 0x00C8 (200 bytes) (0x000088 - 0x000150) align 8 pad: 0x0000
class UBlendSpaceBase : public UAnimationAsset
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0088   (0x0008)  MISSED
	bool                                               bRotationBlendInMeshSpace;                                  // 0x0090   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0091   (0x0003)  MISSED
	float                                              AnimLength;                                                 // 0x0094   (0x0004)  
	FInterpolationParameter                            InterpolationParam[3];                                      // 0x0098   (0x0018)  
	float                                              TargetWeightInterpolationSpeedPerSec;                       // 0x00B0   (0x0004)  
	TEnumAsByte<ENotifyTriggerMode>                    NotifyTriggerMode;                                          // 0x00B4   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x00B5   (0x0003)  MISSED
	TArray<FPerBoneInterpolation>                      PerBoneBlend;                                               // 0x00B8   (0x0010)  
	int32_t                                            SampleIndexWithMarkers;                                     // 0x00C8   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x00CC   (0x0004)  MISSED
	TArray<FBlendSample>                               SampleData;                                                 // 0x00D0   (0x0010)  
	TArray<FEditorElement>                             GridSamples;                                                // 0x00E0   (0x0010)  
	FBlendParameter                                    BlendParameters[3];                                         // 0x00F0   (0x0060)  
};

/// Class /Script/Engine.BlendSpace
/// Size: 0x0008 (8 bytes) (0x000150 - 0x000158) align 8 pad: 0x0000
class UBlendSpace : public UBlendSpaceBase
{ 
public:
	TEnumAsByte<EBlendSpaceAxis>                       AxisToScaleAnimation;                                       // 0x0150   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0151   (0x0007)  MISSED
};

/// Class /Script/Engine.AimOffsetBlendSpace
/// Size: 0x0000 (0 bytes) (0x000158 - 0x000158) align 8 pad: 0x0000
class UAimOffsetBlendSpace : public UBlendSpace
{ 
public:
};

/// Class /Script/Engine.BlendSpace1D
/// Size: 0x0008 (8 bytes) (0x000150 - 0x000158) align 8 pad: 0x0000
class UBlendSpace1D : public UBlendSpaceBase
{ 
public:
	bool                                               bScaleAnimation;                                            // 0x0150   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0151   (0x0007)  MISSED
};

/// Class /Script/Engine.AimOffsetBlendSpace1D
/// Size: 0x0000 (0 bytes) (0x000158 - 0x000158) align 8 pad: 0x0000
class UAimOffsetBlendSpace1D : public UBlendSpace1D
{ 
public:
};

/// Class /Script/Engine.AISystemBase
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000070) align 8 pad: 0x0000
class UAISystemBase : public UObject
{ 
public:
	FSoftClassPath                                     AISystemClassName;                                          // 0x0030   (0x0020)  
	FName                                              AISystemModuleName;                                         // 0x0050   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x005C   (0x000C)  MISSED
	bool                                               bInstantiateAISystemOnClient;                               // 0x0068   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Class /Script/Engine.AmbientSound
/// Size: 0x0008 (8 bytes) (0x0002A8 - 0x0002B0) align 8 pad: 0x0000
class AAmbientSound : public AActor
{ 
public:
	class UAudioComponent*                             AudioComponent;                                             // 0x02A8   (0x0008)  
	// void Stop();                                                                                                             // [0x45c6120] Final|Native|Public|BlueprintCallable 
	// void Play(float StartTime);                                                                                              // [0x45c5ae0] Final|Native|Public|BlueprintCallable 
	// void FadeOut(float FadeOutDuration, float FadeVolumeLevel);                                                              // [0x45c5770] Final|Native|Public|BlueprintCallable 
	// void FadeIn(float FadeInDuration, float FadeVolumeLevel);                                                                // [0x45c56a0] Final|Native|Public|BlueprintCallable 
	// void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);                                                  // [0x45c5520] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.CustomAttributeSetting
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FCustomAttributeSetting
{ 
	FString                                            Name;                                                       // 0x0000   (0x0010)  
	FString                                            Meaning;                                                    // 0x0010   (0x0010)  
};

/// Class /Script/Engine.AnimationSettings
/// Size: 0x0098 (152 bytes) (0x000048 - 0x0000E0) align 8 pad: 0x0000
class UAnimationSettings : public UDeveloperSettings
{ 
public:
	int32_t                                            CompressCommandletVersion;                                  // 0x0048   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x004C   (0x0004)  MISSED
	TArray<FString>                                    KeyEndEffectorsMatchNameArray;                              // 0x0050   (0x0010)  
	bool                                               ForceRecompression;                                         // 0x0060   (0x0001)  
	bool                                               bForceBelowThreshold;                                       // 0x0061   (0x0001)  
	bool                                               bFirstRecompressUsingCurrentOrDefault;                      // 0x0062   (0x0001)  
	bool                                               bRaiseMaxErrorToExisting;                                   // 0x0063   (0x0001)  
	bool                                               bEnablePerformanceLog;                                      // 0x0064   (0x0001)  
	bool                                               bStripAnimationDataOnDedicatedServer;                       // 0x0065   (0x0001)  
	bool                                               bTickAnimationOnSkeletalMeshInit;                           // 0x0066   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x0067   (0x0001)  MISSED
	TArray<FCustomAttributeSetting>                    BoneCustomAttributesNames;                                  // 0x0068   (0x0010)  
	TArray<FString>                                    BoneNamesWithCustomAttributes;                              // 0x0078   (0x0010)  
	SDK_UNDEFINED(80,79) /* TMap<FName, ECustomAttributeBlendType> */ __um(AttributeBlendModes);                   // 0x0088   (0x0050)  
	ECustomAttributeBlendType                          DefaultAttributeBlendMode;                                  // 0x00D8   (0x0001)  
	bool                                               bEnableAutoImportSkeletalMesh;                              // 0x00D9   (0x0001)  
	unsigned char                                      UnknownData02_7[0x6];                                       // 0x00DA   (0x0006)  MISSED
};

/// Struct /Script/Engine.AnimGroupInfo
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FAnimGroupInfo
{ 
	FName                                              Name;                                                       // 0x0000   (0x000C)  
	FLinearColor                                       Color;                                                      // 0x000C   (0x0010)  
};

/// Class /Script/Engine.AnimBlueprint
/// Size: 0x0028 (40 bytes) (0x0000A8 - 0x0000D0) align 8 pad: 0x0000
class UAnimBlueprint : public UBlueprint
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00A8   (0x0008)  MISSED
	class USkeleton*                                   TargetSkeleton;                                             // 0x00B0   (0x0008)  
	TArray<FAnimGroupInfo>                             Groups;                                                     // 0x00B8   (0x0010)  
	bool                                               bUseMultiThreadedAnimationUpdate;                           // 0x00C8   (0x0001)  
	bool                                               bWarnAboutBlueprintUsage;                                   // 0x00C9   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x00CA   (0x0006)  MISSED
};

/// Class /Script/Engine.AnimBoneCompressionCodec
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UAnimBoneCompressionCodec : public UObject
{ 
public:
	FString                                            Description;                                                // 0x0030   (0x0010)  
};

/// Class /Script/Engine.AnimBoneCompressionSettings
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UAnimBoneCompressionSettings : public UObject
{ 
public:
	TArray<class UAnimBoneCompressionCodec*>           Codecs;                                                     // 0x0030   (0x0010)  
};

/// Struct /Script/Engine.AnimBlueprintFunction
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align 8 pad: 0x0000
struct FAnimBlueprintFunction
{ 
	FName                                              Name;                                                       // 0x0000   (0x000C)  
	FName                                              Group;                                                      // 0x000C   (0x000C)  
	int32_t                                            OutputPoseNodeIndex;                                        // 0x0018   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	TArray<FName>                                      InputPoseNames;                                             // 0x0020   (0x0010)  
	TArray<int32_t>                                    InputPoseNodeIndices;                                       // 0x0030   (0x0010)  
	unsigned char                                      UnknownData01_6[0x28];                                      // 0x0040   (0x0028)  MISSED
	bool                                               bImplemented;                                               // 0x0068   (0x0001)  
	unsigned char                                      UnknownData02_7[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Struct /Script/Engine.AnimBlueprintFunctionData
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 pad: 0x0000
struct FAnimBlueprintFunctionData
{ 
	unsigned char                                      UnknownData00_7[0x20];                                      // 0x0000   (0x0020)  MISSED
	SDK_UNDEFINED(16,80) /* TArray<InputPoseNodeProperties> */ __um(InputPoseNodeProperties);                      // 0x0020   (0x0010)  
	SDK_UNDEFINED(16,81) /* TArray<InputProperties> */ __um(InputProperties);                                      // 0x0030   (0x0010)  
};

/// Class /Script/Engine.AnimClassData
/// Size: 0x0308 (776 bytes) (0x000030 - 0x000338) align 8 pad: 0x0000
class UAnimClassData : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0030   (0x0008)  MISSED
	TArray<FBakedAnimationStateMachine>                BakedStateMachines;                                         // 0x0038   (0x0010)  
	class USkeleton*                                   TargetSkeleton;                                             // 0x0048   (0x0008)  
	TArray<FAnimNotifyEvent>                           AnimNotifies;                                               // 0x0050   (0x0010)  
	SDK_UNDEFINED(80,82) /* TMap<FName, FCachedPoseIndices> */ __um(OrderedSavedPoseIndicesMap);                   // 0x0060   (0x0050)  
	TArray<FAnimBlueprintFunction>                     AnimBlueprintFunctions;                                     // 0x00B0   (0x0010)  
	TArray<FAnimBlueprintFunctionData>                 AnimBlueprintFunctionData;                                  // 0x00C0   (0x0010)  
	SDK_UNDEFINED(16,83) /* TArray<AnimNodeProperties> */ __um(AnimNodeProperties);                                // 0x00D0   (0x0010)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x00E0   (0x0010)  MISSED
	SDK_UNDEFINED(16,84) /* TArray<LinkedAnimGraphNodeProperties> */ __um(LinkedAnimGraphNodeProperties);          // 0x00F0   (0x0010)  
	unsigned char                                      UnknownData02_6[0x10];                                      // 0x0100   (0x0010)  MISSED
	SDK_UNDEFINED(16,85) /* TArray<LinkedAnimLayerNodeProperties> */ __um(LinkedAnimLayerNodeProperties);          // 0x0110   (0x0010)  
	unsigned char                                      UnknownData03_6[0x10];                                      // 0x0120   (0x0010)  MISSED
	SDK_UNDEFINED(16,86) /* TArray<PreUpdateNodeProperties> */ __um(PreUpdateNodeProperties);                      // 0x0130   (0x0010)  
	unsigned char                                      UnknownData04_6[0x10];                                      // 0x0140   (0x0010)  MISSED
	SDK_UNDEFINED(16,87) /* TArray<DynamicResetNodeProperties> */ __um(DynamicResetNodeProperties);                // 0x0150   (0x0010)  
	unsigned char                                      UnknownData05_6[0x10];                                      // 0x0160   (0x0010)  MISSED
	SDK_UNDEFINED(16,88) /* TArray<StateMachineNodeProperties> */ __um(StateMachineNodeProperties);                // 0x0170   (0x0010)  
	unsigned char                                      UnknownData06_6[0x10];                                      // 0x0180   (0x0010)  MISSED
	SDK_UNDEFINED(16,89) /* TArray<InitializationNodeProperties> */ __um(InitializationNodeProperties);            // 0x0190   (0x0010)  
	unsigned char                                      UnknownData07_6[0x10];                                      // 0x01A0   (0x0010)  MISSED
	SDK_UNDEFINED(80,90) /* TMap<FName, FGraphAssetPlayerInformation> */ __um(GraphNameAssetPlayers);              // 0x01B0   (0x0050)  
	TArray<FName>                                      SyncGroupNames;                                             // 0x0200   (0x0010)  
	TArray<FExposedValueHandler>                       EvaluateGraphExposedInputs;                                 // 0x0210   (0x0010)  
	SDK_UNDEFINED(80,91) /* TMap<FName, FAnimGraphBlendOptions> */ __um(GraphBlendOptions);                        // 0x0220   (0x0050)  
	FPropertyAccessLibrary                             PropertyAccessLibrary;                                      // 0x0270   (0x00C8)  
};

/// Class /Script/Engine.AnimClassInterface
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UAnimClassInterface : public UInterface
{ 
public:
};

/// Struct /Script/Engine.SmartName
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FSmartName
{ 
	FName                                              DisplayName;                                                // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x000C   (0x0004)  MISSED
};

/// Struct /Script/Engine.AnimCurveBase
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 4 pad: 0x0000
struct FAnimCurveBase
{ 
	FName                                              LastObservedName;                                           // 0x0000   (0x000C)  
	FSmartName                                         Name;                                                       // 0x000C   (0x0010)  
	int32_t                                            CurveTypeFlags;                                             // 0x001C   (0x0004)  
};

/// Struct /Script/Engine.FloatCurve
/// Size: 0x0080 (128 bytes) (0x000020 - 0x0000A0) align 8 pad: 0x0000
struct FFloatCurve : FAnimCurveBase
{ 
	FRichCurve                                         FloatCurve;                                                 // 0x0020   (0x0080)  
};

/// Struct /Script/Engine.RawCurveTracks
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FRawCurveTracks
{ 
	TArray<FFloatCurve>                                FloatCurves;                                                // 0x0000   (0x0010)  
};

/// Class /Script/Engine.AnimSequenceBase
/// Size: 0x0038 (56 bytes) (0x000088 - 0x0000C0) align 8 pad: 0x0000
class UAnimSequenceBase : public UAnimationAsset
{ 
public:
	TArray<FAnimNotifyEvent>                           Notifies;                                                   // 0x0088   (0x0010)  
	float                                              SequenceLength;                                             // 0x0098   (0x0004)  
	float                                              RateScale;                                                  // 0x009C   (0x0004)  
	FName                                              AnimOrigin;                                                 // 0x00A0   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00AC   (0x0004)  MISSED
	FRawCurveTracks                                    RawCurveData;                                               // 0x00B0   (0x0010)  
	// float GetPlayLength();                                                                                                   // [0x45d87f0] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.AnimCompositeBase
/// Size: 0x0000 (0 bytes) (0x0000C0 - 0x0000C0) align 8 pad: 0x0000
class UAnimCompositeBase : public UAnimSequenceBase
{ 
public:
};

/// Struct /Script/Engine.AnimSegment
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FAnimSegment
{ 
	class UAnimSequenceBase*                           AnimReference;                                              // 0x0000   (0x0008)  
	float                                              StartPos;                                                   // 0x0008   (0x0004)  
	float                                              AnimStartTime;                                              // 0x000C   (0x0004)  
	float                                              AnimEndTime;                                                // 0x0010   (0x0004)  
	float                                              AnimPlayRate;                                               // 0x0014   (0x0004)  
	int32_t                                            LoopingCount;                                               // 0x0018   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/Engine.AnimTrack
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FAnimTrack
{ 
	TArray<FAnimSegment>                               AnimSegments;                                               // 0x0000   (0x0010)  
};

/// Class /Script/Engine.AnimComposite
/// Size: 0x0010 (16 bytes) (0x0000C0 - 0x0000D0) align 8 pad: 0x0000
class UAnimComposite : public UAnimCompositeBase
{ 
public:
	FAnimTrack                                         AnimationTrack;                                             // 0x00C0   (0x0010)  
};

/// Class /Script/Engine.AnimCompress
/// Size: 0x0008 (8 bytes) (0x000040 - 0x000048) align 8 pad: 0x0000
class UAnimCompress : public UAnimBoneCompressionCodec
{ 
public:
	bool                                               bNeedsSkeleton : 1;                                         // 0x0040:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0041   (0x0003)  MISSED
	TEnumAsByte<AnimationCompressionFormat>            TranslationCompressionFormat;                               // 0x0044   (0x0001)  
	TEnumAsByte<AnimationCompressionFormat>            RotationCompressionFormat;                                  // 0x0045   (0x0001)  
	TEnumAsByte<AnimationCompressionFormat>            ScaleCompressionFormat;                                     // 0x0046   (0x0001)  
	unsigned char                                      UnknownData01_7[0x1];                                       // 0x0047   (0x0001)  MISSED
};

/// Class /Script/Engine.AnimCompress_BitwiseCompressOnly
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
{ 
public:
};

/// Class /Script/Engine.AnimCompress_LeastDestructive
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UAnimCompress_LeastDestructive : public UAnimCompress_BitwiseCompressOnly
{ 
public:
};

/// Class /Script/Engine.AnimCompress_NoCompression
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UAnimCompress_NoCompression : public UAnimCompress
{ 
public:
};

/// Class /Script/Engine.AnimCompress_RemoveLinearKeys
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UAnimCompress_RemoveLinearKeys : public UAnimCompress
{ 
public:
	float                                              MaxPosDiff;                                                 // 0x0048   (0x0004)  
	float                                              MaxAngleDiff;                                               // 0x004C   (0x0004)  
	float                                              MaxScaleDiff;                                               // 0x0050   (0x0004)  
	float                                              MaxEffectorDiff;                                            // 0x0054   (0x0004)  
	float                                              MinEffectorDiff;                                            // 0x0058   (0x0004)  
	float                                              EffectorDiffSocket;                                         // 0x005C   (0x0004)  
	float                                              ParentKeyScale;                                             // 0x0060   (0x0004)  
	bool                                               bRetarget : 1;                                              // 0x0064:0 (0x0001)  
	bool                                               bActuallyFilterLinearKeys : 1;                              // 0x0064:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0065   (0x0003)  MISSED
};

/// Class /Script/Engine.AnimCompress_PerTrackCompression
/// Size: 0x0078 (120 bytes) (0x000068 - 0x0000E0) align 8 pad: 0x0000
class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
{ 
public:
	float                                              MaxZeroingThreshold;                                        // 0x0068   (0x0004)  
	float                                              MaxPosDiffBitwise;                                          // 0x006C   (0x0004)  
	float                                              MaxAngleDiffBitwise;                                        // 0x0070   (0x0004)  
	float                                              MaxScaleDiffBitwise;                                        // 0x0074   (0x0004)  
	SDK_UNDEFINED(16,92) /* TArray<TEnumAsByte<AnimationCompressionFormat>> */ __um(AllowedRotationFormats);       // 0x0078   (0x0010)  
	SDK_UNDEFINED(16,93) /* TArray<TEnumAsByte<AnimationCompressionFormat>> */ __um(AllowedTranslationFormats);    // 0x0088   (0x0010)  
	SDK_UNDEFINED(16,94) /* TArray<TEnumAsByte<AnimationCompressionFormat>> */ __um(AllowedScaleFormats);          // 0x0098   (0x0010)  
	bool                                               bResampleAnimation : 1;                                     // 0x00A8:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x00A9   (0x0003)  MISSED
	float                                              ResampledFramerate;                                         // 0x00AC   (0x0004)  
	int32_t                                            MinKeysForResampling;                                       // 0x00B0   (0x0004)  
	bool                                               bUseAdaptiveError : 1;                                      // 0x00B4:0 (0x0001)  
	bool                                               bUseOverrideForEndEffectors : 1;                            // 0x00B4:1 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x00B5   (0x0003)  MISSED
	int32_t                                            TrackHeightBias;                                            // 0x00B8   (0x0004)  
	float                                              ParentingDivisor;                                           // 0x00BC   (0x0004)  
	float                                              ParentingDivisorExponent;                                   // 0x00C0   (0x0004)  
	bool                                               bUseAdaptiveError2 : 1;                                     // 0x00C4:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x00C5   (0x0003)  MISSED
	float                                              RotationErrorSourceRatio;                                   // 0x00C8   (0x0004)  
	float                                              TranslationErrorSourceRatio;                                // 0x00CC   (0x0004)  
	float                                              ScaleErrorSourceRatio;                                      // 0x00D0   (0x0004)  
	float                                              MaxErrorPerTrackRatio;                                      // 0x00D4   (0x0004)  
	float                                              PerturbationProbeSize;                                      // 0x00D8   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x00DC   (0x0004)  MISSED
};

/// Class /Script/Engine.AnimCompress_RemoveEverySecondKey
/// Size: 0x0008 (8 bytes) (0x000048 - 0x000050) align 8 pad: 0x0000
class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
{ 
public:
	int32_t                                            MinKeys;                                                    // 0x0048   (0x0004)  
	bool                                               bStartAtSecondKey : 1;                                      // 0x004C:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x004D   (0x0003)  MISSED
};

/// Class /Script/Engine.AnimCompress_RemoveTrivialKeys
/// Size: 0x0010 (16 bytes) (0x000048 - 0x000058) align 8 pad: 0x0000
class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
{ 
public:
	float                                              MaxPosDiff;                                                 // 0x0048   (0x0004)  
	float                                              MaxAngleDiff;                                               // 0x004C   (0x0004)  
	float                                              MaxScaleDiff;                                               // 0x0050   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.AnimCurveCompressionCodec
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UAnimCurveCompressionCodec : public UObject
{ 
public:
};

/// Class /Script/Engine.AnimCurveCompressionCodec_CompressedRichCurve
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UAnimCurveCompressionCodec_CompressedRichCurve : public UAnimCurveCompressionCodec
{ 
public:
};

/// Class /Script/Engine.AnimCurveCompressionCodec_UniformIndexable
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UAnimCurveCompressionCodec_UniformIndexable : public UAnimCurveCompressionCodec
{ 
public:
};

/// Class /Script/Engine.AnimCurveCompressionCodec_UniformlySampled
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UAnimCurveCompressionCodec_UniformlySampled : public UAnimCurveCompressionCodec
{ 
public:
};

/// Class /Script/Engine.AnimCurveCompressionSettings
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UAnimCurveCompressionSettings : public UObject
{ 
public:
	class UAnimCurveCompressionCodec*                  Codec;                                                      // 0x0030   (0x0008)  
};

/// Class /Script/Engine.AnimLayerInterface
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UAnimLayerInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.AnimMetaData
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UAnimMetaData : public UObject
{ 
public:
};

/// Struct /Script/Engine.AlphaBlend
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FAlphaBlend
{ 
	class UCurveFloat*                                 CustomCurve;                                                // 0x0000   (0x0008)  
	float                                              BlendTime;                                                  // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_6[0x18];                                      // 0x000C   (0x0018)  MISSED
	EAlphaBlendOption                                  BlendOption;                                                // 0x0024   (0x0001)  
	unsigned char                                      UnknownData01_7[0xB];                                       // 0x0025   (0x000B)  MISSED
};

/// Struct /Script/Engine.AnimSyncMarker
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FAnimSyncMarker
{ 
	FName                                              MarkerName;                                                 // 0x0000   (0x000C)  
	float                                              Time;                                                       // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.MarkerSyncData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FMarkerSyncData
{ 
	TArray<FAnimSyncMarker>                            AuthoredSyncMarkers;                                        // 0x0000   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0010   (0x0010)  MISSED
};

/// Struct /Script/Engine.CompositeSection
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000060) align 8 pad: 0x0000
struct FCompositeSection : FAnimLinkableElement
{ 
	FName                                              SectionName;                                                // 0x0030   (0x000C)  
	float                                              StartTime;                                                  // 0x003C   (0x0004)  
	FName                                              NextSectionName;                                            // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x004C   (0x0004)  MISSED
	TArray<class UAnimMetaData*>                       MetaData;                                                   // 0x0050   (0x0010)  
};

/// Struct /Script/Engine.SlotAnimationTrack
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FSlotAnimationTrack
{ 
	FName                                              SlotName;                                                   // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FAnimTrack                                         AnimTrack;                                                  // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.BranchingPoint
/// Size: 0x0018 (24 bytes) (0x000030 - 0x000048) align 8 pad: 0x0000
struct FBranchingPoint : FAnimLinkableElement
{ 
	FName                                              EventName;                                                  // 0x0030   (0x000C)  
	float                                              DisplayTime;                                                // 0x003C   (0x0004)  
	float                                              TriggerTimeOffset;                                          // 0x0040   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/Engine.BranchingPointMarker
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FBranchingPointMarker
{ 
	int32_t                                            NotifyIndex;                                                // 0x0000   (0x0004)  
	float                                              TriggerTime;                                                // 0x0004   (0x0004)  
	TEnumAsByte<EAnimNotifyEventType>                  NotifyEventType;                                            // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/Engine.TimeStretchCurveMarker
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FTimeStretchCurveMarker
{ 
	float                                              Time[3];                                                    // 0x0000   (0x000C)  
	float                                              ALPHA;                                                      // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.TimeStretchCurve
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FTimeStretchCurve
{ 
	float                                              SamplingRate;                                               // 0x0000   (0x0004)  
	float                                              CurveValueMinPrecision;                                     // 0x0004   (0x0004)  
	TArray<FTimeStretchCurveMarker>                    Markers;                                                    // 0x0008   (0x0010)  
	float                                              Sum_dT_i_by_C_i[3];                                         // 0x0018   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Class /Script/Engine.AnimMontage
/// Size: 0x0130 (304 bytes) (0x0000C0 - 0x0001F0) align 8 pad: 0x0000
class UAnimMontage : public UAnimCompositeBase
{ 
public:
	FAlphaBlend                                        BlendIn;                                                    // 0x00C0   (0x0030)  
	float                                              BlendInTime;                                                // 0x00F0   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00F4   (0x0004)  MISSED
	FAlphaBlend                                        BlendOut;                                                   // 0x00F8   (0x0030)  
	float                                              BlendOutTime;                                               // 0x0128   (0x0004)  
	float                                              BlendOutTriggerTime;                                        // 0x012C   (0x0004)  
	FName                                              SyncGroup;                                                  // 0x0130   (0x000C)  
	int32_t                                            SyncSlotIndex;                                              // 0x013C   (0x0004)  
	FMarkerSyncData                                    MarkerData;                                                 // 0x0140   (0x0020)  
	TArray<FCompositeSection>                          CompositeSections;                                          // 0x0160   (0x0010)  
	TArray<FSlotAnimationTrack>                        SlotAnimTracks;                                             // 0x0170   (0x0010)  
	TArray<FBranchingPoint>                            BranchingPoints;                                            // 0x0180   (0x0010)  
	bool                                               bEnableRootMotionTranslation;                               // 0x0190   (0x0001)  
	bool                                               bEnableRootMotionRotation;                                  // 0x0191   (0x0001)  
	bool                                               bEnableAutoBlendOut;                                        // 0x0192   (0x0001)  
	TEnumAsByte<ERootMotionRootLock>                   RootMotionRootLock;                                         // 0x0193   (0x0001)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0194   (0x0004)  MISSED
	TArray<FBranchingPointMarker>                      BranchingPointMarkers;                                      // 0x0198   (0x0010)  
	TArray<int32_t>                                    BranchingPointStateNotifyIndices;                           // 0x01A8   (0x0010)  
	FTimeStretchCurve                                  TimeStretchCurve;                                           // 0x01B8   (0x0028)  
	FName                                              TimeStretchCurveName;                                       // 0x01E0   (0x000C)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x01EC   (0x0004)  MISSED
	// float GetDefaultBlendOutTime();                                                                                          // [0x365f6e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.AnimNotify_PauseClothingSimulation
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UAnimNotify_PauseClothingSimulation : public UAnimNotify
{ 
public:
};

/// Class /Script/Engine.AnimNotify_PlayParticleEffect
/// Size: 0x0050 (80 bytes) (0x000040 - 0x000090) align 16 pad: 0x0000
class UAnimNotify_PlayParticleEffect : public UAnimNotify
{ 
public:
	class UParticleSystem*                             PSTemplate;                                                 // 0x0040   (0x0008)  
	FVector                                            LocationOffset;                                             // 0x0048   (0x000C)  
	FRotator                                           RotationOffset;                                             // 0x0054   (0x000C)  
	FVector                                            Scale;                                                      // 0x0060   (0x000C)  
	unsigned char                                      UnknownData00_6[0x14];                                      // 0x006C   (0x0014)  MISSED
	bool                                               Attached : 1;                                               // 0x0080:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0081   (0x0003)  MISSED
	FName                                              SocketName;                                                 // 0x0084   (0x000C)  
};

/// Class /Script/Engine.AnimNotify_PlaySound
/// Size: 0x0020 (32 bytes) (0x000040 - 0x000060) align 8 pad: 0x0000
class UAnimNotify_PlaySound : public UAnimNotify
{ 
public:
	class USoundBase*                                  Sound;                                                      // 0x0040   (0x0008)  
	float                                              VolumeMultiplier;                                           // 0x0048   (0x0004)  
	float                                              PitchMultiplier;                                            // 0x004C   (0x0004)  
	bool                                               bFollow : 1;                                                // 0x0050:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0051   (0x0003)  MISSED
	FName                                              AttachName;                                                 // 0x0054   (0x000C)  
};

/// Class /Script/Engine.AnimNotify_ResetClothingSimulation
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UAnimNotify_ResetClothingSimulation : public UAnimNotify
{ 
public:
};

/// Class /Script/Engine.AnimNotify_ResetDynamics
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UAnimNotify_ResetDynamics : public UAnimNotify
{ 
public:
};

/// Class /Script/Engine.AnimNotify_ResumeClothingSimulation
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UAnimNotify_ResumeClothingSimulation : public UAnimNotify
{ 
public:
};

/// Class /Script/Engine.AnimNotifyState_DisableRootMotion
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState
{ 
public:
};

/// Class /Script/Engine.AnimNotifyState_TimedParticleEffect
/// Size: 0x0030 (48 bytes) (0x000040 - 0x000070) align 8 pad: 0x0000
class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
{ 
public:
	class UParticleSystem*                             PSTemplate;                                                 // 0x0040   (0x0008)  
	FName                                              SocketName;                                                 // 0x0048   (0x000C)  
	FVector                                            LocationOffset;                                             // 0x0054   (0x000C)  
	FRotator                                           RotationOffset;                                             // 0x0060   (0x000C)  
	bool                                               bDestroyAtEnd;                                              // 0x006C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x006D   (0x0003)  MISSED
};

/// Class /Script/Engine.AnimNotifyState_Trail
/// Size: 0x0038 (56 bytes) (0x000040 - 0x000078) align 8 pad: 0x0000
class UAnimNotifyState_Trail : public UAnimNotifyState
{ 
public:
	class UParticleSystem*                             PSTemplate;                                                 // 0x0040   (0x0008)  
	FName                                              FirstSocketName;                                            // 0x0048   (0x000C)  
	FName                                              SecondSocketName;                                           // 0x0054   (0x000C)  
	TEnumAsByte<ETrailWidthMode>                       WidthScaleMode;                                             // 0x0060   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0061   (0x0003)  MISSED
	FName                                              WidthScaleCurve;                                            // 0x0064   (0x000C)  
	bool                                               bRecycleSpawnedSystems : 1;                                 // 0x0070:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0071   (0x0007)  MISSED
	// class UParticleSystem* OverridePSTemplate(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);   // [0x25a7960] Event|Public|BlueprintEvent|Const 
};

/// Struct /Script/Engine.TrackToSkeletonMap
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FTrackToSkeletonMap
{ 
	int32_t                                            BoneTreeIndex;                                              // 0x0000   (0x0004)  
};

/// Struct /Script/Engine.StringCurveKey
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FStringCurveKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	FString                                            Value;                                                      // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.StringCurve
/// Size: 0x0020 (32 bytes) (0x000068 - 0x000088) align 8 pad: 0x0000
struct FStringCurve : FIndexedCurve
{ 
	FString                                            DefaultValue;                                               // 0x0068   (0x0010)  
	TArray<FStringCurveKey>                            Keys;                                                       // 0x0078   (0x0010)  
};

/// Struct /Script/Engine.BakedStringCustomAttribute
/// Size: 0x0098 (152 bytes) (0x000000 - 0x000098) align 8 pad: 0x0000
struct FBakedStringCustomAttribute
{ 
	FName                                              AttributeName;                                              // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FStringCurve                                       StringCurve;                                                // 0x0010   (0x0088)  
};

/// Struct /Script/Engine.IntegralKey
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FIntegralKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	int32_t                                            Value;                                                      // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.IntegralCurve
/// Size: 0x0018 (24 bytes) (0x000068 - 0x000080) align 8 pad: 0x0000
struct FIntegralCurve : FIndexedCurve
{ 
	TArray<FIntegralKey>                               Keys;                                                       // 0x0068   (0x0010)  
	int32_t                                            DefaultValue;                                               // 0x0078   (0x0004)  
	bool                                               bUseDefaultValueBeforeFirstKey;                             // 0x007C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x007D   (0x0003)  MISSED
};

/// Struct /Script/Engine.BakedIntegerCustomAttribute
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align 8 pad: 0x0000
struct FBakedIntegerCustomAttribute
{ 
	FName                                              AttributeName;                                              // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FIntegralCurve                                     IntCurve;                                                   // 0x0010   (0x0080)  
};

/// Struct /Script/Engine.SimpleCurveKey
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FSimpleCurveKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	float                                              Value;                                                      // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.SimpleCurve
/// Size: 0x0018 (24 bytes) (0x000070 - 0x000088) align 8 pad: 0x0000
struct FSimpleCurve : FRealCurve
{ 
	TEnumAsByte<ERichCurveInterpMode>                  InterpMode;                                                 // 0x0070   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0071   (0x0007)  MISSED
	TArray<FSimpleCurveKey>                            Keys;                                                       // 0x0078   (0x0010)  
};

/// Struct /Script/Engine.BakedFloatCustomAttribute
/// Size: 0x0098 (152 bytes) (0x000000 - 0x000098) align 8 pad: 0x0000
struct FBakedFloatCustomAttribute
{ 
	FName                                              AttributeName;                                              // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FSimpleCurve                                       FloatCurve;                                                 // 0x0010   (0x0088)  
};

/// Struct /Script/Engine.BakedCustomAttributePerBoneData
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FBakedCustomAttributePerBoneData
{ 
	int32_t                                            BoneTreeIndex;                                              // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	TArray<FBakedStringCustomAttribute>                StringAttributes;                                           // 0x0008   (0x0010)  
	TArray<FBakedIntegerCustomAttribute>               IntAttributes;                                              // 0x0018   (0x0010)  
	TArray<FBakedFloatCustomAttribute>                 FloatAttributes;                                            // 0x0028   (0x0010)  
};

/// Class /Script/Engine.AnimSequence
/// Size: 0x0150 (336 bytes) (0x0000C0 - 0x000210) align 16 pad: 0x0000
class UAnimSequence : public UAnimSequenceBase
{ 
public:
	int32_t                                            NumFrames;                                                  // 0x00C0   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00C4   (0x0004)  MISSED
	TArray<FTrackToSkeletonMap>                        TrackToSkeletonMapTable;                                    // 0x00C8   (0x0010)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x00D8   (0x0010)  MISSED
	class UAnimBoneCompressionSettings*                BoneCompressionSettings;                                    // 0x00E8   (0x0008)  
	class UAnimCurveCompressionSettings*               CurveCompressionSettings;                                   // 0x00F0   (0x0008)  
	unsigned char                                      UnknownData02_6[0x70];                                      // 0x00F8   (0x0070)  MISSED
	TEnumAsByte<EAdditiveAnimationType>                AdditiveAnimType;                                           // 0x0168   (0x0001)  
	TEnumAsByte<EAdditiveBasePoseType>                 RefPoseType;                                                // 0x0169   (0x0001)  
	unsigned char                                      UnknownData03_6[0x6];                                       // 0x016A   (0x0006)  MISSED
	class UAnimSequence*                               RefPoseSeq;                                                 // 0x0170   (0x0008)  
	int32_t                                            RefFrameIndex;                                              // 0x0178   (0x0004)  
	FName                                              RetargetSource;                                             // 0x017C   (0x000C)  
	EAnimInterpolationType                             Interpolation;                                              // 0x0188   (0x0001)  
	bool                                               bHasNonUniformScale;                                        // 0x0189   (0x0001)  
	bool                                               bApplyRootOffset;                                           // 0x018A   (0x0001)  
	unsigned char                                      UnknownData04_6[0x5];                                       // 0x018B   (0x0005)  MISSED
	FTransform                                         RootOffset;                                                 // 0x0190   (0x0030)  
	bool                                               bEnableRootMotion;                                          // 0x01C0   (0x0001)  
	TEnumAsByte<ERootMotionRootLock>                   RootMotionRootLock;                                         // 0x01C1   (0x0001)  
	bool                                               bForceRootLock;                                             // 0x01C2   (0x0001)  
	bool                                               bUseNormalizedRootMotionScale;                              // 0x01C3   (0x0001)  
	bool                                               bRootMotionSettingsCopiedFromMontage;                       // 0x01C4   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x01C5   (0x0003)  MISSED
	TArray<FAnimSyncMarker>                            AuthoredSyncMarkers;                                        // 0x01C8   (0x0010)  
	unsigned char                                      UnknownData06_6[0x18];                                      // 0x01D8   (0x0018)  MISSED
	TArray<FBakedCustomAttributePerBoneData>           BakedPerBoneCustomAttributeData;                            // 0x01F0   (0x0010)  
	bool                                               bForceFlyMotion;                                            // 0x0200   (0x0001)  
	unsigned char                                      UnknownData07_7[0xF];                                       // 0x0201   (0x000F)  MISSED
	// void SetUseNormalizedRootMotionScale(bool bInbUseNormalizedRootMotionScale);                                             // [0x45d8a60] Final|Native|Public|BlueprintCallable 
	// void SetRootMotionRootLock(TEnumAsByte<ERootMotionRootLock> InRootMotionRootLock);                                       // [0x45d89e0] Final|Native|Public|BlueprintCallable 
	// void SetKuroRootMotionSettings(bool ForceFlyMotion);                                                                     // [0x45d8950] Final|Native|Public|BlueprintCallable 
	// void SetForceRootLock(bool bInForceRootLock);                                                                            // [0x45d88c0] Final|Native|Public|BlueprintCallable 
	// void SetEnableRootMotion(bool bInEnableRootMotion);                                                                      // [0x45d8830] Final|Native|Public|BlueprintCallable 
	// void GetKuroRootMotionSettings(bool& ForceFlyMotion);                                                                    // [0x45d8760] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Struct /Script/Engine.AnimSetMeshLinkup
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FAnimSetMeshLinkup
{ 
	TArray<int32_t>                                    BoneToTrackTable;                                           // 0x0000   (0x0010)  
};

/// Class /Script/Engine.AnimSet
/// Size: 0x00D0 (208 bytes) (0x000030 - 0x000100) align 8 pad: 0x0000
class UAnimSet : public UObject
{ 
public:
	bool                                               bAnimRotationOnly : 1;                                      // 0x0030:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0031   (0x0007)  MISSED
	TArray<FName>                                      TrackBoneNames;                                             // 0x0038   (0x0010)  
	TArray<FAnimSetMeshLinkup>                         LinkupCache;                                                // 0x0048   (0x0010)  
	TArray<char>                                       BoneUseAnimTranslation;                                     // 0x0058   (0x0010)  
	TArray<char>                                       ForceUseMeshTranslation;                                    // 0x0068   (0x0010)  
	TArray<FName>                                      UseTranslationBoneNames;                                    // 0x0078   (0x0010)  
	TArray<FName>                                      ForceMeshTranslationBoneNames;                              // 0x0088   (0x0010)  
	FName                                              PreviewSkelMeshName;                                        // 0x0098   (0x000C)  
	FName                                              BestRatioSkelMeshName;                                      // 0x00A4   (0x000C)  
	unsigned char                                      UnknownData01_7[0x50];                                      // 0x00B0   (0x0050)  MISSED
};

/// Class /Script/Engine.AnimSingleNodeInstance
/// Size: 0x0028 (40 bytes) (0x000378 - 0x0003A0) align 16 pad: 0x0000
class UAnimSingleNodeInstance : public UAnimInstance
{ 
public:
	class UAnimationAsset*                             CurrentAsset;                                               // 0x0378   (0x0008)  
	class UAnimationAsset*                             CurrentRibbonAsset;                                         // 0x0380   (0x0008)  
	SDK_UNDEFINED(20,95) /* FDelegateProperty */       __um(PostEvaluateAnimEvent);                                // 0x0388   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x039C   (0x0004)  MISSED
	// void StopAnim();                                                                                                         // [0x45dc650] Final|Native|Public|BlueprintCallable 
	// void SetReverse(bool bInReverse);                                                                                        // [0x45dc5c0] Final|Native|Public|BlueprintCallable 
	// void SetPreviewCurveOverride(FName& PoseName, float Value, bool bRemoveIfZero);                                          // [0x45dc4a0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies);                            // [0x45dc380] Final|Native|Public|BlueprintCallable 
	// void SetPosition(float InPosition, bool bFireNotifies);                                                                  // [0x45dc2a0] Final|Native|Public|BlueprintCallable 
	// void SetPlayRate(float InPlayRate);                                                                                      // [0x45dc190] Final|Native|Public|BlueprintCallable 
	// void SetPlaying(bool bIsPlaying);                                                                                        // [0x45dc210] Final|Native|Public|BlueprintCallable 
	// void SetLooping(bool bIsLooping);                                                                                        // [0x45dc100] Final|Native|Public|BlueprintCallable 
	// void SetBlendSpaceInput(FVector& InBlendInput);                                                                          // [0x45dc070] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetAnimationRibbonAsset(class UAnimationAsset* NewAsset);                                                           // [0x45dbf50] Final|Native|Public|BlueprintCallable 
	// void SetAnimationAsset(class UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);                              // [0x45dbe30] Native|Public|BlueprintCallable 
	// void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition);                                                 // [0x45dbd20] Final|Native|Public|BlueprintCallable 
	// float GetLength();                                                                                                       // [0x45dbcf0] Final|Native|Public|BlueprintCallable 
	// class UAnimationAsset* GetAnimationAsset();                                                                              // [0x45dbcc0] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.AnimStateMachineTypes
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UAnimStateMachineTypes : public UObject
{ 
public:
};

/// Class /Script/Engine.AnimStreamable
/// Size: 0x0040 (64 bytes) (0x0000C0 - 0x000100) align 8 pad: 0x0000
class UAnimStreamable : public UAnimSequenceBase
{ 
public:
	int32_t                                            NumFrames;                                                  // 0x00C0   (0x0004)  
	EAnimInterpolationType                             Interpolation;                                              // 0x00C4   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x00C5   (0x0003)  MISSED
	FName                                              RetargetSource;                                             // 0x00C8   (0x000C)  
	unsigned char                                      UnknownData01_6[0x14];                                      // 0x00D4   (0x0014)  MISSED
	class UAnimBoneCompressionSettings*                BoneCompressionSettings;                                    // 0x00E8   (0x0008)  
	class UAnimCurveCompressionSettings*               CurveCompressionSettings;                                   // 0x00F0   (0x0008)  
	bool                                               bEnableRootMotion;                                          // 0x00F8   (0x0001)  
	TEnumAsByte<ERootMotionRootLock>                   RootMotionRootLock;                                         // 0x00F9   (0x0001)  
	bool                                               bForceRootLock;                                             // 0x00FA   (0x0001)  
	bool                                               bUseNormalizedRootMotionScale;                              // 0x00FB   (0x0001)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x00FC   (0x0004)  MISSED
};

/// Class /Script/Engine.ArrowComponent
/// Size: 0x0020 (32 bytes) (0x0004E0 - 0x000500) align 16 pad: 0x0000
class UArrowComponent : public UPrimitiveComponent
{ 
public:
	FColor                                             ArrowColor;                                                 // 0x04E0   (0x0004)  
	float                                              ArrowSize;                                                  // 0x04E4   (0x0004)  
	float                                              ArrowLength;                                                // 0x04E8   (0x0004)  
	float                                              ScreenSize;                                                 // 0x04EC   (0x0004)  
	bool                                               bIsScreenSizeScaled : 1;                                    // 0x04F0:0 (0x0001)  
	bool                                               bTreatAsASprite : 1;                                        // 0x04F0:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0xF];                                       // 0x04F1   (0x000F)  MISSED
	// void SetArrowColor(FLinearColor NewColor);                                                                               // [0x45dbfe0] Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.AssetExportTask
/// Size: 0x0050 (80 bytes) (0x000030 - 0x000080) align 8 pad: 0x0000
class UAssetExportTask : public UObject
{ 
public:
	class UObject*                                     Object;                                                     // 0x0030   (0x0008)  
	class UExporter*                                   Exporter;                                                   // 0x0038   (0x0008)  
	FString                                            Filename;                                                   // 0x0040   (0x0010)  
	bool                                               bSelected;                                                  // 0x0050   (0x0001)  
	bool                                               bReplaceIdentical;                                          // 0x0051   (0x0001)  
	bool                                               bPrompt;                                                    // 0x0052   (0x0001)  
	bool                                               bAutomated;                                                 // 0x0053   (0x0001)  
	bool                                               bUseFileArchive;                                            // 0x0054   (0x0001)  
	bool                                               bWriteEmptyFiles;                                           // 0x0055   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0056   (0x0002)  MISSED
	TArray<class UObject*>                             IgnoreObjectList;                                           // 0x0058   (0x0010)  
	class UObject*                                     Options;                                                    // 0x0068   (0x0008)  
	TArray<FString>                                    Errors;                                                     // 0x0070   (0x0010)  
};

/// Class /Script/Engine.AssetImportData
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UAssetImportData : public UObject
{ 
public:
};

/// Class /Script/Engine.AssetManager
/// Size: 0x0430 (1072 bytes) (0x000030 - 0x000460) align 8 pad: 0x0000
class UAssetManager : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x298];                                     // 0x0030   (0x0298)  MISSED
	TArray<class UObject*>                             ObjectReferenceList;                                        // 0x02C8   (0x0010)  
	bool                                               bIsGlobalAsyncScanEnvironment;                              // 0x02D8   (0x0001)  
	bool                                               bShouldGuessTypeAndName;                                    // 0x02D9   (0x0001)  
	bool                                               bShouldUseSynchronousLoad;                                  // 0x02DA   (0x0001)  
	bool                                               bIsLoadingFromPakFiles;                                     // 0x02DB   (0x0001)  
	bool                                               bShouldAcquireMissingChunksOnLoad;                          // 0x02DC   (0x0001)  
	bool                                               bOnlyCookProductionAssets;                                  // 0x02DD   (0x0001)  
	bool                                               bIsBulkScanning;                                            // 0x02DE   (0x0001)  
	bool                                               bIsPrimaryAssetDirectoryCurrent;                            // 0x02DF   (0x0001)  
	bool                                               bIsManagementDatabaseCurrent;                               // 0x02E0   (0x0001)  
	bool                                               bUpdateManagementDatabaseAfterScan;                         // 0x02E1   (0x0001)  
	bool                                               bIncludeOnlyOnDiskAssets;                                   // 0x02E2   (0x0001)  
	bool                                               bHasCompletedInitialScan;                                   // 0x02E3   (0x0001)  
	int32_t                                            NumberOfSpawnedNotifications;                               // 0x02E4   (0x0004)  
	unsigned char                                      UnknownData01_7[0x178];                                     // 0x02E8   (0x0178)  MISSED
};

/// Struct /Script/Engine.PrimaryAssetRules
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FPrimaryAssetRules
{ 
	int32_t                                            Priority;                                                   // 0x0000   (0x0004)  
	int32_t                                            ChunkId;                                                    // 0x0004   (0x0004)  
	bool                                               bApplyRecursively;                                          // 0x0008   (0x0001)  
	EPrimaryAssetCookRule                              CookRule;                                                   // 0x0009   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x000A   (0x0002)  MISSED
};

/// Struct /Script/Engine.PrimaryAssetTypeInfo
/// Size: 0x0098 (152 bytes) (0x000000 - 0x000098) align 8 pad: 0x0000
struct FPrimaryAssetTypeInfo
{ 
	FName                                              PrimaryAssetType;                                           // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	SDK_UNDEFINED(48,96) /* TWeakObjectPtr<UClass*> */ __um(AssetBaseClass);                                       // 0x0010   (0x0030)  
	class UClass*                                      AssetBaseClassLoaded;                                       // 0x0040   (0x0008)  
	bool                                               bHasBlueprintClasses;                                       // 0x0048   (0x0001)  
	bool                                               bIsEditorOnly;                                              // 0x0049   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x004A   (0x0006)  MISSED
	TArray<FDirectoryPath>                             Directories;                                                // 0x0050   (0x0010)  
	TArray<FSoftObjectPath>                            SpecificAssets;                                             // 0x0060   (0x0010)  
	FPrimaryAssetRules                                 Rules;                                                      // 0x0070   (0x000C)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x007C   (0x0004)  MISSED
	TArray<FString>                                    AssetScanPaths;                                             // 0x0080   (0x0010)  
	bool                                               bIsDynamicAsset;                                            // 0x0090   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0091   (0x0003)  MISSED
	int32_t                                            NumberOfAssets;                                             // 0x0094   (0x0004)  
};

/// Struct /Script/Engine.PrimaryAssetRulesOverride
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align 4 pad: 0x0000
struct FPrimaryAssetRulesOverride
{ 
	FPrimaryAssetId                                    PrimaryAssetId;                                             // 0x0000   (0x0018)  
	FPrimaryAssetRules                                 Rules;                                                      // 0x0018   (0x000C)  
};

/// Struct /Script/Engine.PrimaryAssetRulesCustomOverride
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 pad: 0x0000
struct FPrimaryAssetRulesCustomOverride
{ 
	FPrimaryAssetType                                  PrimaryAssetType;                                           // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FDirectoryPath                                     FilterDirectory;                                            // 0x0010   (0x0010)  
	FString                                            FilterString;                                               // 0x0020   (0x0010)  
	FPrimaryAssetRules                                 Rules;                                                      // 0x0030   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Struct /Script/Engine.AssetManagerRedirect
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FAssetManagerRedirect
{ 
	FString                                            Old;                                                        // 0x0000   (0x0010)  
	FString                                            New;                                                        // 0x0010   (0x0010)  
};

/// Class /Script/Engine.AssetManagerSettings
/// Size: 0x00C8 (200 bytes) (0x000048 - 0x000110) align 8 pad: 0x0000
class UAssetManagerSettings : public UDeveloperSettings
{ 
public:
	TArray<FPrimaryAssetTypeInfo>                      PrimaryAssetTypesToScan;                                    // 0x0048   (0x0010)  
	TArray<FDirectoryPath>                             DirectoriesToExclude;                                       // 0x0058   (0x0010)  
	TArray<FPrimaryAssetRulesOverride>                 PrimaryAssetRules;                                          // 0x0068   (0x0010)  
	TArray<FPrimaryAssetRulesCustomOverride>           CustomPrimaryAssetRules;                                    // 0x0078   (0x0010)  
	bool                                               bOnlyCookProductionAssets;                                  // 0x0088   (0x0001)  
	bool                                               bShouldManagerDetermineTypeAndName;                         // 0x0089   (0x0001)  
	bool                                               bShouldGuessTypeAndNameInEditor;                            // 0x008A   (0x0001)  
	bool                                               bShouldAcquireMissingChunksOnLoad;                          // 0x008B   (0x0001)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x008C   (0x0004)  MISSED
	TArray<FAssetManagerRedirect>                      PrimaryAssetIdRedirects;                                    // 0x0090   (0x0010)  
	TArray<FAssetManagerRedirect>                      PrimaryAssetTypeRedirects;                                  // 0x00A0   (0x0010)  
	TArray<FAssetManagerRedirect>                      AssetPathRedirects;                                         // 0x00B0   (0x0010)  
	SDK_UNDEFINED(80,97) /* TSet<FName> */             __um(MetaDataTagsForAssetRegistry);                         // 0x00C0   (0x0050)  
};

/// Struct /Script/Engine.AssetMapping
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FAssetMapping
{ 
	class UAnimationAsset*                             SourceAsset;                                                // 0x0000   (0x0008)  
	class UAnimationAsset*                             TargetAsset;                                                // 0x0008   (0x0008)  
};

/// Class /Script/Engine.AssetMappingTable
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UAssetMappingTable : public UObject
{ 
public:
	TArray<FAssetMapping>                              MappedAssets;                                               // 0x0030   (0x0010)  
};

/// Class /Script/Engine.AsyncActionHandleSaveGame
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000070) align 8 pad: 0x0000
class UAsyncActionHandleSaveGame : public UBlueprintAsyncActionBase
{ 
public:
	SDK_UNDEFINED(16,98) /* FMulticastInlineDelegate */ __um(Completed);                                           // 0x0038   (0x0010)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0048   (0x0020)  MISSED
	class USaveGame*                                   SaveGameObject;                                             // 0x0068   (0x0008)  
	// class UAsyncActionHandleSaveGame* AsyncSaveGameToSlot(class UObject* WorldContextObject, class USaveGame* SaveGameObject, FString SlotName, int32_t UserIndex); // [0x45dfc20] Final|Native|Static|Public|BlueprintCallable 
	// class UAsyncActionHandleSaveGame* AsyncLoadGameFromSlot(class UObject* WorldContextObject, FString SlotName, int32_t UserIndex); // [0x45df5a0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAssetBase
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000080) align 8 pad: 0x0000
class UAsyncActionLoadPrimaryAssetBase : public UBlueprintAsyncActionBase
{ 
public:
	unsigned char                                      UnknownData00_1[0x48];                                      // 0x0038   (0x0048)  MISSED
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAsset
/// Size: 0x0010 (16 bytes) (0x000080 - 0x000090) align 8 pad: 0x0000
class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase
{ 
public:
	SDK_UNDEFINED(16,99) /* FMulticastInlineDelegate */ __um(Completed);                                           // 0x0080   (0x0010)  
	// class UAsyncActionLoadPrimaryAsset* AsyncLoadPrimaryAsset(class UObject* WorldContextObject, FPrimaryAssetId PrimaryAsset, TArray<FName>& LoadBundles); // [0x45df6c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAssetClass
/// Size: 0x0010 (16 bytes) (0x000080 - 0x000090) align 8 pad: 0x0000
class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase
{ 
public:
	SDK_UNDEFINED(16,100) /* FMulticastInlineDelegate */ __um(Completed);                                          // 0x0080   (0x0010)  
	// class UAsyncActionLoadPrimaryAssetClass* AsyncLoadPrimaryAssetClass(class UObject* WorldContextObject, FPrimaryAssetId PrimaryAsset, TArray<FName>& LoadBundles); // [0x45df810] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAssetList
/// Size: 0x0010 (16 bytes) (0x000080 - 0x000090) align 8 pad: 0x0000
class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase
{ 
public:
	SDK_UNDEFINED(16,101) /* FMulticastInlineDelegate */ __um(Completed);                                          // 0x0080   (0x0010)  
	// class UAsyncActionLoadPrimaryAssetList* AsyncLoadPrimaryAssetList(class UObject* WorldContextObject, TArray<FPrimaryAssetId>& PrimaryAssetList, TArray<FName>& LoadBundles); // [0x45dfac0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAssetClassList
/// Size: 0x0010 (16 bytes) (0x000080 - 0x000090) align 8 pad: 0x0000
class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase
{ 
public:
	SDK_UNDEFINED(16,102) /* FMulticastInlineDelegate */ __um(Completed);                                          // 0x0080   (0x0010)  
	// class UAsyncActionLoadPrimaryAssetClassList* AsyncLoadPrimaryAssetClassList(class UObject* WorldContextObject, TArray<FPrimaryAssetId>& PrimaryAssetList, TArray<FName>& LoadBundles); // [0x45df960] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.AsyncActionChangePrimaryAssetBundles
/// Size: 0x0010 (16 bytes) (0x000080 - 0x000090) align 8 pad: 0x0000
class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase
{ 
public:
	SDK_UNDEFINED(16,103) /* FMulticastInlineDelegate */ __um(Completed);                                          // 0x0080   (0x0010)  
	// class UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForPrimaryAssetList(class UObject* WorldContextObject, TArray<FPrimaryAssetId>& PrimaryAssetList, TArray<FName>& AddBundles, TArray<FName>& RemoveBundles); // [0x45df3e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// class UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForMatchingPrimaryAssets(class UObject* WorldContextObject, TArray<FName>& NewBundles, TArray<FName>& OldBundles); // [0x45df280] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.AtmosphericFog
/// Size: 0x0008 (8 bytes) (0x0002A8 - 0x0002B0) align 8 pad: 0x0000
class AAtmosphericFog : public AInfo
{ 
public:
	class UAtmosphericFogComponent*                    AtmosphericFogComponent;                                    // 0x02A8   (0x0008)  
};

/// Struct /Script/Engine.AtmospherePrecomputeParameters
/// Size: 0x002C (44 bytes) (0x000000 - 0x00002C) align 4 pad: 0x0000
struct FAtmospherePrecomputeParameters
{ 
	float                                              DensityHeight;                                              // 0x0000   (0x0004)  
	float                                              DecayHeight;                                                // 0x0004   (0x0004)  
	int32_t                                            MaxScatteringOrder;                                         // 0x0008   (0x0004)  
	int32_t                                            TransmittanceTexWidth;                                      // 0x000C   (0x0004)  
	int32_t                                            TransmittanceTexHeight;                                     // 0x0010   (0x0004)  
	int32_t                                            IrradianceTexWidth;                                         // 0x0014   (0x0004)  
	int32_t                                            IrradianceTexHeight;                                        // 0x0018   (0x0004)  
	int32_t                                            InscatterAltitudeSampleNum;                                 // 0x001C   (0x0004)  
	int32_t                                            InscatterMuNum;                                             // 0x0020   (0x0004)  
	int32_t                                            InscatterMuSNum;                                            // 0x0024   (0x0004)  
	int32_t                                            InscatterNuNum;                                             // 0x0028   (0x0004)  
};

/// Class /Script/Engine.AtmosphericFogComponent
/// Size: 0x0108 (264 bytes) (0x000218 - 0x000320) align 16 pad: 0x0000
class UAtmosphericFogComponent : public USceneComponent
{ 
public:
	float                                              SunMultiplier;                                              // 0x0218   (0x0004)  
	float                                              FogMultiplier;                                              // 0x021C   (0x0004)  
	float                                              DensityMultiplier;                                          // 0x0220   (0x0004)  
	float                                              DensityOffset;                                              // 0x0224   (0x0004)  
	float                                              DistanceScale;                                              // 0x0228   (0x0004)  
	float                                              AltitudeScale;                                              // 0x022C   (0x0004)  
	float                                              DistanceOffset;                                             // 0x0230   (0x0004)  
	float                                              GroundOffset;                                               // 0x0234   (0x0004)  
	float                                              StartDistance;                                              // 0x0238   (0x0004)  
	float                                              SunDiscScale;                                               // 0x023C   (0x0004)  
	float                                              DefaultBrightness;                                          // 0x0240   (0x0004)  
	FColor                                             DefaultLightColor;                                          // 0x0244   (0x0004)  
	bool                                               bDisableSunDisk : 1;                                        // 0x0248:0 (0x0001)  
	bool                                               bAtmosphereAffectsSunIlluminance : 1;                       // 0x0248:1 (0x0001)  
	bool                                               bDisableGroundScattering : 1;                               // 0x0248:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0249   (0x0003)  MISSED
	FAtmospherePrecomputeParameters                    PrecomputeParams;                                           // 0x024C   (0x002C)  
	class UTexture2D*                                  TransmittanceTexture;                                       // 0x0278   (0x0008)  
	class UTexture2D*                                  IrradianceTexture;                                          // 0x0280   (0x0008)  
	unsigned char                                      UnknownData01_7[0x98];                                      // 0x0288   (0x0098)  MISSED
	// void StartPrecompute();                                                                                                  // [0x95a130] Final|Native|Public|BlueprintCallable 
	// void SetSunMultiplier(float NewSunMultiplier);                                                                           // [0x45e0450] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetStartDistance(float NewStartDistance);                                                                           // [0x45e03d0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetPrecomputeParams(float DensityHeight, int32_t MaxScatteringOrder, int32_t InscatterAltitudeSampleNum);           // [0x45e02b0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetFogMultiplier(float NewFogMultiplier);                                                                           // [0x45e0230] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetDistanceScale(float NewDistanceScale);                                                                           // [0x45e01b0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetDistanceOffset(float NewDistanceOffset);                                                                         // [0x45e0130] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetDensityOffset(float NewDensityOffset);                                                                           // [0x45e00b0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetDensityMultiplier(float NewDensityMultiplier);                                                                   // [0x45e0030] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetDefaultLightColor(FLinearColor NewLightColor);                                                                   // [0x45dffa0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// void SetDefaultBrightness(float NewBrightness);                                                                          // [0x45dff20] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetAltitudeScale(float NewAltitudeScale);                                                                           // [0x45dfea0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void DisableSunDisk(bool NewSunDisk);                                                                                    // [0x45dfe10] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void DisableGroundScattering(bool NewGroundScattering);                                                                  // [0x45dfd80] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.AudioBus
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UAudioBus : public UObject
{ 
public:
	EAudioBusChannels                                  AudioBusChannels;                                           // 0x0030   (0x0001)  
	bool                                               bIsAutomatic;                                               // 0x0031   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x0032   (0x0006)  MISSED
};

/// Struct /Script/Engine.AudioComponentParam
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FAudioComponentParam
{ 
	FName                                              ParamName;                                                  // 0x0000   (0x000C)  
	float                                              FloatParam;                                                 // 0x000C   (0x0004)  
	bool                                               BoolParam;                                                  // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0011   (0x0003)  MISSED
	int32_t                                            IntParam;                                                   // 0x0014   (0x0004)  
	class USoundWave*                                  SoundWaveParam;                                             // 0x0018   (0x0008)  
};

/// Class /Script/Engine.AudioComponent
/// Size: 0x0678 (1656 bytes) (0x000218 - 0x000890) align 16 pad: 0x0000
class UAudioComponent : public USceneComponent
{ 
public:
	class USoundBase*                                  Sound;                                                      // 0x0218   (0x0008)  
	TArray<FAudioComponentParam>                       InstanceParameters;                                         // 0x0220   (0x0010)  
	class USoundClass*                                 SoundClassOverride;                                         // 0x0230   (0x0008)  
	bool                                               bAutoDestroy : 1;                                           // 0x0238:0 (0x0001)  
	bool                                               bStopWhenOwnerDestroyed : 1;                                // 0x0238:1 (0x0001)  
	bool                                               bShouldRemainActiveIfDropped : 1;                           // 0x0238:2 (0x0001)  
	bool                                               bAllowSpatialization : 1;                                   // 0x0238:3 (0x0001)  
	bool                                               bOverrideAttenuation : 1;                                   // 0x0238:4 (0x0001)  
	bool                                               bOverrideSubtitlePriority : 1;                              // 0x0238:5 (0x0001)  
	bool                                               bIsUISound : 1;                                             // 0x0238:6 (0x0001)  
	bool                                               bEnableLowPassFilter : 1;                                   // 0x0238:7 (0x0001)  
	bool                                               bOverridePriority : 1;                                      // 0x0239:0 (0x0001)  
	bool                                               bSuppressSubtitles : 1;                                     // 0x0239:1 (0x0001)  
	unsigned char                                      UnknownBit00 : 1;                                           // 0x0239:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit01 : 1;                                           // 0x0239:3 (0x0001)  MISSED
	unsigned char                                      UnknownBit02 : 1;                                           // 0x0239:4 (0x0001)  MISSED
	unsigned char                                      UnknownBit03 : 1;                                           // 0x0239:5 (0x0001)  MISSED
	unsigned char                                      UnknownBit04 : 1;                                           // 0x0239:6 (0x0001)  MISSED
	unsigned char                                      UnknownBit05 : 1;                                           // 0x0239:7 (0x0001)  MISSED
	unsigned char                                      UnknownBit06 : 1;                                           // 0x023A:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit07 : 1;                                           // 0x023A:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit08 : 1;                                           // 0x023A:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit09 : 1;                                           // 0x023A:3 (0x0001)  MISSED
	bool                                               bAutoManageAttachment : 1;                                  // 0x023A:4 (0x0001)  
	unsigned char                                      UnknownData10_5[0x5];                                       // 0x023B   (0x0005)  MISSED
	FName                                              AudioComponentUserID;                                       // 0x0240   (0x000C)  
	float                                              PitchModulationMin;                                         // 0x024C   (0x0004)  
	float                                              PitchModulationMax;                                         // 0x0250   (0x0004)  
	float                                              VolumeModulationMin;                                        // 0x0254   (0x0004)  
	float                                              VolumeModulationMax;                                        // 0x0258   (0x0004)  
	float                                              VolumeMultiplier;                                           // 0x025C   (0x0004)  
	int32_t                                            EnvelopeFollowerAttackTime;                                 // 0x0260   (0x0004)  
	int32_t                                            EnvelopeFollowerReleaseTime;                                // 0x0264   (0x0004)  
	float                                              Priority;                                                   // 0x0268   (0x0004)  
	float                                              SubtitlePriority;                                           // 0x026C   (0x0004)  
	class USoundEffectSourcePresetChain*               SourceEffectChain;                                          // 0x0270   (0x0008)  
	float                                              PitchMultiplier;                                            // 0x0278   (0x0004)  
	float                                              LowPassFilterFrequency;                                     // 0x027C   (0x0004)  
	unsigned char                                      UnknownData11_6[0x8];                                       // 0x0280   (0x0008)  MISSED
	class USoundAttenuation*                           AttenuationSettings;                                        // 0x0288   (0x0008)  
	FSoundAttenuationSettings                          AttenuationOverrides;                                       // 0x0290   (0x03A0)  
	class USoundConcurrency*                           ConcurrencySettings;                                        // 0x0630   (0x0008)  
	SDK_UNDEFINED(80,104) /* TSet<USoundConcurrency*> */ __um(ConcurrencySet);                                     // 0x0638   (0x0050)  
	unsigned char                                      UnknownData12_6[0xC];                                       // 0x0688   (0x000C)  MISSED
	EAttachmentRule                                    AutoAttachLocationRule;                                     // 0x0694   (0x0001)  
	EAttachmentRule                                    AutoAttachRotationRule;                                     // 0x0695   (0x0001)  
	EAttachmentRule                                    AutoAttachScaleRule;                                        // 0x0696   (0x0001)  
	unsigned char                                      UnknownData13_6[0x1];                                       // 0x0697   (0x0001)  MISSED
	FSoundModulationDefaultRoutingSettings             ModulationRouting;                                          // 0x0698   (0x0048)  
	SDK_UNDEFINED(16,105) /* FMulticastInlineDelegate */ __um(OnAudioPlayStateChanged);                            // 0x06E0   (0x0010)  
	unsigned char                                      UnknownData14_6[0x18];                                      // 0x06F0   (0x0018)  MISSED
	SDK_UNDEFINED(16,106) /* FMulticastInlineDelegate */ __um(OnAudioVirtualizationChanged);                       // 0x0708   (0x0010)  
	unsigned char                                      UnknownData15_6[0x18];                                      // 0x0718   (0x0018)  MISSED
	SDK_UNDEFINED(16,107) /* FMulticastInlineDelegate */ __um(OnAudioFinished);                                    // 0x0730   (0x0010)  
	unsigned char                                      UnknownData16_6[0x18];                                      // 0x0740   (0x0018)  MISSED
	SDK_UNDEFINED(16,108) /* FMulticastInlineDelegate */ __um(OnAudioPlaybackPercent);                             // 0x0758   (0x0010)  
	unsigned char                                      UnknownData17_6[0x18];                                      // 0x0768   (0x0018)  MISSED
	SDK_UNDEFINED(16,109) /* FMulticastInlineDelegate */ __um(OnAudioSingleEnvelopeValue);                         // 0x0780   (0x0010)  
	unsigned char                                      UnknownData18_6[0x18];                                      // 0x0790   (0x0018)  MISSED
	SDK_UNDEFINED(16,110) /* FMulticastInlineDelegate */ __um(OnAudioMultiEnvelopeValue);                          // 0x07A8   (0x0010)  
	unsigned char                                      UnknownData19_6[0x18];                                      // 0x07B8   (0x0018)  MISSED
	SDK_UNDEFINED(20,111) /* FDelegateProperty */      __um(OnQueueSubtitles);                                     // 0x07D0   (0x0014)  
	SDK_UNDEFINED(8,112) /* TWeakObjectPtr<USceneComponent*> */ __um(AutoAttachParent);                            // 0x07E4   (0x0008)  
	FName                                              AutoAttachSocketName;                                       // 0x07EC   (0x000C)  
	unsigned char                                      UnknownData20_7[0x98];                                      // 0x07F8   (0x0098)  MISSED
	// void StopDelayed(float delayTime);                                                                                       // [0x45e4260] Final|Native|Public|BlueprintCallable 
	// void Stop();                                                                                                             // [0x45e4240] Native|Public|BlueprintCallable 
	// void SetWaveParameter(FName InName, class USoundWave* InWave);                                                           // [0x45e4150] Final|Native|Public|BlueprintCallable 
	// void SetVolumeMultiplier(float NewVolumeMultiplier);                                                                     // [0x45e40d0] Final|Native|Public|BlueprintCallable 
	// void SetUISound(bool bInUISound);                                                                                        // [0x45e4040] Final|Native|Public|BlueprintCallable 
	// void SetSubmixSend(class USoundSubmixBase* Submix, float SendLevel);                                                     // [0x45e3ea0] Final|Native|Public|BlueprintCallable 
	// void SetSourceBusSendPreEffect(class USoundSourceBus* SoundSourceBus, float SourceBusSendLevel);                         // [0x45e3d00] Final|Native|Public|BlueprintCallable 
	// void SetSourceBusSendPostEffect(class USoundSourceBus* SoundSourceBus, float SourceBusSendLevel);                        // [0x45e3c30] Final|Native|Public|BlueprintCallable 
	// void SetSound(class USoundBase* NewSound);                                                                               // [0x45e3ba0] Final|Native|Public|BlueprintCallable 
	// void SetPitchMultiplier(float NewPitchMultiplier);                                                                       // [0x45e39f0] Final|Native|Public|BlueprintCallable 
	// void SetPaused(bool bPause);                                                                                             // [0x45e3960] Final|Native|Public|BlueprintCallable 
	// void SetLowPassFilterFrequency(float InLowPassFilterFrequency);                                                          // [0x45e38e0] Final|Native|Public|BlueprintCallable 
	// void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);                                                               // [0x45e3850] Final|Native|Public|BlueprintCallable 
	// void SetIntParameter(FName InName, int32_t inInt);                                                                       // [0x45e36d0] Final|Native|Public|BlueprintCallable 
	// void SetFloatParameter(FName InName, float InFloat);                                                                     // [0x45e35e0] Final|Native|Public|BlueprintCallable 
	// void SetBoolParameter(FName InName, bool InBool);                                                                        // [0x45e3460] Final|Native|Public|BlueprintCallable 
	// void SetAudioBusSendPreEffect(class UAudioBus* AudioBus, float AudioBusSendLevel);                                       // [0x45e3390] Final|Native|Public|BlueprintCallable 
	// void SetAudioBusSendPostEffect(class UAudioBus* AudioBus, float SourceBusSendLevel);                                     // [0x45e32c0] Final|Native|Public|BlueprintCallable 
	// void PlayQuantized(class UObject* WorldContextObject, class UQuartzClockHandle*& InClockHandle, FQuartzQuantizationBoundary& InQuantizationBoundary, FDelegateProperty& InDelegate, float InStartTime, float InFadeInDuration, float InFadeVolumeLevel, EAudioFaderCurve InFadeCurve); // [0x45e3000] Native|Public|HasOutParms|BlueprintCallable 
	// void Play(float StartTime);                                                                                              // [0x45e2f70] Native|Public|BlueprintCallable 
	// bool IsVirtualized();                                                                                                    // [0x45e2f40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsPlaying();                                                                                                        // [0x45e2f10] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool HasCookedFFTData();                                                                                                 // [0x45e2ee0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool HasCookedAmplitudeEnvelopeData();                                                                                   // [0x45e2eb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// EAudioComponentPlayState GetPlayState();                                                                                 // [0x45e2e80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool GetCookedFFTDataForAllPlayingSounds(TArray<FSoundWaveSpectralDataPerSound>& OutSoundWaveSpectralData);              // [0x45e2da0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// bool GetCookedFFTData(TArray<float>& FrequenciesToGet, TArray<FSoundWaveSpectralData>& OutSoundWaveSpectralData);        // [0x45e2c80] Final|Native|Public|HasOutParms|BlueprintCallable 
	// bool GetCookedEnvelopeDataForAllPlayingSounds(TArray<FSoundWaveEnvelopeDataPerSound>& OutEnvelopeData);                  // [0x45e2bc0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// bool GetCookedEnvelopeData(float& OutEnvelopeData);                                                                      // [0x45e2b10] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void FadeOut(float FadeOutDuration, float FadeVolumeLevel, EAudioFaderCurve FadeCurve);                                  // [0x45e29f0] Native|Public|BlueprintCallable 
	// void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, EAudioFaderCurve FadeCurve);                   // [0x45e2890] Native|Public|BlueprintCallable 
	// bool BP_GetAttenuationSettingsToApply(FSoundAttenuationSettings& OutAttenuationSettings);                                // [0x45e27c0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, EAudioFaderCurve FadeCurve);                      // [0x45e26b0] Final|Native|Public|BlueprintCallable 
	// void AdjustAttenuation(FSoundAttenuationSettings& InAttenuationSettings);                                                // [0x45e25e0] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Struct /Script/Engine.AudioQualitySettings
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FAudioQualitySettings
{ 
	FText                                              DisplayName;                                                // 0x0000   (0x0018)  
	int32_t                                            MaxChannels;                                                // 0x0018   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Class /Script/Engine.AudioSettings
/// Size: 0x0150 (336 bytes) (0x000048 - 0x000198) align 8 pad: 0x0000
class UAudioSettings : public UDeveloperSettings
{ 
public:
	FSoftObjectPath                                    DefaultSoundClassName;                                      // 0x0048   (0x0020)  
	FSoftObjectPath                                    DefaultMediaSoundClassName;                                 // 0x0068   (0x0020)  
	FSoftObjectPath                                    DefaultSoundConcurrencyName;                                // 0x0088   (0x0020)  
	FSoftObjectPath                                    DefaultBaseSoundMix;                                        // 0x00A8   (0x0020)  
	FSoftObjectPath                                    VoiPSoundClass;                                             // 0x00C8   (0x0020)  
	FSoftObjectPath                                    MasterSubmix;                                               // 0x00E8   (0x0020)  
	FSoftObjectPath                                    ReverbSubmix;                                               // 0x0108   (0x0020)  
	FSoftObjectPath                                    EQSubmix;                                                   // 0x0128   (0x0020)  
	EVoiceSampleRate                                   VoiPSampleRate;                                             // 0x0148   (0x0004)  
	float                                              DefaultReverbSendLevel;                                     // 0x014C   (0x0004)  
	int32_t                                            MaximumConcurrentStreams;                                   // 0x0150   (0x0004)  
	float                                              GlobalMinPitchScale;                                        // 0x0154   (0x0004)  
	float                                              GlobalMaxPitchScale;                                        // 0x0158   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x015C   (0x0004)  MISSED
	TArray<FAudioQualitySettings>                      QualityLevels;                                              // 0x0160   (0x0010)  
	bool                                               bAllowPlayWhenSilent : 1;                                   // 0x0170:0 (0x0001)  
	bool                                               bDisableMasterEQ : 1;                                       // 0x0170:1 (0x0001)  
	bool                                               bAllowCenterChannel3DPanning : 1;                           // 0x0170:2 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0171   (0x0003)  MISSED
	uint32_t                                           NumStoppingSources;                                         // 0x0174   (0x0004)  
	EPanningMethod                                     PanningMethod;                                              // 0x0178   (0x0001)  
	EMonoChannelUpmixMethod                            MonoChannelUpmixMethod;                                     // 0x0179   (0x0001)  
	unsigned char                                      UnknownData02_6[0x6];                                       // 0x017A   (0x0006)  MISSED
	FString                                            DialogueFilenameFormat;                                     // 0x0180   (0x0010)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0190   (0x0008)  MISSED
};

/// Struct /Script/Engine.ReverbSettings
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FReverbSettings
{ 
	bool                                               bApplyReverb;                                               // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	class UReverbEffect*                               ReverbEffect;                                               // 0x0008   (0x0008)  
	class USoundEffectSubmixPreset*                    ReverbPluginEffect;                                         // 0x0010   (0x0008)  
	float                                              Volume;                                                     // 0x0018   (0x0004)  
	float                                              FadeTime;                                                   // 0x001C   (0x0004)  
};

/// Struct /Script/Engine.InteriorSettings
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align 4 pad: 0x0000
struct FInteriorSettings
{ 
	bool                                               bIsWorldSettings;                                           // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              ExteriorVolume;                                             // 0x0004   (0x0004)  
	float                                              ExteriorTime;                                               // 0x0008   (0x0004)  
	float                                              ExteriorLPF;                                                // 0x000C   (0x0004)  
	float                                              ExteriorLPFTime;                                            // 0x0010   (0x0004)  
	float                                              InteriorVolume;                                             // 0x0014   (0x0004)  
	float                                              InteriorTime;                                               // 0x0018   (0x0004)  
	float                                              InteriorLPF;                                                // 0x001C   (0x0004)  
	float                                              InteriorLPFTime;                                            // 0x0020   (0x0004)  
};

/// Struct /Script/Engine.AudioVolumeSubmixSendSettings
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FAudioVolumeSubmixSendSettings
{ 
	EAudioVolumeLocationState                          ListenerLocationState;                                      // 0x0000   (0x0001)  
	EAudioVolumeLocationState                          SourceLocationState;                                        // 0x0001   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x0002   (0x0006)  MISSED
	TArray<FSoundSubmixSendInfo>                       SubmixSends;                                                // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.AudioVolumeSubmixOverrideSettings
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FAudioVolumeSubmixOverrideSettings
{ 
	class USoundSubmix*                                Submix;                                                     // 0x0000   (0x0008)  
	TArray<class USoundEffectSubmixPreset*>            SubmixEffectChain;                                          // 0x0008   (0x0010)  
	float                                              CrossfadeTime;                                              // 0x0018   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Class /Script/Engine.AudioVolume
/// Size: 0x0070 (112 bytes) (0x0002E0 - 0x000350) align 8 pad: 0x0000
class AAudioVolume : public AVolume
{ 
public:
	float                                              Priority;                                                   // 0x02E0   (0x0004)  
	bool                                               bEnabled : 1;                                               // 0x02E4:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x02E5   (0x0003)  MISSED
	FReverbSettings                                    Settings;                                                   // 0x02E8   (0x0020)  
	FInteriorSettings                                  AmbientZoneSettings;                                        // 0x0308   (0x0024)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x032C   (0x0004)  MISSED
	TArray<FAudioVolumeSubmixSendSettings>             SubmixSendSettings;                                         // 0x0330   (0x0010)  
	TArray<FAudioVolumeSubmixOverrideSettings>         SubmixOverrideSettings;                                     // 0x0340   (0x0010)  
	// void SetSubmixSendSettings(TArray<FAudioVolumeSubmixSendSettings>& NewSubmixSendSettings);                               // [0x45e3f70] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetSubmixOverrideSettings(TArray<FAudioVolumeSubmixOverrideSettings>& NewSubmixOverrideSettings);                   // [0x45e3dd0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetReverbSettings(FReverbSettings& NewReverbSettings);                                                              // [0x45e3af0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetPriority(float NewPriority);                                                                                     // [0x45e3a70] Final|Native|Public|BlueprintCallable 
	// void SetInteriorSettings(FInteriorSettings& NewInteriorSettings);                                                        // [0x45e37b0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetEnabled(bool bNewEnabled);                                                                                       // [0x45e3550] Final|Native|Public|BlueprintCallable 
	// void OnRep_bEnabled();                                                                                                   // [0x978cc0] Final|Native|Private 
};

/// Class /Script/Engine.AutoDestroySubsystem
/// Size: 0x0018 (24 bytes) (0x000038 - 0x000050) align 8 pad: 0x0000
class UAutoDestroySubsystem : public UWorldSubsystem
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0038   (0x0008)  MISSED
	TArray<class AActor*>                              ActorsToPoll;                                               // 0x0040   (0x0010)  
	// void OnActorEndPlay(class AActor* Actor, TEnumAsByte<EEndPlayReason> EndPlayReason);                                     // [0x45e8550] Final|Native|Private 
};

/// Struct /Script/Engine.EditorMapPerformanceTestDefinition
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FEditorMapPerformanceTestDefinition
{ 
	FSoftObjectPath                                    PerformanceTestmap;                                         // 0x0000   (0x0020)  
	int32_t                                            TestTimer;                                                  // 0x0020   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Struct /Script/Engine.FilePath
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FFilePath
{ 
	FString                                            FilePath;                                                   // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.ImportFactorySettingValues
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FImportFactorySettingValues
{ 
	FString                                            SettingName;                                                // 0x0000   (0x0010)  
	FString                                            Value;                                                      // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.EditorImportWorkflowDefinition
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FEditorImportWorkflowDefinition
{ 
	FFilePath                                          ImportFilePath;                                             // 0x0000   (0x0010)  
	TArray<FImportFactorySettingValues>                FactorySettings;                                            // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.BuildPromotionImportWorkflowSettings
/// Size: 0x0150 (336 bytes) (0x000000 - 0x000150) align 8 pad: 0x0000
struct FBuildPromotionImportWorkflowSettings
{ 
	FEditorImportWorkflowDefinition                    Diffuse;                                                    // 0x0000   (0x0020)  
	FEditorImportWorkflowDefinition                    Normal;                                                     // 0x0020   (0x0020)  
	FEditorImportWorkflowDefinition                    StaticMesh;                                                 // 0x0040   (0x0020)  
	FEditorImportWorkflowDefinition                    ReimportStaticMesh;                                         // 0x0060   (0x0020)  
	FEditorImportWorkflowDefinition                    BlendShapeMesh;                                             // 0x0080   (0x0020)  
	FEditorImportWorkflowDefinition                    MorphMesh;                                                  // 0x00A0   (0x0020)  
	FEditorImportWorkflowDefinition                    SkeletalMesh;                                               // 0x00C0   (0x0020)  
	FEditorImportWorkflowDefinition                    Animation;                                                  // 0x00E0   (0x0020)  
	FEditorImportWorkflowDefinition                    Sound;                                                      // 0x0100   (0x0020)  
	FEditorImportWorkflowDefinition                    SurroundSound;                                              // 0x0120   (0x0020)  
	TArray<FEditorImportWorkflowDefinition>            OtherAssetsToImport;                                        // 0x0140   (0x0010)  
};

/// Struct /Script/Engine.BuildPromotionOpenAssetSettings
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 pad: 0x0000
struct FBuildPromotionOpenAssetSettings
{ 
	FFilePath                                          BlueprintAsset;                                             // 0x0000   (0x0010)  
	FFilePath                                          MaterialAsset;                                              // 0x0010   (0x0010)  
	FFilePath                                          ParticleSystemAsset;                                        // 0x0020   (0x0010)  
	FFilePath                                          SkeletalMeshAsset;                                          // 0x0030   (0x0010)  
	FFilePath                                          StaticMeshAsset;                                            // 0x0040   (0x0010)  
	FFilePath                                          TextureAsset;                                               // 0x0050   (0x0010)  
};

/// Struct /Script/Engine.BuildPromotionNewProjectSettings
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FBuildPromotionNewProjectSettings
{ 
	FDirectoryPath                                     NewProjectFolderOverride;                                   // 0x0000   (0x0010)  
	FString                                            NewProjectNameOverride;                                     // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.BuildPromotionTestSettings
/// Size: 0x01F0 (496 bytes) (0x000000 - 0x0001F0) align 8 pad: 0x0000
struct FBuildPromotionTestSettings
{ 
	FFilePath                                          DefaultStaticMeshAsset;                                     // 0x0000   (0x0010)  
	FBuildPromotionImportWorkflowSettings              ImportWorkflow;                                             // 0x0010   (0x0150)  
	FBuildPromotionOpenAssetSettings                   OpenAssets;                                                 // 0x0160   (0x0060)  
	FBuildPromotionNewProjectSettings                  NewProjectSettings;                                         // 0x01C0   (0x0020)  
	FFilePath                                          SourceControlMaterial;                                      // 0x01E0   (0x0010)  
};

/// Struct /Script/Engine.MaterialEditorPromotionSettings
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FMaterialEditorPromotionSettings
{ 
	FFilePath                                          DefaultMaterialAsset;                                       // 0x0000   (0x0010)  
	FFilePath                                          DefaultDiffuseTexture;                                      // 0x0010   (0x0010)  
	FFilePath                                          DefaultNormalTexture;                                       // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.ParticleEditorPromotionSettings
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FParticleEditorPromotionSettings
{ 
	FFilePath                                          DefaultParticleAsset;                                       // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.BlueprintEditorPromotionSettings
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FBlueprintEditorPromotionSettings
{ 
	FFilePath                                          FirstMeshPath;                                              // 0x0000   (0x0010)  
	FFilePath                                          SecondMeshPath;                                             // 0x0010   (0x0010)  
	FFilePath                                          DefaultParticleAsset;                                       // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.ExternalToolDefinition
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 pad: 0x0000
struct FExternalToolDefinition
{ 
	FString                                            ToolName;                                                   // 0x0000   (0x0010)  
	FFilePath                                          ExecutablePath;                                             // 0x0010   (0x0010)  
	FString                                            CommandLineOptions;                                         // 0x0020   (0x0010)  
	FDirectoryPath                                     WorkingDirectory;                                           // 0x0030   (0x0010)  
	FString                                            ScriptExtension;                                            // 0x0040   (0x0010)  
	FDirectoryPath                                     ScriptDirectory;                                            // 0x0050   (0x0010)  
};

/// Struct /Script/Engine.EditorImportExportTestDefinition
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FEditorImportExportTestDefinition
{ 
	FFilePath                                          ImportFilePath;                                             // 0x0000   (0x0010)  
	FString                                            ExportFileExtension;                                        // 0x0010   (0x0010)  
	bool                                               bSkipExport;                                                // 0x0020   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0021   (0x0007)  MISSED
	TArray<FImportFactorySettingValues>                FactorySettings;                                            // 0x0028   (0x0010)  
};

/// Struct /Script/Engine.LaunchOnTestSettings
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FLaunchOnTestSettings
{ 
	FFilePath                                          LaunchOnTestmap;                                            // 0x0000   (0x0010)  
	FString                                            DeviceID;                                                   // 0x0010   (0x0010)  
};

/// Class /Script/Engine.AutomationTestSettings
/// Size: 0x0320 (800 bytes) (0x000030 - 0x000350) align 8 pad: 0x0000
class UAutomationTestSettings : public UObject
{ 
public:
	TArray<FString>                                    EngineTestModules;                                          // 0x0030   (0x0010)  
	TArray<FString>                                    EditorTestModules;                                          // 0x0040   (0x0010)  
	FSoftObjectPath                                    AutomationTestmap;                                          // 0x0050   (0x0020)  
	TArray<FEditorMapPerformanceTestDefinition>        EditorPerformanceTestMaps;                                  // 0x0070   (0x0010)  
	TArray<FSoftObjectPath>                            AssetsToOpen;                                               // 0x0080   (0x0010)  
	TArray<FString>                                    MapsToPIETest;                                              // 0x0090   (0x0010)  
	FBuildPromotionTestSettings                        BuildPromotionTest;                                         // 0x00A0   (0x01F0)  
	FMaterialEditorPromotionSettings                   MaterialEditorPromotionTest;                                // 0x0290   (0x0030)  
	FParticleEditorPromotionSettings                   ParticleEditorPromotionTest;                                // 0x02C0   (0x0010)  
	FBlueprintEditorPromotionSettings                  BlueprintEditorPromotionTest;                               // 0x02D0   (0x0030)  
	TArray<FString>                                    TestLevelFolders;                                           // 0x0300   (0x0010)  
	TArray<FExternalToolDefinition>                    ExternalTools;                                              // 0x0310   (0x0010)  
	TArray<FEditorImportExportTestDefinition>          ImportExportTestDefinitions;                                // 0x0320   (0x0010)  
	TArray<FLaunchOnTestSettings>                      LaunchOnSettings;                                           // 0x0330   (0x0010)  
	FIntPoint                                          DefaultScreenshotResolution;                                // 0x0340   (0x0008)  
	float                                              PIETestDuration;                                            // 0x0348   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x034C   (0x0004)  MISSED
};

/// Class /Script/Engine.AvoidanceManager
/// Size: 0x00B8 (184 bytes) (0x000030 - 0x0000E8) align 8 pad: 0x0000
class UAvoidanceManager : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0030   (0x0008)  MISSED
	float                                              DefaultTimeToLive;                                          // 0x0038   (0x0004)  
	float                                              LockTimeAfterAvoid;                                         // 0x003C   (0x0004)  
	float                                              LockTimeAfterClean;                                         // 0x0040   (0x0004)  
	float                                              DeltaTimeToPredict;                                         // 0x0044   (0x0004)  
	float                                              ArtificialRadiusExpansion;                                  // 0x0048   (0x0004)  
	float                                              TestHeightDifference;                                       // 0x004C   (0x0004)  
	float                                              HeightCheckMargin;                                          // 0x0050   (0x0004)  
	unsigned char                                      UnknownData01_7[0x94];                                      // 0x0054   (0x0094)  MISSED
	// bool RegisterMovementComponent(class UMovementComponent* MovementComp, float AvoidanceWeight);                           // [0x45e8620] Final|Native|Public|BlueprintCallable 
	// int32_t GetObjectCount();                                                                                                // [0x45e8520] Final|Native|Public|BlueprintCallable 
	// int32_t GetNewAvoidanceUID();                                                                                            // [0x45e84f0] Final|Native|Public|BlueprintCallable 
	// FVector GetAvoidanceVelocityForComponent(class UMovementComponent* MovementComp);                                        // [0x45e8440] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Struct /Script/Engine.BandwidthTestItem
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FBandwidthTestItem
{ 
	TArray<char>                                       Kilobyte;                                                   // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.BandwidthTestGenerator
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FBandwidthTestGenerator
{ 
	TArray<FBandwidthTestItem>                         ReplicatedBuffers;                                          // 0x0000   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0010   (0x0010)  MISSED
};

/// Class /Script/Engine.BandwidthTestActor
/// Size: 0x0020 (32 bytes) (0x0002A8 - 0x0002C8) align 8 pad: 0x0000
class ABandwidthTestActor : public AActor
{ 
public:
	FBandwidthTestGenerator                            BandwidthGenerator;                                         // 0x02A8   (0x0020)  
};

/// Class /Script/Engine.BillboardComponent
/// Size: 0x0020 (32 bytes) (0x0004E0 - 0x000500) align 16 pad: 0x0000
class UBillboardComponent : public UPrimitiveComponent
{ 
public:
	class UTexture2D*                                  Sprite;                                                     // 0x04E0   (0x0008)  
	bool                                               bIsScreenSizeScaled : 1;                                    // 0x04E8:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x04E9   (0x0003)  MISSED
	float                                              ScreenSize;                                                 // 0x04EC   (0x0004)  
	float                                              U;                                                          // 0x04F0   (0x0004)  
	float                                              UL;                                                         // 0x04F4   (0x0004)  
	float                                              V;                                                          // 0x04F8   (0x0004)  
	float                                              VL;                                                         // 0x04FC   (0x0004)  
	// void SetUV(int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL);                                                    // [0x45e8880] Native|Public|BlueprintCallable 
	// void SetSpriteAndUV(class UTexture2D* newSprite, int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL);              // [0x45e86f0] Native|Public|BlueprintCallable 
	// void SetSprite(class UTexture2D* newSprite);                                                                             // [0x1f79cf0] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.BlendableInterface
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UBlendableInterface : public UInterface
{ 
public:
};

/// Struct /Script/Engine.BoneNode
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FBoneNode
{ 
	FName                                              Name;                                                       // 0x0000   (0x000C)  
	int32_t                                            ParentIndex;                                                // 0x000C   (0x0004)  
	TEnumAsByte<EBoneTranslationRetargetingMode>       TranslationRetargetingMode;                                 // 0x0010   (0x0001)  
	TEnumAsByte<EScaleInheritMode>                     ScaleInheritMode;                                           // 0x0011   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x0012   (0x0002)  MISSED
};

/// Struct /Script/Engine.VirtualBone
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align 4 pad: 0x0000
struct FVirtualBone
{ 
	FName                                              SourceBoneName;                                             // 0x0000   (0x000C)  
	FName                                              TargetBoneName;                                             // 0x000C   (0x000C)  
	FName                                              VirtualBoneName;                                            // 0x0018   (0x000C)  
};

/// Struct /Script/Engine.BoneConstraint
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FBoneConstraint
{ 
	bool                                               bEnable;                                                    // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FRotator                                           MinRotationDelta;                                           // 0x0004   (0x000C)  
	FRotator                                           MaxRotationDelta;                                           // 0x0010   (0x000C)  
};

/// Struct /Script/Engine.SmartNameContainer
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 pad: 0x0000
struct FSmartNameContainer
{ 
	unsigned char                                      UnknownData00_2[0x50];                                      // 0x0000   (0x0050)  MISSED
};

/// Struct /Script/Engine.AnimSlotGroup
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FAnimSlotGroup
{ 
	FName                                              GroupName;                                                  // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	TArray<FName>                                      SlotNames;                                                  // 0x0010   (0x0010)  
};

/// Class /Script/Engine.Skeleton
/// Size: 0x0388 (904 bytes) (0x000030 - 0x0003B8) align 8 pad: 0x0000
class USkeleton : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x10];                                      // 0x0030   (0x0010)  MISSED
	TArray<FBoneNode>                                  BoneTree;                                                   // 0x0040   (0x0010)  
	TArray<FTransform>                                 RefLocalPoses;                                              // 0x0050   (0x0010)  
	unsigned char                                      UnknownData01_6[0x128];                                     // 0x0060   (0x0128)  MISSED
	FGuid                                              VirtualBoneGuid;                                            // 0x0188   (0x0010)  
	TArray<FVirtualBone>                               VirtualBones;                                               // 0x0198   (0x0010)  
	TArray<class USkeletalMeshSocket*>                 Sockets;                                                    // 0x01A8   (0x0010)  
	class UBoneFoldSettings*                           BoneFoldSettings;                                           // 0x01B8   (0x0008)  
	TArray<FBoneConstraint>                            BoneConstraints;                                            // 0x01C0   (0x0010)  
	TArray<class URBFDriver*>                          RBFDrivers;                                                 // 0x01D0   (0x0010)  
	class URBFPrecomputations*                         Precomputations;                                            // 0x01E0   (0x0008)  
	unsigned char                                      UnknownData02_6[0x50];                                      // 0x01E8   (0x0050)  MISSED
	FSmartNameContainer                                SmartNames;                                                 // 0x0238   (0x0050)  
	unsigned char                                      UnknownData03_6[0x30];                                      // 0x0288   (0x0030)  MISSED
	TArray<class UBlendProfile*>                       BlendProfiles;                                              // 0x02B8   (0x0010)  
	TArray<FAnimSlotGroup>                             SlotGroups;                                                 // 0x02C8   (0x0010)  
	unsigned char                                      UnknownData04_6[0x50];                                      // 0x02D8   (0x0050)  MISSED
	bool                                               bAllBoneInheritScaleXYZ;                                    // 0x0328   (0x0001)  
	unsigned char                                      UnknownData05_6[0x7F];                                      // 0x0329   (0x007F)  MISSED
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x03A8   (0x0010)  
};

/// Struct /Script/Engine.BlendProfileBoneEntry
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FBlendProfileBoneEntry
{ 
	FBoneReference                                     BoneReference;                                              // 0x0000   (0x0014)  
	float                                              BlendScale;                                                 // 0x0014   (0x0004)  
};

/// Class /Script/Engine.BlendProfile
/// Size: 0x0020 (32 bytes) (0x000030 - 0x000050) align 8 pad: 0x0000
class UBlendProfile : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0030   (0x0008)  MISSED
	class USkeleton*                                   OwningSkeleton;                                             // 0x0038   (0x0008)  
	TArray<FBlendProfileBoneEntry>                     ProfileEntries;                                             // 0x0040   (0x0010)  
};

/// Class /Script/Engine.BlockingVolume
/// Size: 0x0000 (0 bytes) (0x0002E0 - 0x0002E0) align 8 pad: 0x0000
class ABlockingVolume : public AVolume
{ 
public:
};

/// Class /Script/Engine.BlueprintExtension
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UBlueprintExtension : public UObject
{ 
public:
};

/// Class /Script/Engine.BlueprintMapLibrary
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UBlueprintMapLibrary : public UBlueprintFunctionLibrary
{ 
public:
	// void SetMapPropertyByName(class UObject* Object, FName PropertyName, TMap<int32_t, int32_t>& Value);                     // [0x45eeee0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void Map_Values(TMap<int32_t, int32_t>& TargetMap, TArray<int32_t>& Values);                                             // [0x45ee2c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// bool Map_Remove(TMap<int32_t, int32_t>& TargetMap, int32_t& Key);                                                        // [0x45ee110] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// int32_t Map_Length(TMap<int32_t, int32_t>& TargetMap);                                                                   // [0x45ee060] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// void Map_Keys(TMap<int32_t, int32_t>& TargetMap, TArray<int32_t>& Keys);                                                 // [0x45edf50] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// bool Map_Find(TMap<int32_t, int32_t>& TargetMap, int32_t& Key, int32_t& Value);                                          // [0x45edcb0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool Map_Contains(TMap<int32_t, int32_t>& TargetMap, int32_t& Key);                                                      // [0x45edaf0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// void Map_Clear(TMap<int32_t, int32_t>& TargetMap);                                                                       // [0x45eda50] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void Map_Add(TMap<int32_t, int32_t>& TargetMap, int32_t& Key, int32_t& Value);                                           // [0x45ed7d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.BlueprintPathsLibrary
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UBlueprintPathsLibrary : public UBlueprintFunctionLibrary
{ 
public:
	// FString VideoCaptureDir();                                                                                               // [0x45ef460] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void ValidatePath(FString InPath, bool& bDidSucceed, FText& OutReason);                                                  // [0x45ef2f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// void Split(FString InPath, FString& PathPart, FString& FilenamePart, FString& ExtensionPart);                            // [0x45ef130] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FString SourceConfigDir();                                                                                               // [0x45ee630] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool ShouldSaveToUserDir();                                                                                              // [0x45ef100] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString ShaderWorkingDir();                                                                                              // [0x45ef080] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void SetProjectFilePath(FString NewGameProjectFilePath);                                                                 // [0x45eeff0] Final|Native|Static|Public|BlueprintCallable 
	// FString SetExtension(FString InPath, FString InNewExtension);                                                            // [0x45eeda0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString ScreenShotDir();                                                                                                 // [0x45eed20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString SandboxesDir();                                                                                                  // [0x45eeca0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString RootDir();                                                                                                       // [0x45eec20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void RemoveDuplicateSlashes(FString InPath, FString& OutPath);                                                           // [0x45eeb30] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FString ProjectUserDir();                                                                                                // [0x45eeab0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString ProjectSavedDir();                                                                                               // [0x45eea30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString ProjectPluginsDir();                                                                                             // [0x45ee9b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString ProjectPersistentDownloadDir();                                                                                  // [0x45ee930] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString ProjectModsDir();                                                                                                // [0x45ee8b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString ProjectLogDir();                                                                                                 // [0x45ee830] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString ProjectIntermediateDir();                                                                                        // [0x45ee7b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString ProjectDir();                                                                                                    // [0x45ee730] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString ProjectContentDir();                                                                                             // [0x45ee6b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString ProjectConfigDir();                                                                                              // [0x45ee630] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString ProfilingDir();                                                                                                  // [0x45ee5b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void NormalizeFilename(FString InPath, FString& OutPath);                                                                // [0x45ee4c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// void NormalizeDirectoryName(FString InPath, FString& OutPath);                                                           // [0x45ee3d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FString MakeValidFileName(FString InString, FString InReplacementChar);                                                  // [0x45ed690] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void MakeStandardFilename(FString InPath, FString& OutPath);                                                             // [0x45ed5a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// void MakePlatformFilename(FString InPath, FString& OutPath);                                                             // [0x45ed4b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool MakePathRelativeTo(FString InPath, FString InRelativeTo, FString& OutPath);                                         // [0x45ed350] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FString LaunchDir();                                                                                                     // [0x45ed2d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool IsSamePath(FString PathA, FString PathB);                                                                           // [0x45ed1e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool IsRestrictedPath(FString InPath);                                                                                   // [0x45ed140] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool IsRelative(FString InPath);                                                                                         // [0x45ed0a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool IsProjectFilePathSet();                                                                                             // [0x45ed070] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool IsDrive(FString InPath);                                                                                            // [0x45ecfd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool HasProjectPersistentDownloadDir();                                                                                  // [0x45ecfa0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// TArray<FString> GetToolTipLocalizationPaths();                                                                           // [0x45ecf60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// TArray<FString> GetRestrictedFolderNames();                                                                              // [0x45ecf20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetRelativePathToRoot();                                                                                         // [0x45ece90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// TArray<FString> GetPropertyNameLocalizationPaths();                                                                      // [0x45ece50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetProjectFilePath();                                                                                            // [0x45ecdd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetPath(FString InPath);                                                                                         // [0x45eccf0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetInvalidFileSystemChars();                                                                                     // [0x45ecc70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// TArray<FString> GetGameLocalizationPaths();                                                                              // [0x45ecc30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetExtension(FString InPath, bool bIncludeDot);                                                                  // [0x45ecb10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// TArray<FString> GetEngineLocalizationPaths();                                                                            // [0x45ecad0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// TArray<FString> GetEditorLocalizationPaths();                                                                            // [0x45eca90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetCleanFilename(FString InPath);                                                                                // [0x45ec9b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetBaseFilename(FString InPath, bool bRemovePath);                                                               // [0x45ec890] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GeneratedConfigDir();                                                                                            // [0x45ec810] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GameUserDeveloperDir();                                                                                          // [0x45ec790] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GameSourceDir();                                                                                                 // [0x45ec710] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GameDevelopersDir();                                                                                             // [0x45ec690] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GameAgnosticSavedDir();                                                                                          // [0x45ec1f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool FileExists(FString InPath);                                                                                         // [0x45ec5f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString FeaturePackDir();                                                                                                // [0x45ec570] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString EnterprisePluginsDir();                                                                                          // [0x45ec4f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString EnterpriseFeaturePackDir();                                                                                      // [0x45ec470] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString EnterpriseDir();                                                                                                 // [0x45ec3f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString EngineVersionAgnosticUserDir();                                                                                  // [0x45ec370] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString EngineUserDir();                                                                                                 // [0x45ec2f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString EngineSourceDir();                                                                                               // [0x45ec270] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString EngineSavedDir();                                                                                                // [0x45ec1f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString EnginePluginsDir();                                                                                              // [0x45ec170] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString EngineIntermediateDir();                                                                                         // [0x45ec0f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString EngineDir();                                                                                                     // [0x45ec070] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString EngineContentDir();                                                                                              // [0x45ebff0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString EngineConfigDir();                                                                                               // [0x45ebf70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool DirectoryExists(FString InPath);                                                                                    // [0x45ebed0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString DiffDir();                                                                                                       // [0x45ebe50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString CreateTempFilename(FString Path, FString Prefix, FString Extension);                                             // [0x45ebcc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString ConvertToSandboxPath(FString InPath, FString InSandboxName);                                                     // [0x45ebb80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString ConvertRelativePathToFull(FString InPath, FString InBasePath);                                                   // [0x45eba40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString ConvertFromSandboxPath(FString InPath, FString InSandboxName);                                                   // [0x45eb900] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString Combine(TArray<FString>& InPaths);                                                                               // [0x45eb7f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool CollapseRelativeDirectories(FString InPath, FString& OutPath);                                                      // [0x45eb6f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FString CloudDir();                                                                                                      // [0x45eb670] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString ChangeExtension(FString InPath, FString InNewExtension);                                                         // [0x45eb530] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString BugItDir();                                                                                                      // [0x45eb4b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString AutomationTransientDir();                                                                                        // [0x45eb430] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString AutomationLogDir();                                                                                              // [0x45eb3b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString AutomationDir();                                                                                                 // [0x45eb330] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.PlatformGameInstance
/// Size: 0x00D0 (208 bytes) (0x0001B0 - 0x000280) align 8 pad: 0x0000
class UPlatformGameInstance : public UGameInstance
{ 
public:
	SDK_UNDEFINED(16,113) /* FMulticastInlineDelegate */ __um(ApplicationWillDeactivateDelegate);                  // 0x01B0   (0x0010)  
	SDK_UNDEFINED(16,114) /* FMulticastInlineDelegate */ __um(ApplicationHasReactivatedDelegate);                  // 0x01C0   (0x0010)  
	SDK_UNDEFINED(16,115) /* FMulticastInlineDelegate */ __um(ApplicationWillEnterBackgroundDelegate);             // 0x01D0   (0x0010)  
	SDK_UNDEFINED(16,116) /* FMulticastInlineDelegate */ __um(ApplicationHasEnteredForegroundDelegate);            // 0x01E0   (0x0010)  
	SDK_UNDEFINED(16,117) /* FMulticastInlineDelegate */ __um(ApplicationWillTerminateDelegate);                   // 0x01F0   (0x0010)  
	SDK_UNDEFINED(16,118) /* FMulticastInlineDelegate */ __um(ApplicationShouldUnloadResourcesDelegate);           // 0x0200   (0x0010)  
	SDK_UNDEFINED(16,119) /* FMulticastInlineDelegate */ __um(ApplicationReceivedStartupArgumentsDelegate);        // 0x0210   (0x0010)  
	SDK_UNDEFINED(16,120) /* FMulticastInlineDelegate */ __um(ApplicationRegisteredForRemoteNotificationsDelegate); // 0x0220   (0x0010)  
	SDK_UNDEFINED(16,121) /* FMulticastInlineDelegate */ __um(ApplicationRegisteredForUserNotificationsDelegate);  // 0x0230   (0x0010)  
	SDK_UNDEFINED(16,122) /* FMulticastInlineDelegate */ __um(ApplicationFailedToRegisterForRemoteNotificationsDelegate); // 0x0240   (0x0010)  
	SDK_UNDEFINED(16,123) /* FMulticastInlineDelegate */ __um(ApplicationReceivedRemoteNotificationDelegate);      // 0x0250   (0x0010)  
	SDK_UNDEFINED(16,124) /* FMulticastInlineDelegate */ __um(ApplicationReceivedLocalNotificationDelegate);       // 0x0260   (0x0010)  
	SDK_UNDEFINED(16,125) /* FMulticastInlineDelegate */ __um(ApplicationReceivedScreenOrientationChangedNotificationDelegate); // 0x0270   (0x0010)  
};

/// Class /Script/Engine.BlueprintPlatformLibrary
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary
{ 
public:
	// int32_t ScheduleLocalNotificationFromNow(int32_t inSecondsFromNow, FText& Title, FText& Body, FText& Action, FString ActivationEvent); // [0x45f2340] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void ScheduleLocalNotificationBadgeFromNow(int32_t inSecondsFromNow, FString ActivationEvent);                           // [0x45f2270] Final|Native|Static|Public|BlueprintCallable 
	// int32_t ScheduleLocalNotificationBadgeAtTime(FDateTime& FireDateTime, bool LocalTime, FString ActivationEvent);          // [0x45f2130] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// int32_t ScheduleLocalNotificationAtTime(FDateTime& FireDateTime, bool LocalTime, FText& Title, FText& Body, FText& Action, FString ActivationEvent); // [0x45f1e50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void GetLaunchNotification(bool& NotificationLaunchedApp, FString& ActivationEvent, int32_t& FireDate);                  // [0x45f1d10] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// TEnumAsByte<EScreenOrientation> GetDeviceOrientation();                                                                  // [0x45f1ce0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void ClearAllLocalNotifications();                                                                                       // [0x45f1cc0] Final|Native|Static|Public|BlueprintCallable 
	// void CancelLocalNotificationById(int32_t NotificationId);                                                                // [0x45f1c40] Final|Native|Static|Public|BlueprintCallable 
	// void CancelLocalNotification(FString ActivationEvent);                                                                   // [0x45f1bb0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.BlueprintSetLibrary
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UBlueprintSetLibrary : public UBlueprintFunctionLibrary
{ 
public:
	// void SetSetPropertyByName(class UObject* Object, FName PropertyName, TSet<int32_t>& Value);                              // [0x45f25d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void Set_Union(TSet<int32_t>& A, TSet<int32_t>& B, TSet<int32_t>& Result);                                               // [0x45f3370] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void Set_ToArray(TSet<int32_t>& A, TArray<int32_t>& Result);                                                             // [0x45f3260] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void Set_RemoveItems(TSet<int32_t>& TargetSet, TArray<int32_t>& Items);                                                  // [0x45f3150] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// bool Set_Remove(TSet<int32_t>& TargetSet, int32_t& Item);                                                                // [0x45f2fa0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// int32_t Set_Length(TSet<int32_t>& TargetSet);                                                                            // [0x45f2ef0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// void Set_Intersection(TSet<int32_t>& A, TSet<int32_t>& B, TSet<int32_t>& Result);                                        // [0x45f2d70] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void Set_Difference(TSet<int32_t>& A, TSet<int32_t>& B, TSet<int32_t>& Result);                                          // [0x45f2bf0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// bool Set_Contains(TSet<int32_t>& TargetSet, int32_t& ItemToFind);                                                        // [0x45f2a40] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// void Set_Clear(TSet<int32_t>& TargetSet);                                                                                // [0x45f29a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void Set_AddItems(TSet<int32_t>& TargetSet, TArray<int32_t>& NewItems);                                                  // [0x45f2890] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void Set_Add(TSet<int32_t>& TargetSet, int32_t& NewItem);                                                                // [0x45f26e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Struct /Script/Engine.KShapeElem
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FKShapeElem
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	float                                              RestOffset;                                                 // 0x0008   (0x0004)  
	FName                                              Name;                                                       // 0x000C   (0x000C)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0018   (0x0004)  MISSED
	bool                                               bContributeToMass : 1;                                      // 0x001C:0 (0x0001)  
	TEnumAsByte<ECollisionEnabled>                     CollisionEnabled;                                           // 0x001D   (0x0001)  
	unsigned char                                      UnknownData02_7[0x12];                                      // 0x001E   (0x0012)  MISSED
};

/// Struct /Script/Engine.KSphereElem
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
struct FKSphereElem : FKShapeElem
{ 
	FVector                                            Center;                                                     // 0x0030   (0x000C)  
	float                                              Radius;                                                     // 0x003C   (0x0004)  
};

/// Struct /Script/Engine.KBoxElem
/// Size: 0x0028 (40 bytes) (0x000030 - 0x000058) align 8 pad: 0x0000
struct FKBoxElem : FKShapeElem
{ 
	FVector                                            Center;                                                     // 0x0030   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x003C   (0x000C)  
	float                                              X;                                                          // 0x0048   (0x0004)  
	float                                              Y;                                                          // 0x004C   (0x0004)  
	float                                              Z;                                                          // 0x0050   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Struct /Script/Engine.KSphylElem
/// Size: 0x0020 (32 bytes) (0x000030 - 0x000050) align 8 pad: 0x0000
struct FKSphylElem : FKShapeElem
{ 
	FVector                                            Center;                                                     // 0x0030   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x003C   (0x000C)  
	float                                              Radius;                                                     // 0x0048   (0x0004)  
	float                                              Length;                                                     // 0x004C   (0x0004)  
};

/// Struct /Script/Engine.KConvexElem
/// Size: 0x0080 (128 bytes) (0x000030 - 0x0000B0) align 16 pad: 0x0000
struct FKConvexElem : FKShapeElem
{ 
	TArray<FVector>                                    VertexData;                                                 // 0x0030   (0x0010)  
	TArray<int32_t>                                    IndexData;                                                  // 0x0040   (0x0010)  
	FBox                                               ElemBox;                                                    // 0x0050   (0x001C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x006C   (0x0004)  MISSED
	FTransform                                         Transform;                                                  // 0x0070   (0x0030)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x00A0   (0x0010)  MISSED
};

/// Struct /Script/Engine.KTaperedCapsuleElem
/// Size: 0x0028 (40 bytes) (0x000030 - 0x000058) align 8 pad: 0x0000
struct FKTaperedCapsuleElem : FKShapeElem
{ 
	FVector                                            Center;                                                     // 0x0030   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x003C   (0x000C)  
	float                                              Radius0;                                                    // 0x0048   (0x0004)  
	float                                              Radius1;                                                    // 0x004C   (0x0004)  
	float                                              Length;                                                     // 0x0050   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Struct /Script/Engine.KAggregateGeom
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align 8 pad: 0x0000
struct FKAggregateGeom
{ 
	TArray<FKSphereElem>                               SphereElems;                                                // 0x0000   (0x0010)  
	TArray<FKBoxElem>                                  BoxElems;                                                   // 0x0010   (0x0010)  
	TArray<FKSphylElem>                                SphylElems;                                                 // 0x0020   (0x0010)  
	TArray<FKConvexElem>                               ConvexElems;                                                // 0x0030   (0x0010)  
	TArray<FKTaperedCapsuleElem>                       TaperedCapsuleElems;                                        // 0x0040   (0x0010)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0050   (0x0008)  MISSED
};

/// Class /Script/Engine.BodySetup
/// Size: 0x0260 (608 bytes) (0x000050 - 0x0002B0) align 8 pad: 0x0000
class UBodySetup : public UBodySetupCore
{ 
public:
	FKAggregateGeom                                    AggGeom;                                                    // 0x0050   (0x0058)  
	bool                                               bAlwaysFullAnimWeight : 1;                                  // 0x00A8:0 (0x0001)  
	bool                                               bConsiderForBounds : 1;                                     // 0x00A8:1 (0x0001)  
	bool                                               bMeshCollideAll : 1;                                        // 0x00A8:2 (0x0001)  
	bool                                               bDoubleSidedGeometry : 1;                                   // 0x00A8:3 (0x0001)  
	bool                                               bGenerateNonMirroredCollision : 1;                          // 0x00A8:4 (0x0001)  
	bool                                               bSharedCookedData : 1;                                      // 0x00A8:5 (0x0001)  
	bool                                               bGenerateMirroredCollision : 1;                             // 0x00A8:6 (0x0001)  
	bool                                               bSupportUVsAndFaceRemap : 1;                                // 0x00A8:7 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x00A9   (0x0007)  MISSED
	class UPhysicalMaterial*                           PhysMaterial;                                               // 0x00B0   (0x0008)  
	FWalkableSlopeOverride                             WalkableSlopeOverride;                                      // 0x00B8   (0x0010)  
	unsigned char                                      UnknownData01_6[0x68];                                      // 0x00C8   (0x0068)  MISSED
	FBodyInstance                                      DefaultInstance;                                            // 0x0130   (0x0160)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x0290   (0x0008)  MISSED
	FVector                                            BuildScale3D;                                               // 0x0298   (0x000C)  
	unsigned char                                      UnknownData03_7[0xC];                                       // 0x02A4   (0x000C)  MISSED
};

/// Struct /Script/Engine.BoneFoldItem
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FBoneFoldItem
{ 
	uint16_t                                           FolderBone;                                                 // 0x0000   (0x0002)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x0002   (0x0006)  MISSED
	TArray<uint16_t>                                   FoldedBones;                                                // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.BoneFolders
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FBoneFolders
{ 
	TArray<FBoneFoldItem>                              BoneFoldItems;                                              // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.BoneFoldLayer
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FBoneFoldLayer
{ 
	FBoneFolders                                       BoneFolders;                                                // 0x0000   (0x0010)  
	TArray<EBoneFoldLODIndex>                          LODIndices;                                                 // 0x0010   (0x0010)  
};

/// Class /Script/Engine.BoneFoldSettings
/// Size: 0x0010 (16 bytes) (0x000038 - 0x000048) align 8 pad: 0x0000
class UBoneFoldSettings : public UDataAsset
{ 
public:
	TArray<FBoneFoldLayer>                             BoneFoldLayers;                                             // 0x0038   (0x0010)  
};

/// Struct /Script/Engine.BranchFilter
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FBranchFilter
{ 
	FName                                              BoneName;                                                   // 0x0000   (0x000C)  
	int32_t                                            BlendDepth;                                                 // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.InputBlendPose
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FInputBlendPose
{ 
	TArray<FBranchFilter>                              BranchFilters;                                              // 0x0000   (0x0010)  
};

/// Class /Script/Engine.BoneMaskFilter
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UBoneMaskFilter : public UObject
{ 
public:
	TArray<FInputBlendPose>                            BlendPoses;                                                 // 0x0030   (0x0010)  
};

/// Class /Script/Engine.BookmarkBase
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UBookmarkBase : public UObject
{ 
public:
};

/// Class /Script/Engine.BookMark
/// Size: 0x0028 (40 bytes) (0x000030 - 0x000058) align 8 pad: 0x0000
class UBookMark : public UBookmarkBase
{ 
public:
	FVector                                            Location;                                                   // 0x0030   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x003C   (0x000C)  
	TArray<FString>                                    HiddenLevels;                                               // 0x0048   (0x0010)  
};

/// Class /Script/Engine.BookMark2D
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UBookMark2D : public UBookmarkBase
{ 
public:
	float                                              Zoom2D;                                                     // 0x0030   (0x0004)  
	FIntPoint                                          Location;                                                   // 0x0034   (0x0008)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/Engine.BoundsCopyComponent
/// Size: 0x0080 (128 bytes) (0x0000C0 - 0x000140) align 16 pad: 0x0000
class UBoundsCopyComponent : public UActorComponent
{ 
public:
	SDK_UNDEFINED(48,126) /* TWeakObjectPtr<AActor*> */ __um(BoundsSourceActor);                                   // 0x00C0   (0x0030)  
	bool                                               bUseCollidingComponentsForSourceBounds;                     // 0x00F0   (0x0001)  
	bool                                               bKeepOwnBoundsScale;                                        // 0x00F1   (0x0001)  
	bool                                               bUseCollidingComponentsForOwnBounds;                        // 0x00F2   (0x0001)  
	unsigned char                                      UnknownData00_6[0xD];                                       // 0x00F3   (0x000D)  MISSED
	FTransform                                         PostTransform;                                              // 0x0100   (0x0030)  
	bool                                               bCopyXBounds;                                               // 0x0130   (0x0001)  
	bool                                               bCopyYBounds;                                               // 0x0131   (0x0001)  
	bool                                               bCopyZBounds;                                               // 0x0132   (0x0001)  
	unsigned char                                      UnknownData01_7[0xD];                                       // 0x0133   (0x000D)  MISSED
};

/// Class /Script/Engine.ReflectionCapture
/// Size: 0x0008 (8 bytes) (0x0002A8 - 0x0002B0) align 8 pad: 0x0000
class AReflectionCapture : public AActor
{ 
public:
	class UReflectionCaptureComponent*                 CaptureComponent;                                           // 0x02A8   (0x0008)  
};

/// Class /Script/Engine.BoxReflectionCapture
/// Size: 0x0000 (0 bytes) (0x0002B0 - 0x0002B0) align 8 pad: 0x0000
class ABoxReflectionCapture : public AReflectionCapture
{ 
public:
};

/// Class /Script/Engine.ReflectionCaptureComponent
/// Size: 0x00C8 (200 bytes) (0x000218 - 0x0002E0) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class UReflectionCaptureComponent : public USceneComponent
{ 
public:
	class UBillboardComponent*                         CaptureOffsetComponent;                                     // 0x0218   (0x0008)  
	bool                                               bRealTimeCapture;                                           // 0x0220   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0221   (0x0003)  MISSED
	int32_t                                            CubemapSize;                                                // 0x0224   (0x0004)  
	TArray<char>                                       MiniGBufferDepth;                                           // 0x0228   (0x0010)  
	TArray<char>                                       MiniGBufferA;                                               // 0x0238   (0x0010)  
	TArray<char>                                       MiniGBufferB;                                               // 0x0248   (0x0010)  
	TArray<char>                                       MiniGBufferC;                                               // 0x0258   (0x0010)  
	EReflectionSourceType                              ReflectionSourceType;                                       // 0x0268   (0x0001)  
	EMobileReflectionCompression                       MobileReflectionCompression;                                // 0x0269   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x026A   (0x0006)  MISSED
	class UTextureCube*                                Cubemap;                                                    // 0x0270   (0x0008)  
	float                                              SourceCubemapAngle;                                         // 0x0278   (0x0004)  
	float                                              Brightness;                                                 // 0x027C   (0x0004)  
	bool                                               bModifyMaxValueRGBM;                                        // 0x0280   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0281   (0x0003)  MISSED
	float                                              MaxValueRGBM;                                               // 0x0284   (0x0004)  
	FVector                                            CaptureOffset;                                              // 0x0288   (0x000C)  
	bool                                               IsUIScenePrimitive;                                         // 0x0294   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0295   (0x0003)  MISSED
	FGuid                                              MapBuildDataId;                                             // 0x0298   (0x0010)  
	unsigned char                                      UnknownData04_6[0x10];                                      // 0x02A8   (0x0010)  MISSED
	class UTextureCube*                                CachedEncodedHDRCubemap;                                    // 0x02B8   (0x0008)  
	unsigned char                                      UnknownData05_7[0x18];                                      // 0x02C0   (0x0018)  MISSED
	// void SetIsUIScenePrimitive(bool bValue);                                                                                 // [0x47219d0] Final|RequiredAPI|Native|Public|BlueprintCallable 
};
#pragma pack(pop)

/// Class /Script/Engine.BoxReflectionCaptureComponent
/// Size: 0x0018 (24 bytes) (0x0002D8 - 0x0002F0) align 16 pad: 0x0000
class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
{ 
public:
	float                                              BoxTransitionDistance;                                      // 0x02D8   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x02DC   (0x0004)  MISSED
	class UBoxComponent*                               PreviewInfluenceBox;                                        // 0x02E0   (0x0008)  
	class UBoxComponent*                               PreviewCaptureBox;                                          // 0x02E8   (0x0008)  
};

/// Class /Script/Engine.Breakpoint
/// Size: 0x0018 (24 bytes) (0x000030 - 0x000048) align 8 pad: 0x0000
class UBreakpoint : public UObject
{ 
public:
	bool                                               bEnabled : 1;                                               // 0x0030:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0031   (0x0007)  MISSED
	class UEdGraphNode*                                Node;                                                       // 0x0038   (0x0008)  
	bool                                               bStepOnce : 1;                                              // 0x0040:0 (0x0001)  
	bool                                               bStepOnce_WasPreviouslyDisabled : 1;                        // 0x0040:1 (0x0001)  
	bool                                               bStepOnce_RemoveAfterHit : 1;                               // 0x0040:2 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Struct /Script/Engine.BuilderPoly
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FBuilderPoly
{ 
	TArray<int32_t>                                    VertexIndices;                                              // 0x0000   (0x0010)  
	int32_t                                            Direction;                                                  // 0x0010   (0x0004)  
	FName                                              ItemName;                                                   // 0x0014   (0x000C)  
	int32_t                                            PolyFlags;                                                  // 0x0020   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Class /Script/Engine.BrushBuilder
/// Size: 0x0058 (88 bytes) (0x000030 - 0x000088) align 8 pad: 0x0000
class UBrushBuilder : public UObject
{ 
public:
	FString                                            BitmapFilename;                                             // 0x0030   (0x0010)  
	FString                                            ToolTip;                                                    // 0x0040   (0x0010)  
	bool                                               NotifyBadParams : 1;                                        // 0x0050:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0051   (0x0007)  MISSED
	TArray<FVector>                                    Vertices;                                                   // 0x0058   (0x0010)  
	TArray<FBuilderPoly>                               Polys;                                                      // 0x0068   (0x0010)  
	FName                                              Layer;                                                      // 0x0078   (0x000C)  
	bool                                               MergeCoplanars : 1;                                         // 0x0084:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0085   (0x0003)  MISSED
};

/// Class /Script/Engine.BrushComponent
/// Size: 0x0010 (16 bytes) (0x0004E0 - 0x0004F0) align 16 pad: 0x0000
class UBrushComponent : public UPrimitiveComponent
{ 
public:
	class UModel*                                      Brush;                                                      // 0x04E0   (0x0008)  
	class UBodySetup*                                  BrushBodySetup;                                             // 0x04E8   (0x0008)  
};

/// Class /Script/Engine.BrushShape
/// Size: 0x0000 (0 bytes) (0x0002E0 - 0x0002E0) align 8 pad: 0x0000
class ABrushShape : public ABrush
{ 
public:
};

/// Class /Script/Engine.ButtonStyleAsset
/// Size: 0x02A8 (680 bytes) (0x000030 - 0x0002D8) align 8 pad: 0x0000
class UButtonStyleAsset : public UObject
{ 
public:
	FButtonStyle                                       ButtonStyle;                                                // 0x0030   (0x02A8)  
};

/// Class /Script/Engine.CameraAnim
/// Size: 0x0640 (1600 bytes) (0x000030 - 0x000670) align 16 pad: 0x0000
class UCameraAnim : public UObject
{ 
public:
	class UInterpGroup*                                CameraInterpGroup;                                          // 0x0030   (0x0008)  
	float                                              AnimLength;                                                 // 0x0038   (0x0004)  
	FBox                                               BoundingBox;                                                // 0x003C   (0x001C)  
	bool                                               bRelativeToInitialTransform : 1;                            // 0x0058:0 (0x0001)  
	bool                                               bRelativeToInitialFOV : 1;                                  // 0x0058:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0059   (0x0003)  MISSED
	float                                              BaseFOV;                                                    // 0x005C   (0x0004)  
	FPostProcessSettings                               BasePostProcessSettings;                                    // 0x0060   (0x0600)  
	float                                              BasePostProcessBlendWeight;                                 // 0x0660   (0x0004)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0664   (0x000C)  MISSED
};

/// Class /Script/Engine.CameraAnimInst
/// Size: 0x00F0 (240 bytes) (0x000030 - 0x000120) align 16 pad: 0x0000
class UCameraAnimInst : public UObject
{ 
public:
	class UCameraAnim*                                 CamAnim;                                                    // 0x0030   (0x0008)  
	class UInterpGroupInst*                            InterpGroupInst;                                            // 0x0038   (0x0008)  
	unsigned char                                      UnknownData00_6[0x18];                                      // 0x0040   (0x0018)  MISSED
	float                                              PlayRate;                                                   // 0x0058   (0x0004)  
	unsigned char                                      UnknownData01_6[0x14];                                      // 0x005C   (0x0014)  MISSED
	class UInterpTrackMove*                            MoveTrack;                                                  // 0x0070   (0x0008)  
	class UInterpTrackInstMove*                        MoveInst;                                                   // 0x0078   (0x0008)  
	ECameraShakePlaySpace                              PlaySpace;                                                  // 0x0080   (0x0001)  
	unsigned char                                      UnknownData02_7[0x9F];                                      // 0x0081   (0x009F)  MISSED
	// void Stop(bool bImmediate);                                                                                              // [0x45f6e70] Final|Native|Public|BlueprintCallable 
	// void SetScale(float NewDuration);                                                                                        // [0x45f6d60] Final|Native|Public|BlueprintCallable 
	// void SetDuration(float NewDuration);                                                                                     // [0x45f6a60] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.CameraBlockingVolume
/// Size: 0x0000 (0 bytes) (0x0002E0 - 0x0002E0) align 8 pad: 0x0000
class ACameraBlockingVolume : public AVolume
{ 
public:
};

/// Class /Script/Engine.CameraModifier
/// Size: 0x0020 (32 bytes) (0x000030 - 0x000050) align 8 pad: 0x0000
class UCameraModifier : public UObject
{ 
public:
	bool                                               bDebug : 1;                                                 // 0x0030:0 (0x0001)  
	bool                                               bExclusive : 1;                                             // 0x0030:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0031   (0x0003)  MISSED
	char                                               Priority;                                                   // 0x0034   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0035   (0x0003)  MISSED
	class APlayerCameraManager*                        CameraOwner;                                                // 0x0038   (0x0008)  
	float                                              AlphaInTime;                                                // 0x0040   (0x0004)  
	float                                              AlphaOutTime;                                               // 0x0044   (0x0004)  
	float                                              ALPHA;                                                      // 0x0048   (0x0004)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x004C   (0x0004)  MISSED
	// bool IsDisabled();                                                                                                       // [0x3633540] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class AActor* GetViewTarget();                                                                                           // [0x3bad8f0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void EnableModifier();                                                                                                   // [0x17737b0] Native|Public|BlueprintCallable 
	// void DisableModifier(bool bImmediate);                                                                                   // [0x45f6330] Native|Public|BlueprintCallable 
	// void BlueprintModifyPostProcess(float DeltaTime, float& PostProcessBlendWeight, FPostProcessSettings& PostProcessSettings); // [0x25a7960] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// void BlueprintModifyCamera(float DeltaTime, FVector ViewLocation, FRotator ViewRotation, float FOV, FVector& NewViewLocation, FRotator& NewViewRotation, float& NewFOV); // [0x25a7960] BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
};

/// Struct /Script/Engine.ActiveCameraShakeInfo
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FActiveCameraShakeInfo
{ 
	class UCameraShakeBase*                            ShakeInstance;                                              // 0x0000   (0x0008)  
	SDK_UNDEFINED(8,127) /* TWeakObjectPtr<UCameraShakeSourceComponent*> */ __um(ShakeSource);                     // 0x0008   (0x0008)  
};

/// Class /Script/Engine.CameraModifier_CameraShake
/// Size: 0x0068 (104 bytes) (0x000050 - 0x0000B8) align 8 pad: 0x0000
class UCameraModifier_CameraShake : public UCameraModifier
{ 
public:
	TArray<FActiveCameraShakeInfo>                     ActiveShakes;                                               // 0x0050   (0x0010)  
	SDK_UNDEFINED(80,128) /* TMap<UClass*, FPooledCameraShakes> */ __um(ExpiredPooledShakesMap);                   // 0x0060   (0x0050)  
	float                                              SplitScreenShakeScale;                                      // 0x00B0   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x00B4   (0x0004)  MISSED
};

/// Class /Script/Engine.CameraShakeSourceActor
/// Size: 0x0008 (8 bytes) (0x0002A8 - 0x0002B0) align 8 pad: 0x0000
class ACameraShakeSourceActor : public AActor
{ 
public:
	class UCameraShakeSourceComponent*                 CameraShakeSourceComponent;                                 // 0x02A8   (0x0008)  
};

/// Class /Script/Engine.CameraShakeSourceComponent
/// Size: 0x0028 (40 bytes) (0x000218 - 0x000240) align 16 pad: 0x0000
class UCameraShakeSourceComponent : public USceneComponent
{ 
public:
	ECameraShakeAttenuation                            Attenuation;                                                // 0x0218   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0219   (0x0003)  MISSED
	float                                              InnerAttenuationRadius;                                     // 0x021C   (0x0004)  
	float                                              OuterAttenuationRadius;                                     // 0x0220   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0224   (0x0004)  MISSED
	class UClass*                                      CameraShake;                                                // 0x0228   (0x0008)  
	bool                                               bAutoStart;                                                 // 0x0230   (0x0001)  
	unsigned char                                      UnknownData02_7[0xF];                                       // 0x0231   (0x000F)  MISSED
	// void StopAllCameraShakesOfType(class UClass* InCameraShake, bool bImmediately);                                          // [0x45faf80] Final|Native|Public|BlueprintCallable 
	// void StopAllCameraShakes(bool bImmediately);                                                                             // [0x45faef0] Final|Native|Public|BlueprintCallable 
	// void StartCameraShake(class UClass* InCameraShake, float Scale, ECameraShakePlaySpace PlaySpace, FRotator UserPlaySpaceRot); // [0x45fad70] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void Start();                                                                                                            // [0x45fad50] Final|Native|Public|BlueprintCallable 
	// float GetAttenuationFactor(FVector& Location);                                                                           // [0x45f93a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.Canvas
/// Size: 0x02A0 (672 bytes) (0x000030 - 0x0002D0) align 16 pad: 0x0000
class UCanvas : public UObject
{ 
public:
	float                                              OrgX;                                                       // 0x0030   (0x0004)  
	float                                              OrgY;                                                       // 0x0034   (0x0004)  
	float                                              ClipX;                                                      // 0x0038   (0x0004)  
	float                                              ClipY;                                                      // 0x003C   (0x0004)  
	FColor                                             DrawColor;                                                  // 0x0040   (0x0004)  
	bool                                               bCenterX : 1;                                               // 0x0044:0 (0x0001)  
	bool                                               bCenterY : 1;                                               // 0x0044:1 (0x0001)  
	bool                                               bNoSmooth : 1;                                              // 0x0044:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0045   (0x0003)  MISSED
	int32_t                                            SizeX;                                                      // 0x0048   (0x0004)  
	int32_t                                            SizeY;                                                      // 0x004C   (0x0004)  
	FPlane                                             ColorModulate;                                              // 0x0050   (0x0010)  
	class UTexture2D*                                  DefaultTexture;                                             // 0x0060   (0x0008)  
	class UTexture2D*                                  GradientTexture0;                                           // 0x0068   (0x0008)  
	class UReporterGraph*                              ReporterGraph;                                              // 0x0070   (0x0008)  
	unsigned char                                      UnknownData01_7[0x258];                                     // 0x0078   (0x0258)  MISSED
	// FVector2D K2_TextSize(class UFont* RenderFont, FString RenderText, FVector2D Scale);                                     // [0x45fabf0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// FVector2D K2_StrLen(class UFont* RenderFont, FString RenderText);                                                        // [0x45fab00] Final|Native|Public|HasDefaults|BlueprintCallable 
	// FVector K2_Project(FVector WorldLocation);                                                                               // [0x45faa50] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void K2_DrawTriangle(class UTexture* RenderTexture, TArray<FCanvasUVTri> Triangles);                                     // [0x45fa920] Final|Native|Public|BlueprintCallable 
	// void K2_DrawTexture(class UTexture* RenderTexture, FVector2D ScreenPosition, FVector2D ScreenSize, FVector2D CoordinatePosition, FVector2D CoordinateSize, FLinearColor RenderColor, TEnumAsByte<EBlendMode> BlendMode, float Rotation, FVector2D PivotPoint); // [0x45fa670] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void K2_DrawText(class UFont* RenderFont, FString RenderText, FVector2D ScreenPosition, FVector2D Scale, FLinearColor RenderColor, float Kerning, FLinearColor ShadowColor, FVector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, FLinearColor OutlineColor); // [0x45fa2b0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void K2_DrawPolygon(class UTexture* RenderTexture, FVector2D ScreenPosition, FVector2D Radius, int32_t NumberOfSides, FLinearColor RenderColor); // [0x45fa100] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void K2_DrawMaterialTriangle(class UMaterialInterface* RenderMaterial, TArray<FCanvasUVTri> Triangles);                  // [0x45f9fd0] Final|Native|Public|BlueprintCallable 
	// void K2_DrawMaterial(class UMaterialInterface* RenderMaterial, FVector2D ScreenPosition, FVector2D ScreenSize, FVector2D CoordinatePosition, FVector2D CoordinateSize, float Rotation, FVector2D PivotPoint); // [0x45f9d90] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void K2_DrawLine(FVector2D ScreenPositionA, FVector2D ScreenPositionB, float Thickness, FLinearColor RenderColor);       // [0x45f9c30] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void K2_DrawBox(FVector2D ScreenPosition, FVector2D ScreenSize, float Thickness, FLinearColor RenderColor);              // [0x45f9ad0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void K2_DrawBorder(class UTexture* BorderTexture, class UTexture* BackgroundTexture, class UTexture* LeftBorderTexture, class UTexture* RightBorderTexture, class UTexture* TopBorderTexture, class UTexture* BottomBorderTexture, FVector2D ScreenPosition, FVector2D ScreenSize, FVector2D CoordinatePosition, FVector2D CoordinateSize, FLinearColor RenderColor, FVector2D BorderScale, FVector2D BackgroundScale, float Rotation, FVector2D PivotPoint, FVector2D CornerSize); // [0x45f9640] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void K2_Deproject(FVector2D ScreenPosition, FVector& WorldOrigin, FVector& WorldDirection);                              // [0x45f9520] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.TextureRenderTarget
/// Size: 0x0008 (8 bytes) (0x0000F0 - 0x0000F8) align 8 pad: 0x0000
class UTextureRenderTarget : public UTexture
{ 
public:
	float                                              TargetGamma;                                                // 0x00F0   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x00F4   (0x0004)  MISSED
};

/// Class /Script/Engine.TextureRenderTarget2D
/// Size: 0x0028 (40 bytes) (0x0000F8 - 0x000120) align 8 pad: 0x0000
class UTextureRenderTarget2D : public UTextureRenderTarget
{ 
public:
	int32_t                                            SizeX;                                                      // 0x00F8   (0x0004)  
	int32_t                                            SizeY;                                                      // 0x00FC   (0x0004)  
	FLinearColor                                       ClearColor;                                                 // 0x0100   (0x0010)  
	TEnumAsByte<TextureAddress>                        AddressX;                                                   // 0x0110   (0x0001)  
	TEnumAsByte<TextureAddress>                        AddressY;                                                   // 0x0111   (0x0001)  
	bool                                               bForceLinearGamma : 1;                                      // 0x0112:0 (0x0001)  
	bool                                               bHDR : 1;                                                   // 0x0112:1 (0x0001)  
	bool                                               bGPUSharedFlag : 1;                                         // 0x0112:2 (0x0001)  
	TEnumAsByte<ETextureRenderTargetFormat>            RenderTargetFormat;                                         // 0x0113   (0x0001)  
	bool                                               bAutoGenerateMips : 1;                                      // 0x0114:0 (0x0001)  
	TEnumAsByte<TextureFilter>                         MipsSamplerFilter;                                          // 0x0115   (0x0001)  
	TEnumAsByte<TextureAddress>                        MipsAddressU;                                               // 0x0116   (0x0001)  
	TEnumAsByte<TextureAddress>                        MipsAddressV;                                               // 0x0117   (0x0001)  
	TEnumAsByte<EPixelFormat>                          OverrideFormat;                                             // 0x0118   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0119   (0x0007)  MISSED
};

/// Class /Script/Engine.CanvasRenderTarget2D
/// Size: 0x0020 (32 bytes) (0x000120 - 0x000140) align 8 pad: 0x0000
class UCanvasRenderTarget2D : public UTextureRenderTarget2D
{ 
public:
	SDK_UNDEFINED(16,129) /* FMulticastInlineDelegate */ __um(OnCanvasRenderTargetUpdate);                         // 0x0120   (0x0010)  
	SDK_UNDEFINED(8,130) /* TWeakObjectPtr<UWorld*> */ __um(World);                                                // 0x0130   (0x0008)  
	bool                                               bShouldClearRenderTargetOnReceiveUpdate;                    // 0x0138   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0139   (0x0007)  MISSED
	// void UpdateResource();                                                                                                   // [0x45fb050] Native|Public|BlueprintCallable 
	// void ReceiveUpdate(class UCanvas* Canvas, int32_t Width, int32_t Height);                                                // [0x25a7960] Event|Public|BlueprintEvent 
	// void GetSize(int32_t& Width, int32_t& Height);                                                                           // [0x45f9440] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// class UCanvasRenderTarget2D* CreateCanvasRenderTarget2D(class UObject* WorldContextObject, class UClass* CanvasRenderTarget2DClass, int32_t Width, int32_t Height); // [0x45f9260] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.MovementComponent
/// Size: 0x0040 (64 bytes) (0x0000C0 - 0x000100) align 8 pad: 0x0000
class UMovementComponent : public UActorComponent
{ 
public:
	class USceneComponent*                             UpdatedComponent;                                           // 0x00C0   (0x0008)  
	class UPrimitiveComponent*                         UpdatedPrimitive;                                           // 0x00C8   (0x0008)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00D0   (0x0004)  MISSED
	FVector                                            Velocity;                                                   // 0x00D4   (0x000C)  
	FVector                                            PlaneConstraintNormal;                                      // 0x00E0   (0x000C)  
	FVector                                            PlaneConstraintOrigin;                                      // 0x00EC   (0x000C)  
	bool                                               bUpdateOnlyIfRendered : 1;                                  // 0x00F8:0 (0x0001)  
	bool                                               bAutoUpdateTickRegistration : 1;                            // 0x00F8:1 (0x0001)  
	bool                                               bTickBeforeOwner : 1;                                       // 0x00F8:2 (0x0001)  
	bool                                               bAutoRegisterUpdatedComponent : 1;                          // 0x00F8:3 (0x0001)  
	bool                                               bConstrainToPlane : 1;                                      // 0x00F8:4 (0x0001)  
	bool                                               bSnapToPlaneAtStart : 1;                                    // 0x00F8:5 (0x0001)  
	bool                                               bAutoRegisterPhysicsVolumeUpdates : 1;                      // 0x00F8:6 (0x0001)  
	bool                                               bComponentShouldUpdatePhysicsVolume : 1;                    // 0x00F8:7 (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x00F9   (0x0002)  MISSED
	EPlaneConstraintAxisSetting                        PlaneConstraintAxisSetting;                                 // 0x00FB   (0x0001)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x00FC   (0x0004)  MISSED
	// void StopMovementImmediately();                                                                                          // [0x46e2480] Native|Public|BlueprintCallable 
	// void SnapUpdatedComponentToPlane();                                                                                      // [0x46e2460] Native|Public|BlueprintCallable 
	// void SetUpdatedComponent(class USceneComponent* NewUpdatedComponent);                                                    // [0x46e23d0] Native|Public|BlueprintCallable 
	// void SetPlaneConstraintOrigin(FVector PlaneOrigin);                                                                      // [0x46e2340] Native|Public|HasDefaults|BlueprintCallable 
	// void SetPlaneConstraintNormal(FVector PlaneNormal);                                                                      // [0x46e22b0] Native|Public|HasDefaults|BlueprintCallable 
	// void SetPlaneConstraintFromVectors(FVector Forward, FVector Up);                                                         // [0x46e21c0] Native|Public|HasDefaults|BlueprintCallable 
	// void SetPlaneConstraintEnabled(bool bEnabled);                                                                           // [0x46e2130] Native|Public|BlueprintCallable 
	// void SetPlaneConstraintAxisSetting(EPlaneConstraintAxisSetting NewAxisSetting);                                          // [0x46e20b0] Native|Public|BlueprintCallable 
	// void PhysicsVolumeChanged(class APhysicsVolume* NewVolume);                                                              // [0x46e1fa0] Native|Public        
	// bool K2_MoveUpdatedComponent(FVector Delta, FRotator NewRotation, FHitResult& OutHit, bool bSweep, bool bTeleport);      // [0x46e1aa0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// float K2_GetModifiedMaxSpeed();                                                                                          // [0x46e1a60] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float K2_GetMaxSpeedModifier();                                                                                          // [0xbfc8d0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsExceedingMaxSpeed(float MaxSpeed);                                                                                // [0x46e19c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector GetPlaneConstraintOrigin();                                                                                      // [0x46e1980] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetPlaneConstraintNormal();                                                                                      // [0x46e1940] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// EPlaneConstraintAxisSetting GetPlaneConstraintAxisSetting();                                                             // [0x46e1920] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class APhysicsVolume* GetPhysicsVolume();                                                                                // [0x46e18f0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetMaxSpeed();                                                                                                     // [0x46e18b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetGravityZ();                                                                                                     // [0x46e1870] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector ConstrainNormalToPlane(FVector Normal);                                                                          // [0x46e17b0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector ConstrainLocationToPlane(FVector Location);                                                                      // [0x46e16f0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector ConstrainDirectionToPlane(FVector Direction);                                                                    // [0x46e1630] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.MovementProperties
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FMovementProperties
{ 
	bool                                               bCanCrouch : 1;                                             // 0x0000:0 (0x0001)  
	bool                                               bCanJump : 1;                                               // 0x0000:1 (0x0001)  
	bool                                               bCanWalk : 1;                                               // 0x0000:2 (0x0001)  
	bool                                               bCanSwim : 1;                                               // 0x0000:3 (0x0001)  
	bool                                               bCanFly : 1;                                                // 0x0000:4 (0x0001)  
};

/// Struct /Script/Engine.NavAgentProperties
/// Size: 0x0037 (55 bytes) (0x000001 - 0x000038) align 8 pad: 0x0000
struct FNavAgentProperties : FMovementProperties
{ 
	unsigned char                                      UnknownData00_3[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              AgentRadius;                                                // 0x0004   (0x0004)  
	float                                              AgentHeight;                                                // 0x0008   (0x0004)  
	float                                              AgentStepHeight;                                            // 0x000C   (0x0004)  
	float                                              NavWalkingSearchHeightScale;                                // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	FSoftClassPath                                     PreferredNavData;                                           // 0x0018   (0x0020)  
};

/// Class /Script/Engine.NavMovementComponent
/// Size: 0x0048 (72 bytes) (0x000100 - 0x000148) align 8 pad: 0x0000
class UNavMovementComponent : public UMovementComponent
{ 
public:
	FNavAgentProperties                                NavAgentProps;                                              // 0x0100   (0x0038)  
	float                                              FixedPathBrakingDistance;                                   // 0x0138   (0x0004)  
	bool                                               bUpdateNavAgentWithOwnersCollision : 1;                     // 0x013C:0 (0x0001)  
	bool                                               bUseAccelerationForPaths : 1;                               // 0x013C:1 (0x0001)  
	bool                                               bUseFixedBrakingDistanceForPaths : 1;                       // 0x013C:2 (0x0001)  
	FMovementProperties                                MovementState;                                              // 0x013D   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x013E   (0x0002)  MISSED
	class UObject*                                     PathFollowingComp;                                          // 0x0140   (0x0008)  
	// void StopMovementKeepPathing();                                                                                          // [0x46e5b90] Final|Native|Public|BlueprintCallable 
	// void StopActiveMovement();                                                                                               // [0x46e5b70] Native|Public|BlueprintCallable 
	// bool IsSwimming();                                                                                                       // [0x46e5940] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsMovingOnGround();                                                                                                 // [0x4603880] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsFlying();                                                                                                         // [0x46e5910] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsFalling();                                                                                                        // [0x45e2f10] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsCrouching();                                                                                                      // [0x46e58e0] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.PawnMovementComponent
/// Size: 0x0008 (8 bytes) (0x000148 - 0x000150) align 8 pad: 0x0000
class UPawnMovementComponent : public UNavMovementComponent
{ 
public:
	class APawn*                                       PawnOwner;                                                  // 0x0148   (0x0008)  
	// FVector K2_GetInputVector();                                                                                             // [0x46f8000] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// bool IsMoveInputIgnored();                                                                                               // [0x46f8140] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector GetPendingInputVector();                                                                                         // [0x46f8000] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// class APawn* GetPawnOwner();                                                                                             // [0x46f7fd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector GetLastInputVector();                                                                                            // [0x46f7e70] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector ConsumeInputVector();                                                                                            // [0x46f7ae0] Native|Public|HasDefaults|BlueprintCallable 
	// void AddInputVector(FVector WorldVector, bool bForce);                                                                   // [0x46f74d0] Native|Public|HasDefaults|BlueprintCallable 
};

/// Struct /Script/Engine.Vector_NetQuantize
/// Size: 0x0000 (0 bytes) (0x00000C - 0x00000C) align 4 pad: 0x0000
struct FVector_NetQuantize : FVector
{ 
};

/// Struct /Script/Engine.Vector_NetQuantizeNormal
/// Size: 0x0000 (0 bytes) (0x00000C - 0x00000C) align 4 pad: 0x0000
struct FVector_NetQuantizeNormal : FVector
{ 
};

/// Struct /Script/Engine.HitResult
/// Size: 0x0094 (148 bytes) (0x000000 - 0x000094) align 4 pad: 0x0000
struct FHitResult
{ 
	bool                                               bBlockingHit : 1;                                           // 0x0000:0 (0x0001)  
	bool                                               bStartPenetrating : 1;                                      // 0x0000:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            FaceIndex;                                                  // 0x0004   (0x0004)  
	float                                              Time;                                                       // 0x0008   (0x0004)  
	float                                              Distance;                                                   // 0x000C   (0x0004)  
	FVector_NetQuantize                                Location;                                                   // 0x0010   (0x000C)  
	FVector_NetQuantize                                ImpactPoint;                                                // 0x001C   (0x000C)  
	FVector_NetQuantizeNormal                          Normal;                                                     // 0x0028   (0x000C)  
	FVector_NetQuantizeNormal                          ImpactNormal;                                               // 0x0034   (0x000C)  
	FVector_NetQuantize                                TraceStart;                                                 // 0x0040   (0x000C)  
	FVector_NetQuantize                                TraceEnd;                                                   // 0x004C   (0x000C)  
	float                                              PenetrationDepth;                                           // 0x0058   (0x0004)  
	int32_t                                            Item;                                                       // 0x005C   (0x0004)  
	char                                               ElementIndex;                                               // 0x0060   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0061   (0x0003)  MISSED
	SDK_UNDEFINED(8,131) /* TWeakObjectPtr<UPhysicalMaterial*> */ __um(PhysMaterial);                              // 0x0064   (0x0008)  
	SDK_UNDEFINED(8,132) /* TWeakObjectPtr<AActor*> */ __um(Actor);                                                // 0x006C   (0x0008)  
	SDK_UNDEFINED(8,133) /* TWeakObjectPtr<UPrimitiveComponent*> */ __um(Component);                               // 0x0074   (0x0008)  
	FName                                              BoneName;                                                   // 0x007C   (0x000C)  
	FName                                              MyBoneName;                                                 // 0x0088   (0x000C)  
};

/// Struct /Script/Engine.FindFloorResult
/// Size: 0x00A0 (160 bytes) (0x000000 - 0x0000A0) align 4 pad: 0x0000
struct FFindFloorResult
{ 
	bool                                               bBlockingHit : 1;                                           // 0x0000:0 (0x0001)  
	bool                                               bWalkableFloor : 1;                                         // 0x0000:1 (0x0001)  
	bool                                               bLineTrace : 1;                                             // 0x0000:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              FloorDist;                                                  // 0x0004   (0x0004)  
	float                                              LineDist;                                                   // 0x0008   (0x0004)  
	FHitResult                                         HitResult;                                                  // 0x000C   (0x0094)  
};

/// Struct /Script/Engine.NavAvoidanceMask
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FNavAvoidanceMask
{ 
	bool                                               bGroup0 : 1;                                                // 0x0000:0 (0x0001)  
	bool                                               bGroup1 : 1;                                                // 0x0000:1 (0x0001)  
	bool                                               bGroup2 : 1;                                                // 0x0000:2 (0x0001)  
	bool                                               bGroup3 : 1;                                                // 0x0000:3 (0x0001)  
	bool                                               bGroup4 : 1;                                                // 0x0000:4 (0x0001)  
	bool                                               bGroup5 : 1;                                                // 0x0000:5 (0x0001)  
	bool                                               bGroup6 : 1;                                                // 0x0000:6 (0x0001)  
	bool                                               bGroup7 : 1;                                                // 0x0000:7 (0x0001)  
	bool                                               bGroup8 : 1;                                                // 0x0001:0 (0x0001)  
	bool                                               bGroup9 : 1;                                                // 0x0001:1 (0x0001)  
	bool                                               bGroup10 : 1;                                               // 0x0001:2 (0x0001)  
	bool                                               bGroup11 : 1;                                               // 0x0001:3 (0x0001)  
	bool                                               bGroup12 : 1;                                               // 0x0001:4 (0x0001)  
	bool                                               bGroup13 : 1;                                               // 0x0001:5 (0x0001)  
	bool                                               bGroup14 : 1;                                               // 0x0001:6 (0x0001)  
	bool                                               bGroup15 : 1;                                               // 0x0001:7 (0x0001)  
	bool                                               bGroup16 : 1;                                               // 0x0002:0 (0x0001)  
	bool                                               bGroup17 : 1;                                               // 0x0002:1 (0x0001)  
	bool                                               bGroup18 : 1;                                               // 0x0002:2 (0x0001)  
	bool                                               bGroup19 : 1;                                               // 0x0002:3 (0x0001)  
	bool                                               bGroup20 : 1;                                               // 0x0002:4 (0x0001)  
	bool                                               bGroup21 : 1;                                               // 0x0002:5 (0x0001)  
	bool                                               bGroup22 : 1;                                               // 0x0002:6 (0x0001)  
	bool                                               bGroup23 : 1;                                               // 0x0002:7 (0x0001)  
	bool                                               bGroup24 : 1;                                               // 0x0003:0 (0x0001)  
	bool                                               bGroup25 : 1;                                               // 0x0003:1 (0x0001)  
	bool                                               bGroup26 : 1;                                               // 0x0003:2 (0x0001)  
	bool                                               bGroup27 : 1;                                               // 0x0003:3 (0x0001)  
	bool                                               bGroup28 : 1;                                               // 0x0003:4 (0x0001)  
	bool                                               bGroup29 : 1;                                               // 0x0003:5 (0x0001)  
	bool                                               bGroup30 : 1;                                               // 0x0003:6 (0x0001)  
	bool                                               bGroup31 : 1;                                               // 0x0003:7 (0x0001)  
};

/// Struct /Script/Engine.CharacterMovementComponentPostPhysicsTickFunction
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
struct FCharacterMovementComponentPostPhysicsTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Class /Script/Engine.CharacterMovementComponent
/// Size: 0x0A90 (2704 bytes) (0x000150 - 0x000BE0) align 16 pad: 0x0000
class UCharacterMovementComponent : public UPawnMovementComponent
{ 
public:
	unsigned char                                      UnknownData00_3[0x10];                                      // 0x0150   (0x0010)  MISSED
	class ACharacter*                                  CharacterOwner;                                             // 0x0160   (0x0008)  
	float                                              GravityScale;                                               // 0x0168   (0x0004)  
	float                                              MaxStepHeight;                                              // 0x016C   (0x0004)  
	float                                              JumpZVelocity;                                              // 0x0170   (0x0004)  
	float                                              JumpOffJumpZFactor;                                         // 0x0174   (0x0004)  
	float                                              WalkableFloorAngle;                                         // 0x0178   (0x0004)  
	float                                              WalkableFloorZ;                                             // 0x017C   (0x0004)  
	TEnumAsByte<EMovementMode>                         MovementMode;                                               // 0x0180   (0x0001)  
	char                                               CustomMovementMode;                                         // 0x0181   (0x0001)  
	ENetworkSmoothingMode                              NetworkSmoothingMode;                                       // 0x0182   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x0183   (0x0001)  MISSED
	float                                              GroundFriction;                                             // 0x0184   (0x0004)  
	unsigned char                                      UnknownData02_6[0x24];                                      // 0x0188   (0x0024)  MISSED
	float                                              MaxWalkSpeed;                                               // 0x01AC   (0x0004)  
	float                                              MaxWalkSpeedCrouched;                                       // 0x01B0   (0x0004)  
	float                                              MaxSwimSpeed;                                               // 0x01B4   (0x0004)  
	float                                              MaxFlySpeed;                                                // 0x01B8   (0x0004)  
	float                                              MaxCustomMovementSpeed;                                     // 0x01BC   (0x0004)  
	float                                              MaxAcceleration;                                            // 0x01C0   (0x0004)  
	float                                              MinAnalogWalkSpeed;                                         // 0x01C4   (0x0004)  
	float                                              BrakingFrictionFactor;                                      // 0x01C8   (0x0004)  
	float                                              BrakingFriction;                                            // 0x01CC   (0x0004)  
	float                                              BrakingSubStepTime;                                         // 0x01D0   (0x0004)  
	float                                              BrakingDecelerationWalking;                                 // 0x01D4   (0x0004)  
	float                                              BrakingDecelerationFalling;                                 // 0x01D8   (0x0004)  
	float                                              BrakingDecelerationSwimming;                                // 0x01DC   (0x0004)  
	float                                              BrakingDecelerationFlying;                                  // 0x01E0   (0x0004)  
	float                                              AirControl;                                                 // 0x01E4   (0x0004)  
	float                                              AirControlBoostMultiplier;                                  // 0x01E8   (0x0004)  
	float                                              AirControlBoostVelocityThreshold;                           // 0x01EC   (0x0004)  
	float                                              FallingLateralFriction;                                     // 0x01F0   (0x0004)  
	float                                              CrouchedHalfHeight;                                         // 0x01F4   (0x0004)  
	float                                              Buoyancy;                                                   // 0x01F8   (0x0004)  
	float                                              PerchRadiusThreshold;                                       // 0x01FC   (0x0004)  
	float                                              PerchAdditionalHeight;                                      // 0x0200   (0x0004)  
	FRotator                                           RotationRate;                                               // 0x0204   (0x000C)  
	bool                                               bUseSeparateBrakingFriction : 1;                            // 0x0210:0 (0x0001)  
	bool                                               bApplyGravityWhileJumping : 1;                              // 0x0210:1 (0x0001)  
	bool                                               bUseControllerDesiredRotation : 1;                          // 0x0210:2 (0x0001)  
	bool                                               bOrientRotationToMovement : 1;                              // 0x0210:3 (0x0001)  
	bool                                               bRotationFollowBaseMovement : 1;                            // 0x0210:4 (0x0001)  
	bool                                               bSweepWhileNavWalking : 1;                                  // 0x0210:5 (0x0001)  
	unsigned char                                      UnknownData03_5[0x2B];                                      // 0x0211   (0x002B)  MISSED
	bool                                               bKuroAutoActiveNav;                                         // 0x023C   (0x0001)  
	bool                                               bKuroStillBlockInNav;                                       // 0x023D   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x023E   (0x0002)  MISSED
	float                                              OverrideTerminalVelocity;                                   // 0x0240   (0x0004)  
	int32_t                                            HitPriority;                                                // 0x0244   (0x0004)  
	bool                                               GoThroughLower;                                             // 0x0248   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0249   (0x0003)  MISSED
	int32_t                                            GoThroughPriority;                                          // 0x024C   (0x0004)  
	unsigned char                                      UnknownData06_6[0x1];                                       // 0x0250   (0x0001)  MISSED
	bool                                               bForbiddenTickPose;                                         // 0x0251   (0x0001)  
	bool                                               bMovementInProgress : 1;                                    // 0x0252:0 (0x0001)  
	bool                                               bEnableScopedMovementUpdates : 1;                           // 0x0252:1 (0x0001)  
	bool                                               bEnableServerDualMoveScopedMovementUpdates : 1;             // 0x0252:2 (0x0001)  
	bool                                               bForceMaxAccel : 1;                                         // 0x0252:3 (0x0001)  
	bool                                               bRunPhysicsWithNoController : 1;                            // 0x0252:4 (0x0001)  
	bool                                               bForceNextFloorCheck : 1;                                   // 0x0252:5 (0x0001)  
	bool                                               bShrinkProxyCapsule : 1;                                    // 0x0252:6 (0x0001)  
	bool                                               bCanWalkOffLedges : 1;                                      // 0x0252:7 (0x0001)  
	bool                                               bCanWalkOffLedgesWhenCrouching : 1;                         // 0x0253:0 (0x0001)  
	bool                                               bKuroCanWalkOffLedgesNav : 1;                               // 0x0253:1 (0x0001)  
	unsigned char                                      UnknownBit07 : 1;                                           // 0x0253:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit08 : 1;                                           // 0x0253:3 (0x0001)  MISSED
	bool                                               bNetworkSkipProxyPredictionOnNetUpdate : 1;                 // 0x0253:4 (0x0001)  
	bool                                               bNetworkAlwaysReplicateTransformUpdateTimestamp : 1;        // 0x0253:5 (0x0001)  
	unsigned char                                      UnknownBit09 : 1;                                           // 0x0253:6 (0x0001)  MISSED
	bool                                               bDeferUpdateMoveComponent : 1;                              // 0x0253:7 (0x0001)  
	bool                                               bEnablePhysicsInteraction : 1;                              // 0x0254:0 (0x0001)  
	bool                                               bTouchForceScaledToMass : 1;                                // 0x0254:1 (0x0001)  
	bool                                               bPushForceScaledToMass : 1;                                 // 0x0254:2 (0x0001)  
	bool                                               bPushForceUsingZOffset : 1;                                 // 0x0254:3 (0x0001)  
	bool                                               bScalePushForceToVelocity : 1;                              // 0x0254:4 (0x0001)  
	unsigned char                                      UnknownData10_5[0x3];                                       // 0x0255   (0x0003)  MISSED
	class USceneComponent*                             DeferredUpdatedMoveComponent;                               // 0x0258   (0x0008)  
	float                                              StepUpSpeedPrecent;                                         // 0x0260   (0x0004)  
	float                                              StepDownSpeedPrecent;                                       // 0x0264   (0x0004)  
	float                                              StepUpDeltaPrecent;                                         // 0x0268   (0x0004)  
	float                                              StepUpStandardSpeed;                                        // 0x026C   (0x0004)  
	float                                              MaxOutOfWaterStepHeight;                                    // 0x0270   (0x0004)  
	float                                              OutofWaterZ;                                                // 0x0274   (0x0004)  
	float                                              Mass;                                                       // 0x0278   (0x0004)  
	float                                              StandingDownwardForceScale;                                 // 0x027C   (0x0004)  
	float                                              InitialPushForceFactor;                                     // 0x0280   (0x0004)  
	float                                              PushForceFactor;                                            // 0x0284   (0x0004)  
	float                                              PushForcePointZOffsetFactor;                                // 0x0288   (0x0004)  
	float                                              TouchForceFactor;                                           // 0x028C   (0x0004)  
	float                                              MinTouchForce;                                              // 0x0290   (0x0004)  
	float                                              MaxTouchForce;                                              // 0x0294   (0x0004)  
	float                                              RepulsionForce;                                             // 0x0298   (0x0004)  
	FVector                                            Acceleration;                                               // 0x029C   (0x000C)  
	unsigned char                                      UnknownData11_6[0x8];                                       // 0x02A8   (0x0008)  MISSED
	FQuat                                              LastUpdateRotation;                                         // 0x02B0   (0x0010)  
	FVector                                            LastUpdateLocation;                                         // 0x02C0   (0x000C)  
	FVector                                            LastUpdateVelocity;                                         // 0x02CC   (0x000C)  
	float                                              ServerLastTransformUpdateTimeStamp;                         // 0x02D8   (0x0004)  
	float                                              ServerLastClientGoodMoveAckTime;                            // 0x02DC   (0x0004)  
	float                                              ServerLastClientAdjustmentTime;                             // 0x02E0   (0x0004)  
	FVector                                            PendingImpulseToApply;                                      // 0x02E4   (0x000C)  
	FVector                                            PendingForceToApply;                                        // 0x02F0   (0x000C)  
	float                                              AnalogInputModifier;                                        // 0x02FC   (0x0004)  
	unsigned char                                      UnknownData12_6[0x10];                                      // 0x0300   (0x0010)  MISSED
	FVector                                            BaseDeltaPosition;                                          // 0x0310   (0x000C)  
	unsigned char                                      UnknownData13_6[0x4];                                       // 0x031C   (0x0004)  MISSED
	FQuat                                              BaseDeltaQuat;                                              // 0x0320   (0x0010)  
	float                                              ReplayDriverTime;                                           // 0x0330   (0x0004)  
	unsigned char                                      UnknownData14_6[0x20];                                      // 0x0334   (0x0020)  MISSED
	float                                              MaxSimulationTimeStep;                                      // 0x0354   (0x0004)  
	int32_t                                            MaxSimulationIterations;                                    // 0x0358   (0x0004)  
	int32_t                                            MaxJumpApexAttemptsPerSimulation;                           // 0x035C   (0x0004)  
	float                                              MaxDepenetrationWithGeometry;                               // 0x0360   (0x0004)  
	float                                              MaxDepenetrationWithGeometryAsProxy;                        // 0x0364   (0x0004)  
	float                                              MaxDepenetrationWithPawn;                                   // 0x0368   (0x0004)  
	float                                              MaxDepenetrationWithPawnAsProxy;                            // 0x036C   (0x0004)  
	float                                              NetworkSimulatedSmoothLocationTime;                         // 0x0370   (0x0004)  
	float                                              NetworkSimulatedSmoothRotationTime;                         // 0x0374   (0x0004)  
	float                                              ListenServerNetworkSimulatedSmoothLocationTime;             // 0x0378   (0x0004)  
	float                                              ListenServerNetworkSimulatedSmoothRotationTime;             // 0x037C   (0x0004)  
	float                                              NetProxyShrinkRadius;                                       // 0x0380   (0x0004)  
	float                                              NetProxyShrinkHalfHeight;                                   // 0x0384   (0x0004)  
	float                                              NetworkMaxSmoothUpdateDistance;                             // 0x0388   (0x0004)  
	float                                              NetworkNoSmoothUpdateDistance;                              // 0x038C   (0x0004)  
	float                                              NetworkMinTimeBetweenClientAckGoodMoves;                    // 0x0390   (0x0004)  
	float                                              NetworkMinTimeBetweenClientAdjustments;                     // 0x0394   (0x0004)  
	float                                              NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;      // 0x0398   (0x0004)  
	float                                              NetworkLargeClientCorrectionDistance;                       // 0x039C   (0x0004)  
	float                                              NetworkPredictingLinearSmoothMaxRange;                      // 0x03A0   (0x0004)  
	float                                              NetworkPredictingSmoothFactorWithDistance;                  // 0x03A4   (0x0004)  
	float                                              NetworkPredictingSmoothFactorWithSpeed;                     // 0x03A8   (0x0004)  
	float                                              NetworkPredictingMinSmoothMeshSpeed;                        // 0x03AC   (0x0004)  
	float                                              NetworkPredictingMaxSmoothMeshSpeed;                        // 0x03B0   (0x0004)  
	float                                              NetworkPredictingZSmoothTimeOnGround;                       // 0x03B4   (0x0004)  
	float                                              LedgeCheckThreshold;                                        // 0x03B8   (0x0004)  
	float                                              JumpOutOfWaterPitch;                                        // 0x03BC   (0x0004)  
	FFindFloorResult                                   CurrentFloor;                                               // 0x03C0   (0x00A0)  
	TEnumAsByte<EMovementMode>                         DefaultLandMovementMode;                                    // 0x0460   (0x0001)  
	TEnumAsByte<EMovementMode>                         DefaultWaterMovementMode;                                   // 0x0461   (0x0001)  
	unsigned char                                      UnknownData15_6[0x2];                                       // 0x0462   (0x0002)  MISSED
	float                                              PredictionDataMaxMoveDeltaTime;                             // 0x0464   (0x0004)  
	TEnumAsByte<EMovementMode>                         GroundMovementMode;                                         // 0x0468   (0x0001)  
	bool                                               bMaintainHorizontalGroundVelocity : 1;                      // 0x0469:0 (0x0001)  
	bool                                               bImpartBaseVelocityX : 1;                                   // 0x0469:1 (0x0001)  
	bool                                               bImpartBaseVelocityY : 1;                                   // 0x0469:2 (0x0001)  
	bool                                               bImpartBaseVelocityZ : 1;                                   // 0x0469:3 (0x0001)  
	bool                                               bImpartBaseAngularVelocity : 1;                             // 0x0469:4 (0x0001)  
	bool                                               bJustTeleported : 1;                                        // 0x0469:5 (0x0001)  
	bool                                               bNetworkUpdateReceived : 1;                                 // 0x0469:6 (0x0001)  
	bool                                               bNetworkMovementModeChanged : 1;                            // 0x0469:7 (0x0001)  
	bool                                               bIgnoreClientMovementErrorChecksAndCorrection : 1;          // 0x046A:0 (0x0001)  
	bool                                               bServerAcceptClientAuthoritativePosition : 1;               // 0x046A:1 (0x0001)  
	bool                                               bNotifyApex : 1;                                            // 0x046A:2 (0x0001)  
	bool                                               bCheatFlying : 1;                                           // 0x046A:3 (0x0001)  
	bool                                               bWantsToCrouch : 1;                                         // 0x046A:4 (0x0001)  
	bool                                               bCrouchMaintainsBaseLocation : 1;                           // 0x046A:5 (0x0001)  
	bool                                               bIgnoreBaseRotation : 1;                                    // 0x046A:6 (0x0001)  
	bool                                               bFastAttachedMove : 1;                                      // 0x046A:7 (0x0001)  
	bool                                               bAlwaysCheckFloor : 1;                                      // 0x046B:0 (0x0001)  
	bool                                               bUseFlatBaseForFloorChecks : 1;                             // 0x046B:1 (0x0001)  
	bool                                               bPerformingJumpOff : 1;                                     // 0x046B:2 (0x0001)  
	bool                                               bWantsToLeaveNavWalking : 1;                                // 0x046B:3 (0x0001)  
	bool                                               bUseRVOAvoidance : 1;                                       // 0x046B:4 (0x0001)  
	bool                                               bRequestedMoveUseAcceleration : 1;                          // 0x046B:5 (0x0001)  
	unsigned char                                      UnknownBit16 : 1;                                           // 0x046B:6 (0x0001)  MISSED
	bool                                               bWasSimulatingRootMotion : 1;                               // 0x046B:7 (0x0001)  
	bool                                               bAllowPhysicsRotationDuringAnimRootMotion : 1;              // 0x046C:0 (0x0001)  
	bool                                               bHasRequestedVelocity : 1;                                  // 0x046C:1 (0x0001)  
	bool                                               bRequestedMoveWithMaxSpeed : 1;                             // 0x046C:2 (0x0001)  
	bool                                               bWasAvoidanceUpdated : 1;                                   // 0x046C:3 (0x0001)  
	unsigned char                                      UnknownBit17 : 1;                                           // 0x046C:4 (0x0001)  MISSED
	unsigned char                                      UnknownBit18 : 1;                                           // 0x046C:5 (0x0001)  MISSED
	bool                                               bProjectNavMeshWalking : 1;                                 // 0x046C:6 (0x0001)  
	bool                                               bProjectNavMeshOnBothWorldChannels : 1;                     // 0x046C:7 (0x0001)  
	unsigned char                                      UnknownData19_5[0x13];                                      // 0x046D   (0x0013)  MISSED
	float                                              AvoidanceConsiderationRadius;                               // 0x0480   (0x0004)  
	FVector                                            RequestedVelocity;                                          // 0x0484   (0x000C)  
	int32_t                                            AvoidanceUID;                                               // 0x0490   (0x0004)  
	FNavAvoidanceMask                                  AvoidanceGroup;                                             // 0x0494   (0x0004)  
	FNavAvoidanceMask                                  GroupsToAvoid;                                              // 0x0498   (0x0004)  
	FNavAvoidanceMask                                  GroupsToIgnore;                                             // 0x049C   (0x0004)  
	float                                              AvoidanceWeight;                                            // 0x04A0   (0x0004)  
	FVector                                            PendingLaunchVelocity;                                      // 0x04A4   (0x000C)  
	unsigned char                                      UnknownData20_6[0xAC];                                      // 0x04B0   (0x00AC)  MISSED
	float                                              NavMeshProjectionInterval;                                  // 0x055C   (0x0004)  
	float                                              NavMeshProjectionTimer;                                     // 0x0560   (0x0004)  
	float                                              NavMeshProjectionInterpSpeed;                               // 0x0564   (0x0004)  
	float                                              NavMeshProjectionHeightScaleUp;                             // 0x0568   (0x0004)  
	float                                              NavMeshProjectionHeightScaleDown;                           // 0x056C   (0x0004)  
	float                                              NavWalkingFloorDistTolerance;                               // 0x0570   (0x0004)  
	unsigned char                                      UnknownData21_6[0x4];                                       // 0x0574   (0x0004)  MISSED
	FCharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;                                    // 0x0578   (0x0030)  
	unsigned char                                      UnknownData22_6[0x18];                                      // 0x05A8   (0x0018)  MISSED
	float                                              MinTimeBetweenTimeStampResets;                              // 0x05C0   (0x0004)  
	unsigned char                                      UnknownData23_6[0x4AC];                                     // 0x05C4   (0x04AC)  MISSED
	FRootMotionSourceGroup                             CurrentRootMotion;                                          // 0x0A70   (0x0038)  
	FRootMotionSourceGroup                             ServerCorrectionRootMotion;                                 // 0x0AA8   (0x0038)  
	unsigned char                                      UnknownData24_6[0x90];                                      // 0x0AE0   (0x0090)  MISSED
	FRootMotionMovementParams                          RootMotionParams;                                           // 0x0B70   (0x0040)  
	FVector                                            AnimRootMotionVelocity;                                     // 0x0BB0   (0x000C)  
	unsigned char                                      UnknownData25_7[0x24];                                      // 0x0BBC   (0x0024)  MISSED
	// void SetWalkableFloorZ(float InWalkableFloorZ);                                                                          // [0x4605300] Final|Native|Public|BlueprintCallable 
	// void SetWalkableFloorAngle(float InWalkableFloorAngle);                                                                  // [0x4605280] Final|Native|Public|BlueprintCallable 
	// void SetMovementMode(TEnumAsByte<EMovementMode> NewMovementMode, char NewCustomMode);                                    // [0x46051b0] Native|Public|BlueprintCallable 
	// void SetGroupsToIgnoreMask(FNavAvoidanceMask& GroupMask);                                                                // [0x4605120] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetGroupsToIgnore(int32_t GroupFlags);                                                                              // [0x4605090] Final|Native|Public|BlueprintCallable 
	// void SetGroupsToAvoidMask(FNavAvoidanceMask& GroupMask);                                                                 // [0x4605000] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetGroupsToAvoid(int32_t GroupFlags);                                                                               // [0x4604f70] Final|Native|Public|BlueprintCallable 
	// void SetDefaultMovementMode();                                                                                           // [0x45ff880] Native|Public|BlueprintCallable 
	// void SetAvoidanceGroupMask(FNavAvoidanceMask& GroupMask);                                                                // [0x4604ee0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetAvoidanceGroup(int32_t GroupFlags);                                                                              // [0x4604e50] Final|Native|Public|BlueprintCallable 
	// void SetAvoidanceEnabled(bool bEnable);                                                                                  // [0x4604dc0] Final|Native|Public|BlueprintCallable 
	// void PhysClimb(float DeltaTime, bool sweep);                                                                             // [0x4604ce0] Final|Native|Public|BlueprintCallable 
	// void MoveAdjust(FVector& Delta);                                                                                         // [0x4604c50] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void KuroSwimming(float DeltaTime, bool sweep, float Depth, float KuroBuoyancy, float Friction, float MaxSpeed, float Slope, float Accelerator, float Deceleration); // [0x4604740] Final|Native|Public|BlueprintCallable 
	// bool KuroSlide(float DeltaTime, float AirFriction, float SlideFriction, FVector InputVelocity, float MaxSlideHorizontalSeed, FVector PrevBlockNormal, float MaxSlideVerticalSpeed); // [0x46044e0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void KuroSetPredictionDataMaxMoveDeltaTime(float MaxMoveDeltaTime);                                                      // [0x4604460] Final|Native|Public|BlueprintCallable 
	// void KuroPendulum(float AddVelocityX, float AddVelocityY, float AddVelocityZ, float DeltaTime, float Gravity, float Friction, float Deceleration, float Accelerator, float MaxSpeed, float MaxFallingSpeed); // [0x4604130] Final|Native|Public|BlueprintCallable 
	// void KuroMoveAlongFloor(FVector& InVelocity, float DeltaSeconds);                                                        // [0x4604050] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void KuroFlying(float DeltaTime, float Gravity, float Friction, float Deceleration, float Accelerator, float MaxSpeed, float MaxFallingSpeed); // [0x4603e00] Final|Native|Public|BlueprintCallable 
	// bool KuroFindNavFloor(FVector& TestLocation, FVector& NavFloorLocation);                                                 // [0x4603d00] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// void Kuro_SetGravityDirect(FVector InGravityDirect);                                                                     // [0x4604b10] Final|Native|Public|HasDefaults|BlueprintCallable 
	// FVector Kuro_GetGravityDirect();                                                                                         // [0x4604ae0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector Kuro_GetGravity();                                                                                               // [0x4604a70] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector Kuro_GetBlockDirectWhenMove();                                                                                   // [0x4604a30] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// class AActor* Kuro_GetBlockActorWhenMove();                                                                              // [0x4604a00] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// void K2_KuroEndScopedMovementUpdate();                                                                                   // [0x4603ce0] Final|Native|Public|BlueprintCallable 
	// void K2_KuroBeginScopedMovementUpdate();                                                                                 // [0x4603cc0] Final|Native|Public|BlueprintCallable 
	// float K2_GetWalkableFloorZ();                                                                                            // [0x4603c90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float K2_GetWalkableFloorAngle();                                                                                        // [0x4603c60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float K2_GetModifiedMaxAcceleration();                                                                                   // [0x4603c20] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void K2_FindFloor(FVector CapsuleLocation, FFindFloorResult& FloorResult);                                               // [0x4603ad0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// void K2_ComputeFloorDist(FVector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, FFindFloorResult& FloorResult); // [0x46038b0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// bool IsWalking();                                                                                                        // [0x4603880] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsWalkable(FHitResult& Hit);                                                                                        // [0x4603790] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// float GetValidPerchRadius();                                                                                             // [0x4603760] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetPerchRadiusThreshold();                                                                                         // [0x4603730] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UPrimitiveComponent* GetMovementBase();                                                                            // [0x4603700] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetMinAnalogSpeed();                                                                                               // [0x46036c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetMaxJumpHeightWithJumpTime();                                                                                    // [0x4603680] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetMaxJumpHeight();                                                                                                // [0x4603640] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetMaxBrakingDeceleration();                                                                                       // [0x4603600] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetMaxAcceleration();                                                                                              // [0x46035c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector GetLastUpdateVelocity();                                                                                         // [0x4603590] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FRotator GetLastUpdateRotation();                                                                                        // [0x4603540] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetLastUpdateLocation();                                                                                         // [0x4603510] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetImpartedMovementBaseVelocity();                                                                               // [0x46034d0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetCurrentAcceleration();                                                                                        // [0x4603490] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// class ACharacter* GetCharacterOwner();                                                                                   // [0x4603470] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetAnalogInputModifier();                                                                                          // [0x4603440] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void DisableMovement();                                                                                                  // [0x4603420] Native|Public|BlueprintCallable 
	// void ClearAccumulatedForces();                                                                                           // [0x4603400] Native|Public|BlueprintCallable 
	// void CapsuleTouchedEvenBlock(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x46031e0] Native|Protected|HasOutParms 
	// void CapsuleTouched(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x4602fc0] Native|Protected|HasOutParms 
	// void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);                              // [0x4602e50] Native|Public|BlueprintCallable 
	// void AddReplayData(FVector& RemoteLocation, FRotator& RemoteRotation, FVector& RemoteVelocity, FVector& RemoteAcceleration, char RemoteViewPitch, float Time); // [0x4602c10] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void AddImpulse(FVector Impulse, bool bVelocityChange);                                                                  // [0x4602b30] Native|Public|HasDefaults|BlueprintCallable 
	// void AddForce(FVector Force);                                                                                            // [0x4602aa0] Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.CheatManager
/// Size: 0x0050 (80 bytes) (0x000030 - 0x000080) align 8 pad: 0x0000
class UCheatManager : public UObject
{ 
public:
	class ADebugCameraController*                      DebugCameraControllerRef;                                   // 0x0030   (0x0008)  
	class UClass*                                      DebugCameraControllerClass;                                 // 0x0038   (0x0008)  
	unsigned char                                      UnknownData00_7[0x40];                                      // 0x0040   (0x0040)  MISSED
	// void Walk();                                                                                                             // [0x36333c0] Exec|Native|Public|BlueprintCallable 
	// void ViewSelf();                                                                                                         // [0x4609890] Exec|Native|Public   
	// void ViewPlayer(FString S);                                                                                              // [0x46097f0] Exec|Native|Public   
	// void ViewClass(class UClass* DesiredClass);                                                                              // [0x4609760] Exec|Native|Public   
	// void ViewActor(FName ActorName);                                                                                         // [0x46096b0] Exec|Native|Public   
	// void UpdateSafeArea();                                                                                                   // [0x4609690] Final|Exec|Native|Public 
	// void ToggleServerStatReplicatorUpdateStatNet();                                                                          // [0x4609670] Final|Exec|Native|Public 
	// void ToggleServerStatReplicatorClientOverwrite();                                                                        // [0x4609650] Final|Exec|Native|Public 
	// void ToggleDebugCamera();                                                                                                // [0x4609630] Exec|Native|Public   
	// void ToggleAILogging();                                                                                                  // [0x4609610] Exec|Native|Public   
	// void TestCollisionDistance();                                                                                            // [0x46095f0] Exec|Native|Public   
	// void Teleport();                                                                                                         // [0x17734c0] Exec|Native|Public|BlueprintCallable 
	// void Summon(FString ClassName);                                                                                          // [0x4609550] Exec|Native|Public   
	// void StreamLevelOut(FName PackageName);                                                                                  // [0x46094a0] Exec|Native|Public   
	// void StreamLevelIn(FName PackageName);                                                                                   // [0x46093f0] Exec|Native|Public   
	// void SpawnServerStatReplicator();                                                                                        // [0x46093d0] Final|Exec|Native|Public 
	// void Slomo(float NewTimeDilation);                                                                                       // [0x4609340] Exec|Native|Public|BlueprintCallable 
	// void SetWorldOrigin();                                                                                                   // [0x4609320] Final|Exec|Native|Public 
	// void SetMouseSensitivityToDefault();                                                                                     // [0x4609300] Exec|Native|Public   
	// void ServerToggleAILogging();                                                                                            // [0x4609220] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// void ReceiveInitCheatManager();                                                                                          // [0x25a7960] Event|Public|BlueprintEvent 
	// void ReceiveEndPlay();                                                                                                   // [0x25a7960] Event|Public|BlueprintEvent 
	// void PlayersOnly();                                                                                                      // [0x45c1a90] Exec|Native|Public|BlueprintCallable 
	// void OnlyLoadLevel(FName PackageName);                                                                                   // [0x4609170] Exec|Native|Public   
	// void LogLoc();                                                                                                           // [0x4609150] Exec|Native|Public   
	// void InvertMouse();                                                                                                      // [0x96e260] Exec|Native|Public   
	// void God();                                                                                                              // [0x95a410] Exec|Native|Public|BlueprintCallable 
	// void Ghost();                                                                                                            // [0x17737b0] Exec|Native|Public|BlueprintCallable 
	// void FreezeFrame(float delay);                                                                                           // [0x95d960] Exec|Native|Public|BlueprintCallable 
	// void Fly();                                                                                                              // [0xc4ccd0] Exec|Native|Public|BlueprintCallable 
	// void FlushLog();                                                                                                         // [0x4609130] Exec|Native|Public   
	// void EnableDebugCamera();                                                                                                // [0x4609110] Native|Protected|BlueprintCallable 
	// void DumpVoiceMutingState();                                                                                             // [0x46090f0] Exec|Native|Public   
	// void DumpPartyState();                                                                                                   // [0x46090d0] Exec|Native|Public   
	// void DumpOnlineSessionState();                                                                                           // [0x46090b0] Exec|Native|Public   
	// void DumpChatState();                                                                                                    // [0x4609090] Exec|Native|Public   
	// void DisableDebugCamera();                                                                                               // [0xbe0a80] Native|Protected|BlueprintCallable 
	// void DestroyTarget();                                                                                                    // [0x17734a0] Exec|Native|Public|BlueprintCallable 
	// void DestroyServerStatReplicator();                                                                                      // [0x4609070] Final|Exec|Native|Public 
	// void DestroyPawns(class UClass* aClass);                                                                                 // [0x3ba9b50] Exec|Native|Public   
	// void DestroyAllPawnsExceptTarget();                                                                                      // [0x45fb050] Exec|Native|Public   
	// void DestroyAll(class UClass* aClass);                                                                                   // [0x4608fe0] Exec|Native|Public   
	// void DebugCapsuleSweepSize(float HalfHeight, float Radius);                                                              // [0x4608f10] Exec|Native|Public   
	// void DebugCapsuleSweepPawn();                                                                                            // [0x4608ef0] Exec|Native|Public   
	// void DebugCapsuleSweepComplex(bool bTraceComplex);                                                                       // [0x4608e60] Exec|Native|Public   
	// void DebugCapsuleSweepClear();                                                                                           // [0x4608e40] Exec|Native|Public   
	// void DebugCapsuleSweepChannel(TEnumAsByte<ECollisionChannel> Channel);                                                   // [0x4608dc0] Exec|Native|Public   
	// void DebugCapsuleSweepCapture();                                                                                         // [0x4608da0] Exec|Native|Public   
	// void DebugCapsuleSweep();                                                                                                // [0x4608d80] Exec|Native|Public   
	// void DamageTarget(float DamageAmount);                                                                                   // [0x4608cf0] Exec|Native|Public|BlueprintCallable 
	// void CheatScript(FString ScriptName);                                                                                    // [0x4608c00] Final|Exec|Native|Public 
	// void ChangeSize(float F);                                                                                                // [0x4608b70] Exec|Native|Public|BlueprintCallable 
	// void BugItStringCreator(FVector ViewLocation, FRotator ViewRotation, FString& GoString, FString& LocString);             // [0x46089b0] Exec|Native|Public|HasOutParms|HasDefaults 
	// void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);                                             // [0x46087c0] Exec|Native|Public   
	// void BugIt(FString ScreenShotDescription);                                                                               // [0x4608720] Exec|Native|Public   
};

/// Class /Script/Engine.CheckBoxStyleAsset
/// Size: 0x05E0 (1504 bytes) (0x000030 - 0x000610) align 8 pad: 0x0000
class UCheckBoxStyleAsset : public UObject
{ 
public:
	FCheckBoxStyle                                     CheckBoxStyle;                                              // 0x0030   (0x05E0)  
};

/// Class /Script/Engine.ChildActorComponent
/// Size: 0x0048 (72 bytes) (0x000218 - 0x000260) align 16 pad: 0x0000
class UChildActorComponent : public USceneComponent
{ 
public:
	class UClass*                                      ChildActorClass;                                            // 0x0218   (0x0008)  
	class AActor*                                      ChildActor;                                                 // 0x0220   (0x0008)  
	class AActor*                                      ChildActorTemplate;                                         // 0x0228   (0x0008)  
	unsigned char                                      UnknownData00_7[0x30];                                      // 0x0230   (0x0030)  MISSED
	// void SetChildActorClass(class UClass* InClass);                                                                          // [0x4609270] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.UniqueNetIdRepl
/// Size: 0x0027 (39 bytes) (0x000001 - 0x000028) align 8 pad: 0x0000
struct FUniqueNetIdRepl : FUniqueNetIdWrapper
{ 
	unsigned char                                      UnknownData00_3[0x17];                                      // 0x0001   (0x0017)  MISSED
	TArray<char>                                       ReplicationBytes;                                           // 0x0018   (0x0010)  
};

/// Class /Script/Engine.NetConnection
/// Size: 0x1AB8 (6840 bytes) (0x000050 - 0x001B08) align 8 pad: 0x0000
class UNetConnection : public UPlayer
{ 
public:
	TArray<class UChildConnection*>                    Children;                                                   // 0x0050   (0x0010)  
	class UNetDriver*                                  Driver;                                                     // 0x0060   (0x0008)  
	class UClass*                                      PackageMapClass;                                            // 0x0068   (0x0008)  
	class UPackageMap*                                 PackageMap;                                                 // 0x0070   (0x0008)  
	TArray<class UChannel*>                            OpenChannels;                                               // 0x0078   (0x0010)  
	TArray<class AActor*>                              SentTemporaries;                                            // 0x0088   (0x0010)  
	class AActor*                                      ViewTarget;                                                 // 0x0098   (0x0008)  
	class AActor*                                      OwningActor;                                                // 0x00A0   (0x0008)  
	int32_t                                            MaxPacket;                                                  // 0x00A8   (0x0004)  
	bool                                               InternalAck : 1;                                            // 0x00AC:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0xBB];                                      // 0x00AD   (0x00BB)  MISSED
	FUniqueNetIdRepl                                   PlayerId;                                                   // 0x0168   (0x0028)  
	unsigned char                                      UnknownData01_6[0x48];                                      // 0x0190   (0x0048)  MISSED
	double                                             LastReceiveTime;                                            // 0x01D8   (0x0008)  
	unsigned char                                      UnknownData02_6[0x1340];                                    // 0x01E0   (0x1340)  MISSED
	TArray<class UChannel*>                            ChannelsToTick;                                             // 0x1520   (0x0010)  
	unsigned char                                      UnknownData03_7[0x5D8];                                     // 0x1530   (0x05D8)  MISSED
};

/// Class /Script/Engine.ChildConnection
/// Size: 0x0008 (8 bytes) (0x001B08 - 0x001B10) align 8 pad: 0x0000
class UChildConnection : public UNetConnection
{ 
public:
	class UNetConnection*                              Parent;                                                     // 0x1B08   (0x0008)  
};

/// Struct /Script/Engine.DelegateArray
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FDelegateArray
{ 
	SDK_UNDEFINED(16,134) /* TArray<FDelegateProperty> */ __um(Delegates);                                         // 0x0000   (0x0010)  
};

/// Class /Script/Engine.PlatformInterfaceBase
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UPlatformInterfaceBase : public UObject
{ 
public:
	TArray<FDelegateArray>                             AllDelegates;                                               // 0x0030   (0x0010)  
};

/// Class /Script/Engine.CloudStorageBase
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UCloudStorageBase : public UPlatformInterfaceBase
{ 
public:
	TArray<FString>                                    LocalCloudFiles;                                            // 0x0040   (0x0010)  
	bool                                               bSuppressDelegateCalls : 1;                                 // 0x0050:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0051   (0x0007)  MISSED
};

/// Struct /Script/Engine.CollisionResponseTemplate
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 pad: 0x0000
struct FCollisionResponseTemplate
{ 
	FName                                              Name;                                                       // 0x0000   (0x000C)  
	TEnumAsByte<ECollisionEnabled>                     CollisionEnabled;                                           // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x000D   (0x0001)  MISSED
	bool                                               bCanModify;                                                 // 0x000E   (0x0001)  
	unsigned char                                      UnknownData01_6[0x21];                                      // 0x000F   (0x0021)  MISSED
	FName                                              ObjectTypeName;                                             // 0x0030   (0x000C)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x003C   (0x0004)  MISSED
	TArray<FResponseChannel>                           CustomResponses;                                            // 0x0040   (0x0010)  
};

/// Struct /Script/Engine.CustomChannelSetup
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FCustomChannelSetup
{ 
	TEnumAsByte<ECollisionChannel>                     Channel;                                                    // 0x0000   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    DefaultResponse;                                            // 0x0001   (0x0001)  
	bool                                               bTraceType;                                                 // 0x0002   (0x0001)  
	bool                                               bStaticObject;                                              // 0x0003   (0x0001)  
	FName                                              Name;                                                       // 0x0004   (0x000C)  
};

/// Struct /Script/Engine.CustomProfile
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FCustomProfile
{ 
	FName                                              Name;                                                       // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	TArray<FResponseChannel>                           CustomResponses;                                            // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.Redirector
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FRedirector
{ 
	FName                                              OldName;                                                    // 0x0000   (0x000C)  
	FName                                              NewName;                                                    // 0x000C   (0x000C)  
};

/// Class /Script/Engine.CollisionProfile
/// Size: 0x0138 (312 bytes) (0x000048 - 0x000180) align 8 pad: 0x0000
class UCollisionProfile : public UDeveloperSettings
{ 
public:
	TArray<FCollisionResponseTemplate>                 Profiles;                                                   // 0x0048   (0x0010)  
	TArray<FCustomChannelSetup>                        DefaultChannelResponses;                                    // 0x0058   (0x0010)  
	TArray<FCustomProfile>                             EditProfiles;                                               // 0x0068   (0x0010)  
	TArray<FRedirector>                                ProfileRedirects;                                           // 0x0078   (0x0010)  
	TArray<FRedirector>                                CollisionChannelRedirects;                                  // 0x0088   (0x0010)  
	unsigned char                                      UnknownData00_7[0xE8];                                      // 0x0098   (0x00E8)  MISSED
};

/// Struct /Script/Engine.BlueprintComponentDelegateBinding
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align 4 pad: 0x0000
struct FBlueprintComponentDelegateBinding
{ 
	FName                                              ComponentPropertyName;                                      // 0x0000   (0x000C)  
	FName                                              DelegatePropertyName;                                       // 0x000C   (0x000C)  
	FName                                              FunctionNameToBind;                                         // 0x0018   (0x000C)  
};

/// Class /Script/Engine.ComponentDelegateBinding
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UComponentDelegateBinding : public UDynamicBlueprintBinding
{ 
public:
	TArray<FBlueprintComponentDelegateBinding>         ComponentDelegateBindings;                                  // 0x0030   (0x0010)  
};

/// Class /Script/Engine.ActorComponentInstanceDataTransientOuter
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UActorComponentInstanceDataTransientOuter : public UObject
{ 
public:
};

/// Class /Script/Engine.CurveTable
/// Size: 0x0078 (120 bytes) (0x000030 - 0x0000A8) align 8 pad: 0x0000
class UCurveTable : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x78];                                      // 0x0030   (0x0078)  MISSED
};

/// Class /Script/Engine.CompositeCurveTable
/// Size: 0x0028 (40 bytes) (0x0000A8 - 0x0000D0) align 8 pad: 0x0000
class UCompositeCurveTable : public UCurveTable
{ 
public:
	TArray<class UCurveTable*>                         ParentTables;                                               // 0x00A8   (0x0010)  
	TArray<class UCurveTable*>                         OldParentTables;                                            // 0x00B8   (0x0010)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x00C8   (0x0008)  MISSED
};

/// Class /Script/Engine.DataTable
/// Size: 0x0088 (136 bytes) (0x000030 - 0x0000B8) align 8 pad: 0x0000
class UDataTable : public UObject
{ 
public:
	class UScriptStruct*                               RowStruct;                                                  // 0x0030   (0x0008)  
	unsigned char                                      UnknownData00_6[0x50];                                      // 0x0038   (0x0050)  MISSED
	bool                                               bStripFromClientBuilds : 1;                                 // 0x0088:0 (0x0001)  
	bool                                               bIgnoreExtraFields : 1;                                     // 0x0088:1 (0x0001)  
	bool                                               bIgnoreMissingFields : 1;                                   // 0x0088:2 (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0089   (0x0007)  MISSED
	FString                                            ImportKeyField;                                             // 0x0090   (0x0010)  
	unsigned char                                      UnknownData02_7[0x18];                                      // 0x00A0   (0x0018)  MISSED
};

/// Class /Script/Engine.CompositeDataTable
/// Size: 0x0078 (120 bytes) (0x0000B8 - 0x000130) align 8 pad: 0x0000
class UCompositeDataTable : public UDataTable
{ 
public:
	unsigned char                                      UnknownData00_3[0x50];                                      // 0x00B8   (0x0050)  MISSED
	TArray<class UDataTable*>                          ParentTables;                                               // 0x0108   (0x0010)  
	TArray<class UDataTable*>                          OldParentTables;                                            // 0x0118   (0x0010)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0128   (0x0008)  MISSED
};

/// Class /Script/Engine.ScriptViewportClient
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UScriptViewportClient : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0030   (0x0010)  MISSED
};

/// Struct /Script/Engine.DebugDisplayProperty
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FDebugDisplayProperty
{ 
	class UObject*                                     Obj;                                                        // 0x0000   (0x0008)  
	class UClass*                                      WithinClass;                                                // 0x0008   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0010   (0x0010)  MISSED
};

/// Class /Script/Engine.GameViewportClient
/// Size: 0x0330 (816 bytes) (0x000040 - 0x000370) align 8 pad: 0x0000
class UGameViewportClient : public UScriptViewportClient
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0040   (0x0008)  MISSED
	class UConsole*                                    ViewportConsole;                                            // 0x0048   (0x0008)  
	TArray<FDebugDisplayProperty>                      DebugProperties;                                            // 0x0050   (0x0010)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x0060   (0x0010)  MISSED
	int32_t                                            MaxSplitscreenPlayers;                                      // 0x0070   (0x0004)  
	unsigned char                                      UnknownData02_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	class UWorld*                                      World;                                                      // 0x0080   (0x0008)  
	class UGameInstance*                               GameInstance;                                               // 0x0088   (0x0008)  
	unsigned char                                      UnknownData03_7[0x2E0];                                     // 0x0090   (0x02E0)  MISSED
	// void SSSwapControllers();                                                                                                // [0x14b2530] Exec|Native|Public   
	// void ShowTitleSafeArea();                                                                                                // [0x3633740] Exec|Native|Public   
	// void SetConsoleTarget(int32_t PlayerIndex);                                                                              // [0x463e550] Exec|Native|Public   
};

/// Class /Script/Engine.Console
/// Size: 0x0110 (272 bytes) (0x000030 - 0x000140) align 8 pad: 0x0000
class UConsole : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x10];                                      // 0x0030   (0x0010)  MISSED
	class ULocalPlayer*                                ConsoleTargetPlayer;                                        // 0x0040   (0x0008)  
	class UTexture2D*                                  DefaultTexture_Black;                                       // 0x0048   (0x0008)  
	class UTexture2D*                                  DefaultTexture_White;                                       // 0x0050   (0x0008)  
	unsigned char                                      UnknownData01_6[0x18];                                      // 0x0058   (0x0018)  MISSED
	TArray<FString>                                    HistoryBuffer;                                              // 0x0070   (0x0010)  
	unsigned char                                      UnknownData02_7[0xC0];                                      // 0x0080   (0x00C0)  MISSED
};

/// Class /Script/Engine.ControlChannel
/// Size: 0x0018 (24 bytes) (0x000078 - 0x000090) align 8 pad: 0x0000
class UControlChannel : public UChannel
{ 
public:
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0078   (0x0018)  MISSED
};

/// Class /Script/Engine.StreamingSettings
/// Size: 0x0038 (56 bytes) (0x000048 - 0x000080) align 8 pad: 0x0000
class UStreamingSettings : public UDeveloperSettings
{ 
public:
	bool                                               AsyncLoadingThreadEnabled : 1;                              // 0x0048:0 (0x0001)  
	bool                                               WarnIfTimeLimitExceeded : 1;                                // 0x0048:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0049   (0x0003)  MISSED
	float                                              TimeLimitExceededMultiplier;                                // 0x004C   (0x0004)  
	float                                              TimeLimitExceededMinTime;                                   // 0x0050   (0x0004)  
	int32_t                                            MinBulkDataSizeForAsyncLoading;                             // 0x0054   (0x0004)  
	bool                                               UseBackgroundLevelStreaming : 1;                            // 0x0058:0 (0x0001)  
	bool                                               AsyncLoadingUseFullTimeLimit : 1;                           // 0x0058:1 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0059   (0x0003)  MISSED
	float                                              AsyncLoadingTimeLimit;                                      // 0x005C   (0x0004)  
	float                                              PriorityAsyncLoadingExtraTime;                              // 0x0060   (0x0004)  
	float                                              LevelStreamingActorsUpdateTimeLimit;                        // 0x0064   (0x0004)  
	float                                              PriorityLevelStreamingActorsUpdateExtraTime;                // 0x0068   (0x0004)  
	int32_t                                            LevelStreamingComponentsRegistrationGranularity;            // 0x006C   (0x0004)  
	float                                              LevelStreamingUnregisterComponentsTimeLimit;                // 0x0070   (0x0004)  
	int32_t                                            LevelStreamingComponentsUnregistrationGranularity;          // 0x0074   (0x0004)  
	bool                                               FlushStreamingOnExit : 1;                                   // 0x0078:0 (0x0001)  
	bool                                               EventDrivenLoaderEnabled : 1;                               // 0x0078:1 (0x0001)  
	unsigned char                                      UnknownData02_7[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/Engine.GarbageCollectionSettings
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UGarbageCollectionSettings : public UDeveloperSettings
{ 
public:
	float                                              TimeBetweenPurgingPendingKillObjects;                       // 0x0048   (0x0004)  
	bool                                               FlushStreamingOnGC : 1;                                     // 0x004C:0 (0x0001)  
	bool                                               AllowParallelGC : 1;                                        // 0x004C:1 (0x0001)  
	bool                                               IncrementalBeginDestroyEnabled : 1;                         // 0x004C:2 (0x0001)  
	bool                                               MultithreadedDestructionEnabled : 1;                        // 0x004C:3 (0x0001)  
	bool                                               CreateGCClusters : 1;                                       // 0x004C:4 (0x0001)  
	bool                                               AssetClusteringEnabled : 1;                                 // 0x004C:5 (0x0001)  
	bool                                               ActorClusteringEnabled : 1;                                 // 0x004C:6 (0x0001)  
	bool                                               BlueprintClusteringEnabled : 1;                             // 0x004C:7 (0x0001)  
	bool                                               UseDisregardForGCOnDedicatedServers : 1;                    // 0x004D:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x004E   (0x0002)  MISSED
	int32_t                                            MinGCClusterSize;                                           // 0x0050   (0x0004)  
	int32_t                                            NumRetriesBeforeForcingGC;                                  // 0x0054   (0x0004)  
	int32_t                                            MaxObjectsNotConsideredByGC;                                // 0x0058   (0x0004)  
	int32_t                                            SizeOfPermanentObjectPool;                                  // 0x005C   (0x0004)  
	int32_t                                            MaxObjectsInGame;                                           // 0x0060   (0x0004)  
	int32_t                                            MaxObjectsInEditor;                                         // 0x0064   (0x0004)  
};

/// Struct /Script/Engine.CullDistanceSizePair
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FCullDistanceSizePair
{ 
	float                                              Size;                                                       // 0x0000   (0x0004)  
	float                                              CullDistance;                                               // 0x0004   (0x0004)  
};

/// Class /Script/Engine.CullDistanceVolume
/// Size: 0x0018 (24 bytes) (0x0002E0 - 0x0002F8) align 8 pad: 0x0000
class ACullDistanceVolume : public AVolume
{ 
public:
	TArray<FCullDistanceSizePair>                      CullDistances;                                              // 0x02E0   (0x0010)  
	bool                                               bEnabled : 1;                                               // 0x02F0:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x02F1   (0x0007)  MISSED
};

/// Class /Script/Engine.CurveBase
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UCurveBase : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0030   (0x0008)  MISSED
	// void GetValueRange(float& MinValue, float& MaxValue);                                                                    // [0x460bfa0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// void GetTimeRange(float& MinTime, float& MaxTime);                                                                       // [0x460bec0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.CurveEdPresetCurve
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UCurveEdPresetCurve : public UObject
{ 
public:
};

/// Class /Script/Engine.CurveFloat
/// Size: 0x0088 (136 bytes) (0x000038 - 0x0000C0) align 8 pad: 0x0000
class UCurveFloat : public UCurveBase
{ 
public:
	FRichCurve                                         FloatCurve;                                                 // 0x0038   (0x0080)  
	bool                                               bIsEventCurve;                                              // 0x00B8   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x00B9   (0x0007)  MISSED
	// float GetFloatValue(float InTime);                                                                                       // [0x460be20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.CurveLinearColor
/// Size: 0x0220 (544 bytes) (0x000038 - 0x000258) align 8 pad: 0x0000
class UCurveLinearColor : public UCurveBase
{ 
public:
	FRichCurve                                         FloatCurves[4];                                             // 0x0038   (0x0200)  
	float                                              AdjustHue;                                                  // 0x0238   (0x0004)  
	float                                              AdjustSaturation;                                           // 0x023C   (0x0004)  
	float                                              AdjustBrightness;                                           // 0x0240   (0x0004)  
	float                                              AdjustBrightnessCurve;                                      // 0x0244   (0x0004)  
	float                                              AdjustVibrance;                                             // 0x0248   (0x0004)  
	float                                              AdjustMinAlpha;                                             // 0x024C   (0x0004)  
	float                                              AdjustMaxAlpha;                                             // 0x0250   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0254   (0x0004)  MISSED
	// FLinearColor GetLinearColorValue(float InTime);                                                                          // [0x4611bd0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FLinearColor GetClampedLinearColorValue(float InTime);                                                                   // [0x46110b0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.Texture2D
/// Size: 0x0028 (40 bytes) (0x0000F0 - 0x000118) align 8 pad: 0x0000
class UTexture2D : public UTexture
{ 
public:
	int32_t                                            LevelIndex;                                                 // 0x00F0   (0x0004)  
	int32_t                                            FirstResourceMemMip;                                        // 0x00F4   (0x0004)  
	bool                                               bTemporarilyDisableStreaming : 1;                           // 0x00F8:0 (0x0001)  
	TEnumAsByte<TextureAddress>                        AddressX;                                                   // 0x00F9   (0x0001)  
	TEnumAsByte<TextureAddress>                        AddressY;                                                   // 0x00FA   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x00FB   (0x0001)  MISSED
	FIntPoint                                          ImportedSize;                                               // 0x00FC   (0x0008)  
	unsigned char                                      UnknownData01_7[0x14];                                      // 0x0104   (0x0014)  MISSED
	// int32_t Blueprint_GetSizeY();                                                                                            // [0x475c370] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t Blueprint_GetSizeX();                                                                                            // [0x475c340] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.CurveLinearColorAtlas
/// Size: 0x0018 (24 bytes) (0x000118 - 0x000130) align 8 pad: 0x0000
class UCurveLinearColorAtlas : public UTexture2D
{ 
public:
	uint32_t                                           TextureSize;                                                // 0x0118   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x011C   (0x0004)  MISSED
	TArray<class UCurveLinearColor*>                   GradientCurves;                                             // 0x0120   (0x0010)  
	// bool GetCurvePosition(class UCurveLinearColor* InCurve, float& Position);                                                // [0x4611150] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.CurveSourceInterface
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UCurveSourceInterface : public UInterface
{ 
public:
	// float GetCurveValue(FName CurveName);                                                                                    // [0x4611230] Native|Event|Public|BlueprintEvent|Const 
	// void GetCurves(TArray<FNamedCurveValue>& OutValues);                                                                     // [0x46112f0] Native|Event|Public|HasOutParms|BlueprintEvent|Const 
	// FName GetBindingName();                                                                                                  // [0x4611070] Native|Event|Public|BlueprintEvent|Const 
};

/// Class /Script/Engine.CurveFaceInterface
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UCurveFaceInterface : public UInterface
{ 
public:
	// void GetCurvesB(TArray<FNamedCurveValue>& OutValues);                                                                    // [0x46112f0] Native|Event|Public|HasOutParms|BlueprintEvent|Const 
	// void GetCurvesA(TArray<FNamedCurveValue>& OutValues);                                                                    // [0x46113a0] Native|Event|Public|HasOutParms|BlueprintEvent|Const 
};

/// Class /Script/Engine.CurveVector
/// Size: 0x0180 (384 bytes) (0x000038 - 0x0001B8) align 8 pad: 0x0000
class UCurveVector : public UCurveBase
{ 
public:
	FRichCurve                                         FloatCurves[3];                                             // 0x0038   (0x0180)  
	// FVector GetVectorValue(float InTime);                                                                                    // [0x4611c70] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.DamageType
/// Size: 0x0018 (24 bytes) (0x000030 - 0x000048) align 8 pad: 0x0000
class UDamageType : public UObject
{ 
public:
	bool                                               bCausedByWorld : 1;                                         // 0x0030:0 (0x0001)  
	bool                                               bScaleMomentumByMass : 1;                                   // 0x0030:1 (0x0001)  
	bool                                               bRadialDamageVelChange : 1;                                 // 0x0030:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0031   (0x0003)  MISSED
	float                                              DamageImpulse;                                              // 0x0034   (0x0004)  
	float                                              DestructibleImpulse;                                        // 0x0038   (0x0004)  
	float                                              DestructibleDamageSpreadScale;                              // 0x003C   (0x0004)  
	float                                              DamageFalloff;                                              // 0x0040   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Engine.WorldDataLayers
/// Size: 0x00F0 (240 bytes) (0x0002A8 - 0x000398) align 8 pad: 0x0000
class AWorldDataLayers : public AInfo
{ 
public:
	unsigned char                                      UnknownData00_3[0xA0];                                      // 0x02A8   (0x00A0)  MISSED
	SDK_UNDEFINED(80,135) /* TSet<UDataLayer*> */      __um(WorldDataLayers);                                      // 0x0348   (0x0050)  
};

/// Class /Script/Engine.DataLayer
/// Size: 0x0018 (24 bytes) (0x000030 - 0x000048) align 8 pad: 0x0000
class UDataLayer : public UObject
{ 
public:
	FName                                              DataLayerLabel;                                             // 0x0030   (0x000C)  
	EDataLayerState                                    InitialState;                                               // 0x003C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x003D   (0x0003)  MISSED
	bool                                               bIsDynamicallyLoaded : 1;                                   // 0x0040:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0041   (0x0003)  MISSED
	uint32_t                                           LoadPriority;                                               // 0x0044   (0x0004)  
	// bool IsVisible();                                                                                                        // [0x4611ec0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsInitiallyVisible();                                                                                               // [0x4611ec0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsInitiallyActive();                                                                                                // [0x4611e90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsDynamicallyLoaded();                                                                                              // [0x4611e70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetLoadPriority();                                                                                               // [0xc10560] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// EDataLayerState GetInitialState();                                                                                       // [0x4611ba0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FName GetDataLayerLabel();                                                                                               // [0x4611450] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool Equals(FActorDataLayer& ActorDataLayer);                                                                            // [0x4610d20] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.DataLayerSubsystem
/// Size: 0x00C8 (200 bytes) (0x000038 - 0x000100) align 8 pad: 0x0000
class UDataLayerSubsystem : public UWorldSubsystem
{ 
public:
	SDK_UNDEFINED(16,136) /* FMulticastInlineDelegate */ __um(OnDataLayerActivationStateChanged);                  // 0x0038   (0x0010)  
	SDK_UNDEFINED(16,137) /* FMulticastInlineDelegate */ __um(OnDataLayerStateChanged);                            // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0xA8];                                      // 0x0058   (0x00A8)  MISSED
	// void SetDataLayerStateByLabel(FName& InDataLayerLabel, EDataLayerState InState);                                         // [0x4611fe0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetDataLayerState(FActorDataLayer& InDataLayer, EDataLayerState InState);                                           // [0x4611ef0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// bool IsDataLayerActiveByLabel(FName& InDataLayerLabel);                                                                  // [0x4611dc0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// bool IsDataLayerActive(FActorDataLayer& InDataLayer);                                                                    // [0x4611d10] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// EDataLayerState GetDataLayerStateByLabel(FName& InDataLayerLabel);                                                       // [0x4611530] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// EDataLayerState GetDataLayerState(FActorDataLayer& InDataLayer);                                                         // [0x4611480] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// TArray<FString> GetAllDataLayerNames();                                                                                  // [0x4610ff0] Final|Native|Public|BlueprintCallable 
	// void ActivateDataLayerByLabel(FName& InDataLayerLabel, bool bInActivate);                                                // [0x4610b50] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void ActivateDataLayer(FActorDataLayer& InDataLayer, bool bInActivate);                                                  // [0x4610a60] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.DataTableFunctionLibrary
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
{ 
public:
	// void GetDataTableRowNames(class UDataTable* Table, TArray<FName>& OutRowNames);                                          // [0x4611ac0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// bool GetDataTableRowFromName(class UDataTable* Table, FName RowName, FTableRowBase& OutRow);                             // [0x4611710] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// TArray<FString> GetDataTableColumnAsString(class UDataTable* DataTable, FName PropertyName);                             // [0x46115e0] Final|Native|Static|Public|BlueprintCallable 
	// void EvaluateCurveTableRow(class UCurveTable* CurveTable, FName RowName, float InXY, TEnumAsByte<EEvaluateCurveTableResult>& OutResult, float& OutXY, FString ContextString); // [0x4610de0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// bool DoesDataTableRowExist(class UDataTable* Table, FName RowName);                                                      // [0x4610c40] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.DebugCameraController
/// Size: 0x0110 (272 bytes) (0x000618 - 0x000728) align 8 pad: 0x0000
class ADebugCameraController : public APlayerController
{ 
public:
	bool                                               bShowSelectedInfo : 1;                                      // 0x0618:0 (0x0001)  
	bool                                               bIsFrozenRendering : 1;                                     // 0x0618:1 (0x0001)  
	bool                                               bIsOrbitingSelectedActor : 1;                               // 0x0618:2 (0x0001)  
	bool                                               bOrbitPivotUseCenter : 1;                                   // 0x0618:3 (0x0001)  
	bool                                               bEnableBufferVisualization : 1;                             // 0x0618:4 (0x0001)  
	bool                                               bEnableBufferVisualizationFullMode : 1;                     // 0x0618:5 (0x0001)  
	bool                                               bIsBufferVisualizationInputSetup : 1;                       // 0x0618:6 (0x0001)  
	bool                                               bLastDisplayEnabled : 1;                                    // 0x0618:7 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0619   (0x0007)  MISSED
	class UDrawFrustumComponent*                       DrawFrustum;                                                // 0x0620   (0x0008)  
	class AActor*                                      SelectedActor;                                              // 0x0628   (0x0008)  
	class UPrimitiveComponent*                         selectedComponent;                                          // 0x0630   (0x0008)  
	FHitResult                                         SelectedHitPoint;                                           // 0x0638   (0x0094)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x06CC   (0x0004)  MISSED
	class APlayerController*                           OriginalControllerRef;                                      // 0x06D0   (0x0008)  
	class UPlayer*                                     OriginalPlayer;                                             // 0x06D8   (0x0008)  
	float                                              SpeedScale;                                                 // 0x06E0   (0x0004)  
	float                                              InitialMaxSpeed;                                            // 0x06E4   (0x0004)  
	float                                              InitialAccel;                                               // 0x06E8   (0x0004)  
	float                                              InitialDecel;                                               // 0x06EC   (0x0004)  
	unsigned char                                      UnknownData02_7[0x38];                                      // 0x06F0   (0x0038)  MISSED
	// void ToggleDisplay();                                                                                                    // [0x4616600] Final|Native|Public|BlueprintCallable 
	// void ShowDebugSelectedInfo();                                                                                            // [0x46165e0] Exec|Native|Public   
	// void SetPawnMovementSpeedScale(float NewSpeedScale);                                                                     // [0x46162b0] Final|Native|Public|BlueprintCallable 
	// void ReceiveOnDeactivate(class APlayerController* RestoredPC);                                                           // [0x25a7960] Event|Public|BlueprintEvent 
	// void ReceiveOnActorSelected(class AActor* NewSelectedActor, FVector& SelectHitLocation, FVector& SelectHitNormal, FHitResult& Hit); // [0x25a7960] Event|Protected|HasOutParms|HasDefaults|BlueprintEvent 
	// void ReceiveOnActivate(class APlayerController* OriginalPC);                                                             // [0x25a7960] Event|Public|BlueprintEvent 
	// class AActor* GetSelectedActor();                                                                                        // [0x46154b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.DebugCameraControllerSettingsViewModeIndex
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FDebugCameraControllerSettingsViewModeIndex
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	TEnumAsByte<EViewModeIndex>                        ViewModeIndex;                                              // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0009   (0x0007)  MISSED
};

/// Class /Script/Engine.DebugCameraControllerSettings
/// Size: 0x0010 (16 bytes) (0x000048 - 0x000058) align 8 pad: 0x0000
class UDebugCameraControllerSettings : public UDeveloperSettings
{ 
public:
	TArray<FDebugCameraControllerSettingsViewModeIndex> CycleViewModes;                                            // 0x0048   (0x0010)  
};

/// Class /Script/Engine.DebugCameraHUD
/// Size: 0x0000 (0 bytes) (0x000398 - 0x000398) align 8 pad: 0x0000
class ADebugCameraHUD : public AHUD
{ 
public:
};

/// Class /Script/Engine.DebugDrawService
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UDebugDrawService : public UBlueprintFunctionLibrary
{ 
public:
};

/// Class /Script/Engine.DecalActor
/// Size: 0x0008 (8 bytes) (0x0002A8 - 0x0002B0) align 8 pad: 0x0000
class ADecalActor : public AActor
{ 
public:
	class UDecalComponent*                             Decal;                                                      // 0x02A8   (0x0008)  
	// void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);                                                       // [0x4615a60] Final|Native|Public|BlueprintCallable 
	// class UMaterialInterface* GetDecalMaterial();                                                                            // [0x4615350] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UMaterialInstanceDynamic* CreateDynamicMaterialInstance();                                                         // [0xc07f50] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.DecalComponent
/// Size: 0x0058 (88 bytes) (0x000218 - 0x000270) align 16 pad: 0x0000
class UDecalComponent : public USceneComponent
{ 
public:
	class UMaterialInterface*                          DecalMaterial;                                              // 0x0218   (0x0008)  
	int32_t                                            sortOrder;                                                  // 0x0220   (0x0004)  
	float                                              FadeScreenSize;                                             // 0x0224   (0x0004)  
	float                                              FadeStartDelay;                                             // 0x0228   (0x0004)  
	float                                              FadeDuration;                                               // 0x022C   (0x0004)  
	float                                              FadeInDuration;                                             // 0x0230   (0x0004)  
	float                                              FadeInStartDelay;                                           // 0x0234   (0x0004)  
	bool                                               IsUIScenePrimitive;                                         // 0x0238   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0239   (0x0003)  MISSED
	float                                              ZFadingFactor;                                              // 0x023C   (0x0004)  
	float                                              ZFadingPower;                                               // 0x0240   (0x0004)  
	bool                                               bDestroyOwnerAfterFade : 1;                                 // 0x0244:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0245   (0x0003)  MISSED
	FVector                                            DecalSize;                                                  // 0x0248   (0x000C)  
	unsigned char                                      UnknownData02_7[0x1C];                                      // 0x0254   (0x001C)  MISSED
	// void SetSortOrder(int32_t Value);                                                                                        // [0x46164c0] Final|Native|Public|BlueprintCallable 
	// void SetIsUIScenePrimitive(bool bValue);                                                                                 // [0x4616090] Final|Native|Public|BlueprintCallable 
	// void SetFadeScreenSize(float NewFadeScreenSize);                                                                         // [0x4615f00] Final|Native|Public|BlueprintCallable 
	// void SetFadeOut(float startDelay, float Duration, bool DestroyOwnerAfterFade);                                           // [0x4615de0] Final|Native|Public|BlueprintCallable 
	// void SetFadeIn(float startDelay, float Duaration);                                                                       // [0x4615d10] Final|Native|Public|BlueprintCallable 
	// void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);                                                       // [0x4615af0] Final|Native|Public|BlueprintCallable 
	// float GetFadeStartDelay();                                                                                               // [0x4615440] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetFadeInStartDelay();                                                                                             // [0x4615410] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetFadeInDuration();                                                                                               // [0x46153e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetFadeDuration();                                                                                                 // [0x46153b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UMaterialInterface* GetDecalMaterial();                                                                            // [0x4615380] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UMaterialInstanceDynamic* CreateDynamicMaterialInstance();                                                         // [0x4615320] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PhysicsVolume
/// Size: 0x0010 (16 bytes) (0x0002E0 - 0x0002F0) align 8 pad: 0x0000
class APhysicsVolume : public AVolume
{ 
public:
	float                                              TerminalVelocity;                                           // 0x02E0   (0x0004)  
	int32_t                                            Priority;                                                   // 0x02E4   (0x0004)  
	float                                              FluidFriction;                                              // 0x02E8   (0x0004)  
	bool                                               bWaterVolume : 1;                                           // 0x02EC:0 (0x0001)  
	bool                                               bPhysicsOnContact : 1;                                      // 0x02EC:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x02ED   (0x0003)  MISSED
};

/// Class /Script/Engine.DefaultPhysicsVolume
/// Size: 0x0000 (0 bytes) (0x0002F0 - 0x0002F0) align 8 pad: 0x0000
class ADefaultPhysicsVolume : public APhysicsVolume
{ 
public:
};

/// Class /Script/Engine.DemoNetConnection
/// Size: 0x0070 (112 bytes) (0x001B08 - 0x001B78) align 8 pad: 0x0000
class UDemoNetConnection : public UNetConnection
{ 
public:
	unsigned char                                      UnknownData00_1[0x70];                                      // 0x1B08   (0x0070)  MISSED
};

/// Struct /Script/Engine.ChannelDefinition
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FChannelDefinition
{ 
	FName                                              ChannelName;                                                // 0x0000   (0x000C)  
	FName                                              ClassName;                                                  // 0x000C   (0x000C)  
	class UClass*                                      ChannelClass;                                               // 0x0018   (0x0008)  
	int32_t                                            StaticChannelIndex;                                         // 0x0020   (0x0004)  
	bool                                               bTickOnCreate;                                              // 0x0024   (0x0001)  
	bool                                               bServerOpen;                                                // 0x0025   (0x0001)  
	bool                                               bClientOpen;                                                // 0x0026   (0x0001)  
	bool                                               bInitialServer;                                             // 0x0027   (0x0001)  
	bool                                               bInitialClient;                                             // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0029   (0x0007)  MISSED
};

/// Class /Script/Engine.NetDriver
/// Size: 0x0728 (1832 bytes) (0x000030 - 0x000758) align 8 pad: 0x0000
class UNetDriver : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0030   (0x0008)  MISSED
	FString                                            NetConnectionClassName;                                     // 0x0038   (0x0010)  
	FString                                            ReplicationDriverClassName;                                 // 0x0048   (0x0010)  
	int32_t                                            MaxDownloadSize;                                            // 0x0058   (0x0004)  
	bool                                               bClampListenServerTickRate : 1;                             // 0x005C:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x005D   (0x0003)  MISSED
	int32_t                                            NetServerMaxTickRate;                                       // 0x0060   (0x0004)  
	int32_t                                            MaxNetTickRate;                                             // 0x0064   (0x0004)  
	int32_t                                            MaxInternetClientRate;                                      // 0x0068   (0x0004)  
	int32_t                                            MaxClientRate;                                              // 0x006C   (0x0004)  
	float                                              ServerTravelPause;                                          // 0x0070   (0x0004)  
	float                                              SpawnPrioritySeconds;                                       // 0x0074   (0x0004)  
	float                                              RelevantTimeout;                                            // 0x0078   (0x0004)  
	float                                              KeepAliveTime;                                              // 0x007C   (0x0004)  
	float                                              InitialConnectTimeout;                                      // 0x0080   (0x0004)  
	float                                              ConnectionTimeout;                                          // 0x0084   (0x0004)  
	float                                              TimeoutMultiplierForUnoptimizedBuilds;                      // 0x0088   (0x0004)  
	bool                                               bNoTimeouts;                                                // 0x008C   (0x0001)  
	bool                                               bNeverApplyNetworkEmulationSettings;                        // 0x008D   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x008E   (0x0002)  MISSED
	class UNetConnection*                              ServerConnection;                                           // 0x0090   (0x0008)  
	TArray<class UNetConnection*>                      ClientConnections;                                          // 0x0098   (0x0010)  
	unsigned char                                      UnknownData03_6[0x60];                                      // 0x00A8   (0x0060)  MISSED
	int32_t                                            RecentlyDisconnectedTrackingTime;                           // 0x0108   (0x0004)  
	unsigned char                                      UnknownData04_6[0x3C];                                      // 0x010C   (0x003C)  MISSED
	class UWorld*                                      World;                                                      // 0x0148   (0x0008)  
	class UPackage*                                    WorldPackage;                                               // 0x0150   (0x0008)  
	unsigned char                                      UnknownData05_6[0x20];                                      // 0x0158   (0x0020)  MISSED
	class UClass*                                      NetConnectionClass;                                         // 0x0178   (0x0008)  
	class UClass*                                      ReplicationDriverClass;                                     // 0x0180   (0x0008)  
	unsigned char                                      UnknownData06_6[0x10];                                      // 0x0188   (0x0010)  MISSED
	FName                                              NetDriverName;                                              // 0x0198   (0x000C)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x01A4   (0x0004)  MISSED
	TArray<FChannelDefinition>                         ChannelDefinitions;                                         // 0x01A8   (0x0010)  
	SDK_UNDEFINED(80,138) /* TMap<FName, FChannelDefinition> */ __um(ChannelDefinitionMap);                        // 0x01B8   (0x0050)  
	TArray<class UChannel*>                            ActorChannelPool;                                           // 0x0208   (0x0010)  
	unsigned char                                      UnknownData08_6[0x8];                                       // 0x0218   (0x0008)  MISSED
	float                                              Time;                                                       // 0x0220   (0x0004)  
	unsigned char                                      UnknownData09_6[0x4D4];                                     // 0x0224   (0x04D4)  MISSED
	class UReplicationDriver*                          ReplicationDriver;                                          // 0x06F8   (0x0008)  
	unsigned char                                      UnknownData10_7[0x58];                                      // 0x0700   (0x0058)  MISSED
};

/// Struct /Script/Engine.MulticastRecordOptions
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FMulticastRecordOptions
{ 
	FString                                            FuncPathName;                                               // 0x0000   (0x0010)  
	bool                                               bServerSkip;                                                // 0x0010   (0x0001)  
	bool                                               bClientSkip;                                                // 0x0011   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x0012   (0x0006)  MISSED
};

/// Class /Script/Engine.DemoNetDriver
/// Size: 0x0B78 (2936 bytes) (0x000758 - 0x0012D0) align 8 pad: 0x0000
class UDemoNetDriver : public UNetDriver
{ 
public:
	unsigned char                                      UnknownData00_3[0xF8];                                      // 0x0758   (0x00F8)  MISSED
	SDK_UNDEFINED(80,139) /* TMap<FString, FRollbackNetStartupActorInfo> */ __um(RollbackNetStartupActors);        // 0x0850   (0x0050)  
	unsigned char                                      UnknownData01_6[0x15C];                                     // 0x08A0   (0x015C)  MISSED
	float                                              CheckpointSaveMaxMSPerFrame;                                // 0x09FC   (0x0004)  
	unsigned char                                      UnknownData02_6[0x20];                                      // 0x0A00   (0x0020)  MISSED
	TArray<FMulticastRecordOptions>                    MulticastRecordOptions;                                     // 0x0A20   (0x0010)  
	bool                                               bIsLocalReplay;                                             // 0x0A30   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0A31   (0x0007)  MISSED
	TArray<class APlayerController*>                   SpectatorControllers;                                       // 0x0A38   (0x0010)  
	unsigned char                                      UnknownData04_7[0x888];                                     // 0x0A48   (0x0888)  MISSED
};

/// Class /Script/Engine.PendingNetGame
/// Size: 0x0098 (152 bytes) (0x000030 - 0x0000C8) align 8 pad: 0x0000
class UPendingNetGame : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0030   (0x0008)  MISSED
	class UNetDriver*                                  NetDriver;                                                  // 0x0038   (0x0008)  
	class UDemoNetDriver*                              DemoNetDriver;                                              // 0x0040   (0x0008)  
	unsigned char                                      UnknownData01_7[0x80];                                      // 0x0048   (0x0080)  MISSED
};

/// Class /Script/Engine.DemoPendingNetGame
/// Size: 0x0000 (0 bytes) (0x0000C8 - 0x0000C8) align 8 pad: 0x0000
class UDemoPendingNetGame : public UPendingNetGame
{ 
public:
};

/// Class /Script/Engine.DestructibleInterface
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UDestructibleInterface : public UInterface
{ 
public:
};

/// Struct /Script/Engine.TextureLODGroup
/// Size: 0x006C (108 bytes) (0x000000 - 0x00006C) align 4 pad: 0x0000
struct FTextureLODGroup
{ 
	TEnumAsByte<TextureGroup>                          Group;                                                      // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0xB];                                       // 0x0001   (0x000B)  MISSED
	int32_t                                            LODBias;                                                    // 0x000C   (0x0004)  
	int32_t                                            LODBias_Smaller;                                            // 0x0010   (0x0004)  
	int32_t                                            LODBias_Smallest;                                           // 0x0014   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0018   (0x0004)  MISSED
	int32_t                                            NumStreamedMips;                                            // 0x001C   (0x0004)  
	TEnumAsByte<TextureMipGenSettings>                 MipGenSettings;                                             // 0x0020   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0021   (0x0003)  MISSED
	int32_t                                            MinLODSize;                                                 // 0x0024   (0x0004)  
	int32_t                                            MaxLODSize;                                                 // 0x0028   (0x0004)  
	int32_t                                            MaxLODSize_Smaller;                                         // 0x002C   (0x0004)  
	int32_t                                            MaxLODSize_Smallest;                                        // 0x0030   (0x0004)  
	int32_t                                            OptionalLODBias;                                            // 0x0034   (0x0004)  
	int32_t                                            OptionalMaxLODSize;                                         // 0x0038   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x003C   (0x0004)  MISSED
	FName                                              MinMagFilter;                                               // 0x0040   (0x000C)  
	FName                                              MipFilter;                                                  // 0x004C   (0x000C)  
	ETextureMipLoadOptions                             MipLoadOptions;                                             // 0x0058   (0x0001)  
	bool                                               DuplicateNonOptionalMips;                                   // 0x0059   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x005A   (0x0002)  MISSED
	float                                              DownScale;                                                  // 0x005C   (0x0004)  
	ETextureDownscaleOptions                           DownscaleOptions;                                           // 0x0060   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0061   (0x0003)  MISSED
	int32_t                                            VirtualTextureTileCountBias;                                // 0x0064   (0x0004)  
	int32_t                                            VirtualTextureTileSizeBias;                                 // 0x0068   (0x0004)  
};

/// Class /Script/Engine.TextureLODSettings
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UTextureLODSettings : public UObject
{ 
public:
	TArray<FTextureLODGroup>                           TextureLODGroups;                                           // 0x0030   (0x0010)  
};

/// Class /Script/Engine.DeviceProfile
/// Size: 0x0078 (120 bytes) (0x000040 - 0x0000B8) align 8 pad: 0x0000
class UDeviceProfile : public UTextureLODSettings
{ 
public:
	FString                                            DeviceType;                                                 // 0x0040   (0x0010)  
	FString                                            BaseProfileName;                                            // 0x0050   (0x0010)  
	int32_t                                            DeviceScore;                                                // 0x0060   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0064   (0x0004)  MISSED
	class UObject*                                     Parent;                                                     // 0x0068   (0x0008)  
	unsigned char                                      UnknownData01_6[0x28];                                      // 0x0070   (0x0028)  MISSED
	TArray<FString>                                    CVars;                                                      // 0x0098   (0x0010)  
	unsigned char                                      UnknownData02_7[0x10];                                      // 0x00A8   (0x0010)  MISSED
};

/// Class /Script/Engine.DeviceProfileFragment
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UDeviceProfileFragment : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0030   (0x0010)  MISSED
};

/// Class /Script/Engine.DeviceProfileManager
/// Size: 0x0088 (136 bytes) (0x000030 - 0x0000B8) align 8 pad: 0x0000
class UDeviceProfileManager : public UObject
{ 
public:
	TArray<class UObject*>                             Profiles;                                                   // 0x0030   (0x0010)  
	unsigned char                                      UnknownData00_7[0x78];                                      // 0x0040   (0x0078)  MISSED
};

/// Class /Script/Engine.DialogueSoundWaveProxy
/// Size: 0x0018 (24 bytes) (0x0001C0 - 0x0001D8) align 8 pad: 0x0000
class UDialogueSoundWaveProxy : public USoundBase
{ 
public:
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x01C0   (0x0018)  MISSED
};

/// Class /Script/Engine.DialogueVoice
/// Size: 0x0018 (24 bytes) (0x000030 - 0x000048) align 8 pad: 0x0000
class UDialogueVoice : public UObject
{ 
public:
	TEnumAsByte<EGrammaticalGender>                    Gender;                                                     // 0x0030   (0x0001)  
	TEnumAsByte<EGrammaticalNumber>                    Plurality;                                                  // 0x0031   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0032   (0x0002)  MISSED
	FGuid                                              LocalizationGUID;                                           // 0x0034   (0x0010)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/Engine.DialogueContext
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FDialogueContext
{ 
	class UDialogueVoice*                              Speaker;                                                    // 0x0000   (0x0008)  
	TArray<class UDialogueVoice*>                      Targets;                                                    // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.DialogueContextMapping
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FDialogueContextMapping
{ 
	FDialogueContext                                   Context;                                                    // 0x0000   (0x0018)  
	class USoundWave*                                  SoundWave;                                                  // 0x0018   (0x0008)  
	FString                                            LocalizationKeyFormat;                                      // 0x0020   (0x0010)  
	class UDialogueSoundWaveProxy*                     Proxy;                                                      // 0x0030   (0x0008)  
};

/// Class /Script/Engine.DialogueWave
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000078) align 8 pad: 0x0000
class UDialogueWave : public UObject
{ 
public:
	bool                                               bMature : 1;                                                // 0x0030:0 (0x0001)  
	bool                                               bOverride_SubtitleOverride : 1;                             // 0x0030:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0031   (0x0007)  MISSED
	FString                                            SpokenText;                                                 // 0x0038   (0x0010)  
	FString                                            SubtitleOverride;                                           // 0x0048   (0x0010)  
	TArray<FDialogueContextMapping>                    ContextMappings;                                            // 0x0058   (0x0010)  
	FGuid                                              LocalizationGUID;                                           // 0x0068   (0x0010)  
};

/// Class /Script/Engine.Light
/// Size: 0x0010 (16 bytes) (0x0002A8 - 0x0002B8) align 8 pad: 0x0000
class ALight : public AActor
{ 
public:
	class ULightComponent*                             LightComponent;                                             // 0x02A8   (0x0008)  
	bool                                               bEnabled : 1;                                               // 0x02B0:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x02B1   (0x0007)  MISSED
	// void ToggleEnabled();                                                                                                    // [0x46c2b40] Final|Native|Public|BlueprintCallable 
	// void SetLightFunctionScale(FVector NewLightFunctionScale);                                                               // [0x46c18b0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial);                                       // [0x46c1790] Final|Native|Public|BlueprintCallable 
	// void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);                                                   // [0x46c1690] Final|Native|Public|BlueprintCallable 
	// void SetLightColor(FLinearColor NewLightColor);                                                                          // [0x46c1420] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetEnabled(bool bSetEnabled);                                                                                       // [0x46c1060] Final|Native|Public|BlueprintCallable 
	// void SetCastShadows(bool bNewValue);                                                                                     // [0x46c0d90] Final|Native|Public|BlueprintCallable 
	// void SetBrightness(float NewBrightness);                                                                                 // [0x46c0bf0] Final|Native|Public|BlueprintCallable 
	// void SetAffectTranslucentLighting(bool bNewValue);                                                                       // [0x46c08d0] Final|Native|Public|BlueprintCallable 
	// void OnRep_bEnabled();                                                                                                   // [0x46255d0] Native|Public        
	// bool IsEnabled();                                                                                                        // [0x46c06f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FLinearColor GetLightColor();                                                                                            // [0x46c0530] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// float GetBrightness();                                                                                                   // [0x46c04d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.DirectionalLight
/// Size: 0x0000 (0 bytes) (0x0002B8 - 0x0002B8) align 8 pad: 0x0000
class ADirectionalLight : public ALight
{ 
public:
};

/// Class /Script/Engine.LightComponentBase
/// Size: 0x0038 (56 bytes) (0x000218 - 0x000250) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class ULightComponentBase : public USceneComponent
{ 
public:
	FGuid                                              LightGuid;                                                  // 0x0218   (0x0010)  
	float                                              Brightness;                                                 // 0x0228   (0x0004)  
	float                                              Intensity;                                                  // 0x022C   (0x0004)  
	FColor                                             LightColor;                                                 // 0x0230   (0x0004)  
	bool                                               bAffectsWorld : 1;                                          // 0x0234:0 (0x0001)  
	bool                                               CastShadows : 1;                                            // 0x0234:1 (0x0001)  
	bool                                               CastStaticShadows : 1;                                      // 0x0234:2 (0x0001)  
	bool                                               CastDynamicShadows : 1;                                     // 0x0234:3 (0x0001)  
	bool                                               bAffectTranslucentLighting : 1;                             // 0x0234:4 (0x0001)  
	bool                                               bTransmission : 1;                                          // 0x0234:5 (0x0001)  
	bool                                               bCastVolumetricShadow : 1;                                  // 0x0234:6 (0x0001)  
	bool                                               bCastDeepShadow : 1;                                        // 0x0234:7 (0x0001)  
	bool                                               bCastRaytracedShadow : 1;                                   // 0x0235:0 (0x0001)  
	bool                                               bAffectReflection : 1;                                      // 0x0235:1 (0x0001)  
	bool                                               bAffectGlobalIllumination : 1;                              // 0x0235:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0236   (0x0002)  MISSED
	float                                              DeepShadowLayerDistribution;                                // 0x0238   (0x0004)  
	float                                              IndirectLightingIntensity;                                  // 0x023C   (0x0004)  
	float                                              VolumetricScatteringIntensity;                              // 0x0240   (0x0004)  
	int32_t                                            SamplesPerPixel;                                            // 0x0244   (0x0004)  
	// void SetSamplesPerPixel(int32_t NewValue);                                                                               // [0x46c1fe0] Final|Native|Public|BlueprintCallable 
	// void SetCastVolumetricShadow(bool bNewValue);                                                                            // [0x46c0eb0] Final|Native|Public|BlueprintCallable 
	// void SetCastShadows(bool bNewValue);                                                                                     // [0x46c0e20] Final|Native|Public|BlueprintCallable 
	// void SetCastRaytracedShadow(bool bNewValue);                                                                             // [0x46c0d00] Final|Native|Public|BlueprintCallable 
	// void SetCastDeepShadow(bool bNewValue);                                                                                  // [0x46c0c70] Final|Native|Public|BlueprintCallable 
	// void SetAffectReflection(bool bNewValue);                                                                                // [0x46c0840] Final|Native|Public|BlueprintCallable 
	// void SetAffectGlobalIllumination(bool bNewValue);                                                                        // [0x46c07b0] Final|Native|Public|BlueprintCallable 
	// FLinearColor GetLightColor();                                                                                            // [0x46c0570] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// bool GetCastShadows();                                                                                                   // [0x46c0500] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};
#pragma pack(pop)

/// Class /Script/Engine.LightComponent
/// Size: 0x0178 (376 bytes) (0x000248 - 0x0003C0) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class ULightComponent : public ULightComponentBase
{ 
public:
	float                                              Temperature;                                                // 0x0248   (0x0004)  
	TEnumAsByte<ELightDistanceCullType>                LightDistanceCullType;                                      // 0x024C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x024D   (0x0003)  MISSED
	float                                              MinDrawDistance;                                            // 0x0250   (0x0004)  
	float                                              MaxDrawDistance;                                            // 0x0254   (0x0004)  
	float                                              MinDistanceFadeRange;                                       // 0x0258   (0x0004)  
	float                                              MaxDistanceFadeRange;                                       // 0x025C   (0x0004)  
	bool                                               bSyncToToonLight;                                           // 0x0260   (0x0001)  
	TEnumAsByte<ELightQualityType>                     LightQualityType;                                           // 0x0261   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0262   (0x0002)  MISSED
	bool                                               bUseTemperature : 1;                                        // 0x0264:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0265   (0x0003)  MISSED
	int32_t                                            ShadowMapChannel;                                           // 0x0268   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x026C   (0x0004)  MISSED
	float                                              MinRoughness;                                               // 0x0270   (0x0004)  
	float                                              SpecularScale;                                              // 0x0274   (0x0004)  
	float                                              ShadowResolutionScale;                                      // 0x0278   (0x0004)  
	float                                              ShadowBias;                                                 // 0x027C   (0x0004)  
	float                                              ShadowSlopeBias;                                            // 0x0280   (0x0004)  
	float                                              ShadowSharpen;                                              // 0x0284   (0x0004)  
	float                                              ContactShadowLength;                                        // 0x0288   (0x0004)  
	bool                                               ContactShadowLengthInWS : 1;                                // 0x028C:0 (0x0001)  
	bool                                               InverseSquaredFalloff : 1;                                  // 0x028C:1 (0x0001)  
	bool                                               CastTranslucentShadows : 1;                                 // 0x028C:2 (0x0001)  
	bool                                               bCastShadowsFromCinematicObjectsOnly : 1;                   // 0x028C:3 (0x0001)  
	bool                                               bAffectDynamicIndirectLighting : 1;                         // 0x028C:4 (0x0001)  
	bool                                               bForceCachedShadowsForMovablePrimitives : 1;                // 0x028C:5 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x028D   (0x0003)  MISSED
	FLightingChannels                                  LightingChannels;                                           // 0x0290   (0x0001)  
	unsigned char                                      UnknownData05_6[0x7];                                       // 0x0291   (0x0007)  MISSED
	class UMaterialInterface*                          LightFunctionMaterial;                                      // 0x0298   (0x0008)  
	FVector                                            LightFunctionScale;                                         // 0x02A0   (0x000C)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x02AC   (0x0004)  MISSED
	class UTextureLightProfile*                        IESTexture;                                                 // 0x02B0   (0x0008)  
	bool                                               bUseIESBrightness : 1;                                      // 0x02B8:0 (0x0001)  
	unsigned char                                      UnknownData07_5[0x3];                                       // 0x02B9   (0x0003)  MISSED
	float                                              IESBrightnessScale;                                         // 0x02BC   (0x0004)  
	float                                              LightFunctionFadeDistance;                                  // 0x02C0   (0x0004)  
	float                                              DisabledBrightness;                                         // 0x02C4   (0x0004)  
	bool                                               bEnableLightShaftBloom : 1;                                 // 0x02C8:0 (0x0001)  
	unsigned char                                      UnknownData08_5[0x3];                                       // 0x02C9   (0x0003)  MISSED
	float                                              BloomScale;                                                 // 0x02CC   (0x0004)  
	float                                              BloomThreshold;                                             // 0x02D0   (0x0004)  
	float                                              BloomMaxBrightness;                                         // 0x02D4   (0x0004)  
	FColor                                             BloomTint;                                                  // 0x02D8   (0x0004)  
	bool                                               bUseRayTracedDistanceFieldShadows;                          // 0x02DC   (0x0001)  
	unsigned char                                      UnknownData09_6[0x3];                                       // 0x02DD   (0x0003)  MISSED
	float                                              RayStartOffsetDepthScale;                                   // 0x02E0   (0x0004)  
	bool                                               bEnableLightShaftOcclusion : 1;                             // 0x02E4:0 (0x0001)  
	unsigned char                                      UnknownData10_5[0x3];                                       // 0x02E5   (0x0003)  MISSED
	float                                              OcclusionMaskDarkness;                                      // 0x02E8   (0x0004)  
	float                                              OcclusionDepthRange;                                        // 0x02EC   (0x0004)  
	float                                              ToonPointLightFallOff;                                      // 0x02F0   (0x0004)  
	float                                              ToonDistanceBlendAtten;                                     // 0x02F4   (0x0004)  
	float                                              ToonDistanceBlendIntensity;                                 // 0x02F8   (0x0004)  
	TEnumAsByte<EToonLightType>                        ToonLightType;                                              // 0x02FC   (0x0001)  
	unsigned char                                      UnknownData11_6[0x3];                                       // 0x02FD   (0x0003)  MISSED
	int32_t                                            ToonLightingPriority;                                       // 0x0300   (0x0004)  
	float                                              ToonIntensity;                                              // 0x0304   (0x0004)  
	FColor                                             ToonColor;                                                  // 0x0308   (0x0004)  
	float                                              ToonShadowColorIntensity;                                   // 0x030C   (0x0004)  
	float                                              ToonBaseColorIntensity;                                     // 0x0310   (0x0004)  
	float                                              ToonRealTimeShadowIntensity;                                // 0x0314   (0x0004)  
	float                                              ToonDesaturationIntensity;                                  // 0x0318   (0x0004)  
	float                                              ToonHardShadowIntensity;                                    // 0x031C   (0x0004)  
	FLinearColor                                       ToonHardBaseColor;                                          // 0x0320   (0x0010)  
	FLinearColor                                       ToonHardShadowColor;                                        // 0x0330   (0x0010)  
	float                                              ToonHardShadowBlend;                                        // 0x0340   (0x0004)  
	bool                                               IsUIScenePrimitive;                                         // 0x0344   (0x0001)  
	unsigned char                                      UnknownData12_7[0x73];                                      // 0x0345   (0x0073)  MISSED
	// void SyncToToonLight();                                                                                                  // [0x36569f0] Native|Public|BlueprintCallable 
	// void SetVolumetricScatteringIntensity(float NewIntensity);                                                               // [0x46c2ac0] Final|Native|Public|BlueprintCallable 
	// void SetUseIESBrightness(bool bNewValue);                                                                                // [0x46c2a30] Final|Native|Public|BlueprintCallable 
	// void SetTransmission(bool bNewValue);                                                                                    // [0x46c29a0] Final|Native|Public|BlueprintCallable 
	// void SetToonShadowColorIntensity(float InToonShadowColorIntensity);                                                      // [0x46c2920] Final|Native|Public|BlueprintCallable 
	// void SetToonRealTimeShadowIntensity(float InToonRealTimeShadowIntensity);                                                // [0x46c28a0] Final|Native|Public|BlueprintCallable 
	// void SetToonPointLightFallOff(float InToonPointLightFallOff);                                                            // [0x46c2820] Final|Native|Public|BlueprintCallable 
	// void SetToonLightType(TEnumAsByte<EToonLightType> InToonLightType);                                                      // [0x46c2710] Final|Native|Public|BlueprintCallable 
	// void SetToonLightingPriority(int32_t InToonLightingPriority);                                                            // [0x46c2790] Final|Native|Public|BlueprintCallable 
	// void SetToonIntensity(float InToonIntensity);                                                                            // [0x46c2690] Final|Native|Public|BlueprintCallable 
	// void SetToonHardShadowIntensity(float InToonHardShadowIntensity);                                                        // [0x46c2610] Final|Native|Public|BlueprintCallable 
	// void SetToonHardShadowColor(FLinearColor InToonHardShadowColor);                                                         // [0x46c2580] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetToonHardShadowBlend(float InToonHardShadowBlend);                                                                // [0x46c2500] Final|Native|Public|BlueprintCallable 
	// void SetToonHardBaseColor(FLinearColor InToonHardBaseColor);                                                             // [0x46c2470] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetToonDistanceBlendIntensity(float InToonDistanceBlendIntensity);                                                  // [0x46c23f0] Final|Native|Public|BlueprintCallable 
	// void SetToonDistanceBlendAtten(float InToonDistanceBlendAtten);                                                          // [0x46c2370] Final|Native|Public|BlueprintCallable 
	// void SetToonDesaturationIntensity(float InToonDesaturationIntensity);                                                    // [0x46c22f0] Final|Native|Public|BlueprintCallable 
	// void SetToonBaseColorIntensity(float InToonBaseColorIntensity);                                                          // [0x46c2270] Final|Native|Public|BlueprintCallable 
	// void SetTemperature(float NewTemperature);                                                                               // [0x46c21f0] Final|Native|Public|BlueprintCallable 
	// void SetSpecularScale(float NewValue);                                                                                   // [0x46c2170] Final|Native|Public|BlueprintCallable 
	// void SetShadowSlopeBias(float NewValue);                                                                                 // [0x46c20f0] Final|Native|Public|BlueprintCallable 
	// void SetShadowBias(float NewValue);                                                                                      // [0x46c2070] Final|Native|Public|BlueprintCallable 
	// void SetOcclusionMaskDarkness(float NewValue);                                                                           // [0x46c1f60] Final|Native|Public|BlueprintCallable 
	// void SetOcclusionDepthRange(float NewValue);                                                                             // [0x46c1ee0] Final|Native|Public|BlueprintCallable 
	// void SetMinDrawDistance(float InMinDrawDistance);                                                                        // [0x46c1e60] Final|Native|Public|BlueprintCallable 
	// void SetMinDistanceFadeRange(float InMinDistanceFadeRange);                                                              // [0x46c1de0] Final|Native|Public|BlueprintCallable 
	// void SetMaxDrawDistance(float InMaxDrawDistance);                                                                        // [0x46c1d60] Final|Native|Public|BlueprintCallable 
	// void SetMaxDistanceFadeRange(float InMaxDistanceFadeRange);                                                              // [0x46c1ce0] Final|Native|Public|BlueprintCallable 
	// void SetLightToonIntensity(float NewIntensity);                                                                          // [0x46c1b30] Final|Native|Public|BlueprintCallable 
	// void SetLightToonColor(FLinearColor NewLightColor, bool bSRGB);                                                          // [0x46c1a50] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetLightQualityType(TEnumAsByte<ELightQualityType> InLightQualityType);                                             // [0x46c19d0] Final|Native|Public|BlueprintCallable 
	// void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);                                                // [0x46c1bb0] Final|Native|Public|BlueprintCallable 
	// void SetLightFunctionScale(FVector NewLightFunctionScale);                                                               // [0x46c1940] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial);                                       // [0x46c1820] Final|Native|Public|BlueprintCallable 
	// void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);                                                   // [0x46c1710] Final|Native|Public|BlueprintCallable 
	// void SetLightFunctionDisabledBrightness(float NewValue);                                                                 // [0x46c1610] Final|Native|Public|BlueprintCallable 
	// void SetLightDistanceCullType(TEnumAsByte<ELightDistanceCullType> InLightDistanceCullType);                              // [0x46c1590] Final|Native|Public|BlueprintCallable 
	// void SetLightColor(FLinearColor NewLightColor, bool bSRGB);                                                              // [0x46c14b0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetIsUIScenePrimitive(bool bValue);                                                                                 // [0x46c1390] Native|Public|BlueprintCallable 
	// void SetIntensity(float NewIntensity);                                                                                   // [0x46c1310] Final|Native|Public|BlueprintCallable 
	// void SetIndirectLightingIntensity(float NewIntensity);                                                                   // [0x46c1290] Final|Native|Public|BlueprintCallable 
	// void SetIESTexture(class UTextureLightProfile* NewValue);                                                                // [0x46c1200] Final|Native|Public|BlueprintCallable 
	// void SetIESBrightnessScale(float NewValue);                                                                              // [0x46c1180] Final|Native|Public|BlueprintCallable 
	// void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);                                                          // [0x46c10f0] Final|Native|Public|BlueprintCallable 
	// void SetEnableLightShaftOcclusion(bool bNewValue);                                                                       // [0x46c0fd0] Final|Native|Public|BlueprintCallable 
	// void SetEnableLightShaftBloom(bool bNewValue);                                                                           // [0x46c0f40] Final|Native|Public|BlueprintCallable 
	// void SetBloomTint(FColor NewValue);                                                                                      // [0x46c0b70] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetBloomThreshold(float NewValue);                                                                                  // [0x46c0af0] Final|Native|Public|BlueprintCallable 
	// void SetBloomScale(float NewValue);                                                                                      // [0x46c0a70] Final|Native|Public|BlueprintCallable 
	// void SetBloomMaxBrightness(float NewValue);                                                                              // [0x46c09f0] Final|Native|Public|BlueprintCallable 
	// void SetAffectTranslucentLighting(bool bNewValue);                                                                       // [0x46c0960] Final|Native|Public|BlueprintCallable 
	// void SetAffectDynamicIndirectLighting(bool bNewValue);                                                                   // [0x46c0720] Final|Native|Public|BlueprintCallable 
	// float GetToonPointLightFallOff();                                                                                        // [0x46c06c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// TEnumAsByte<EToonLightType> GetToonLightType();                                                                          // [0x46c0680] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetToonIntensity();                                                                                                // [0x46c0650] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FLinearColor GetLightToonColor();                                                                                        // [0x46c0610] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// TEnumAsByte<ELightQualityType> GetLightQualityType();                                                                    // [0x46c05e0] Final|Native|Public|BlueprintCallable 
	// TEnumAsByte<ELightDistanceCullType> GetLightDistanceCullType();                                                          // [0x46c05b0] Final|Native|Public|BlueprintCallable 
};
#pragma pack(pop)

/// Struct /Script/Engine.LightmassLightSettings
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FLightmassLightSettings
{ 
	float                                              IndirectLightingSaturation;                                 // 0x0000   (0x0004)  
	float                                              ShadowExponent;                                             // 0x0004   (0x0004)  
	bool                                               bUseAreaShadowsForStationaryLight;                          // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/Engine.LightmassDirectionalLightSettings
/// Size: 0x0004 (4 bytes) (0x00000C - 0x000010) align 4 pad: 0x0000
struct FLightmassDirectionalLightSettings : FLightmassLightSettings
{ 
	float                                              LightSourceAngle;                                           // 0x000C   (0x0004)  
};

/// Class /Script/Engine.DirectionalLightComponent
/// Size: 0x0188 (392 bytes) (0x0003B8 - 0x000540) align 16 pad: 0x0000
class UDirectionalLightComponent : public ULightComponent
{ 
public:
	float                                              ShadowCascadeBiasDistribution;                              // 0x03B8   (0x0004)  
	FVector                                            LightShaftOverrideDirection;                                // 0x03BC   (0x000C)  
	float                                              WholeSceneDynamicShadowRadius;                              // 0x03C8   (0x0004)  
	float                                              DynamicShadowDistanceMovableLight;                          // 0x03CC   (0x0004)  
	float                                              MobileDynamicShadowDistanceMovableLight;                    // 0x03D0   (0x0004)  
	float                                              DynamicShadowDistanceStationaryLight;                       // 0x03D4   (0x0004)  
	int32_t                                            DynamicShadowCascades;                                      // 0x03D8   (0x0004)  
	float                                              CascadeDistributionExponent;                                // 0x03DC   (0x0004)  
	float                                              MobileCascadeDistributionExponent;                          // 0x03E0   (0x0004)  
	float                                              CascadeTransitionFraction;                                  // 0x03E4   (0x0004)  
	float                                              ShadowDistanceFadeoutFraction;                              // 0x03E8   (0x0004)  
	bool                                               bUseInsetShadowsForMovableObjects : 1;                      // 0x03EC:0 (0x0001)  
	bool                                               bUseCaveOrIndoorShadowStrategy : 1;                         // 0x03EC:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x03ED   (0x0003)  MISSED
	int32_t                                            FarShadowCascadeCount;                                      // 0x03F0   (0x0004)  
	float                                              FarShadowDistance;                                          // 0x03F4   (0x0004)  
	float                                              DistanceFieldShadowDistance;                                // 0x03F8   (0x0004)  
	float                                              LightSourceAngle;                                           // 0x03FC   (0x0004)  
	float                                              LightSourceSoftAngle;                                       // 0x0400   (0x0004)  
	bool                                               bIsMainDirectionalLight : 1;                                // 0x0404:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0405   (0x0003)  MISSED
	float                                              ShadowSourceAngleFactor;                                    // 0x0408   (0x0004)  
	float                                              TraceDistance;                                              // 0x040C   (0x0004)  
	bool                                               bUsedAsAtmosphereSunLight : 1;                              // 0x0410:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0411   (0x0003)  MISSED
	int32_t                                            AtmosphereSunLightIndex;                                    // 0x0414   (0x0004)  
	FLinearColor                                       AtmosphereSunDiskColorScale;                                // 0x0418   (0x0010)  
	bool                                               bPerPixelAtmosphereTransmittance : 1;                       // 0x0428:0 (0x0001)  
	bool                                               bCastShadowsOnClouds : 1;                                   // 0x0428:1 (0x0001)  
	bool                                               bCastShadowsOnAtmosphere : 1;                               // 0x0428:2 (0x0001)  
	bool                                               bCastCloudShadows : 1;                                      // 0x0428:3 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0429   (0x0003)  MISSED
	float                                              CloudShadowStrength;                                        // 0x042C   (0x0004)  
	float                                              CloudShadowOnAtmosphereStrength;                            // 0x0430   (0x0004)  
	float                                              CloudShadowOnSurfaceStrength;                               // 0x0434   (0x0004)  
	float                                              CloudShadowDepthBias;                                       // 0x0438   (0x0004)  
	float                                              CloudShadowExtent;                                          // 0x043C   (0x0004)  
	float                                              CloudShadowMapResolutionScale;                              // 0x0440   (0x0004)  
	float                                              CloudShadowRaySampleCountScale;                             // 0x0444   (0x0004)  
	FLinearColor                                       CloudScatteredLuminanceScale;                               // 0x0448   (0x0010)  
	FLightmassDirectionalLightSettings                 LightmassSettings;                                          // 0x0458   (0x0010)  
	bool                                               bCastModulatedShadows : 1;                                  // 0x0468:0 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0469   (0x0003)  MISSED
	FColor                                             ModulatedShadowColor;                                       // 0x046C   (0x0004)  
	float                                              ShadowAmount;                                               // 0x0470   (0x0004)  
	float                                              Softness;                                                   // 0x0474   (0x0004)  
	float                                              SoftnessFallloff;                                           // 0x0478   (0x0004)  
	float                                              ShadowPow;                                                  // 0x047C   (0x0004)  
	float                                              Softness2;                                                  // 0x0480   (0x0004)  
	unsigned char                                      UnknownData05_6[0xC];                                       // 0x0484   (0x000C)  MISSED
	FVector4                                           ShadowTint;                                                 // 0x0490   (0x0010)  
	unsigned char                                      UnknownData06_7[0xA0];                                      // 0x04A0   (0x00A0)  MISSED
	// void UpdateParallaxCorrectCachedLightToWorld(FRotator NewRelativeRotation, FRotator CrossFadeRelativeRotation, float CrossFadeWaitTime, float CrossfadeDuration); // [0x46166b0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetUseCaveOrIndoorShadowStrategy(bool NewValue);                                                                    // [0x4616550] Final|Native|Public|BlueprintCallable 
	// void SetShadowTint(FVector4 shaodwTint);                                                                                 // [0x4616430] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetShadowDistanceFadeoutFraction(float NewValue);                                                                   // [0x46163b0] Final|Native|Public|BlueprintCallable 
	// void SetShadowAmount(float NewValue);                                                                                    // [0x4616330] Final|Native|Public|BlueprintCallable 
	// void SetMobileDynamicShadowDistanceMovableLight(float NewValue);                                                         // [0x4616230] Final|Native|Public|BlueprintCallable 
	// void SetMobileCascadeDistributionExponent(float NewValue);                                                               // [0x46161b0] Final|Native|Public|BlueprintCallable 
	// void SetLightShaftOverrideDirection(FVector NewValue);                                                                   // [0x4616120] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetFarShadowDistance(float NewValue);                                                                               // [0x4616010] Final|Native|Public|BlueprintCallable 
	// void SetFarShadowCascadeCount(int32_t NewValue);                                                                         // [0x4615f80] Final|Native|Public|BlueprintCallable 
	// void SetDynamicShadowDistanceStationaryLight(float NewValue);                                                            // [0x4615c90] Final|Native|Public|BlueprintCallable 
	// void SetDynamicShadowDistanceMovableLight(float NewValue);                                                               // [0x4615c10] Final|Native|Public|BlueprintCallable 
	// void SetDynamicShadowCascades(int32_t NewValue);                                                                         // [0x4615b80] Final|Native|Public|BlueprintCallable 
	// void SetCloudScatteredLuminanceScale(FLinearColor NewColor);                                                             // [0x46159d0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetCascadeTransitionFraction(float NewValue);                                                                       // [0x4615950] Final|Native|Public|BlueprintCallable 
	// void SetCascadeDistributionExponent(float NewValue);                                                                     // [0x46158d0] Final|Native|Public|BlueprintCallable 
	// void SetAtmosphereSunLightIndex(int32_t NewValue);                                                                       // [0x4615840] Final|Native|Public|BlueprintCallable 
	// void SetAtmosphereSunLight(bool bNewValue);                                                                              // [0x46157b0] Final|Native|Public|BlueprintCallable 
	// void SetAtmosphereSunDiskColorScale(FLinearColor NewColor);                                                              // [0x4615720] Final|Native|Public|HasDefaults|BlueprintCallable 
	// FVector GetParallaxCorrectCachedForwardVector();                                                                         // [0x4615470] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.Distribution
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UDistribution : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0030   (0x0008)  MISSED
};

/// Class /Script/Engine.DistributionFloat
/// Size: 0x0008 (8 bytes) (0x000038 - 0x000040) align 8 pad: 0x0000
class UDistributionFloat : public UDistribution
{ 
public:
	bool                                               bCanBeBaked : 1;                                            // 0x0038:0 (0x0001)  
	unsigned char                                      UnknownBit00 : 1;                                           // 0x0038:1 (0x0001)  MISSED
	bool                                               bBakedDataSuccesfully : 1;                                  // 0x0038:2 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/Engine.DistributionFloatConstant
/// Size: 0x0008 (8 bytes) (0x000040 - 0x000048) align 8 pad: 0x0000
class UDistributionFloatConstant : public UDistributionFloat
{ 
public:
	float                                              Constant;                                                   // 0x0040   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Engine.DistributionFloatConstantCurve
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UDistributionFloatConstantCurve : public UDistributionFloat
{ 
public:
	FInterpCurveFloat                                  ConstantCurve;                                              // 0x0040   (0x0018)  
};

/// Class /Script/Engine.DistributionFloatParameterBase
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{ 
public:
	FName                                              ParameterName;                                              // 0x0048   (0x000C)  
	float                                              MinInput;                                                   // 0x0054   (0x0004)  
	float                                              MaxInput;                                                   // 0x0058   (0x0004)  
	float                                              MinOutput;                                                  // 0x005C   (0x0004)  
	float                                              MaxOutput;                                                  // 0x0060   (0x0004)  
	TEnumAsByte<DistributionParamMode>                 ParamMode;                                                  // 0x0064   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0065   (0x0003)  MISSED
};

/// Class /Script/Engine.DistributionFloatParticleParameter
/// Size: 0x0000 (0 bytes) (0x000068 - 0x000068) align 8 pad: 0x0000
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
{ 
public:
};

/// Class /Script/Engine.DistributionFloatUniform
/// Size: 0x0008 (8 bytes) (0x000040 - 0x000048) align 8 pad: 0x0000
class UDistributionFloatUniform : public UDistributionFloat
{ 
public:
	float                                              Min;                                                        // 0x0040   (0x0004)  
	float                                              Max;                                                        // 0x0044   (0x0004)  
};

/// Class /Script/Engine.DistributionFloatUniformCurve
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UDistributionFloatUniformCurve : public UDistributionFloat
{ 
public:
	FInterpCurveVector2D                               ConstantCurve;                                              // 0x0040   (0x0018)  
};

/// Class /Script/Engine.DistributionVector
/// Size: 0x0008 (8 bytes) (0x000038 - 0x000040) align 8 pad: 0x0000
class UDistributionVector : public UDistribution
{ 
public:
	bool                                               bCanBeBaked : 1;                                            // 0x0038:0 (0x0001)  
	bool                                               bIsDirty : 1;                                               // 0x0038:1 (0x0001)  
	bool                                               bBakedDataSuccesfully : 1;                                  // 0x0038:2 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/Engine.DistributionVectorConstant
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UDistributionVectorConstant : public UDistributionVector
{ 
public:
	FVector                                            Constant;                                                   // 0x0040   (0x000C)  
	bool                                               bLockAxes : 1;                                              // 0x004C:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x004D   (0x0003)  MISSED
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                                 // 0x0050   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0051   (0x0007)  MISSED
};

/// Class /Script/Engine.DistributionVectorConstantCurve
/// Size: 0x0020 (32 bytes) (0x000040 - 0x000060) align 8 pad: 0x0000
class UDistributionVectorConstantCurve : public UDistributionVector
{ 
public:
	FInterpCurveVector                                 ConstantCurve;                                              // 0x0040   (0x0018)  
	bool                                               bLockAxes : 1;                                              // 0x0058:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0059   (0x0003)  MISSED
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                                 // 0x005C   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x005D   (0x0003)  MISSED
};

/// Class /Script/Engine.DistributionVectorParameterBase
/// Size: 0x0040 (64 bytes) (0x000058 - 0x000098) align 8 pad: 0x0000
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{ 
public:
	FName                                              ParameterName;                                              // 0x0058   (0x000C)  
	FVector                                            MinInput;                                                   // 0x0064   (0x000C)  
	FVector                                            MaxInput;                                                   // 0x0070   (0x000C)  
	FVector                                            MinOutput;                                                  // 0x007C   (0x000C)  
	FVector                                            MaxOutput;                                                  // 0x0088   (0x000C)  
	TEnumAsByte<DistributionParamMode>                 ParamModes[3];                                              // 0x0094   (0x0003)  
	unsigned char                                      UnknownData00_7[0x1];                                       // 0x0097   (0x0001)  MISSED
};

/// Class /Script/Engine.DistributionVectorParticleParameter
/// Size: 0x0000 (0 bytes) (0x000098 - 0x000098) align 8 pad: 0x0000
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
{ 
public:
};

/// Class /Script/Engine.DistributionVectorUniform
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UDistributionVectorUniform : public UDistributionVector
{ 
public:
	FVector                                            Max;                                                        // 0x0040   (0x000C)  
	FVector                                            Min;                                                        // 0x004C   (0x000C)  
	bool                                               bLockAxes : 1;                                              // 0x0058:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0059   (0x0003)  MISSED
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                                 // 0x005C   (0x0001)  
	TEnumAsByte<EDistributionVectorMirrorFlags>        MirrorFlags[3];                                             // 0x005D   (0x0003)  
	bool                                               bUseExtremes : 1;                                           // 0x0060:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0061   (0x0007)  MISSED
};

/// Class /Script/Engine.DistributionVectorUniformCurve
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UDistributionVectorUniformCurve : public UDistributionVector
{ 
public:
	FInterpCurveTwoVectors                             ConstantCurve;                                              // 0x0040   (0x0018)  
	bool                                               bLockAxes1 : 1;                                             // 0x0058:0 (0x0001)  
	bool                                               bLockAxes2 : 1;                                             // 0x0058:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0059   (0x0003)  MISSED
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes[2];                                              // 0x005C   (0x0002)  
	TEnumAsByte<EDistributionVectorMirrorFlags>        MirrorFlags[3];                                             // 0x005E   (0x0003)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0061   (0x0003)  MISSED
	bool                                               bUseExtremes : 1;                                           // 0x0064:0 (0x0001)  
	unsigned char                                      UnknownData02_7[0x3];                                       // 0x0065   (0x0003)  MISSED
};

/// Class /Script/Engine.DocumentationActor
/// Size: 0x0008 (8 bytes) (0x0002A8 - 0x0002B0) align 8 pad: 0x0000
class ADocumentationActor : public AActor
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x02A8   (0x0008)  MISSED
};

/// Class /Script/Engine.DPICustomScalingRule
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UDPICustomScalingRule : public UObject
{ 
public:
};

/// Class /Script/Engine.DrawFrustumComponent
/// Size: 0x0020 (32 bytes) (0x0004E0 - 0x000500) align 16 pad: 0x0000
class UDrawFrustumComponent : public UPrimitiveComponent
{ 
public:
	FColor                                             FrustumColor;                                               // 0x04E0   (0x0004)  
	float                                              FrustumAngle;                                               // 0x04E4   (0x0004)  
	float                                              FrustumAspectRatio;                                         // 0x04E8   (0x0004)  
	float                                              FrustumStartDist;                                           // 0x04EC   (0x0004)  
	float                                              FrustumEndDist;                                             // 0x04F0   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x04F4   (0x0004)  MISSED
	class UTexture*                                    Texture;                                                    // 0x04F8   (0x0008)  
};

/// Class /Script/Engine.SphereComponent
/// Size: 0x0008 (8 bytes) (0x0004F8 - 0x000500) align 16 pad: 0x0000
class USphereComponent : public UShapeComponent
{ 
public:
	float                                              SphereRadius;                                               // 0x04F8   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x04FC   (0x0004)  MISSED
	// void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);                                                        // [0x4751a90] Final|Native|Public|BlueprintCallable 
	// float GetUnscaledSphereRadius();                                                                                         // [0x45ff4e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetShapeScale();                                                                                                   // [0x474fba0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetScaledSphereRadius();                                                                                           // [0x474fb50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.DrawSphereComponent
/// Size: 0x0000 (0 bytes) (0x000500 - 0x000500) align 16 pad: 0x0000
class UDrawSphereComponent : public USphereComponent
{ 
public:
};

/// Class /Script/Engine.EdGraph
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000068) align 8 pad: 0x0000
class UEdGraph : public UObject
{ 
public:
	class UClass*                                      Schema;                                                     // 0x0030   (0x0008)  
	TArray<class UEdGraphNode*>                        Nodes;                                                      // 0x0038   (0x0010)  
	bool                                               bEditable : 1;                                              // 0x0048:0 (0x0001)  
	bool                                               bAllowDeletion : 1;                                         // 0x0048:1 (0x0001)  
	bool                                               bAllowRenaming : 1;                                         // 0x0048:2 (0x0001)  
	unsigned char                                      UnknownData00_7[0x1F];                                      // 0x0049   (0x001F)  MISSED
};

/// Class /Script/Engine.GraphNodeContextMenuContext
/// Size: 0x0028 (40 bytes) (0x000030 - 0x000058) align 8 pad: 0x0000
class UGraphNodeContextMenuContext : public UObject
{ 
public:
	class UBlueprint*                                  Blueprint;                                                  // 0x0030   (0x0008)  
	class UEdGraph*                                    Graph;                                                      // 0x0038   (0x0008)  
	class UEdGraphNode*                                Node;                                                       // 0x0040   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0048   (0x0008)  MISSED
	bool                                               bIsDebugging;                                               // 0x0050   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0051   (0x0007)  MISSED
};

/// Class /Script/Engine.EdGraphNode
/// Size: 0x0070 (112 bytes) (0x000030 - 0x0000A0) align 8 pad: 0x0000
class UEdGraphNode : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x10];                                      // 0x0030   (0x0010)  MISSED
	TArray<class UEdGraphPin_Deprecated*>              DeprecatedPins;                                             // 0x0040   (0x0010)  
	int32_t                                            NodePosX;                                                   // 0x0050   (0x0004)  
	int32_t                                            NodePosY;                                                   // 0x0054   (0x0004)  
	int32_t                                            NodeWidth;                                                  // 0x0058   (0x0004)  
	int32_t                                            NodeHeight;                                                 // 0x005C   (0x0004)  
	TEnumAsByte<ENodeAdvancedPins>                     AdvancedPinDisplay;                                         // 0x0060   (0x0001)  
	ENodeEnabledState                                  EnabledState;                                               // 0x0061   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x0062   (0x0001)  MISSED
	unsigned char                                      UnknownBit02 : 1;                                           // 0x0063:0 (0x0001)  MISSED
	bool                                               bDisplayAsDisabled : 1;                                     // 0x0063:1 (0x0001)  
	bool                                               bUserSetEnabledState : 1;                                   // 0x0063:2 (0x0001)  
	unsigned char                                      UnknownBit03 : 1;                                           // 0x0063:3 (0x0001)  MISSED
	bool                                               bIsNodeEnabled : 1;                                         // 0x0063:4 (0x0001)  
	unsigned char                                      UnknownBit04 : 1;                                           // 0x0063:5 (0x0001)  MISSED
	bool                                               bHasCompilerMessage : 1;                                    // 0x0063:6 (0x0001)  
	unsigned char                                      UnknownData05_5[0x4];                                       // 0x0064   (0x0004)  MISSED
	FString                                            NodeComment;                                                // 0x0068   (0x0010)  
	int32_t                                            ErrorType;                                                  // 0x0078   (0x0004)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x007C   (0x0004)  MISSED
	FString                                            ErrorMsg;                                                   // 0x0080   (0x0010)  
	FGuid                                              NodeGuid;                                                   // 0x0090   (0x0010)  
};

/// Class /Script/Engine.EdGraphNode_Documentation
/// Size: 0x0020 (32 bytes) (0x0000A0 - 0x0000C0) align 8 pad: 0x0000
class UEdGraphNode_Documentation : public UEdGraphNode
{ 
public:
	FString                                            Link;                                                       // 0x00A0   (0x0010)  
	FString                                            Excerpt;                                                    // 0x00B0   (0x0010)  
};

/// Struct /Script/Engine.EdGraphTerminalType
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align 4 pad: 0x0000
struct FEdGraphTerminalType
{ 
	FName                                              TerminalCategory;                                           // 0x0000   (0x000C)  
	FName                                              TerminalSubCategory;                                        // 0x000C   (0x000C)  
	SDK_UNDEFINED(8,140) /* TWeakObjectPtr<UObject*> */ __um(TerminalSubCategoryObject);                           // 0x0018   (0x0008)  
	bool                                               bTerminalIsConst;                                           // 0x0020   (0x0001)  
	bool                                               bTerminalIsWeakPointer;                                     // 0x0021   (0x0001)  
	bool                                               bTerminalIsUObjectWrapper;                                  // 0x0022   (0x0001)  
	unsigned char                                      UnknownData00_7[0x1];                                       // 0x0023   (0x0001)  MISSED
};

/// Struct /Script/Engine.EdGraphPinType
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align 8 pad: 0x0000
struct FEdGraphPinType
{ 
	FName                                              PinCategory;                                                // 0x0000   (0x000C)  
	FName                                              PinSubCategory;                                             // 0x000C   (0x000C)  
	SDK_UNDEFINED(8,141) /* TWeakObjectPtr<UObject*> */ __um(PinSubCategoryObject);                                // 0x0018   (0x0008)  
	FSimpleMemberReference                             PinSubCategoryMemberReference;                              // 0x0020   (0x0028)  
	FEdGraphTerminalType                               PinValueType;                                               // 0x0048   (0x0024)  
	EPinContainerType                                  ContainerType;                                              // 0x006C   (0x0001)  
	bool                                               bIsArray : 1;                                               // 0x006D:0 (0x0001)  
	bool                                               bIsReference : 1;                                           // 0x006D:1 (0x0001)  
	bool                                               bIsConst : 1;                                               // 0x006D:2 (0x0001)  
	bool                                               bIsWeakPointer : 1;                                         // 0x006D:3 (0x0001)  
	bool                                               bIsUObjectWrapper : 1;                                      // 0x006D:4 (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x006E   (0x0002)  MISSED
};

/// Class /Script/Engine.EdGraphPin_Deprecated
/// Size: 0x0108 (264 bytes) (0x000030 - 0x000138) align 8 pad: 0x0000
class UEdGraphPin_Deprecated : public UObject
{ 
public:
	FString                                            PinName;                                                    // 0x0030   (0x0010)  
	FString                                            PinToolTip;                                                 // 0x0040   (0x0010)  
	TEnumAsByte<EEdGraphPinDirection>                  Direction;                                                  // 0x0050   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0051   (0x0007)  MISSED
	FEdGraphPinType                                    PinType;                                                    // 0x0058   (0x0070)  
	FString                                            DefaultValue;                                               // 0x00C8   (0x0010)  
	FString                                            AutogeneratedDefaultValue;                                  // 0x00D8   (0x0010)  
	class UObject*                                     DefaultObject;                                              // 0x00E8   (0x0008)  
	FText                                              DefaultTextValue;                                           // 0x00F0   (0x0018)  
	TArray<class UEdGraphPin_Deprecated*>              LinkedTo;                                                   // 0x0108   (0x0010)  
	TArray<class UEdGraphPin_Deprecated*>              SubPins;                                                    // 0x0118   (0x0010)  
	class UEdGraphPin_Deprecated*                      ParentPin;                                                  // 0x0128   (0x0008)  
	class UEdGraphPin_Deprecated*                      ReferencePassThroughConnection;                             // 0x0130   (0x0008)  
};

/// Class /Script/Engine.EdGraphSchema
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UEdGraphSchema : public UObject
{ 
public:
};

/// Class /Script/Engine.Emitter
/// Size: 0x0050 (80 bytes) (0x0002A8 - 0x0002F8) align 8 pad: 0x0000
class AEmitter : public AActor
{ 
public:
	class UParticleSystemComponent*                    ParticleSystemComponent;                                    // 0x02A8   (0x0008)  
	bool                                               bDestroyOnSystemFinish : 1;                                 // 0x02B0:0 (0x0001)  
	bool                                               bPostUpdateTickGroup : 1;                                   // 0x02B0:1 (0x0001)  
	bool                                               bCurrentlyActive : 1;                                       // 0x02B0:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x02B1   (0x0007)  MISSED
	SDK_UNDEFINED(16,142) /* FMulticastInlineDelegate */ __um(OnParticleSpawn);                                    // 0x02B8   (0x0010)  
	SDK_UNDEFINED(16,143) /* FMulticastInlineDelegate */ __um(OnParticleBurst);                                    // 0x02C8   (0x0010)  
	SDK_UNDEFINED(16,144) /* FMulticastInlineDelegate */ __um(OnParticleDeath);                                    // 0x02D8   (0x0010)  
	SDK_UNDEFINED(16,145) /* FMulticastInlineDelegate */ __um(OnParticleCollide);                                  // 0x02E8   (0x0010)  
	// void ToggleActive();                                                                                                     // [0x461c460] Final|Native|Public|BlueprintCallable 
	// void SetVectorParameter(FName ParameterName, FVector Param);                                                             // [0x461c370] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetTemplate(class UParticleSystem* NewTemplate);                                                                    // [0x461c2e0] Native|Public|BlueprintCallable 
	// void SetMaterialParameter(FName ParameterName, class UMaterialInterface* Param);                                         // [0x461c1f0] Final|Native|Public|BlueprintCallable 
	// void SetFloatParameter(FName ParameterName, float Param);                                                                // [0x461c100] Final|Native|Public|BlueprintCallable 
	// void SetColorParameter(FName ParameterName, FLinearColor Param);                                                         // [0x461c010] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetActorParameter(FName ParameterName, class AActor* Param);                                                        // [0x461bf20] Final|Native|Public|BlueprintCallable 
	// void OnRep_bCurrentlyActive();                                                                                           // [0x461bf00] Native|Public        
	// void OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent);                                        // [0xc37ed0] Native|Public        
	// bool IsActive();                                                                                                         // [0x461bed0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void Deactivate();                                                                                                       // [0x461beb0] Final|Native|Public|BlueprintCallable 
	// void Activate();                                                                                                         // [0x461be90] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.EmitterCameraLensEffectBase
/// Size: 0x0068 (104 bytes) (0x0002F8 - 0x000360) align 16 pad: 0x0000
class AEmitterCameraLensEffectBase : public AEmitter
{ 
public:
	class UParticleSystem*                             PS_CameraEffect;                                            // 0x02F8   (0x0008)  
	class UParticleSystem*                             PS_CameraEffectNonExtremeContent;                           // 0x0300   (0x0008)  
	class APlayerCameraManager*                        BaseCamera;                                                 // 0x0308   (0x0008)  
	FTransform                                         RelativeTransform;                                          // 0x0310   (0x0030)  
	float                                              BaseFOV;                                                    // 0x0340   (0x0004)  
	bool                                               bAllowMultipleInstances : 1;                                // 0x0344:0 (0x0001)  
	bool                                               bResetWhenRetriggered : 1;                                  // 0x0344:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0345   (0x0003)  MISSED
	TArray<class UClass*>                              EmittersToTreatAsSame;                                      // 0x0348   (0x0010)  
	float                                              DistFromCamera;                                             // 0x0358   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x035C   (0x0004)  MISSED
};

/// Class /Script/Engine.ViewModeUtils
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UViewModeUtils : public UObject
{ 
public:
};

/// Class /Script/Engine.EngineBaseTypes
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UEngineBaseTypes : public UObject
{ 
public:
};

/// Class /Script/Engine.EngineHandlerComponentFactory
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UEngineHandlerComponentFactory : public UHandlerComponentFactory
{ 
public:
};

/// Class /Script/Engine.LocalMessage
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class ULocalMessage : public UObject
{ 
public:
};

/// Class /Script/Engine.EngineMessage
/// Size: 0x0080 (128 bytes) (0x000030 - 0x0000B0) align 8 pad: 0x0000
class UEngineMessage : public ULocalMessage
{ 
public:
	FString                                            FailedPlaceMessage;                                         // 0x0030   (0x0010)  
	FString                                            MaxedOutMessage;                                            // 0x0040   (0x0010)  
	FString                                            EnteredMessage;                                             // 0x0050   (0x0010)  
	FString                                            LeftMessage;                                                // 0x0060   (0x0010)  
	FString                                            GlobalNameChange;                                           // 0x0070   (0x0010)  
	FString                                            SpecEnteredMessage;                                         // 0x0080   (0x0010)  
	FString                                            NewPlayerMessage;                                           // 0x0090   (0x0010)  
	FString                                            NewSpecMessage;                                             // 0x00A0   (0x0010)  
};

/// Class /Script/Engine.EngineTypes
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UEngineTypes : public UObject
{ 
public:
};

/// Class /Script/Engine.ExponentialHeightFog
/// Size: 0x0010 (16 bytes) (0x0002A8 - 0x0002B8) align 8 pad: 0x0000
class AExponentialHeightFog : public AInfo
{ 
public:
	class UExponentialHeightFogComponent*              Component;                                                  // 0x02A8   (0x0008)  
	bool                                               bEnabled : 1;                                               // 0x02B0:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x02B1   (0x0007)  MISSED
	// void OnRep_bEnabled();                                                                                                   // [0x46255d0] Native|Public        
};

/// Struct /Script/Engine.ExponentialHeightFogData
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FExponentialHeightFogData
{ 
	float                                              FogDensity;                                                 // 0x0000   (0x0004)  
	float                                              FogHeightFalloff;                                           // 0x0004   (0x0004)  
	float                                              FogHeightOffset;                                            // 0x0008   (0x0004)  
};

/// Class /Script/Engine.ExponentialHeightFogComponent
/// Size: 0x0158 (344 bytes) (0x000218 - 0x000370) align 16 pad: 0x0000
class UExponentialHeightFogComponent : public USceneComponent
{ 
public:
	FLinearColor                                       KuroDirectionalInscatteringColor;                           // 0x0218   (0x0010)  
	float                                              KuroDirectionalInscatteringAmount;                          // 0x0228   (0x0004)  
	float                                              KuroDirectionalInscatteringExponent;                        // 0x022C   (0x0004)  
	float                                              KuroDirectionalInscatteringStartDistance;                   // 0x0230   (0x0004)  
	float                                              KuroFog1Density;                                            // 0x0234   (0x0004)  
	float                                              KuroFog1HeightOffset;                                       // 0x0238   (0x0004)  
	float                                              KuroFog1Falloff;                                            // 0x023C   (0x0004)  
	float                                              KuroFog1FalloffFarSky;                                      // 0x0240   (0x0004)  
	float                                              KuroFog1StartDistance;                                      // 0x0244   (0x0004)  
	float                                              KuroFog1MaxOpacity;                                         // 0x0248   (0x0004)  
	FLinearColor                                       KuroFogNearColor;                                           // 0x024C   (0x0010)  
	FLinearColor                                       KuroFogFarColor;                                            // 0x025C   (0x0010)  
	FLinearColor                                       KuroFogBaseColor;                                           // 0x026C   (0x0010)  
	float                                              KuroFogNearColorDistance;                                   // 0x027C   (0x0004)  
	float                                              KuroFogFarColorDistance;                                    // 0x0280   (0x0004)  
	float                                              KuroFogNearFarColorRatio;                                   // 0x0284   (0x0004)  
	float                                              KuroFogMixDistance;                                         // 0x0288   (0x0004)  
	float                                              KuroFogMixWidth;                                            // 0x028C   (0x0004)  
	float                                              KuroLowPoint1;                                              // 0x0290   (0x0004)  
	float                                              KuroHighPoint1;                                             // 0x0294   (0x0004)  
	float                                              KuroLowFalloff1;                                            // 0x0298   (0x0004)  
	float                                              KuroLowSkyFalloff1;                                         // 0x029C   (0x0004)  
	float                                              KuroLowHighOffset1;                                         // 0x02A0   (0x0004)  
	float                                              KuroGICurrentTime;                                          // 0x02A4   (0x0004)  
	float                                              KuroDayNightTime;                                           // 0x02A8   (0x0004)  
	FLinearColor                                       KuroSunInscatterColor;                                      // 0x02AC   (0x0010)  
	float                                              KuroSunInscatterSize;                                       // 0x02BC   (0x0004)  
	float                                              FogBaseLocation;                                            // 0x02C0   (0x0004)  
	float                                              FogUseBaseLocation;                                         // 0x02C4   (0x0004)  
	float                                              FogUseCameraLocation;                                       // 0x02C8   (0x0004)  
	float                                              FogDensity;                                                 // 0x02CC   (0x0004)  
	float                                              FogHeightFalloff;                                           // 0x02D0   (0x0004)  
	FExponentialHeightFogData                          SecondFogData;                                              // 0x02D4   (0x000C)  
	FLinearColor                                       FogInscatteringColor;                                       // 0x02E0   (0x0010)  
	class UTextureCube*                                InscatteringColorCubemap;                                   // 0x02F0   (0x0008)  
	float                                              InscatteringColorCubemapAngle;                              // 0x02F8   (0x0004)  
	FLinearColor                                       InscatteringTextureTint;                                    // 0x02FC   (0x0010)  
	float                                              FullyDirectionalInscatteringColorDistance;                  // 0x030C   (0x0004)  
	float                                              NonDirectionalInscatteringColorDistance;                    // 0x0310   (0x0004)  
	float                                              DirectionalInscatteringExponent;                            // 0x0314   (0x0004)  
	float                                              DirectionalInscatteringStartDistance;                       // 0x0318   (0x0004)  
	FLinearColor                                       DirectionalInscatteringColor;                               // 0x031C   (0x0010)  
	float                                              FogMaxOpacity;                                              // 0x032C   (0x0004)  
	float                                              StartDistance;                                              // 0x0330   (0x0004)  
	float                                              FogCutoffDistance;                                          // 0x0334   (0x0004)  
	bool                                               bEnableVolumetricFog;                                       // 0x0338   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0339   (0x0003)  MISSED
	float                                              VolumetricFogDensity;                                       // 0x033C   (0x0004)  
	float                                              VolumetricFogScatteringDistribution;                        // 0x0340   (0x0004)  
	FColor                                             VolumetricFogAlbedo;                                        // 0x0344   (0x0004)  
	FLinearColor                                       VolumetricFogEmissive;                                      // 0x0348   (0x0010)  
	float                                              VolumetricFogExtinctionScale;                               // 0x0358   (0x0004)  
	float                                              VolumetricFogDistance;                                      // 0x035C   (0x0004)  
	float                                              VolumetricFogStaticLightingScatteringIntensity;             // 0x0360   (0x0004)  
	float                                              VolumetricFogLocalLightScatteringMultiplier;                // 0x0364   (0x0004)  
	bool                                               bOverrideLightColorsWithFogInscatteringColors;              // 0x0368   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0369   (0x0007)  MISSED
	// void SetVolumetricLocalLightScatteringMultiplier(float Value);                                                           // [0x4627080] Final|Native|Public|BlueprintCallable 
	// void SetVolumetricFogStaticLightingScatteringIntensity(float Value);                                                     // [0x4627000] Final|Native|Public|BlueprintCallable 
	// void SetVolumetricFogScatteringDistribution(float NewValue);                                                             // [0x4626f80] Final|Native|Public|BlueprintCallable 
	// void SetVolumetricFogExtinctionScale(float NewValue);                                                                    // [0x4626f00] Final|Native|Public|BlueprintCallable 
	// void SetVolumetricFogEmissive(FLinearColor NewValue);                                                                    // [0x4626e70] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetVolumetricFogDistance(float Value);                                                                              // [0x4626df0] Final|Native|Public|BlueprintCallable 
	// void SetVolumetricFogDensity(float bNewValue);                                                                           // [0x4626d70] Final|Native|Public|BlueprintCallable 
	// void SetVolumetricFogAlbedo(FColor NewValue);                                                                            // [0x4626cf0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetVolumetricFog(bool bNewValue);                                                                                   // [0x4626c60] Final|Native|Public|BlueprintCallable 
	// void SetStartDistance(float Value);                                                                                      // [0x4626be0] Final|Native|Public|BlueprintCallable 
	// void SetSecondFogData(float Density, float HeightFalloff, float HeightOffset);                                           // [0x4626ac0] Final|Native|Public|BlueprintCallable 
	// void SetNonDirectionalInscatteringColorDistance(float Value);                                                            // [0x4626a40] Final|Native|Public|BlueprintCallable 
	// void SetKuroSunInscatterSize(float Value);                                                                               // [0x46269c0] Final|Native|Public|BlueprintCallable 
	// void SetKuroSunInscatterColor(FLinearColor Value);                                                                       // [0x4626930] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetKuroLowSkyFalloff1(float Value);                                                                                 // [0x46268b0] Final|Native|Public|BlueprintCallable 
	// void SetKuroLowPoint1(float Value);                                                                                      // [0x4626830] Final|Native|Public|BlueprintCallable 
	// void SetKuroLowHighOffset1(float Value);                                                                                 // [0x46267b0] Final|Native|Public|BlueprintCallable 
	// void SetKuroLowFalloff1(float Value);                                                                                    // [0x4626730] Final|Native|Public|BlueprintCallable 
	// void SetKuroHighPoint1(float Value);                                                                                     // [0x46266b0] Final|Native|Public|BlueprintCallable 
	// void SetKuroGICurrentTime(float Value);                                                                                  // [0x4626630] Final|Native|Public|BlueprintCallable 
	// void SetKuroFogNearFarColorRatio(float Value);                                                                           // [0x46265b0] Final|Native|Public|BlueprintCallable 
	// void SetKuroFogNearColorDistance(float Value);                                                                           // [0x4626530] Final|Native|Public|BlueprintCallable 
	// void SetKuroFogNearColor(FLinearColor Value);                                                                            // [0x46264a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetKuroFogMixWidth(float Value);                                                                                    // [0x4626420] Final|Native|Public|BlueprintCallable 
	// void SetKuroFogMixDistance(float Value);                                                                                 // [0x46263a0] Final|Native|Public|BlueprintCallable 
	// void SetKuroFogFarColorDistance(float Value);                                                                            // [0x4626320] Final|Native|Public|BlueprintCallable 
	// void SetKuroFogFarColor(FLinearColor Value);                                                                             // [0x4626290] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetKuroFogBaseColor(FLinearColor Value);                                                                            // [0x4626200] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetKuroFog1StartDistance(float Value);                                                                              // [0x4626180] Final|Native|Public|BlueprintCallable 
	// void SetKuroFog1MaxOpacity(float Value);                                                                                 // [0x4626100] Final|Native|Public|BlueprintCallable 
	// void SetKuroFog1HeightOffset(float Value);                                                                               // [0x45e03d0] Final|Native|Public|BlueprintCallable 
	// void SetKuroFog1FalloffFarSky(float Value);                                                                              // [0x45dff20] Final|Native|Public|BlueprintCallable 
	// void SetKuroFog1Falloff(float Value);                                                                                    // [0x4626080] Final|Native|Public|BlueprintCallable 
	// void SetKuroFog1Density(float Value);                                                                                    // [0x4626000] Final|Native|Public|BlueprintCallable 
	// void SetKuroDirectionalInscatteringStartDistance(float Value);                                                           // [0x45e0130] Final|Native|Public|BlueprintCallable 
	// void SetKuroDirectionalInscatteringExponent(float Value);                                                                // [0x45dfea0] Final|Native|Public|BlueprintCallable 
	// void SetKuroDirectionalInscatteringColor(FLinearColor Value);                                                            // [0x4625f70] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetKuroDirectionalInscatteringAmount(float Value);                                                                  // [0x45e01b0] Final|Native|Public|BlueprintCallable 
	// void SetKuroDayNightTime(float Value);                                                                                   // [0x4625ef0] Final|Native|Public|BlueprintCallable 
	// void SetInscatteringTextureTint(FLinearColor Value);                                                                     // [0x4625e60] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetInscatteringColorCubemapAngle(float Value);                                                                      // [0x4625de0] Final|Native|Public|BlueprintCallable 
	// void SetInscatteringColorCubemap(class UTextureCube* Value);                                                             // [0x4625d50] Final|Native|Public|BlueprintCallable 
	// void SetFullyDirectionalInscatteringColorDistance(float Value);                                                          // [0x4625cd0] Final|Native|Public|BlueprintCallable 
	// void SetFogUseCameraLocation(float Value);                                                                               // [0x4625c50] Final|Native|Public|BlueprintCallable 
	// void SetFogUseBaseLocation(float Value);                                                                                 // [0x4625bd0] Final|Native|Public|BlueprintCallable 
	// void SetFogMaxOpacity(float Value);                                                                                      // [0x4625b50] Final|Native|Public|BlueprintCallable 
	// void SetFogInscatteringColor(FLinearColor Value);                                                                        // [0x4625ac0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetFogHeightFalloff(float Value);                                                                                   // [0x4625a40] Final|Native|Public|BlueprintCallable 
	// void SetFogDensity(float Value);                                                                                         // [0x46259c0] Final|Native|Public|BlueprintCallable 
	// void SetFogCutoffDistance(float Value);                                                                                  // [0x4625940] Final|Native|Public|BlueprintCallable 
	// void SetFogBaseLocation(float Value);                                                                                    // [0x46258c0] Final|Native|Public|BlueprintCallable 
	// void SetDirectionalInscatteringStartDistance(float Value);                                                               // [0x4625840] Final|Native|Public|BlueprintCallable 
	// void SetDirectionalInscatteringExponent(float Value);                                                                    // [0x46257c0] Final|Native|Public|BlueprintCallable 
	// void SetDirectionalInscatteringColor(FLinearColor Value);                                                                // [0x4625730] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.Exporter
/// Size: 0x0050 (80 bytes) (0x000030 - 0x000080) align 8 pad: 0x0000
class UExporter : public UObject
{ 
public:
	class UClass*                                      SupportedClass;                                             // 0x0030   (0x0008)  
	class UObject*                                     ExportRootScope;                                            // 0x0038   (0x0008)  
	TArray<FString>                                    FormatExtension;                                            // 0x0040   (0x0010)  
	TArray<FString>                                    FormatDescription;                                          // 0x0050   (0x0010)  
	int32_t                                            PreferredFormatIndex;                                       // 0x0060   (0x0004)  
	int32_t                                            TextIndent;                                                 // 0x0064   (0x0004)  
	bool                                               bText : 1;                                                  // 0x0068:0 (0x0001)  
	bool                                               bSelectedOnly : 1;                                          // 0x0068:1 (0x0001)  
	bool                                               bForceFileOperations : 1;                                   // 0x0068:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0069   (0x0007)  MISSED
	class UAssetExportTask*                            ExportTask;                                                 // 0x0070   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0078   (0x0008)  MISSED
	// bool ScriptRunAssetExportTask(class UAssetExportTask* Task);                                                             // [0x25a7960] Event|Public|BlueprintEvent 
	// bool RunAssetExportTasks(TArray<UAssetExportTask*>& ExportTasks);                                                        // [0x4625680] Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 
	// bool RunAssetExportTask(class UAssetExportTask* Task);                                                                   // [0x46255f0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.FloatingPawnMovement
/// Size: 0x0018 (24 bytes) (0x000150 - 0x000168) align 8 pad: 0x0000
class UFloatingPawnMovement : public UPawnMovementComponent
{ 
public:
	float                                              MaxSpeed;                                                   // 0x0150   (0x0004)  
	float                                              Acceleration;                                               // 0x0154   (0x0004)  
	float                                              Deceleration;                                               // 0x0158   (0x0004)  
	float                                              TurningBoost;                                               // 0x015C   (0x0004)  
	bool                                               bPositionCorrected : 1;                                     // 0x0160:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0161   (0x0007)  MISSED
};

/// Struct /Script/Engine.FontCharacter
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FFontCharacter
{ 
	int32_t                                            StartU;                                                     // 0x0000   (0x0004)  
	int32_t                                            StartV;                                                     // 0x0004   (0x0004)  
	int32_t                                            USize;                                                      // 0x0008   (0x0004)  
	int32_t                                            VSize;                                                      // 0x000C   (0x0004)  
	char                                               TextureIndex;                                               // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0011   (0x0003)  MISSED
	int32_t                                            VerticalOffset;                                             // 0x0014   (0x0004)  
};

/// Struct /Script/Engine.FontImportOptionsData
/// Size: 0x00B0 (176 bytes) (0x000000 - 0x0000B0) align 8 pad: 0x0000
struct FFontImportOptionsData
{ 
	FString                                            FontName;                                                   // 0x0000   (0x0010)  
	float                                              Height;                                                     // 0x0010   (0x0004)  
	bool                                               bEnableAntialiasing : 1;                                    // 0x0014:0 (0x0001)  
	bool                                               bEnableBold : 1;                                            // 0x0014:1 (0x0001)  
	bool                                               bEnableItalic : 1;                                          // 0x0014:2 (0x0001)  
	bool                                               bEnableUnderline : 1;                                       // 0x0014:3 (0x0001)  
	bool                                               bAlphaOnly : 1;                                             // 0x0014:4 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0015   (0x0003)  MISSED
	TEnumAsByte<EFontImportCharacterSet>               CharacterSet;                                               // 0x0018   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0019   (0x0007)  MISSED
	FString                                            Chars;                                                      // 0x0020   (0x0010)  
	FString                                            UnicodeRange;                                               // 0x0030   (0x0010)  
	FString                                            CharsFilePath;                                              // 0x0040   (0x0010)  
	FString                                            CharsFileWildcard;                                          // 0x0050   (0x0010)  
	bool                                               bCreatePrintableOnly : 1;                                   // 0x0060:0 (0x0001)  
	bool                                               bIncludeASCIIRange : 1;                                     // 0x0060:1 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0061   (0x0003)  MISSED
	FLinearColor                                       ForegroundColor;                                            // 0x0064   (0x0010)  
	bool                                               bEnableDropShadow : 1;                                      // 0x0074:0 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0075   (0x0003)  MISSED
	int32_t                                            TexturePageWidth;                                           // 0x0078   (0x0004)  
	int32_t                                            TexturePageMaxHeight;                                       // 0x007C   (0x0004)  
	int32_t                                            XPadding;                                                   // 0x0080   (0x0004)  
	int32_t                                            YPadding;                                                   // 0x0084   (0x0004)  
	int32_t                                            ExtendBoxTop;                                               // 0x0088   (0x0004)  
	int32_t                                            ExtendBoxBottom;                                            // 0x008C   (0x0004)  
	int32_t                                            ExtendBoxRight;                                             // 0x0090   (0x0004)  
	int32_t                                            ExtendBoxLeft;                                              // 0x0094   (0x0004)  
	bool                                               bEnableLegacyMode : 1;                                      // 0x0098:0 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0099   (0x0003)  MISSED
	int32_t                                            Kerning;                                                    // 0x009C   (0x0004)  
	bool                                               bUseDistanceFieldAlpha : 1;                                 // 0x00A0:0 (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x00A1   (0x0003)  MISSED
	int32_t                                            DistanceFieldScaleFactor;                                   // 0x00A4   (0x0004)  
	float                                              DistanceFieldScanRadiusScale;                               // 0x00A8   (0x0004)  
	unsigned char                                      UnknownData06_7[0x4];                                       // 0x00AC   (0x0004)  MISSED
};

/// Class /Script/Engine.Font
/// Size: 0x01B0 (432 bytes) (0x000030 - 0x0001E0) align 8 pad: 0x0000
class UFont : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0030   (0x0008)  MISSED
	EFontCacheType                                     FontCacheType;                                              // 0x0038   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0039   (0x0007)  MISSED
	TArray<FFontCharacter>                             Characters;                                                 // 0x0040   (0x0010)  
	TArray<class UTexture2D*>                          Textures;                                                   // 0x0050   (0x0010)  
	int32_t                                            IsRemapped;                                                 // 0x0060   (0x0004)  
	float                                              EmScale;                                                    // 0x0064   (0x0004)  
	float                                              Ascent;                                                     // 0x0068   (0x0004)  
	float                                              Descent;                                                    // 0x006C   (0x0004)  
	float                                              Leading;                                                    // 0x0070   (0x0004)  
	int32_t                                            Kerning;                                                    // 0x0074   (0x0004)  
	FFontImportOptionsData                             ImportOptions;                                              // 0x0078   (0x00B0)  
	int32_t                                            NumCharacters;                                              // 0x0128   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x012C   (0x0004)  MISSED
	TArray<int32_t>                                    MaxCharHeight;                                              // 0x0130   (0x0010)  
	float                                              ScalingFactor;                                              // 0x0140   (0x0004)  
	int32_t                                            LegacyFontSize;                                             // 0x0144   (0x0004)  
	FName                                              LegacyFontName;                                             // 0x0148   (0x000C)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0154   (0x0004)  MISSED
	FCompositeFont                                     CompositeFont;                                              // 0x0158   (0x0038)  
	unsigned char                                      UnknownData04_7[0x50];                                      // 0x0190   (0x0050)  MISSED
};

/// Class /Script/Engine.FontFace
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000060) align 8 pad: 0x0000
class UFontFace : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0030   (0x0008)  MISSED
	FString                                            SourceFilename;                                             // 0x0038   (0x0010)  
	EFontHinting                                       Hinting;                                                    // 0x0048   (0x0001)  
	EFontLoadingPolicy                                 LoadingPolicy;                                              // 0x0049   (0x0001)  
	EFontLayoutMethod                                  LayoutMethod;                                               // 0x004A   (0x0001)  
	unsigned char                                      UnknownData01_7[0x15];                                      // 0x004B   (0x0015)  MISSED
};

/// Class /Script/Engine.FontImportOptions
/// Size: 0x00B0 (176 bytes) (0x000030 - 0x0000E0) align 8 pad: 0x0000
class UFontImportOptions : public UObject
{ 
public:
	FFontImportOptionsData                             Data;                                                       // 0x0030   (0x00B0)  
};

/// Struct /Script/Engine.ForceFeedbackAttenuationSettings
/// Size: 0x0000 (0 bytes) (0x0000B0 - 0x0000B0) align 8 pad: 0x0000
struct FForceFeedbackAttenuationSettings : FBaseAttenuationSettings
{ 
};

/// Class /Script/Engine.ForceFeedbackAttenuation
/// Size: 0x00B0 (176 bytes) (0x000030 - 0x0000E0) align 8 pad: 0x0000
class UForceFeedbackAttenuation : public UObject
{ 
public:
	FForceFeedbackAttenuationSettings                  Attenuation;                                                // 0x0030   (0x00B0)  
};

/// Class /Script/Engine.ForceFeedbackComponent
/// Size: 0x00E8 (232 bytes) (0x000218 - 0x000300) align 16 pad: 0x0000
class UForceFeedbackComponent : public USceneComponent
{ 
public:
	class UForceFeedbackEffect*                        ForceFeedbackEffect;                                        // 0x0218   (0x0008)  
	bool                                               bAutoDestroy : 1;                                           // 0x0220:0 (0x0001)  
	bool                                               bStopWhenOwnerDestroyed : 1;                                // 0x0220:1 (0x0001)  
	bool                                               bLooping : 1;                                               // 0x0220:2 (0x0001)  
	bool                                               bIgnoreTimeDilation : 1;                                    // 0x0220:3 (0x0001)  
	bool                                               bOverrideAttenuation : 1;                                   // 0x0220:4 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0221   (0x0003)  MISSED
	float                                              IntensityMultiplier;                                        // 0x0224   (0x0004)  
	class UForceFeedbackAttenuation*                   AttenuationSettings;                                        // 0x0228   (0x0008)  
	FForceFeedbackAttenuationSettings                  AttenuationOverrides;                                       // 0x0230   (0x00B0)  
	SDK_UNDEFINED(16,146) /* FMulticastInlineDelegate */ __um(OnForceFeedbackFinished);                            // 0x02E0   (0x0010)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x02F0   (0x0010)  MISSED
	// void Stop();                                                                                                             // [0x462b1b0] Native|Public|BlueprintCallable 
	// void SetIntensityMultiplier(float NewIntensityMultiplier);                                                               // [0x462ae60] Final|Native|Public|BlueprintCallable 
	// void SetForceFeedbackEffect(class UForceFeedbackEffect* NewForceFeedbackEffect);                                         // [0x462add0] Final|Native|Public|BlueprintCallable 
	// void Play(float StartTime);                                                                                              // [0x3c2e380] Native|Public|BlueprintCallable 
	// bool BP_GetAttenuationSettingsToApply(FForceFeedbackAttenuationSettings& OutAttenuationSettings);                        // [0x4629dd0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// void AdjustAttenuation(FForceFeedbackAttenuationSettings& InAttenuationSettings);                                        // [0x4629ca0] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.GameEngine
/// Size: 0x0050 (80 bytes) (0x0011F0 - 0x001240) align 8 pad: 0x0000
class UGameEngine : public UEngine
{ 
public:
	float                                              MaxDeltaTime;                                               // 0x11F0   (0x0004)  
	float                                              ServerFlushLogInterval;                                     // 0x11F4   (0x0004)  
	class UGameInstance*                               GameInstance;                                               // 0x11F8   (0x0008)  
	unsigned char                                      UnknownData00_7[0x40];                                      // 0x1200   (0x0040)  MISSED
};

/// Class /Script/Engine.GameNetworkManager
/// Size: 0x00B0 (176 bytes) (0x0002A8 - 0x000358) align 8 pad: 0x0000
class AGameNetworkManager : public AInfo
{ 
public:
	float                                              BadPacketLossThreshold;                                     // 0x02A8   (0x0004)  
	float                                              SeverePacketLossThreshold;                                  // 0x02AC   (0x0004)  
	int32_t                                            BadPingThreshold;                                           // 0x02B0   (0x0004)  
	int32_t                                            SeverePingThreshold;                                        // 0x02B4   (0x0004)  
	int32_t                                            AdjustedNetSpeed;                                           // 0x02B8   (0x0004)  
	float                                              LastNetSpeedUpdateTime;                                     // 0x02BC   (0x0004)  
	int32_t                                            TotalNetBandwidth;                                          // 0x02C0   (0x0004)  
	int32_t                                            MinDynamicBandwidth;                                        // 0x02C4   (0x0004)  
	int32_t                                            MaxDynamicBandwidth;                                        // 0x02C8   (0x0004)  
	bool                                               bIsStandbyCheckingEnabled : 1;                              // 0x02CC:0 (0x0001)  
	bool                                               bHasStandbyCheatTriggered : 1;                              // 0x02CC:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x02CD   (0x0003)  MISSED
	float                                              StandbyRxCheatTime;                                         // 0x02D0   (0x0004)  
	float                                              StandbyTxCheatTime;                                         // 0x02D4   (0x0004)  
	float                                              PercentMissingForRxStandby;                                 // 0x02D8   (0x0004)  
	float                                              PercentMissingForTxStandby;                                 // 0x02DC   (0x0004)  
	float                                              PercentForBadPing;                                          // 0x02E0   (0x0004)  
	float                                              JoinInProgressStandbyWaitTime;                              // 0x02E4   (0x0004)  
	float                                              MoveRepSize;                                                // 0x02E8   (0x0004)  
	float                                              MAXPOSITIONERRORSQUARED;                                    // 0x02EC   (0x0004)  
	float                                              MAXNEARZEROVELOCITYSQUARED;                                 // 0x02F0   (0x0004)  
	float                                              CLIENTADJUSTUPDATECOST;                                     // 0x02F4   (0x0004)  
	float                                              MAXCLIENTUPDATEINTERVAL;                                    // 0x02F8   (0x0004)  
	float                                              MaxClientForcedUpdateDuration;                              // 0x02FC   (0x0004)  
	float                                              ServerForcedUpdateHitchThreshold;                           // 0x0300   (0x0004)  
	float                                              ServerForcedUpdateHitchCooldown;                            // 0x0304   (0x0004)  
	float                                              MaxMoveDeltaTime;                                           // 0x0308   (0x0004)  
	float                                              MaxClientSmoothingDeltaTime;                                // 0x030C   (0x0004)  
	float                                              ClientNetSendMoveDeltaTime;                                 // 0x0310   (0x0004)  
	float                                              ClientNetSendMoveDeltaTimeThrottled;                        // 0x0314   (0x0004)  
	float                                              ClientNetSendMoveDeltaTimeStationary;                       // 0x0318   (0x0004)  
	int32_t                                            ClientNetSendMoveThrottleAtNetSpeed;                        // 0x031C   (0x0004)  
	int32_t                                            ClientNetSendMoveThrottleOverPlayerCount;                   // 0x0320   (0x0004)  
	bool                                               ClientAuthorativePosition;                                  // 0x0324   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0325   (0x0003)  MISSED
	float                                              ClientErrorUpdateRateLimit;                                 // 0x0328   (0x0004)  
	float                                              ClientNetCamUpdateDeltaTime;                                // 0x032C   (0x0004)  
	float                                              ClientNetCamUpdatePositionLimit;                            // 0x0330   (0x0004)  
	bool                                               bMovementTimeDiscrepancyDetection;                          // 0x0334   (0x0001)  
	bool                                               bMovementTimeDiscrepancyResolution;                         // 0x0335   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x0336   (0x0002)  MISSED
	float                                              MovementTimeDiscrepancyMaxTimeMargin;                       // 0x0338   (0x0004)  
	float                                              MovementTimeDiscrepancyMinTimeMargin;                       // 0x033C   (0x0004)  
	float                                              MovementTimeDiscrepancyResolutionRate;                      // 0x0340   (0x0004)  
	float                                              MovementTimeDiscrepancyDriftAllowance;                      // 0x0344   (0x0004)  
	bool                                               bMovementTimeDiscrepancyForceCorrectionsDuringResolution;   // 0x0348   (0x0001)  
	bool                                               bUseDistanceBasedRelevancy;                                 // 0x0349   (0x0001)  
	unsigned char                                      UnknownData03_7[0xE];                                       // 0x034A   (0x000E)  MISSED
};

/// Class /Script/Engine.GameplayStatics
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UGameplayStatics : public UBlueprintFunctionLibrary
{ 
public:
	// void UpdatePostProcessVolumeDepthFile(class UObject* WorldContextObject, FString TagName, float focalDepth, float focalOffset, float maxDepth, float blurRadias, float edgeBias, float farTransition, float nearTransition); // [0x4638ab0] Final|Native|Static|Public|BlueprintCallable 
	// void UnloadStreamLevelBySoftObjectPtr(class UObject* WorldContextObject, TWeakObjectPtr<UWorld*> Level, FLatentActionInfo LatentInfo, bool bShouldBlockOnUnload); // [0x46388b0] Final|Native|Static|Public|BlueprintCallable 
	// void UnloadStreamLevel(class UObject* WorldContextObject, FName LevelName, FLatentActionInfo LatentInfo, bool bShouldBlockOnUnload); // [0x4638730] Final|Native|Static|Public|BlueprintCallable 
	// bool SuggestProjectileVelocity_CustomArc(class UObject* WorldContextObject, FVector& OutLaunchVelocity, FVector StartPos, FVector EndPos, float OverrideGravityZ, float ArcParam); // [0x4638540] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// class UAudioComponent* SpawnSoundAttached(class USoundBase* Sound, class USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy); // [0x4638160] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// class UAudioComponent* SpawnSoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy); // [0x4637e50] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// class UAudioComponent* SpawnSound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy); // [0x4637bf0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// class UObject* SpawnObject(class UClass* ObjectClass, class UObject* Outer);                                             // [0x4637b20] Final|Native|Static|Public|BlueprintCallable 
	// class UForceFeedbackComponent* SpawnForceFeedbackAttached(class UForceFeedbackEffect* ForceFeedbackEffect, class USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, class UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy); // [0x4637770] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// class UForceFeedbackComponent* SpawnForceFeedbackAtLocation(class UObject* WorldContextObject, class UForceFeedbackEffect* ForceFeedbackEffect, FVector Location, FRotator Rotation, bool bLooping, float IntensityMultiplier, float StartTime, class UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy); // [0x46374b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// class UParticleSystemComponent* SpawnEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, FVector Scale, TEnumAsByte<EAttachLocation> LocationType, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, bool bAutoActivate); // [0x4637190] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// class UParticleSystemComponent* SpawnEmitterAtLocation(class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, FVector Location, FRotator Rotation, FVector Scale, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, bool bAutoActivateSystem); // [0x4636f10] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// class UAudioComponent* SpawnDialogueAttached(class UDialogueWave* Dialogue, FDialogueContext& Context, class USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, bool bAutoDestroy); // [0x4636af0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// class UAudioComponent* SpawnDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, FDialogueContext& Context, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, bool bAutoDestroy); // [0x46367d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// class UAudioComponent* SpawnDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy); // [0x46365a0] Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable 
	// class UDecalComponent* SpawnDecalAttached(class UMaterialInterface* DecalMaterial, FVector DecalSize, class USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, TEnumAsByte<EAttachLocation> LocationType, float LifeSpan); // [0x4636300] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// class UDecalComponent* SpawnDecalAtLocation(class UObject* WorldContextObject, class UMaterialInterface* DecalMaterial, FVector DecalSize, FVector Location, FRotator Rotation, float LifeSpan); // [0x4636100] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// void SetWorldOriginLocation(class UObject* WorldContextObject, FIntVector NewLocation);                                  // [0x4636030] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// void SetViewportMouseCaptureMode(class UObject* WorldContextObject, EMouseCaptureMode MouseCaptureMode);                 // [0x4635f70] Final|Native|Static|Public|BlueprintCallable 
	// void SetSubtitlesEnabled(bool bEnabled);                                                                                 // [0x4635ef0] Final|Native|Static|Public|BlueprintCallable 
	// void SetSoundMixClassOverride(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren); // [0x4635cd0] Final|Native|Static|Public|BlueprintCallable 
	// void SetSoundClassDistanceScale(class UObject* WorldContextObject, class USoundClass* SoundClass, float DistanceAttenuationScale, float TimeSec); // [0x4635b80] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// void SetPlayerControllerID(class APlayerController* Player, int32_t ControllerId);                                       // [0x4635ac0] Final|Native|Static|Public|BlueprintCallable 
	// void SetMaxAudioChannelsScaled(class UObject* WorldContextObject, float MaxChannelCountScale);                           // [0x4635a00] Final|Native|Static|Public|BlueprintCallable 
	// void SetGlobalTimeDilation(class UObject* WorldContextObject, float TimeDilation);                                       // [0x4635940] Final|Native|Static|Public|BlueprintCallable 
	// void SetGlobalPitchModulation(class UObject* WorldContextObject, float PitchModulation, float TimeSec);                  // [0x4635840] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// void SetGlobalListenerFocusParameters(class UObject* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale); // [0x46355a0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// bool SetGamePaused(class UObject* WorldContextObject, bool bPaused);                                                     // [0x46354d0] Final|Native|Static|Public|BlueprintCallable 
	// void SetForceDisableSplitscreen(class UObject* WorldContextObject, bool bDisable);                                       // [0x4635410] Final|Native|Static|Public|BlueprintCallable 
	// void SetEnableWorldRendering(class UObject* WorldContextObject, bool bEnable);                                           // [0x4635350] Final|Native|Static|Public|BlueprintCallable 
	// void SetBaseSoundMix(class UObject* WorldContextObject, class USoundMix* InSoundMix);                                    // [0x4635290] Final|Native|Static|Public|BlueprintCallable 
	// bool SaveGameToSlot(class USaveGame* SaveGameObject, FString SlotName, int32_t UserIndex);                               // [0x4635170] Final|Native|Static|Public|BlueprintCallable 
	// void RemovePlayer(class APlayerController* Player, bool bDestroyPawn);                                                   // [0x46350b0] Final|Native|Static|Public|BlueprintCallable 
	// FVector RebaseZeroOriginOntoLocal(class UObject* WorldContextObject, FVector WorldLocation);                             // [0x4634fc0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector RebaseLocalOriginOntoZero(class UObject* WorldContextObject, FVector WorldLocation);                             // [0x4634ed0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// void PushSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier);                       // [0x4634e10] Final|Native|Static|Public|BlueprintCallable 
	// bool ProjectWorldToScreen(class APlayerController* Player, FVector& WorldPosition, FVector2D& ScreenPosition, bool bPlayerViewportRelative); // [0x4634cb0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void PrimeSound(class USoundBase* InSound);                                                                              // [0x4634c30] Final|Native|Static|Public|BlueprintCallable 
	// void PopSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier);                        // [0x4634b70] Final|Native|Static|Public|BlueprintCallable 
	// void PlayWorldCameraShakeWithModifier(class UObject* WorldContextObject, class UClass* Shake, FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter, float ShakeModifier); // [0x4634900] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// void PlayWorldCameraShake(class UObject* WorldContextObject, class UClass* Shake, FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter); // [0x46346d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// void PlaySoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, class AActor* OwningActor); // [0x46343c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// void PlaySound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, class AActor* OwningActor, bool bIsUISound); // [0x4634160] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// void PlayDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, FDialogueContext& Context, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings); // [0x4633e80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void PlayDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime); // [0x4633c90] Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable 
	// FString ParseOption(FString Options, FString Key);                                                                       // [0x4633b10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void OpenLevelBySoftObjectPtr(class UObject* WorldContextObject, TWeakObjectPtr<UWorld*> Level, bool bAbsolute, FString Options); // [0x46338f0] Final|Native|Static|Public|BlueprintCallable 
	// void OpenLevel(class UObject* WorldContextObject, FName LevelName, bool bAbsolute, FString Options);                     // [0x4633740] Final|Native|Static|Public|BlueprintCallable 
	// FHitResult MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, FVector Location, FVector ImpactPoint, FVector Normal, FVector ImpactNormal, class UPhysicalMaterial* PhysMat, class AActor* HitActor, class UPrimitiveComponent* HitComponent, FName HitBoneName, int32_t HitItem, int32_t FaceIndex, FVector TraceStart, FVector TraceEnd); // [0x46331b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// void LoadStreamLevelBySoftObjectPtr(class UObject* WorldContextObject, TWeakObjectPtr<UWorld*> Level, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, FLatentActionInfo LatentInfo); // [0x4632f60] Final|Native|Static|Public|BlueprintCallable 
	// void LoadStreamLevel(class UObject* WorldContextObject, FName LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, FLatentActionInfo LatentInfo); // [0x4632d80] Final|Native|Static|Public|BlueprintCallable 
	// class USaveGame* LoadGameFromSlot(FString SlotName, int32_t UserIndex);                                                  // [0x4632ca0] Final|Native|Static|Public|BlueprintCallable 
	// bool IsSplitscreenForceDisabled(class UObject* WorldContextObject);                                                      // [0x4632c10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool IsGamePaused(class UObject* WorldContextObject);                                                                    // [0x4632b80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool HasOption(FString Options, FString InKey);                                                                          // [0x4632a40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool HasLaunchOption(FString OptionToCheck);                                                                             // [0x46329a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t GrassOverlappingSphereCount(class UObject* WorldContextObject, class UStaticMesh* StaticMesh, FVector CenterPosition, float Radius); // [0x4632840] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// FIntVector GetWorldOriginLocation(class UObject* WorldContextObject);                                                    // [0x46327a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float GetWorldDeltaSeconds(class UObject* WorldContextObject);                                                           // [0x4632710] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool GetWorldCameraTransform(class UWorld* InWorld, FTransform& OutCameraTransform);                                     // [0x46325f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool GetWorldCameraLocation(class UWorld* InWorld, FVector& OutCameraLocation);                                          // [0x4632520] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void GetViewProjectionMatrix(FMinimalViewInfo DesiredView, FMatrix& ViewMatrix, FMatrix& ProjectionMatrix, FMatrix& ViewProjectionMatrix); // [0x4632170] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// EMouseCaptureMode GetViewportMouseCaptureMode(class UObject* WorldContextObject);                                        // [0x4632490] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float GetUnpausedTimeSeconds(class UObject* WorldContextObject);                                                         // [0x46320e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float GetTimeSeconds(class UObject* WorldContextObject);                                                                 // [0x4632050] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// TEnumAsByte<EPhysicalSurface> GetSurfaceType(FHitResult& Hit);                                                           // [0x4631f70] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// class ULevelStreaming* GetStreamingLevel(class UObject* WorldContextObject, FName PackageName);                          // [0x4631e80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float GetRealTimeSeconds(class UObject* WorldContextObject);                                                             // [0x4631df0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// class APawn* GetPlayerPawn(class UObject* WorldContextObject, int32_t PlayerIndex);                                      // [0x4631d20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t GetPlayerControllerID(class APlayerController* Player);                                                          // [0x4631c90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// class APlayerController* GetPlayerControllerFromID(class UObject* WorldContextObject, int32_t ControllerId);             // [0x4631bc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// class APlayerController* GetPlayerController(class UObject* WorldContextObject, int32_t PlayerIndex);                    // [0x4631af0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// class ACharacter* GetPlayerCharacter(class UObject* WorldContextObject, int32_t PlayerIndex);                            // [0x4631a20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// class APlayerCameraManager* GetPlayerCameraManager(class UObject* WorldContextObject, int32_t PlayerIndex);              // [0x4631950] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetPlatformName();                                                                                               // [0x16e73d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// class UClass* GetObjectClass(class UObject* Object);                                                                     // [0x46318c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t GetMaxAudioChannelCount(class UObject* WorldContextObject);                                                      // [0x4631830] Final|Native|Static|Public|BlueprintCallable 
	// void GetKeyValue(FString Pair, FString& Key, FString& Value);                                                            // [0x46316d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// int32_t GetIntOption(FString Options, FString Key, int32_t DefaultValue);                                                // [0x4631590] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float GetGlobalTimeDilation(class UObject* WorldContextObject);                                                          // [0x4631500] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// class AGameStateBase* GetGameState(class UObject* WorldContextObject);                                                   // [0x4631470] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// class AGameModeBase* GetGameMode(class UObject* WorldContextObject);                                                     // [0x46313e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// class UGameInstance* GetGameInstance(class UObject* WorldContextObject);                                                 // [0x4631350] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool GetEnableWorldRendering(class UObject* WorldContextObject);                                                         // [0x46312c0] Final|Native|Static|Public|BlueprintCallable 
	// class UReverbEffect* GetCurrentReverbEffect(class UObject* WorldContextObject);                                          // [0x4631230] Final|Native|Static|Public|BlueprintCallable 
	// FString GetCurrentLevelName(class UObject* WorldContextObject, bool bRemovePrefixString);                                // [0x4631120] Final|Native|Static|Public|BlueprintCallable 
	// bool GetClosestListenerLocation(class UObject* WorldContextObject, FVector& Location, float MaximumRange, bool bAllowAttenuationOverride, FVector& ListenerPosition); // [0x4630f50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// float GetAudioTimeSeconds(class UObject* WorldContextObject);                                                            // [0x4630ec0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void GetAllActorsWithTag(class UObject* WorldContextObject, FName Tag, TArray<AActor*>& OutActors);                      // [0x4630d80] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void GetAllActorsWithInterface(class UObject* WorldContextObject, class UClass* Interface, TArray<AActor*>& OutActors);  // [0x4630c60] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void GetAllActorsOfClassWithTag(class UObject* WorldContextObject, class UClass* ActorClass, FName Tag, TArray<AActor*>& OutActors); // [0x4630af0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void GetAllActorsOfClass(class UObject* WorldContextObject, class UClass* ActorClass, TArray<AActor*>& OutActors);       // [0x46309d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// class AActor* GetActorOfClassWithName(class UObject* WorldContextObject, class UClass* ActorClass, FString ActorName);   // [0x46308a0] Final|Native|Static|Public|BlueprintCallable 
	// class AActor* GetActorOfClass(class UObject* WorldContextObject, class UClass* ActorClass);                              // [0x46307d0] Final|Native|Static|Public|BlueprintCallable 
	// int32_t GetActorCountOfClass(class UObject* WorldContextObject, class UClass* ActorClass);                               // [0x4630700] Final|Native|Static|Public|BlueprintCallable 
	// void GetActorArrayBounds(TArray<AActor*>& Actors, bool bOnlyCollidingComponents, FVector& Center, FVector& BoxExtent);   // [0x4630570] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// FVector GetActorArrayAverageLocation(TArray<AActor*>& Actors);                                                           // [0x46304b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void GetAccurateRealTime(class UObject* WorldContextObject, int32_t& Seconds, float& PartialSeconds);                    // [0x4630380] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// void FlushLevelStreaming(class UObject* WorldContextObject);                                                             // [0x4630300] Final|Native|Static|Public|BlueprintCallable 
	// class AActor* FinishSpawningActor(class AActor* Actor, FTransform& SpawnTransform);                                      // [0x46301e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool FindCollisionUV(FHitResult& Hit, int32_t uvChannel, FVector2D& UV);                                                 // [0x4630060] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void EnableLiveStreaming(bool Enable);                                                                                   // [0x462ffe0] Final|Native|Static|Public|BlueprintCallable 
	// bool DoesSaveGameExist(FString SlotName, int32_t UserIndex);                                                             // [0x462ff00] Final|Native|Static|Public|BlueprintCallable 
	// bool DeprojectScreenToWorld(class APlayerController* Player, FVector2D& ScreenPosition, FVector& WorldPosition, FVector& WorldDirection); // [0x462fd90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool DeleteGameInSlot(FString SlotName, int32_t UserIndex);                                                              // [0x462fcb0] Final|Native|Static|Public|BlueprintCallable 
	// void DeactivateReverbEffect(class UObject* WorldContextObject, FName TagName);                                           // [0x462fbd0] Final|Native|Static|Public|BlueprintCallable 
	// class UAudioComponent* CreateSound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy); // [0x462f970] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// class USaveGame* CreateSaveGameObject(class UClass* SaveGameClass);                                                      // [0x462f8e0] Final|Native|Static|Public|BlueprintCallable 
	// class APlayerController* CreatePlayer(class UObject* WorldContextObject, int32_t ControllerId, bool bSpawnPlayerController); // [0x462f7e0] Final|Native|Static|Public|BlueprintCallable 
	// void ClearSoundMixModifiers(class UObject* WorldContextObject);                                                          // [0x462f760] Final|Native|Static|Public|BlueprintCallable 
	// void ClearSoundMixClassOverride(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float FadeOutTime); // [0x462f610] Final|Native|Static|Public|BlueprintCallable 
	// void CancelAsyncLoading();                                                                                               // [0x462f5f0] Final|Native|Static|Public|BlueprintCallable 
	// void BreakHitResult(FHitResult& Hit, bool& bBlockingHit, bool& bInitialOverlap, float& Time, float& Distance, FVector& Location, FVector& ImpactPoint, FVector& Normal, FVector& ImpactNormal, class UPhysicalMaterial*& PhysMat, class AActor*& HitActor, class UPrimitiveComponent*& HitComponent, FName& HitBoneName, int32_t& HitItem, int32_t& FaceIndex, FVector& TraceStart, FVector& TraceEnd); // [0x462efc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool BlueprintSuggestProjectileVelocity(class UObject* WorldContextObject, FVector& TossVelocity, FVector StartLocation, FVector EndLocation, float LaunchSpeed, float OverrideGravityZ, TEnumAsByte<ESuggestProjVelocityTraceOption> TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug); // [0x462df70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool Blueprint_PredictProjectilePath_ByTraceChannel(class UObject* WorldContextObject, FHitResult& OutHit, TArray<FVector>& OutPathPositions, FVector& OutLastTraceDestination, FVector StartPos, FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ); // [0x462ea50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool Blueprint_PredictProjectilePath_ByObjectType(class UObject* WorldContextObject, FHitResult& OutHit, TArray<FVector>& OutPathPositions, FVector& OutLastTraceDestination, FVector StartPos, FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ); // [0x462e4c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool Blueprint_PredictProjectilePath_Advanced(class UObject* WorldContextObject, FPredictProjectilePathParams& PredictParams, FPredictProjectilePathResult& PredictResult); // [0x462e290] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// class AActor* BeginSpawningActorFromClass(class UObject* WorldContextObject, class UClass* ActorClass, FTransform& SpawnTransform, bool bNoCollisionFail, class AActor* Owner); // [0x462dd60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// class AActor* BeginSpawningActorFromBlueprint(class UObject* WorldContextObject, class UBlueprint* Blueprint, FTransform& SpawnTransform, bool bNoCollisionFail); // [0x462dbb0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// class AActor* BeginDeferredActorSpawnFromClass(class UObject* WorldContextObject, class UClass* ActorClass, FTransform& SpawnTransform, ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, class AActor* Owner); // [0x462d9b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool AreSubtitlesEnabled();                                                                                              // [0x462d980] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool AreAnyListenersWithinRange(class UObject* WorldContextObject, FVector& Location, float MaximumRange);               // [0x462d860] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool ApplyRadialDamageWithFalloff(class UObject* WorldContextObject, float BaseDamage, float MinimumDamage, FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class UClass* DamageTypeClass, TArray<AActor*>& IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, TEnumAsByte<ECollisionChannel> DamagePreventionChannel); // [0x462d4c0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool ApplyRadialDamage(class UObject* WorldContextObject, float BaseDamage, FVector& Origin, float DamageRadius, class UClass* DamageTypeClass, TArray<AActor*>& IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, bool bDoFullDamage, TEnumAsByte<ECollisionChannel> DamagePreventionChannel); // [0x462d1b0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// float ApplyPointDamage(class AActor* DamagedActor, float BaseDamage, FVector& HitFromDirection, FHitResult& HitInfo, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass); // [0x462cf30] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// float ApplyDamage(class AActor* DamagedActor, float BaseDamage, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass); // [0x462cd90] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// void AnnounceAccessibleString(FString AnnouncementString);                                                               // [0x462cd00] Final|Native|Static|Public|BlueprintCallable 
	// void ActivateReverbEffect(class UObject* WorldContextObject, class UReverbEffect* ReverbEffect, FName TagName, float Priority, float Volume, float FadeTime); // [0x462cb20] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.GameSession
/// Size: 0x0020 (32 bytes) (0x0002A8 - 0x0002C8) align 8 pad: 0x0000
class AGameSession : public AInfo
{ 
public:
	int32_t                                            MaxSpectators;                                              // 0x02A8   (0x0004)  
	int32_t                                            MaxPlayers;                                                 // 0x02AC   (0x0004)  
	int32_t                                            MaxPartySize;                                               // 0x02B0   (0x0004)  
	char                                               MaxSplitscreensPerConnection;                               // 0x02B4   (0x0001)  
	bool                                               bRequiresPushToTalk;                                        // 0x02B5   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x02B6   (0x0002)  MISSED
	FName                                              SessionName;                                                // 0x02B8   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x02C4   (0x0004)  MISSED
};

/// Class /Script/Engine.GameUserSettings
/// Size: 0x00F8 (248 bytes) (0x000030 - 0x000128) align 8 pad: 0x0000
class UGameUserSettings : public UObject
{ 
public:
	bool                                               bUseVSync;                                                  // 0x0030   (0x0001)  
	bool                                               bUseDynamicResolution;                                      // 0x0031   (0x0001)  
	unsigned char                                      UnknownData00_6[0x56];                                      // 0x0032   (0x0056)  MISSED
	uint32_t                                           ResolutionSizeX;                                            // 0x0088   (0x0004)  
	uint32_t                                           ResolutionSizeY;                                            // 0x008C   (0x0004)  
	uint32_t                                           LastUserConfirmedResolutionSizeX;                           // 0x0090   (0x0004)  
	uint32_t                                           LastUserConfirmedResolutionSizeY;                           // 0x0094   (0x0004)  
	int32_t                                            WindowPosX;                                                 // 0x0098   (0x0004)  
	int32_t                                            WindowPosY;                                                 // 0x009C   (0x0004)  
	int32_t                                            FullscreenMode;                                             // 0x00A0   (0x0004)  
	int32_t                                            GameQualitySettingLevel;                                    // 0x00A4   (0x0004)  
	int32_t                                            LastConfirmedFullscreenMode;                                // 0x00A8   (0x0004)  
	int32_t                                            PreferredFullscreenMode;                                    // 0x00AC   (0x0004)  
	uint32_t                                           Version;                                                    // 0x00B0   (0x0004)  
	int32_t                                            AudioQualityLevel;                                          // 0x00B4   (0x0004)  
	int32_t                                            LastConfirmedAudioQualityLevel;                             // 0x00B8   (0x0004)  
	float                                              FrameRateLimit;                                             // 0x00BC   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00C0   (0x0004)  MISSED
	int32_t                                            DesiredScreenWidth;                                         // 0x00C4   (0x0004)  
	bool                                               bUseDesiredScreenHeight;                                    // 0x00C8   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x00C9   (0x0003)  MISSED
	int32_t                                            DesiredScreenHeight;                                        // 0x00CC   (0x0004)  
	int32_t                                            LastUserConfirmedDesiredScreenWidth;                        // 0x00D0   (0x0004)  
	int32_t                                            LastUserConfirmedDesiredScreenHeight;                       // 0x00D4   (0x0004)  
	float                                              LastRecommendedScreenWidth;                                 // 0x00D8   (0x0004)  
	float                                              LastRecommendedScreenHeight;                                // 0x00DC   (0x0004)  
	float                                              LastCPUBenchmarkResult;                                     // 0x00E0   (0x0004)  
	float                                              LastGPUBenchmarkResult;                                     // 0x00E4   (0x0004)  
	TArray<float>                                      LastCPUBenchmarkSteps;                                      // 0x00E8   (0x0010)  
	TArray<float>                                      LastGPUBenchmarkSteps;                                      // 0x00F8   (0x0010)  
	float                                              LastGPUBenchmarkMultiplier;                                 // 0x0108   (0x0004)  
	bool                                               bUseHDRDisplayOutput;                                       // 0x010C   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x010D   (0x0003)  MISSED
	int32_t                                            HDRDisplayOutputNits;                                       // 0x0110   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0114   (0x0004)  MISSED
	SDK_UNDEFINED(16,147) /* FMulticastInlineDelegate */ __um(OnGameUserSettingsUINeedsUpdate);                    // 0x0118   (0x0010)  
	// void ValidateSettings();                                                                                                 // [0x36333c0] Native|Public|BlueprintCallable 
	// bool SupportsHDRDisplayOutput();                                                                                         // [0x463c540] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void SetVSyncEnabled(bool bEnable);                                                                                      // [0x463c390] Final|Native|Public|BlueprintCallable 
	// void SetVisualEffectQuality(int32_t Value);                                                                              // [0x463c4b0] Final|Native|Public|BlueprintCallable 
	// void SetViewDistanceQuality(int32_t Value);                                                                              // [0x463c420] Final|Native|Public|BlueprintCallable 
	// void SetToDefaults();                                                                                                    // [0x3b993c0] Native|Public|BlueprintCallable 
	// void SetTextureQuality(int32_t Value);                                                                                   // [0x463c300] Final|Native|Public|BlueprintCallable 
	// void SetShadowQuality(int32_t Value);                                                                                    // [0x463c270] Final|Native|Public|BlueprintCallable 
	// void SetShadingQuality(int32_t Value);                                                                                   // [0x463c1e0] Final|Native|Public|BlueprintCallable 
	// void SetScreenResolution(FIntPoint Resolution);                                                                          // [0x463c160] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetResolutionScaleValueEx(float NewScaleValue);                                                                     // [0x463c0e0] Final|Native|Public|BlueprintCallable 
	// void SetResolutionScaleValue(int32_t NewScaleValue);                                                                     // [0x463c050] Final|Native|Public|BlueprintCallable 
	// void SetResolutionScaleNormalized(float NewScaleNormalized);                                                             // [0x463bfd0] Final|Native|Public|BlueprintCallable 
	// void SetPostProcessingQuality(int32_t Value);                                                                            // [0x463bf40] Final|Native|Public|BlueprintCallable 
	// void SetOverallScalabilityLevel(int32_t Value);                                                                          // [0x463beb0] Native|Public|BlueprintCallable 
	// void SetGameQualitySettingLevel(float InGameQualitySettingLevel);                                                        // [0x463be30] Final|Native|Public|BlueprintCallable 
	// void SetFullscreenMode(TEnumAsByte<EWindowMode> InFullscreenMode);                                                       // [0x463bdb0] Final|Native|Public|BlueprintCallable 
	// void SetFrameRateLimit(float NewLimit);                                                                                  // [0x463bd30] Final|Native|Public|BlueprintCallable 
	// void SetFoliageQuality(int32_t Value);                                                                                   // [0x463bca0] Final|Native|Public|BlueprintCallable 
	// void SetDynamicResolutionEnabled(bool bEnable);                                                                          // [0x463bc10] Final|Native|Public|BlueprintCallable 
	// void SetBenchmarkFallbackValues();                                                                                       // [0x463bbf0] Final|Native|Public|BlueprintCallable 
	// void SetAudioQualityLevel(int32_t QualityLevel);                                                                         // [0x463bb60] Final|Native|Public|BlueprintCallable 
	// void SetAntiAliasingQuality(int32_t Value);                                                                              // [0x463bad0] Final|Native|Public|BlueprintCallable 
	// void SaveSettings();                                                                                                     // [0x95a410] Native|Public|BlueprintCallable 
	// void RunHardwareBenchmark(int32_t WorkScale, float CPUMultiplier, float GPUMultiplier);                                  // [0x463b9d0] Native|Public|BlueprintCallable 
	// void RevertVideoMode();                                                                                                  // [0x463b9b0] Final|Native|Public|BlueprintCallable 
	// void ResetToCurrentSettings();                                                                                           // [0x95a430] Native|Public|BlueprintCallable 
	// void LoadSettings(bool bForceReload);                                                                                    // [0x463b8e0] Native|Public|BlueprintCallable 
	// bool IsVSyncEnabled();                                                                                                   // [0x463b8b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsVSyncDirty();                                                                                                     // [0x463b880] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsScreenResolutionDirty();                                                                                          // [0x463b850] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsHDREnabled();                                                                                                     // [0x463b820] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsFullscreenModeDirty();                                                                                            // [0x463b7f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsDynamicResolutionEnabled();                                                                                       // [0x463b7c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsDynamicResolutionDirty();                                                                                         // [0x463b790] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsDirty();                                                                                                          // [0x3656730] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetVisualEffectQuality();                                                                                        // [0x463b700] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetViewDistanceQuality();                                                                                        // [0x463b6d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetTextureQuality();                                                                                             // [0x463b6a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetSyncInterval();                                                                                               // [0x463b670] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t GetShadowQuality();                                                                                              // [0x174f490] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetShadingQuality();                                                                                             // [0x463b640] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FIntPoint GetScreenResolution();                                                                                         // [0x463b5c0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// float GetResolutionScaleNormalized();                                                                                    // [0x463b590] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void GetResolutionScaleInformationEx(float& CurrentScaleNormalized, float& CurrentScaleValue, float& MinScaleValue, float& MaxScaleValue); // [0x463b3f0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// void GetResolutionScaleInformation(float& CurrentScaleNormalized, int32_t& CurrentScaleValue, int32_t& MinScaleValue, int32_t& MaxScaleValue); // [0x463b250] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// float GetRecommendedResolutionScale();                                                                                   // [0x463b210] Native|Public|BlueprintCallable 
	// TEnumAsByte<EWindowMode> GetPreferredFullscreenMode();                                                                   // [0x463b1e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetPostProcessingQuality();                                                                                      // [0x463b1b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetOverallScalabilityLevel();                                                                                    // [0x463b040] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FIntPoint GetLastConfirmedScreenResolution();                                                                            // [0x463b000] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// TEnumAsByte<EWindowMode> GetLastConfirmedFullscreenMode();                                                               // [0x463afd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UGameUserSettings* GetGameUserSettings();                                                                          // [0x463afa0] Final|Native|Static|Public|BlueprintCallable 
	// int32_t GetGameQualitySettingLevel();                                                                                    // [0x463af70] Final|Native|Public|BlueprintCallable 
	// TEnumAsByte<EWindowMode> GetFullscreenMode();                                                                            // [0x463af40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetFrameRateLimit();                                                                                               // [0x463af10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetFramePace();                                                                                                  // [0x463aee0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t GetFoliageQuality();                                                                                             // [0x463aeb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FIntPoint GetDesktopResolution();                                                                                        // [0x463ae70] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FIntPoint GetDefaultWindowPosition();                                                                                    // [0x463ae30] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// TEnumAsByte<EWindowMode> GetDefaultWindowMode();                                                                         // [0x463ae00] Final|Native|Static|Public|BlueprintCallable 
	// float GetDefaultResolutionScale();                                                                                       // [0x463adc0] Native|Public|BlueprintCallable 
	// FIntPoint GetDefaultResolution();                                                                                        // [0x463ad80] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// int32_t GetCurrentHDRDisplayNits();                                                                                      // [0x463ad50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetAudioQualityLevel();                                                                                          // [0x39953b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetAntiAliasingQuality();                                                                                        // [0x174f4f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void EnableHDRDisplayOutput(bool bEnable, int32_t DisplayNits);                                                          // [0x463ac80] Final|Native|Public|BlueprintCallable 
	// void ConfirmVideoMode();                                                                                                 // [0x3633570] Native|Public|BlueprintCallable 
	// void ApplySettings(bool bCheckForCommandLineOverrides);                                                                  // [0x463abf0] Native|Public|BlueprintCallable 
	// void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);                                                        // [0x463ab60] Final|Native|Public|BlueprintCallable 
	// void ApplyNonResolutionSettings();                                                                                       // [0x3633740] Native|Public|BlueprintCallable 
	// void ApplyHardwareBenchmarkResults();                                                                                    // [0x45c1a90] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SpotLight
/// Size: 0x0008 (8 bytes) (0x0002B8 - 0x0002C0) align 8 pad: 0x0000
class ASpotLight : public ALight
{ 
public:
	class USpotLightComponent*                         SpotLightComponent;                                         // 0x02B8   (0x0008)  
	// void SetOuterConeAngle(float NewOuterConeAngle);                                                                         // [0x4755b50] Final|Native|Public|BlueprintCallable 
	// void SetInnerConeAngle(float NewInnerConeAngle);                                                                         // [0x4755a50] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.GeneratedMeshAreaLight
/// Size: 0x0000 (0 bytes) (0x0002C0 - 0x0002C0) align 8 pad: 0x0000
class AGeneratedMeshAreaLight : public ASpotLight
{ 
public:
};

/// Class /Script/Engine.HapticFeedbackEffect_Base
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UHapticFeedbackEffect_Base : public UObject
{ 
public:
};

/// Class /Script/Engine.HapticFeedbackEffect_Buffer
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000070) align 8 pad: 0x0000
class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base
{ 
public:
	TArray<char>                                       Amplitudes;                                                 // 0x0030   (0x0010)  
	int32_t                                            SampleRate;                                                 // 0x0040   (0x0004)  
	unsigned char                                      UnknownData00_7[0x2C];                                      // 0x0044   (0x002C)  MISSED
};

/// Struct /Script/Engine.HapticFeedbackDetails_Curve
/// Size: 0x0110 (272 bytes) (0x000000 - 0x000110) align 8 pad: 0x0000
struct FHapticFeedbackDetails_Curve
{ 
	FRuntimeFloatCurve                                 Frequency;                                                  // 0x0000   (0x0088)  
	FRuntimeFloatCurve                                 Amplitude;                                                  // 0x0088   (0x0088)  
};

/// Class /Script/Engine.HapticFeedbackEffect_Curve
/// Size: 0x0110 (272 bytes) (0x000030 - 0x000140) align 8 pad: 0x0000
class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base
{ 
public:
	FHapticFeedbackDetails_Curve                       HapticDetails;                                              // 0x0030   (0x0110)  
};

/// Class /Script/Engine.HapticFeedbackEffect_SoundWave
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000068) align 8 pad: 0x0000
class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base
{ 
public:
	class USoundWave*                                  SoundWave;                                                  // 0x0030   (0x0008)  
	unsigned char                                      UnknownData00_7[0x30];                                      // 0x0038   (0x0030)  MISSED
};

/// Class /Script/Engine.HealthSnapshotBlueprintLibrary
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UHealthSnapshotBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
public:
	// void StopPerformanceSnapshots();                                                                                         // [0x463e770] Final|Exec|Native|Static|Public|BlueprintCallable 
	// void StartPerformanceSnapshots();                                                                                        // [0x463e750] Final|Exec|Native|Static|Public|BlueprintCallable 
	// void LogPerformanceSnapshot(FString SnapshotTitle, bool bResetStats);                                                    // [0x463e360] Final|Exec|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.WorldPartitionHLOD
/// Size: 0x0010 (16 bytes) (0x0002A8 - 0x0002B8) align 8 pad: 0x0000
class AWorldPartitionHLOD : public AActor
{ 
public:
	uint32_t                                           LODLevel;                                                   // 0x02A8   (0x0004)  
	FName                                              SourceCell;                                                 // 0x02AC   (0x000C)  
};

/// Class /Script/Engine.HLODEngineSubsystem
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UHLODEngineSubsystem : public UEngineSubsystem
{ 
public:
};

/// Class /Script/Engine.HLODLandscapeActor
/// Size: 0x0078 (120 bytes) (0x0002B8 - 0x000330) align 8 pad: 0x0000
class AHLODLandscapeActor : public AStaticMeshActor
{ 
public:
	int32_t                                            MaxProxiesShowCount;                                        // 0x02B8   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x02BC   (0x0004)  MISSED
	SDK_UNDEFINED(80,148) /* TMap<FName, int32_t> */   __um(ProxyRecordInfos);                                     // 0x02C0   (0x0050)  
	TArray<FSoftObjectPath>                            Resources;                                                  // 0x0310   (0x0010)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0320   (0x0010)  MISSED
};

/// Class /Script/Engine.HLODLandscapeLayer
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UHLODLandscapeLayer : public UObject
{ 
public:
};

/// Class /Script/Engine.HLODLandscapeSubsystem
/// Size: 0x00F0 (240 bytes) (0x000038 - 0x000128) align 8 pad: 0x0000
class UHLODLandscapeSubsystem : public UWorldSubsystem
{ 
public:
	unsigned char                                      UnknownData00_1[0xF0];                                      // 0x0038   (0x00F0)  MISSED
};

/// Class /Script/Engine.HLODLayer
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UHLODLayer : public UObject
{ 
public:
};

/// Struct /Script/Engine.HLODProxyMesh
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FHLODProxyMesh
{ 
	SDK_UNDEFINED(28,149) /* TLazyObjectPtr<ALODActor*> */ __um(LODActor);                                         // 0x0000   (0x001C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	class UStaticMesh*                                 StaticMesh;                                                 // 0x0020   (0x0008)  
	FName                                              Key;                                                        // 0x0028   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Class /Script/Engine.HLODProxy
/// Size: 0x0060 (96 bytes) (0x000030 - 0x000090) align 8 pad: 0x0000
class UHLODProxy : public UObject
{ 
public:
	TArray<FHLODProxyMesh>                             ProxyMeshes;                                                // 0x0030   (0x0010)  
	SDK_UNDEFINED(80,150) /* TMap<UHLODProxyDesc*, FHLODProxyMesh> */ __um(HLODActors);                            // 0x0040   (0x0050)  
};

/// Class /Script/Engine.HLODProxyDesc
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UHLODProxyDesc : public UObject
{ 
public:
};

/// Class /Script/Engine.HLODSubsystem
/// Size: 0x0050 (80 bytes) (0x000038 - 0x000088) align 8 pad: 0x0000
class UHLODSubsystem : public UWorldSubsystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x50];                                      // 0x0038   (0x0050)  MISSED
};

/// Class /Script/Engine.ImportanceSamplingLibrary
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UImportanceSamplingLibrary : public UBlueprintFunctionLibrary
{ 
public:
	// float RandomSobolFloat(int32_t Index, int32_t Dimension, float Seed);                                                    // [0x4644ad0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FVector RandomSobolCell3D(int32_t Index, int32_t NumCells, FVector Cell, FVector Seed);                                  // [0x4644920] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector2D RandomSobolCell2D(int32_t Index, int32_t NumCells, FVector2D Cell, FVector2D Seed);                            // [0x46447d0] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float NextSobolFloat(int32_t Index, int32_t Dimension, float PreviousValue);                                             // [0x4644620] Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FVector NextSobolCell3D(int32_t Index, int32_t NumCells, FVector PreviousValue);                                         // [0x46444f0] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector2D NextSobolCell2D(int32_t Index, int32_t NumCells, FVector2D PreviousValue);                                     // [0x46443f0] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FImportanceTexture MakeImportanceTexture(class UTexture2D* Texture, TEnumAsByte<EImportanceWeight> WeightingFunc);       // [0x4644210] Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void ImportanceSample(FImportanceTexture& Texture, FVector2D& Rand, int32_t Samples, float Intensity, FVector2D& SamplePosition, FLinearColor& SampleColor, float& SampleIntensity, float& SampleSize); // [0x4643e10] Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void BreakImportanceTexture(FImportanceTexture& ImportanceTexture, class UTexture2D*& Texture, TEnumAsByte<EImportanceWeight>& WeightingFunc); // [0x4641c20] Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.ImportantToggleSettingInterface
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UImportantToggleSettingInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.InGameAdManager
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UInGameAdManager : public UPlatformInterfaceBase
{ 
public:
	bool                                               bShouldPauseWhileAdOpen : 1;                                // 0x0040:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0041   (0x0007)  MISSED
	SDK_UNDEFINED(16,151) /* TArray<FDelegateProperty> */ __um(ClickedBannerDelegates);                            // 0x0048   (0x0010)  
	SDK_UNDEFINED(16,152) /* TArray<FDelegateProperty> */ __um(ClosedAdDelegates);                                 // 0x0058   (0x0010)  
};

/// Struct /Script/Engine.ComponentKey
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FComponentKey
{ 
	class UClass*                                      OwnerClass;                                                 // 0x0000   (0x0008)  
	FName                                              SCSVariableName;                                            // 0x0008   (0x000C)  
	FGuid                                              AssociatedGuid;                                             // 0x0014   (0x0010)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Struct /Script/Engine.BlueprintComponentChangedPropertyInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FBlueprintComponentChangedPropertyInfo
{ 
	FName                                              PropertyName;                                               // 0x0000   (0x000C)  
	int32_t                                            ArrayIndex;                                                 // 0x000C   (0x0004)  
	class UStruct*                                     PropertyScope;                                              // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.BlueprintCookedComponentInstancingData
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 pad: 0x0000
struct FBlueprintCookedComponentInstancingData
{ 
	TArray<FBlueprintComponentChangedPropertyInfo>     ChangedPropertyList;                                        // 0x0000   (0x0010)  
	unsigned char                                      UnknownData00_6[0x19];                                      // 0x0010   (0x0019)  MISSED
	bool                                               bHasValidCookedData;                                        // 0x0029   (0x0001)  
	unsigned char                                      UnknownData01_7[0x26];                                      // 0x002A   (0x0026)  MISSED
};

/// Struct /Script/Engine.ComponentOverrideRecord
/// Size: 0x0088 (136 bytes) (0x000000 - 0x000088) align 8 pad: 0x0000
struct FComponentOverrideRecord
{ 
	class UClass*                                      ComponentClass;                                             // 0x0000   (0x0008)  
	class UActorComponent*                             ComponentTemplate;                                          // 0x0008   (0x0008)  
	FComponentKey                                      ComponentKey;                                               // 0x0010   (0x0028)  
	FBlueprintCookedComponentInstancingData            CookedComponentInstancingData;                              // 0x0038   (0x0050)  
};

/// Class /Script/Engine.InheritableComponentHandler
/// Size: 0x0020 (32 bytes) (0x000030 - 0x000050) align 8 pad: 0x0000
class UInheritableComponentHandler : public UObject
{ 
public:
	TArray<FComponentOverrideRecord>                   Records;                                                    // 0x0030   (0x0010)  
	TArray<class UActorComponent*>                     UnnecessaryComponents;                                      // 0x0040   (0x0010)  
};

/// Class /Script/Engine.InputDelegateBinding
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UInputDelegateBinding : public UDynamicBlueprintBinding
{ 
public:
};

/// Struct /Script/Engine.BlueprintInputDelegateBinding
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FBlueprintInputDelegateBinding
{ 
	bool                                               bConsumeInput : 1;                                          // 0x0000:0 (0x0001)  
	bool                                               bExecuteWhenPaused : 1;                                     // 0x0000:1 (0x0001)  
	bool                                               bOverrideParentBinding : 1;                                 // 0x0000:2 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0001   (0x0003)  MISSED
};

/// Struct /Script/Engine.BlueprintInputActionDelegateBinding
/// Size: 0x001C (28 bytes) (0x000004 - 0x000020) align 4 pad: 0x0000
struct FBlueprintInputActionDelegateBinding : FBlueprintInputDelegateBinding
{ 
	FName                                              InputActionName;                                            // 0x0004   (0x000C)  
	TEnumAsByte<EInputEvent>                           InputKeyEvent;                                              // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0011   (0x0003)  MISSED
	FName                                              FunctionNameToBind;                                         // 0x0014   (0x000C)  
};

/// Class /Script/Engine.InputActionDelegateBinding
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UInputActionDelegateBinding : public UInputDelegateBinding
{ 
public:
	TArray<FBlueprintInputActionDelegateBinding>       InputActionDelegateBindings;                                // 0x0030   (0x0010)  
};

/// Struct /Script/Engine.BlueprintInputAxisDelegateBinding
/// Size: 0x0018 (24 bytes) (0x000004 - 0x00001C) align 4 pad: 0x0000
struct FBlueprintInputAxisDelegateBinding : FBlueprintInputDelegateBinding
{ 
	FName                                              InputAxisName;                                              // 0x0004   (0x000C)  
	FName                                              FunctionNameToBind;                                         // 0x0010   (0x000C)  
};

/// Class /Script/Engine.InputAxisDelegateBinding
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UInputAxisDelegateBinding : public UInputDelegateBinding
{ 
public:
	TArray<FBlueprintInputAxisDelegateBinding>         InputAxisDelegateBindings;                                  // 0x0030   (0x0010)  
};

/// Struct /Script/Engine.BlueprintInputAxisKeyDelegateBinding
/// Size: 0x0034 (52 bytes) (0x000004 - 0x000038) align 8 pad: 0x0000
struct FBlueprintInputAxisKeyDelegateBinding : FBlueprintInputDelegateBinding
{ 
	unsigned char                                      UnknownData00_3[0x4];                                       // 0x0004   (0x0004)  MISSED
	FKey                                               AxisKey;                                                    // 0x0008   (0x0020)  
	FName                                              FunctionNameToBind;                                         // 0x0028   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Class /Script/Engine.InputAxisKeyDelegateBinding
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
{ 
public:
	TArray<FBlueprintInputAxisKeyDelegateBinding>      InputAxisKeyDelegateBindings;                               // 0x0030   (0x0010)  
};

/// Struct /Script/Engine.CachedKeyToActionInfo
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align 8 pad: 0x0000
struct FCachedKeyToActionInfo
{ 
	class UPlayerInput*                                PlayerInput;                                                // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_7[0x68];                                      // 0x0008   (0x0068)  MISSED
};

/// Class /Script/Engine.InputComponent
/// Size: 0x0088 (136 bytes) (0x0000C0 - 0x000148) align 8 pad: 0x0000
class UInputComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_3[0x70];                                      // 0x00C0   (0x0070)  MISSED
	TArray<FCachedKeyToActionInfo>                     CachedKeyToActionInfo;                                      // 0x0130   (0x0010)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0140   (0x0008)  MISSED
	// bool WasControllerKeyJustReleased(FKey Key);                                                                             // [0x4644100] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// bool WasControllerKeyJustPressed(FKey Key);                                                                              // [0x4644100] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// bool IsControllerKeyDown(FKey Key);                                                                                      // [0x4644100] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// void GetTouchState(int32_t FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed);                  // [0x4643c90] Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// FVector GetControllerVectorKeyState(FKey Key);                                                                           // [0x4643950] Final|Native|Private|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// void GetControllerMouseDelta(float& DeltaX, float& DeltaY);                                                              // [0x4643870] Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// float GetControllerKeyTimeDown(FKey Key);                                                                                // [0x4643630] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// void GetControllerAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float& StickX, float& StickY);        // [0x4643740] Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// float GetControllerAnalogKeyState(FKey Key);                                                                             // [0x4643630] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.BlueprintInputKeyDelegateBinding
/// Size: 0x003C (60 bytes) (0x000004 - 0x000040) align 8 pad: 0x0000
struct FBlueprintInputKeyDelegateBinding : FBlueprintInputDelegateBinding
{ 
	unsigned char                                      UnknownData00_3[0x4];                                       // 0x0004   (0x0004)  MISSED
	FInputChord                                        InputChord;                                                 // 0x0008   (0x0028)  
	TEnumAsByte<EInputEvent>                           InputKeyEvent;                                              // 0x0030   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	FName                                              FunctionNameToBind;                                         // 0x0034   (0x000C)  
};

/// Class /Script/Engine.InputKeyDelegateBinding
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UInputKeyDelegateBinding : public UInputDelegateBinding
{ 
public:
	TArray<FBlueprintInputKeyDelegateBinding>          InputKeyDelegateBindings;                                   // 0x0030   (0x0010)  
};

/// Struct /Script/Engine.InputAxisProperties
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FInputAxisProperties
{ 
	float                                              DeadZone;                                                   // 0x0000   (0x0004)  
	float                                              Sensitivity;                                                // 0x0004   (0x0004)  
	float                                              Exponent;                                                   // 0x0008   (0x0004)  
	bool                                               bInvert : 1;                                                // 0x000C:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Struct /Script/Engine.InputAxisConfigEntry
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FInputAxisConfigEntry
{ 
	FName                                              AxisKeyName;                                                // 0x0000   (0x000C)  
	FInputAxisProperties                               AxisProperties;                                             // 0x000C   (0x0010)  
};

/// Struct /Script/Engine.InputActionKeyMapping
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FInputActionKeyMapping
{ 
	FName                                              ActionName;                                                 // 0x0000   (0x000C)  
	bool                                               bShift : 1;                                                 // 0x000C:0 (0x0001)  
	bool                                               bCtrl : 1;                                                  // 0x000C:1 (0x0001)  
	bool                                               bAlt : 1;                                                   // 0x000C:2 (0x0001)  
	bool                                               bCmd : 1;                                                   // 0x000C:3 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x000D   (0x0003)  MISSED
	FKey                                               Key;                                                        // 0x0010   (0x0020)  
};

/// Struct /Script/Engine.InputAxisKeyMapping
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FInputAxisKeyMapping
{ 
	FName                                              AxisName;                                                   // 0x0000   (0x000C)  
	float                                              Scale;                                                      // 0x000C   (0x0004)  
	FKey                                               Key;                                                        // 0x0010   (0x0020)  
};

/// Struct /Script/Engine.InputActionSpeechMapping
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FInputActionSpeechMapping
{ 
	FName                                              ActionName;                                                 // 0x0000   (0x000C)  
	FName                                              SpeechKeyword;                                              // 0x000C   (0x000C)  
};

/// Class /Script/Engine.InputSettings
/// Size: 0x0138 (312 bytes) (0x000030 - 0x000168) align 8 pad: 0x0000
class UInputSettings : public UObject
{ 
public:
	TArray<FInputAxisConfigEntry>                      AxisConfig;                                                 // 0x0030   (0x0010)  
	bool                                               bAltEnterTogglesFullscreen : 1;                             // 0x0040:0 (0x0001)  
	bool                                               bF11TogglesFullscreen : 1;                                  // 0x0040:1 (0x0001)  
	bool                                               bUseMouseForTouch : 1;                                      // 0x0040:2 (0x0001)  
	bool                                               bEnableMouseSmoothing : 1;                                  // 0x0040:3 (0x0001)  
	bool                                               bEnableFOVScaling : 1;                                      // 0x0040:4 (0x0001)  
	bool                                               bCaptureMouseOnLaunch : 1;                                  // 0x0040:5 (0x0001)  
	bool                                               bDefaultViewportMouseLock : 1;                              // 0x0040:6 (0x0001)  
	bool                                               bAlwaysShowTouchInterface : 1;                              // 0x0040:7 (0x0001)  
	bool                                               bShowConsoleOnFourFingerTap : 1;                            // 0x0041:0 (0x0001)  
	bool                                               bEnableGestureRecognizer : 1;                               // 0x0041:1 (0x0001)  
	bool                                               bUseAutocorrect;                                            // 0x0042   (0x0001)  
	unsigned char                                      UnknownData00_6[0x5];                                       // 0x0043   (0x0005)  MISSED
	TArray<FString>                                    ExcludedAutocorrectOS;                                      // 0x0048   (0x0010)  
	TArray<FString>                                    ExcludedAutocorrectCultures;                                // 0x0058   (0x0010)  
	TArray<FString>                                    ExcludedAutocorrectDeviceModels;                            // 0x0068   (0x0010)  
	EMouseCaptureMode                                  DefaultViewportMouseCaptureMode;                            // 0x0078   (0x0001)  
	EMouseLockMode                                     DefaultViewportMouseLockMode;                               // 0x0079   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x007A   (0x0002)  MISSED
	float                                              FOVScale;                                                   // 0x007C   (0x0004)  
	float                                              DoubleClickTime;                                            // 0x0080   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0084   (0x0004)  MISSED
	TArray<FInputActionKeyMapping>                     ActionMappings;                                             // 0x0088   (0x0010)  
	TArray<FInputAxisKeyMapping>                       AxisMappings;                                               // 0x0098   (0x0010)  
	TArray<FInputActionSpeechMapping>                  SpeechMappings;                                             // 0x00A8   (0x0010)  
	SDK_UNDEFINED(48,153) /* TWeakObjectPtr<UClass*> */ __um(DefaultPlayerInputClass);                             // 0x00B8   (0x0030)  
	SDK_UNDEFINED(48,154) /* TWeakObjectPtr<UClass*> */ __um(DefaultInputComponentClass);                          // 0x00E8   (0x0030)  
	FSoftObjectPath                                    DefaultTouchInterface;                                      // 0x0118   (0x0020)  
	FKey                                               ConsoleKey;                                                 // 0x0138   (0x0020)  
	TArray<FKey>                                       ConsoleKeys;                                                // 0x0158   (0x0010)  
	// void SetGameIsFakingTouchEvents(bool bIsFaking);                                                                         // [0x4649090] Final|Native|Static|Public|BlueprintCallable 
	// void SaveKeyMappings();                                                                                                  // [0x4648e40] Final|Native|Public|BlueprintCallable 
	// void RemoveAxisMapping(FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps);                                     // [0x4648bc0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void RemoveActionMapping(FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps);                                 // [0x4648a00] Final|Native|Public|HasOutParms|BlueprintCallable 
	// class UInputSettings* GetInputSettings();                                                                                // [0x46484f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void GetAxisNames(TArray<FName>& AxisNames);                                                                             // [0x4648410] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// void GetAxisMappingByName(FName InAxisName, TArray<FInputAxisKeyMapping>& OutMappings);                                  // [0x46482b0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// void GetActionNames(TArray<FName>& ActionNames);                                                                         // [0x4648200] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// void GetActionMappingByName(FName InActionName, TArray<FInputActionKeyMapping>& OutMappings);                            // [0x46480a0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// void ForceRebuildKeymaps();                                                                                              // [0x4648080] Final|Native|Public|BlueprintCallable 
	// void AddAxisMapping(FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps);                                        // [0x46474e0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void AddActionMapping(FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps);                                    // [0x4647320] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Struct /Script/Engine.BlueprintInputTouchDelegateBinding
/// Size: 0x0010 (16 bytes) (0x000004 - 0x000014) align 4 pad: 0x0000
struct FBlueprintInputTouchDelegateBinding : FBlueprintInputDelegateBinding
{ 
	TEnumAsByte<EInputEvent>                           InputKeyEvent;                                              // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0005   (0x0003)  MISSED
	FName                                              FunctionNameToBind;                                         // 0x0008   (0x000C)  
};

/// Class /Script/Engine.InputTouchDelegateBinding
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UInputTouchDelegateBinding : public UInputDelegateBinding
{ 
public:
	TArray<FBlueprintInputTouchDelegateBinding>        InputTouchDelegateBindings;                                 // 0x0030   (0x0010)  
};

/// Class /Script/Engine.InputVectorAxisDelegateBinding
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
{ 
public:
};

/// Class /Script/Engine.Interface_AssetUserData
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UInterface_AssetUserData : public UInterface
{ 
public:
};

/// Class /Script/Engine.BoneReferenceSkeletonProvider
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UBoneReferenceSkeletonProvider : public UInterface
{ 
public:
};

/// Class /Script/Engine.Interface_CollisionDataProvider
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UInterface_CollisionDataProvider : public UInterface
{ 
public:
};

/// Class /Script/Engine.Interface_PostProcessVolume
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UInterface_PostProcessVolume : public UInterface
{ 
public:
};

/// Class /Script/Engine.Interface_PreviewMeshProvider
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UInterface_PreviewMeshProvider : public UInterface
{ 
public:
};

/// Struct /Script/Engine.CurveEdEntry
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FCurveEdEntry
{ 
	class UObject*                                     CurveObject;                                                // 0x0000   (0x0008)  
	FColor                                             CurveColor;                                                 // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FString                                            CurveName;                                                  // 0x0010   (0x0010)  
	int32_t                                            bHideCurve;                                                 // 0x0020   (0x0004)  
	int32_t                                            bColorCurve;                                                // 0x0024   (0x0004)  
	int32_t                                            bFloatingPointColorCurve;                                   // 0x0028   (0x0004)  
	int32_t                                            bClamp;                                                     // 0x002C   (0x0004)  
	float                                              ClampLow;                                                   // 0x0030   (0x0004)  
	float                                              ClampHigh;                                                  // 0x0034   (0x0004)  
};

/// Struct /Script/Engine.CurveEdTab
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FCurveEdTab
{ 
	FString                                            TabName;                                                    // 0x0000   (0x0010)  
	TArray<FCurveEdEntry>                              Curves;                                                     // 0x0010   (0x0010)  
	float                                              ViewStartInput;                                             // 0x0020   (0x0004)  
	float                                              ViewEndInput;                                               // 0x0024   (0x0004)  
	float                                              ViewStartOutput;                                            // 0x0028   (0x0004)  
	float                                              ViewEndOutput;                                              // 0x002C   (0x0004)  
};

/// Class /Script/Engine.InterpCurveEdSetup
/// Size: 0x0018 (24 bytes) (0x000030 - 0x000048) align 8 pad: 0x0000
class UInterpCurveEdSetup : public UObject
{ 
public:
	TArray<FCurveEdTab>                                Tabs;                                                       // 0x0030   (0x0010)  
	int32_t                                            ActiveTab;                                                  // 0x0040   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpData
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000078) align 8 pad: 0x0000
class UInterpData : public UObject
{ 
public:
	float                                              InterpLength;                                               // 0x0030   (0x0004)  
	float                                              PathBuildTime;                                              // 0x0034   (0x0004)  
	TArray<class UInterpGroup*>                        InterpGroups;                                               // 0x0038   (0x0010)  
	class UInterpCurveEdSetup*                         CurveEdSetup;                                               // 0x0048   (0x0008)  
	float                                              EdSectionStart;                                             // 0x0050   (0x0004)  
	float                                              EdSectionEnd;                                               // 0x0054   (0x0004)  
	bool                                               bShouldBakeAndPrune : 1;                                    // 0x0058:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0059   (0x0007)  MISSED
	class UInterpGroupDirector*                        CachedDirectorGroup;                                        // 0x0060   (0x0008)  
	TArray<FName>                                      AllEventNames;                                              // 0x0068   (0x0010)  
};

/// Class /Script/Engine.InterpFilter
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UInterpFilter : public UObject
{ 
public:
	FString                                            Caption;                                                    // 0x0030   (0x0010)  
};

/// Class /Script/Engine.InterpFilter_Classes
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UInterpFilter_Classes : public UInterpFilter
{ 
public:
};

/// Class /Script/Engine.InterpFilter_Custom
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UInterpFilter_Custom : public UInterpFilter
{ 
public:
};

/// Class /Script/Engine.InterpGroup
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000060) align 8 pad: 0x0000
class UInterpGroup : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0030   (0x0008)  MISSED
	TArray<class UInterpTrack*>                        InterpTracks;                                               // 0x0038   (0x0010)  
	FName                                              GroupName;                                                  // 0x0048   (0x000C)  
	FColor                                             GroupColor;                                                 // 0x0054   (0x0004)  
	bool                                               bCollapsed : 1;                                             // 0x0058:0 (0x0001)  
	bool                                               bVisible : 1;                                               // 0x0058:1 (0x0001)  
	bool                                               bIsFolder : 1;                                              // 0x0058:2 (0x0001)  
	bool                                               bIsParented : 1;                                            // 0x0058:3 (0x0001)  
	bool                                               bIsSelected : 1;                                            // 0x0058:4 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0059   (0x0007)  MISSED
};

/// Class /Script/Engine.InterpGroupCamera
/// Size: 0x0010 (16 bytes) (0x000060 - 0x000070) align 8 pad: 0x0000
class UInterpGroupCamera : public UInterpGroup
{ 
public:
	class UCameraAnim*                                 CameraAnimInst;                                             // 0x0060   (0x0008)  
	float                                              CompressTolerance;                                          // 0x0068   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x006C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpGroupDirector
/// Size: 0x0000 (0 bytes) (0x000060 - 0x000060) align 8 pad: 0x0000
class UInterpGroupDirector : public UInterpGroup
{ 
public:
};

/// Class /Script/Engine.InterpGroupInst
/// Size: 0x0020 (32 bytes) (0x000030 - 0x000050) align 8 pad: 0x0000
class UInterpGroupInst : public UObject
{ 
public:
	class UInterpGroup*                                Group;                                                      // 0x0030   (0x0008)  
	class AActor*                                      GroupActor;                                                 // 0x0038   (0x0008)  
	TArray<class UInterpTrackInst*>                    TrackInst;                                                  // 0x0040   (0x0010)  
};

/// Class /Script/Engine.InterpGroupInstCamera
/// Size: 0x0000 (0 bytes) (0x000050 - 0x000050) align 8 pad: 0x0000
class UInterpGroupInstCamera : public UInterpGroupInst
{ 
public:
};

/// Class /Script/Engine.InterpGroupInstDirector
/// Size: 0x0000 (0 bytes) (0x000050 - 0x000050) align 8 pad: 0x0000
class UInterpGroupInstDirector : public UInterpGroupInst
{ 
public:
};

/// Struct /Script/Engine.InterpControlPoint
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FInterpControlPoint
{ 
	FVector                                            PositionControlPoint;                                       // 0x0000   (0x000C)  
	bool                                               bPositionIsRelative;                                        // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_7[0xF];                                       // 0x000D   (0x000F)  MISSED
};

/// Class /Script/Engine.InterpToMovementComponent
/// Size: 0x00A0 (160 bytes) (0x000100 - 0x0001A0) align 8 pad: 0x0000
class UInterpToMovementComponent : public UMovementComponent
{ 
public:
	float                                              Duration;                                                   // 0x0100   (0x0004)  
	bool                                               bPauseOnImpact : 1;                                         // 0x0104:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0105   (0x0003)  MISSED
	bool                                               bSweep;                                                     // 0x0108   (0x0001)  
	ETeleportType                                      TeleportType;                                               // 0x0109   (0x0001)  
	EInterpToBehaviourType                             BehaviourType;                                              // 0x010A   (0x0001)  
	bool                                               bCheckIfStillInWorld;                                       // 0x010B   (0x0001)  
	bool                                               bForceSubStepping : 1;                                      // 0x010C:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x010D   (0x0003)  MISSED
	SDK_UNDEFINED(16,155) /* FMulticastInlineDelegate */ __um(OnInterpToReverse);                                  // 0x0110   (0x0010)  
	SDK_UNDEFINED(16,156) /* FMulticastInlineDelegate */ __um(OnInterpToStop);                                     // 0x0120   (0x0010)  
	SDK_UNDEFINED(16,157) /* FMulticastInlineDelegate */ __um(OnWaitBeginDelegate);                                // 0x0130   (0x0010)  
	SDK_UNDEFINED(16,158) /* FMulticastInlineDelegate */ __um(OnWaitEndDelegate);                                  // 0x0140   (0x0010)  
	SDK_UNDEFINED(16,159) /* FMulticastInlineDelegate */ __um(OnResetDelegate);                                    // 0x0150   (0x0010)  
	float                                              MaxSimulationTimeStep;                                      // 0x0160   (0x0004)  
	int32_t                                            MaxSimulationIterations;                                    // 0x0164   (0x0004)  
	TArray<FInterpControlPoint>                        ControlPoints;                                              // 0x0168   (0x0010)  
	unsigned char                                      UnknownData02_7[0x28];                                      // 0x0178   (0x0028)  MISSED
	// void StopSimulating(FHitResult& HitResult);                                                                              // [0x464c790] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void RestartMovement(float InitialDirection);                                                                            // [0x464c710] Final|Native|Public|BlueprintCallable 
	// void OnInterpToWaitEndDelegate__DelegateSignature(FHitResult& ImpactResult, float Time);                                 // [0x25a7960] MulticastDelegate|Public|Delegate|HasOutParms 
	// void OnInterpToWaitBeginDelegate__DelegateSignature(FHitResult& ImpactResult, float Time);                               // [0x25a7960] MulticastDelegate|Public|Delegate|HasOutParms 
	// void OnInterpToStopDelegate__DelegateSignature(FHitResult& ImpactResult, float Time);                                    // [0x25a7960] MulticastDelegate|Public|Delegate|HasOutParms 
	// void OnInterpToReverseDelegate__DelegateSignature(FHitResult& ImpactResult, float Time);                                 // [0x25a7960] MulticastDelegate|Public|Delegate|HasOutParms 
	// void OnInterpToResetDelegate__DelegateSignature(FHitResult& ImpactResult, float Time);                                   // [0x25a7960] MulticastDelegate|Public|Delegate|HasOutParms 
	// void FinaliseControlPoints();                                                                                            // [0x464c6f0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.InterpTrack
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000078) align 8 pad: 0x0000
class UInterpTrack : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x10];                                      // 0x0030   (0x0010)  MISSED
	TArray<class UInterpTrack*>                        SubTracks;                                                  // 0x0040   (0x0010)  
	class UClass*                                      TrackInstClass;                                             // 0x0050   (0x0008)  
	TEnumAsByte<ETrackActiveCondition>                 ActiveCondition;                                            // 0x0058   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0059   (0x0007)  MISSED
	FString                                            TrackTitle;                                                 // 0x0060   (0x0010)  
	bool                                               bOnePerGroup : 1;                                           // 0x0070:0 (0x0001)  
	bool                                               bDirGroupOnly : 1;                                          // 0x0070:1 (0x0001)  
	bool                                               bDisableTrack : 1;                                          // 0x0070:2 (0x0001)  
	bool                                               bIsSelected : 1;                                            // 0x0070:3 (0x0001)  
	bool                                               bIsAnimControlTrack : 1;                                    // 0x0070:4 (0x0001)  
	bool                                               bSubTrackOnly : 1;                                          // 0x0070:5 (0x0001)  
	bool                                               bVisible : 1;                                               // 0x0070:6 (0x0001)  
	bool                                               bIsRecording : 1;                                           // 0x0070:7 (0x0001)  
	unsigned char                                      UnknownData02_7[0x7];                                       // 0x0071   (0x0007)  MISSED
};

/// Class /Script/Engine.InterpTrackFloatBase
/// Size: 0x0020 (32 bytes) (0x000078 - 0x000098) align 8 pad: 0x0000
class UInterpTrackFloatBase : public UInterpTrack
{ 
public:
	FInterpCurveFloat                                  FloatTrack;                                                 // 0x0078   (0x0018)  
	float                                              CurveTension;                                               // 0x0090   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0094   (0x0004)  MISSED
};

/// Struct /Script/Engine.AnimControlTrackKey
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FAnimControlTrackKey
{ 
	float                                              StartTime;                                                  // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	class UAnimSequence*                               AnimSeq;                                                    // 0x0008   (0x0008)  
	float                                              AnimStartOffset;                                            // 0x0010   (0x0004)  
	float                                              AnimEndOffset;                                              // 0x0014   (0x0004)  
	float                                              AnimPlayRate;                                               // 0x0018   (0x0004)  
	bool                                               bLooping : 1;                                               // 0x001C:0 (0x0001)  
	bool                                               bReverse : 1;                                               // 0x001C:1 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x001D   (0x0003)  MISSED
};

/// Class /Script/Engine.InterpTrackAnimControl
/// Size: 0x0028 (40 bytes) (0x000098 - 0x0000C0) align 8 pad: 0x0000
class UInterpTrackAnimControl : public UInterpTrackFloatBase
{ 
public:
	FName                                              SlotName;                                                   // 0x0098   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00A4   (0x0004)  MISSED
	TArray<FAnimControlTrackKey>                       AnimSeqs;                                                   // 0x00A8   (0x0010)  
	bool                                               bSkipAnimNotifiers : 1;                                     // 0x00B8:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x00B9   (0x0007)  MISSED
};

/// Class /Script/Engine.InterpTrackVectorBase
/// Size: 0x0020 (32 bytes) (0x000078 - 0x000098) align 8 pad: 0x0000
class UInterpTrackVectorBase : public UInterpTrack
{ 
public:
	FInterpCurveVector                                 VectorTrack;                                                // 0x0078   (0x0018)  
	float                                              CurveTension;                                               // 0x0090   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0094   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackAudioMaster
/// Size: 0x0000 (0 bytes) (0x000098 - 0x000098) align 8 pad: 0x0000
class UInterpTrackAudioMaster : public UInterpTrackVectorBase
{ 
public:
};

/// Struct /Script/Engine.BoolTrackKey
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FBoolTrackKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	bool                                               Value : 1;                                                  // 0x0004:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Class /Script/Engine.InterpTrackBoolProp
/// Size: 0x0020 (32 bytes) (0x000078 - 0x000098) align 8 pad: 0x0000
class UInterpTrackBoolProp : public UInterpTrack
{ 
public:
	TArray<FBoolTrackKey>                              BoolTrack;                                                  // 0x0078   (0x0010)  
	FName                                              PropertyName;                                               // 0x0088   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0094   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackColorProp
/// Size: 0x0010 (16 bytes) (0x000098 - 0x0000A8) align 8 pad: 0x0000
class UInterpTrackColorProp : public UInterpTrackVectorBase
{ 
public:
	FName                                              PropertyName;                                               // 0x0098   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x00A4   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackColorScale
/// Size: 0x0000 (0 bytes) (0x000098 - 0x000098) align 8 pad: 0x0000
class UInterpTrackColorScale : public UInterpTrackVectorBase
{ 
public:
};

/// Struct /Script/Engine.DirectorTrackCut
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FDirectorTrackCut
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	float                                              TransitionTime;                                             // 0x0004   (0x0004)  
	FName                                              TargetCamGroup;                                             // 0x0008   (0x000C)  
	int32_t                                            ShotNumber;                                                 // 0x0014   (0x0004)  
};

/// Class /Script/Engine.InterpTrackDirector
/// Size: 0x0018 (24 bytes) (0x000078 - 0x000090) align 8 pad: 0x0000
class UInterpTrackDirector : public UInterpTrack
{ 
public:
	TArray<FDirectorTrackCut>                          CutTrack;                                                   // 0x0078   (0x0010)  
	bool                                               bSimulateCameraCutsOnClients : 1;                           // 0x0088:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0089   (0x0007)  MISSED
};

/// Struct /Script/Engine.EventTrackKey
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FEventTrackKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	FName                                              EventName;                                                  // 0x0004   (0x000C)  
};

/// Class /Script/Engine.InterpTrackEvent
/// Size: 0x0018 (24 bytes) (0x000078 - 0x000090) align 8 pad: 0x0000
class UInterpTrackEvent : public UInterpTrack
{ 
public:
	TArray<FEventTrackKey>                             EventTrack;                                                 // 0x0078   (0x0010)  
	bool                                               bFireEventsWhenForwards : 1;                                // 0x0088:0 (0x0001)  
	bool                                               bFireEventsWhenBackwards : 1;                               // 0x0088:1 (0x0001)  
	bool                                               bFireEventsWhenJumpingForwards : 1;                         // 0x0088:2 (0x0001)  
	bool                                               bUseCustomEventName : 1;                                    // 0x0088:3 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0089   (0x0007)  MISSED
};

/// Class /Script/Engine.InterpTrackFade
/// Size: 0x0018 (24 bytes) (0x000098 - 0x0000B0) align 8 pad: 0x0000
class UInterpTrackFade : public UInterpTrackFloatBase
{ 
public:
	bool                                               bPersistFade : 1;                                           // 0x0098:0 (0x0001)  
	bool                                               bFadeAudio : 1;                                             // 0x0098:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0099   (0x0003)  MISSED
	FLinearColor                                       FadeColor;                                                  // 0x009C   (0x0010)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x00AC   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackFloatAnimBPParam
/// Size: 0x0020 (32 bytes) (0x000098 - 0x0000B8) align 8 pad: 0x0000
class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase
{ 
public:
	class UAnimBlueprintGeneratedClass*                AnimBlueprintClass;                                         // 0x0098   (0x0008)  
	class UClass*                                      AnimClass;                                                  // 0x00A0   (0x0008)  
	FName                                              ParamName;                                                  // 0x00A8   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x00B4   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackFloatMaterialParam
/// Size: 0x0020 (32 bytes) (0x000098 - 0x0000B8) align 8 pad: 0x0000
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
{ 
public:
	TArray<class UMaterialInterface*>                  TargetMaterials;                                            // 0x0098   (0x0010)  
	FName                                              ParamName;                                                  // 0x00A8   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x00B4   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackFloatParticleParam
/// Size: 0x0010 (16 bytes) (0x000098 - 0x0000A8) align 8 pad: 0x0000
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
{ 
public:
	FName                                              ParamName;                                                  // 0x0098   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x00A4   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackFloatProp
/// Size: 0x0010 (16 bytes) (0x000098 - 0x0000A8) align 8 pad: 0x0000
class UInterpTrackFloatProp : public UInterpTrackFloatBase
{ 
public:
	FName                                              PropertyName;                                               // 0x0098   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x00A4   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInst
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UInterpTrackInst : public UObject
{ 
public:
};

/// Class /Script/Engine.InterpTrackInstAnimControl
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UInterpTrackInstAnimControl : public UInterpTrackInst
{ 
public:
	float                                              LastUpdatePosition;                                         // 0x0030   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstAudioMaster
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UInterpTrackInstAudioMaster : public UInterpTrackInst
{ 
public:
};

/// Class /Script/Engine.InterpTrackInstProperty
/// Size: 0x0028 (40 bytes) (0x000030 - 0x000058) align 8 pad: 0x0000
class UInterpTrackInstProperty : public UInterpTrackInst
{ 
public:
	unsigned char                                      UnknownData00_3[0x20];                                      // 0x0030   (0x0020)  MISSED
	class UObject*                                     PropertyOuterObjectInst;                                    // 0x0050   (0x0008)  
};

/// Class /Script/Engine.InterpTrackInstBoolProp
/// Size: 0x0018 (24 bytes) (0x000058 - 0x000070) align 8 pad: 0x0000
class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
{ 
public:
	unsigned char                                      UnknownData00_3[0x10];                                      // 0x0058   (0x0010)  MISSED
	bool                                               ResetBool;                                                  // 0x0068   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Class /Script/Engine.InterpTrackInstColorProp
/// Size: 0x0010 (16 bytes) (0x000058 - 0x000068) align 8 pad: 0x0000
class UInterpTrackInstColorProp : public UInterpTrackInstProperty
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0058   (0x0008)  MISSED
	FColor                                             ResetColor;                                                 // 0x0060   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0064   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstColorScale
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UInterpTrackInstColorScale : public UInterpTrackInst
{ 
public:
};

/// Class /Script/Engine.InterpTrackInstDirector
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UInterpTrackInstDirector : public UInterpTrackInst
{ 
public:
	class AActor*                                      OldViewTarget;                                              // 0x0030   (0x0008)  
};

/// Class /Script/Engine.InterpTrackInstEvent
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UInterpTrackInstEvent : public UInterpTrackInst
{ 
public:
	float                                              LastUpdatePosition;                                         // 0x0030   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstFade
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UInterpTrackInstFade : public UInterpTrackInst
{ 
public:
};

/// Class /Script/Engine.InterpTrackInstFloatAnimBPParam
/// Size: 0x0018 (24 bytes) (0x000030 - 0x000048) align 8 pad: 0x0000
class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst
{ 
public:
	class UAnimInstance*                               AnimScriptInstance;                                         // 0x0030   (0x0008)  
	float                                              ResetFloat;                                                 // 0x0038   (0x0004)  
	unsigned char                                      UnknownData00_7[0xC];                                       // 0x003C   (0x000C)  MISSED
};

/// Struct /Script/Engine.PrimitiveMaterialRef
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FPrimitiveMaterialRef
{ 
	class UPrimitiveComponent*                         Primitive;                                                  // 0x0000   (0x0008)  
	class UDecalComponent*                             Decal;                                                      // 0x0008   (0x0008)  
	int32_t                                            ElementIndex;                                               // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstFloatMaterialParam
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000068) align 8 pad: 0x0000
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
{ 
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstances;                                          // 0x0030   (0x0010)  
	TArray<float>                                      ResetFloats;                                                // 0x0040   (0x0010)  
	TArray<FPrimitiveMaterialRef>                      PrimitiveMaterialRefs;                                      // 0x0050   (0x0010)  
	class UInterpTrackFloatMaterialParam*              InstancedTrack;                                             // 0x0060   (0x0008)  
};

/// Class /Script/Engine.InterpTrackInstFloatParticleParam
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
{ 
public:
	float                                              ResetFloat;                                                 // 0x0030   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstFloatProp
/// Size: 0x0010 (16 bytes) (0x000058 - 0x000068) align 8 pad: 0x0000
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0058   (0x0008)  MISSED
	float                                              ResetFloat;                                                 // 0x0060   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0064   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstLinearColorProp
/// Size: 0x0018 (24 bytes) (0x000058 - 0x000070) align 8 pad: 0x0000
class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0058   (0x0008)  MISSED
	FLinearColor                                       ResetColor;                                                 // 0x0060   (0x0010)  
};

/// Class /Script/Engine.InterpTrackInstMove
/// Size: 0x0018 (24 bytes) (0x000030 - 0x000048) align 8 pad: 0x0000
class UInterpTrackInstMove : public UInterpTrackInst
{ 
public:
	FVector                                            ResetLocation;                                              // 0x0030   (0x000C)  
	FRotator                                           ResetRotation;                                              // 0x003C   (0x000C)  
};

/// Class /Script/Engine.InterpTrackInstParticleReplay
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UInterpTrackInstParticleReplay : public UInterpTrackInst
{ 
public:
	float                                              LastUpdatePosition;                                         // 0x0030   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstSlomo
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UInterpTrackInstSlomo : public UInterpTrackInst
{ 
public:
	float                                              OldTimeDilation;                                            // 0x0030   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstSound
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UInterpTrackInstSound : public UInterpTrackInst
{ 
public:
	float                                              LastUpdatePosition;                                         // 0x0030   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0034   (0x0004)  MISSED
	class UAudioComponent*                             PlayAudioComp;                                              // 0x0038   (0x0008)  
};

/// Class /Script/Engine.InterpTrackInstToggle
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UInterpTrackInstToggle : public UInterpTrackInst
{ 
public:
	TEnumAsByte<ETrackToggleAction>                    Action;                                                     // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	float                                              LastUpdatePosition;                                         // 0x0034   (0x0004)  
	bool                                               bSavedActiveState : 1;                                      // 0x0038:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/Engine.InterpTrackInstVectorMaterialParam
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000068) align 8 pad: 0x0000
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
{ 
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstances;                                          // 0x0030   (0x0010)  
	TArray<FVector>                                    ResetVectors;                                               // 0x0040   (0x0010)  
	TArray<FPrimitiveMaterialRef>                      PrimitiveMaterialRefs;                                      // 0x0050   (0x0010)  
	class UInterpTrackVectorMaterialParam*             InstancedTrack;                                             // 0x0060   (0x0008)  
};

/// Class /Script/Engine.InterpTrackInstVectorProp
/// Size: 0x0018 (24 bytes) (0x000058 - 0x000070) align 8 pad: 0x0000
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0058   (0x0008)  MISSED
	FVector                                            ResetVector;                                                // 0x0060   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x006C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstVisibility
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UInterpTrackInstVisibility : public UInterpTrackInst
{ 
public:
	TEnumAsByte<EVisibilityTrackAction>                Action;                                                     // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	float                                              LastUpdatePosition;                                         // 0x0034   (0x0004)  
};

/// Class /Script/Engine.InterpTrackLinearColorBase
/// Size: 0x0020 (32 bytes) (0x000078 - 0x000098) align 8 pad: 0x0000
class UInterpTrackLinearColorBase : public UInterpTrack
{ 
public:
	FInterpCurveLinearColor                            LinearColorTrack;                                           // 0x0078   (0x0018)  
	float                                              CurveTension;                                               // 0x0090   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0094   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackLinearColorProp
/// Size: 0x0010 (16 bytes) (0x000098 - 0x0000A8) align 8 pad: 0x0000
class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
{ 
public:
	FName                                              PropertyName;                                               // 0x0098   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x00A4   (0x0004)  MISSED
};

/// Struct /Script/Engine.InterpLookupPoint
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FInterpLookupPoint
{ 
	FName                                              GroupName;                                                  // 0x0000   (0x000C)  
	float                                              Time;                                                       // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.InterpLookupTrack
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FInterpLookupTrack
{ 
	TArray<FInterpLookupPoint>                         Points;                                                     // 0x0000   (0x0010)  
};

/// Class /Script/Engine.InterpTrackMove
/// Size: 0x0060 (96 bytes) (0x000078 - 0x0000D8) align 8 pad: 0x0000
class UInterpTrackMove : public UInterpTrack
{ 
public:
	FInterpCurveVector                                 PosTrack;                                                   // 0x0078   (0x0018)  
	FInterpCurveVector                                 EulerTrack;                                                 // 0x0090   (0x0018)  
	FInterpLookupTrack                                 LookupTrack;                                                // 0x00A8   (0x0010)  
	FName                                              LookAtGroupName;                                            // 0x00B8   (0x000C)  
	float                                              LinCurveTension;                                            // 0x00C4   (0x0004)  
	float                                              AngCurveTension;                                            // 0x00C8   (0x0004)  
	bool                                               bUseQuatInterpolation : 1;                                  // 0x00CC:0 (0x0001)  
	bool                                               bShowArrowAtKeys : 1;                                       // 0x00CC:1 (0x0001)  
	bool                                               bDisableMovement : 1;                                       // 0x00CC:2 (0x0001)  
	bool                                               bShowTranslationOnCurveEd : 1;                              // 0x00CC:3 (0x0001)  
	bool                                               bShowRotationOnCurveEd : 1;                                 // 0x00CC:4 (0x0001)  
	bool                                               bHide3DTrack : 1;                                           // 0x00CC:5 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x00CD   (0x0003)  MISSED
	TEnumAsByte<EInterpTrackMoveRotMode>               RotMode;                                                    // 0x00D0   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x00D1   (0x0007)  MISSED
};

/// Class /Script/Engine.InterpTrackMoveAxis
/// Size: 0x0018 (24 bytes) (0x000098 - 0x0000B0) align 8 pad: 0x0000
class UInterpTrackMoveAxis : public UInterpTrackFloatBase
{ 
public:
	TEnumAsByte<EInterpMoveAxis>                       MoveAxis;                                                   // 0x0098   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0099   (0x0007)  MISSED
	FInterpLookupTrack                                 LookupTrack;                                                // 0x00A0   (0x0010)  
};

/// Struct /Script/Engine.ParticleReplayTrackKey
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FParticleReplayTrackKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	float                                              Duration;                                                   // 0x0004   (0x0004)  
	int32_t                                            ClipIDNumber;                                               // 0x0008   (0x0004)  
};

/// Class /Script/Engine.InterpTrackParticleReplay
/// Size: 0x0010 (16 bytes) (0x000078 - 0x000088) align 8 pad: 0x0000
class UInterpTrackParticleReplay : public UInterpTrack
{ 
public:
	TArray<FParticleReplayTrackKey>                    TrackKeys;                                                  // 0x0078   (0x0010)  
};

/// Class /Script/Engine.InterpTrackSlomo
/// Size: 0x0000 (0 bytes) (0x000098 - 0x000098) align 8 pad: 0x0000
class UInterpTrackSlomo : public UInterpTrackFloatBase
{ 
public:
};

/// Struct /Script/Engine.SoundTrackKey
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FSoundTrackKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	float                                              Volume;                                                     // 0x0004   (0x0004)  
	float                                              Pitch;                                                      // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	class USoundBase*                                  Sound;                                                      // 0x0010   (0x0008)  
};

/// Class /Script/Engine.InterpTrackSound
/// Size: 0x0018 (24 bytes) (0x000098 - 0x0000B0) align 8 pad: 0x0000
class UInterpTrackSound : public UInterpTrackVectorBase
{ 
public:
	TArray<FSoundTrackKey>                             Sounds;                                                     // 0x0098   (0x0010)  
	bool                                               bPlayOnReverse : 1;                                         // 0x00A8:0 (0x0001)  
	bool                                               bContinueSoundOnMatineeEnd : 1;                             // 0x00A8:1 (0x0001)  
	bool                                               bSuppressSubtitles : 1;                                     // 0x00A8:2 (0x0001)  
	bool                                               bTreatAsDialogue : 1;                                       // 0x00A8:3 (0x0001)  
	bool                                               bAttach : 1;                                                // 0x00A8:4 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x00A9   (0x0007)  MISSED
};

/// Struct /Script/Engine.ToggleTrackKey
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FToggleTrackKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	TEnumAsByte<ETrackToggleAction>                    ToggleAction;                                               // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Class /Script/Engine.InterpTrackToggle
/// Size: 0x0018 (24 bytes) (0x000078 - 0x000090) align 8 pad: 0x0000
class UInterpTrackToggle : public UInterpTrack
{ 
public:
	TArray<FToggleTrackKey>                            ToggleTrack;                                                // 0x0078   (0x0010)  
	bool                                               bActivateSystemEachUpdate : 1;                              // 0x0088:0 (0x0001)  
	bool                                               bActivateWithJustAttachedFlag : 1;                          // 0x0088:1 (0x0001)  
	bool                                               bFireEventsWhenForwards : 1;                                // 0x0088:2 (0x0001)  
	bool                                               bFireEventsWhenBackwards : 1;                               // 0x0088:3 (0x0001)  
	bool                                               bFireEventsWhenJumpingForwards : 1;                         // 0x0088:4 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0089   (0x0007)  MISSED
};

/// Class /Script/Engine.InterpTrackVectorMaterialParam
/// Size: 0x0020 (32 bytes) (0x000098 - 0x0000B8) align 8 pad: 0x0000
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
{ 
public:
	TArray<class UMaterialInterface*>                  TargetMaterials;                                            // 0x0098   (0x0010)  
	FName                                              ParamName;                                                  // 0x00A8   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x00B4   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackVectorProp
/// Size: 0x0010 (16 bytes) (0x000098 - 0x0000A8) align 8 pad: 0x0000
class UInterpTrackVectorProp : public UInterpTrackVectorBase
{ 
public:
	FName                                              PropertyName;                                               // 0x0098   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x00A4   (0x0004)  MISSED
};

/// Struct /Script/Engine.VisibilityTrackKey
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FVisibilityTrackKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	TEnumAsByte<EVisibilityTrackAction>                Action;                                                     // 0x0004   (0x0001)  
	TEnumAsByte<EVisibilityTrackCondition>             ActiveCondition;                                            // 0x0005   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x0006   (0x0002)  MISSED
};

/// Class /Script/Engine.InterpTrackVisibility
/// Size: 0x0018 (24 bytes) (0x000078 - 0x000090) align 8 pad: 0x0000
class UInterpTrackVisibility : public UInterpTrack
{ 
public:
	TArray<FVisibilityTrackKey>                        VisibilityTrack;                                            // 0x0078   (0x0010)  
	bool                                               bFireEventsWhenForwards : 1;                                // 0x0088:0 (0x0001)  
	bool                                               bFireEventsWhenBackwards : 1;                               // 0x0088:1 (0x0001)  
	bool                                               bFireEventsWhenJumpingForwards : 1;                         // 0x0088:2 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0089   (0x0007)  MISSED
};

/// Class /Script/Engine.IntSerialization
/// Size: 0x0028 (40 bytes) (0x000030 - 0x000058) align 8 pad: 0x0000
class UIntSerialization : public UObject
{ 
public:
	uint16_t                                           UnsignedInt16Variable;                                      // 0x0030   (0x0002)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0032   (0x0002)  MISSED
	uint32_t                                           UnsignedInt32Variable;                                      // 0x0034   (0x0004)  
	uint64_t                                           UnsignedInt64Variable;                                      // 0x0038   (0x0008)  
	int8_t                                             SignedInt8Variable;                                         // 0x0040   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x0041   (0x0001)  MISSED
	int16_t                                            SignedInt16Variable;                                        // 0x0042   (0x0002)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0044   (0x0004)  MISSED
	int64_t                                            SignedInt64Variable;                                        // 0x0048   (0x0008)  
	char                                               UnsignedInt8Variable;                                       // 0x0050   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0051   (0x0003)  MISSED
	int32_t                                            SignedInt32Variable;                                        // 0x0054   (0x0004)  
};

/// Class /Script/Engine.KillZVolume
/// Size: 0x0000 (0 bytes) (0x0002F0 - 0x0002F0) align 8 pad: 0x0000
class AKillZVolume : public APhysicsVolume
{ 
public:
};

/// Class /Script/Engine.KismetArrayLibrary
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UKismetArrayLibrary : public UBlueprintFunctionLibrary
{ 
public:
	// void SetArrayPropertyByName(class UObject* Object, FName PropertyName, TArray<int32_t>& Value);                          // [0x4656b40] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void FilterArray(TArray<AActor*>& TargetArray, class UClass* FilterClass, TArray<AActor*>& FilteredArray);               // [0x4653830] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void Array_Swap(TArray<int32_t>& TargetArray, int32_t FirstIndex, int32_t SecondIndex);                                  // [0x4653120] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void Array_Shuffle(TArray<int32_t>& TargetArray);                                                                        // [0x4653080] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void Array_Set(TArray<int32_t>& TargetArray, int32_t Index, int32_t& Item, bool bSizeToFit);                             // [0x4652e50] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void Array_Reverse(TArray<int32_t>& TargetArray);                                                                        // [0x4652db0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void Array_Resize(TArray<int32_t>& TargetArray, int32_t Size);                                                           // [0x4652cc0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// bool Array_RemoveItem(TArray<int32_t>& TargetArray, int32_t& Item);                                                      // [0x4652b00] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void Array_Remove(TArray<int32_t>& TargetArray, int32_t IndexToRemove);                                                  // [0x4652a10] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void Array_RandomFromStream(TArray<int32_t>& TargetArray, FRandomStream& RandomStream, int32_t& OutItem, int32_t& OutIndex); // [0x4652880] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void Array_Random(TArray<int32_t>& TargetArray, int32_t& OutItem, int32_t& OutIndex);                                    // [0x4652740] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// int32_t Array_Length(TArray<int32_t>& TargetArray);                                                                      // [0x4652690] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// int32_t Array_LastIndex(TArray<int32_t>& TargetArray);                                                                   // [0x46525e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool Array_IsValidIndex(TArray<int32_t>& TargetArray, int32_t IndexToTest);                                              // [0x46524f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// void Array_Insert(TArray<int32_t>& TargetArray, int32_t& NewItem, int32_t Index);                                        // [0x4652300] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// bool Array_Identical(TArray<int32_t>& ArrayA, TArray<int32_t>& ArrayB);                                                  // [0x46521e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// void Array_Get(TArray<int32_t>& TargetArray, int32_t Index, int32_t& Item);                                              // [0x4651fe0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// int32_t Array_Find(TArray<int32_t>& TargetArray, int32_t& ItemToFind);                                                   // [0x4651e20] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool Array_Contains(TArray<int32_t>& TargetArray, int32_t& ItemToFind);                                                  // [0x4651c60] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// void Array_Clear(TArray<int32_t>& TargetArray);                                                                          // [0x4651bc0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void Array_Append(TArray<int32_t>& TargetArray, TArray<int32_t>& SourceArray);                                           // [0x4651ab0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// int32_t Array_AddUnique(TArray<int32_t>& TargetArray, int32_t& NewItem);                                                 // [0x4651900] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// int32_t Array_Add(TArray<int32_t>& TargetArray, int32_t& NewItem);                                                       // [0x4651750] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.KismetGuidLibrary
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UKismetGuidLibrary : public UBlueprintFunctionLibrary
{ 
public:
	// void Parse_StringToGuid(FString GuidString, FGuid& OutGuid, bool& Success);                                              // [0x46559e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool NotEqual_GuidGuid(FGuid& A, FGuid& B);                                                                              // [0x46558e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FGuid NewGuid();                                                                                                         // [0x46558a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool IsValid_Guid(FGuid& InGuid);                                                                                        // [0x4654820] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void Invalidate_Guid(FGuid& InGuid);                                                                                     // [0x4654790] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool EqualEqual_GuidGuid(FGuid& A, FGuid& B);                                                                            // [0x4653360] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FString Conv_GuidToString(FGuid& InGuid);                                                                                // [0x4653280] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.KismetInputLibrary
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UKismetInputLibrary : public UBlueprintFunctionLibrary
{ 
public:
	// bool PointerEvent_IsTouchEvent(FPointerEvent& Input);                                                                    // [0x4656a00] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool PointerEvent_IsMouseButtonDown(FPointerEvent& Input, FKey MouseButton);                                             // [0x4656810] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// float PointerEvent_GetWheelDelta(FPointerEvent& Input);                                                                  // [0x46566d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// int32_t PointerEvent_GetUserIndex(FPointerEvent& Input);                                                                 // [0x4656590] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// int32_t PointerEvent_GetTouchpadIndex(FPointerEvent& Input);                                                             // [0x4656450] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FVector2D PointerEvent_GetScreenSpacePosition(FPointerEvent& Input);                                                     // [0x4656310] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// int32_t PointerEvent_GetPointerIndex(FPointerEvent& Input);                                                              // [0x46561d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FVector2D PointerEvent_GetLastScreenSpacePosition(FPointerEvent& Input);                                                 // [0x4656090] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// ESlateGesture PointerEvent_GetGestureType(FPointerEvent& Input);                                                         // [0x4655f50] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FVector2D PointerEvent_GetGestureDelta(FPointerEvent& Input);                                                            // [0x4655e10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FKey PointerEvent_GetEffectingButton(FPointerEvent& Input);                                                              // [0x4655c60] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FVector2D PointerEvent_GetCursorDelta(FPointerEvent& Input);                                                             // [0x4655b20] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool Key_IsVectorAxis(FKey& Key);                                                                                        // [0x46557c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool Key_IsValid(FKey& Key);                                                                                             // [0x46556e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool Key_IsMouseButton(FKey& Key);                                                                                       // [0x4655600] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool Key_IsModifierKey(FKey& Key);                                                                                       // [0x4655520] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool Key_IsKeyboardKey(FKey& Key);                                                                                       // [0x4655440] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool Key_IsGamepadKey(FKey& Key);                                                                                        // [0x4655360] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool Key_IsDigital(FKey& Key);                                                                                           // [0x4655280] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool Key_IsButtonAxis(FKey& Key);                                                                                        // [0x46551a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool Key_IsAxis3D(FKey& Key);                                                                                            // [0x46550c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool Key_IsAxis2D(FKey& Key);                                                                                            // [0x4654fe0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool Key_IsAxis1D(FKey& Key);                                                                                            // [0x4654f00] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool Key_IsAnalog(FKey& Key);                                                                                            // [0x4654e20] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// EUINavigation Key_GetNavigationDirectionFromKey(FKeyEvent& InKeyEvent);                                                  // [0x4654d10] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// EUINavigation Key_GetNavigationDirectionFromAnalog(FAnalogInputEvent& InAnalogEvent);                                    // [0x4654be0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// EUINavigationAction Key_GetNavigationActionFromKey(FKeyEvent& InKeyEvent);                                               // [0x4654ad0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// EUINavigationAction Key_GetNavigationAction(FKey& InKey);                                                                // [0x46549f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FText Key_GetDisplayName(FKey& Key);                                                                                     // [0x46548c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool InputEvent_IsShiftDown(FInputEvent& Input);                                                                         // [0x46546e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool InputEvent_IsRightShiftDown(FInputEvent& Input);                                                                    // [0x4654630] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool InputEvent_IsRightControlDown(FInputEvent& Input);                                                                  // [0x4654580] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool InputEvent_IsRightCommandDown(FInputEvent& Input);                                                                  // [0x46544d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool InputEvent_IsRightAltDown(FInputEvent& Input);                                                                      // [0x4654420] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool InputEvent_IsRepeat(FInputEvent& Input);                                                                            // [0x4654370] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool InputEvent_IsLeftShiftDown(FInputEvent& Input);                                                                     // [0x46542c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool InputEvent_IsLeftControlDown(FInputEvent& Input);                                                                   // [0x4654210] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool InputEvent_IsLeftCommandDown(FInputEvent& Input);                                                                   // [0x4654160] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool InputEvent_IsLeftAltDown(FInputEvent& Input);                                                                       // [0x46540b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool InputEvent_IsControlDown(FInputEvent& Input);                                                                       // [0x4654000] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool InputEvent_IsCommandDown(FInputEvent& Input);                                                                       // [0x4653f50] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool InputEvent_IsAltDown(FInputEvent& Input);                                                                           // [0x4653ea0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FText InputChord_GetDisplayName(FInputChord& Key);                                                                       // [0x4653d40] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// int32_t GetUserIndex(FKeyEvent& Input);                                                                                  // [0x4653c30] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FKey GetKey(FKeyEvent& Input);                                                                                           // [0x4653ab0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// float GetAnalogValue(FAnalogInputEvent& Input);                                                                          // [0x4653980] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool EqualEqual_KeyKey(FKey A, FKey B);                                                                                  // [0x4653680] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool EqualEqual_InputChordInputChord(FInputChord A, FInputChord B);                                                      // [0x4653460] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void CalibrateTilt();                                                                                                    // [0x4653260] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.KismetInternationalizationLibrary
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UKismetInternationalizationLibrary : public UBlueprintFunctionLibrary
{ 
public:
	// bool SetCurrentLocale(FString Culture, bool SaveToConfig);                                                               // [0x4682210] Final|Native|Static|Public|BlueprintCallable 
	// bool SetCurrentLanguageAndLocale(FString Culture, bool SaveToConfig);                                                    // [0x4682130] Final|Native|Static|Public|BlueprintCallable 
	// bool SetCurrentLanguage(FString Culture, bool SaveToConfig);                                                             // [0x4682050] Final|Native|Static|Public|BlueprintCallable 
	// bool SetCurrentCulture(FString Culture, bool SaveToConfig);                                                              // [0x4681f70] Final|Native|Static|Public|BlueprintCallable 
	// bool SetCurrentAssetGroupCulture(FName AssetGroup, FString Culture, bool SaveToConfig);                                  // [0x4681e30] Final|Native|Static|Public|BlueprintCallable 
	// FString GetSuitableCulture(TArray<FString>& AvailableCultures, FString CultureToMatch, FString FallbackCulture);         // [0x466c090] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FString GetNativeCulture(ELocalizedTextSourceCategory TextCategory);                                                     // [0x466b590] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// TArray<FString> GetLocalizedCultures(bool IncludeGame, bool IncludeEngine, bool IncludeEditor, bool IncludeAdditional);  // [0x466add0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetCurrentLocale();                                                                                              // [0x466a6f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetCurrentLanguage();                                                                                            // [0x466a670] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetCurrentCulture();                                                                                             // [0x466a670] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetCurrentAssetGroupCulture(FName AssetGroup);                                                                   // [0x466a590] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetCultureDisplayName(FString Culture, bool Localized);                                                          // [0x466a470] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void ClearCurrentAssetGroupCulture(FName AssetGroup, bool SaveToConfig);                                                 // [0x4662d50] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.KismetMaterialLibrary
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
{ 
public:
	// void SetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, FName ParameterName, FLinearColor& ParameterValue); // [0x4682640] Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, FName ParameterName, float ParameterValue); // [0x46824e0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// void SetMPCVectorParameterValue(class UMaterialParameterCollection* Collection, FName ParameterName, FLinearColor& ParameterValue); // [0x46822f0] Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// FLinearColor GetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, FName ParameterName); // [0x466c730] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// float GetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, FName ParameterName); // [0x466bcc0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// FLinearColor GetMPCVectorParameterValue(class UMaterialParameterCollection* Collection, FName ParameterName);            // [0x466b000] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// class UMaterialInstanceDynamic* CreateDynamicMaterialInstance(class UObject* WorldContextObject, class UMaterialInterface* Parent, FName OptionalName, EMIDCreationFlags CreationFlags); // [0x46647f0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.KismetMathLibrary
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UKismetMathLibrary : public UBlueprintFunctionLibrary
{ 
public:
	// int32_t Xor_IntInt(int32_t A, int32_t B);                                                                                // [0x1020510] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int64_t Xor_Int64Int64(int64_t A, int64_t B);                                                                            // [0x1020af0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t Wrap(int32_t Value, int32_t Min, int32_t Max);                                                                   // [0x468a100] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FVector WeightedMovingAverage_FVector(FVector CurrentSample, FVector PreviousSample, float Weight);                      // [0x4689e90] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FRotator WeightedMovingAverage_FRotator(FRotator CurrentSample, FRotator PreviousSample, float Weight);                  // [0x4689d40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight);                              // [0x4689fe0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float VSizeXYSquared(FVector A);                                                                                         // [0x4685700] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float VSizeXY(FVector A);                                                                                                // [0x4685670] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float VSizeSquared(FVector A);                                                                                           // [0x46855d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float VSize2DSquared(FVector2D A);                                                                                       // [0x46854a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float VSize2D(FVector2D A);                                                                                              // [0x4685410] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float VSize(FVector A);                                                                                                  // [0x4685530] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector VLerp(FVector A, FVector B, float ALPHA);                                                                        // [0x46852d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector VInterpTo_Constant(FVector Current, FVector Target, float DeltaTime, float InterpSpeed);                         // [0x4685140] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector VInterpTo(FVector Current, FVector Target, float DeltaTime, float InterpSpeed);                                  // [0x4684fb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector VectorSpringInterp(FVector Current, FVector Target, FVectorSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass); // [0x4687060] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// FVector Vector_Zero();                                                                                                   // [0x4689d10] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Vector_Up();                                                                                                     // [0x4689ce0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// void Vector_UnwindEuler(FVector& A);                                                                                     // [0x4689c60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// FVector2D Vector_UnitCartesianToSpherical(FVector A);                                                                    // [0x4689b70] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Vector_ToRadians(FVector A);                                                                                     // [0x4689ad0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Vector_ToDegrees(FVector A);                                                                                     // [0x4689a30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Vector_SnappedToGrid(FVector InVect, float InGridSize);                                                          // [0x4689870] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// void Vector_Set(FVector& A, float X, float Y, float Z);                                                                  // [0x4689710] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// FVector Vector_Right();                                                                                                  // [0x46896e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Vector_Reciprocal(FVector& A);                                                                                   // [0x46895f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Vector_ProjectOnToNormal(FVector V, FVector InNormal);                                                           // [0x46894f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Vector_One();                                                                                                    // [0x46894c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Vector_NormalUnsafe(FVector& A);                                                                                 // [0x46891f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void Vector_Normalize(FVector& A, float Tolerance);                                                                      // [0x4689330] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// FVector Vector_Normal2D(FVector A, float Tolerance);                                                                     // [0x4689020] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Vector_MirrorByPlane(FVector A, FPlane& InPlane);                                                                // [0x4688ed0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Vector_Left();                                                                                                   // [0x4688ea0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool Vector_IsZero(FVector& A);                                                                                          // [0x4688df0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool Vector_IsUnit(FVector& A, float SquaredLenthTolerance);                                                             // [0x4688cd0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool Vector_IsUniform(FVector& A, float Tolerance);                                                                      // [0x4688bb0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool Vector_IsNormal(FVector& A);                                                                                        // [0x4688ae0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool Vector_IsNearlyZero(FVector& A, float Tolerance);                                                                   // [0x46889d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool Vector_IsNAN(FVector& A);                                                                                           // [0x4688900] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// float Vector_HeadingAngle(FVector A);                                                                                    // [0x46887b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Vector_GetSignVector(FVector A);                                                                                 // [0x46886f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Vector_GetProjection(FVector A);                                                                                 // [0x4688650] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float Vector_GetAbsMin(FVector A);                                                                                       // [0x46885b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float Vector_GetAbsMax(FVector A);                                                                                       // [0x4688510] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Vector_GetAbs(FVector A);                                                                                        // [0x4688470] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Vector_Forward();                                                                                                // [0x4688440] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Vector_Down();                                                                                                   // [0x4688410] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float Vector_DistanceSquared(FVector v1, FVector v2);                                                                    // [0x4688330] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float Vector_Distance2DSquared(FVector v1, FVector v2);                                                                  // [0x4688170] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float Vector_Distance2D(FVector v1, FVector v2);                                                                         // [0x46880a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float Vector_Distance(FVector v1, FVector v2);                                                                           // [0x4688240] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float Vector_CosineAngle2D(FVector A, FVector B);                                                                        // [0x4687ea0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Vector_ComponentMin(FVector A, FVector B);                                                                       // [0x4687dc0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Vector_ComponentMax(FVector A, FVector B);                                                                       // [0x4687ce0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Vector_ClampSizeMax2D(FVector A, float Max);                                                                     // [0x4687950] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Vector_ClampSizeMax(FVector A, float Max);                                                                       // [0x4687ae0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Vector_ClampSize2D(FVector A, float Min, float Max);                                                             // [0x46877a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Vector_BoundedToCube(FVector InVect, float InRadius);                                                            // [0x4687690] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Vector_BoundedToBox(FVector InVect, FVector InBoxMin, FVector InBoxMax);                                         // [0x4687550] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Vector_Backward();                                                                                               // [0x4687520] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// void Vector_Assign(FVector& A, FVector& InVector);                                                                       // [0x4687440] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void Vector_AddBounded(FVector& A, FVector InAddVect, float InRadius);                                                   // [0x46872d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// FVector4 Vector4_Zero();                                                                                                 // [0x4687040] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float Vector4_SizeSquared3(FVector4& A);                                                                                 // [0x4686eb0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// float Vector4_SizeSquared(FVector4& A);                                                                                  // [0x4686f70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// float Vector4_Size3(FVector4& A);                                                                                        // [0x4686d20] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// float Vector4_Size(FVector4& A);                                                                                         // [0x4686de0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void Vector4_Set(FVector4& A, float X, float Y, float Z, float W);                                                       // [0x4686b70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// FVector4 Vector4_NormalUnsafe3(FVector4& A);                                                                             // [0x4686870] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void Vector4_Normalize3(FVector4& A, float Tolerance);                                                                   // [0x46869c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// FVector4 Vector4_Normal3(FVector4& A, float Tolerance);                                                                  // [0x46866c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector4 Vector4_Negated(FVector4& A);                                                                                   // [0x4686620] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector4 Vector4_MirrorByVector3(FVector4& Direction, FVector4& SurfaceNormal);                                          // [0x4686490] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool Vector4_IsZero(FVector4& A);                                                                                        // [0x46863d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool Vector4_IsUnit3(FVector4& A, float SquaredLenthTolerance);                                                          // [0x46862a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool Vector4_IsNormal3(FVector4& A);                                                                                     // [0x46861d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool Vector4_IsNearlyZero3(FVector4& A, float Tolerance);                                                                // [0x46860b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool Vector4_IsNAN(FVector4& A);                                                                                         // [0x4685fc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// float Vector4_DotProduct3(FVector4& A, FVector4& B);                                                                     // [0x4685d70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// float Vector4_DotProduct(FVector4& A, FVector4& B);                                                                      // [0x4685e90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector4 Vector4_CrossProduct3(FVector4& A, FVector4& B);                                                                // [0x4685c10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void Vector4_Assign(FVector4& A, FVector4& InVector);                                                                    // [0x4685b20] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// FVector2D Vector2DInterpTo_Constant(FVector2D Current, FVector2D Target, float DeltaTime, float InterpSpeed);            // [0x4685910] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector2D Vector2DInterpTo(FVector2D Current, FVector2D Target, float DeltaTime, float InterpSpeed);                     // [0x4685790] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector2D Vector2D_Zero();                                                                                               // [0x4685af0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector2D Vector2D_Unit45Deg();                                                                                          // [0x4685ac0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector2D Vector2D_One();                                                                                                // [0x4685a90] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector VEase(FVector A, FVector B, float ALPHA, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int32_t Steps);    // [0x4684da0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FDateTime UtcNow();                                                                                                      // [0x4684d60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector4 TransformVector4(FMatrix& Matrix, FVector4& Vec4);                                                              // [0x4684b60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FRotator TransformRotation(FTransform& T, FRotator Rotation);                                                            // [0x4684a10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector TransformLocation(FTransform& T, FVector Location);                                                              // [0x4684870] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector TransformDirection(FTransform& T, FVector Direction);                                                            // [0x46846d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// float Transform_Determinant(FTransform& Transform);                                                                      // [0x4684c80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector2D ToSign2D(FVector2D A);                                                                                         // [0x46845d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector2D ToRounded2D(FVector2D A);                                                                                      // [0x46844c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// void ToDirectionAndLength2D(FVector2D A, FVector2D& OutDir, float& OutLength);                                           // [0x4684330] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FDateTime Today();                                                                                                       // [0x4684680] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FTransform TLerp(FTransform& A, FTransform& B, float ALPHA, TEnumAsByte<ELerpInterpolationMode> InterpMode);             // [0x4683df0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FTransform TInterpTo(FTransform& Current, FTransform& Target, float DeltaTime, float InterpSpeed);                       // [0x4683bd0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FTimespan TimespanZeroValue();                                                                                           // [0x4664f30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float TimespanRatio(FTimespan A, FTimespan B);                                                                           // [0x4684250] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FTimespan TimespanMinValue();                                                                                            // [0x4684220] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FTimespan TimespanMaxValue();                                                                                            // [0x46841f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool TimespanFromString(FString TimespanString, FTimespan& Result);                                                      // [0x46840b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FTransform TEase(FTransform& A, FTransform& B, float ALPHA, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int32_t Steps); // [0x4683940] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// float Tan(float A);                                                                                                      // [0x4684020] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FVector Subtract_VectorVector(FVector A, FVector B);                                                                     // [0x4683860] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Subtract_VectorInt(FVector A, int32_t B);                                                                        // [0x4683770] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Subtract_VectorFloat(FVector A, float B);                                                                        // [0x4683690] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector4 Subtract_Vector4Vector4(FVector4& A, FVector4& B);                                                              // [0x4683560] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector2D Subtract_Vector2DVector2D(FVector2D A, FVector2D B);                                                           // [0x4683490] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector2D Subtract_Vector2DFloat(FVector2D A, float B);                                                                  // [0x46833c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FTimespan Subtract_TimespanTimespan(FTimespan A, FTimespan B);                                                           // [0x4682d20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FQuat Subtract_QuatQuat(FQuat& A, FQuat& B);                                                                             // [0x46832e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FLinearColor Subtract_LinearColorLinearColor(FLinearColor A, FLinearColor B);                                            // [0x46831f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FIntPoint Subtract_IntPointIntPoint(FIntPoint A, FIntPoint B);                                                           // [0x4683120] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FIntPoint Subtract_IntPointInt(FIntPoint A, int32_t B);                                                                  // [0x4683040] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// int32_t Subtract_IntInt(int32_t A, int32_t B);                                                                           // [0x4682f80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int64_t Subtract_Int64Int64(int64_t A, int64_t B);                                                                       // [0x4682eb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float Subtract_FloatFloat(float A, float B);                                                                             // [0x4682de0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FDateTime Subtract_DateTimeTimespan(FDateTime A, FTimespan B);                                                           // [0x4682d20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FTimespan Subtract_DateTimeDateTime(FDateTime A, FDateTime B);                                                           // [0x4682d20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// char Subtract_ByteByte(char A, char B);                                                                                  // [0x4682c60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float Square(float A);                                                                                                   // [0x4682be0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float Sqrt(float A);                                                                                                     // [0x4682b30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FVector Spherical2DToUnitCartesian(FVector2D A);                                                                         // [0x4682a50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float Sin(float A);                                                                                                      // [0x46829c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int64_t SignOfInteger64(int64_t A);                                                                                      // [0x4682870] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t SignOfInteger(int32_t A);                                                                                        // [0x4682920] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float SignOfFloat(float A);                                                                                              // [0x46827a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void SetRandomStreamSeed(FRandomStream& Stream, int32_t NewSeed);                                                        // [0x4682410] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void Set2D(FVector2D& A, float X, float Y);                                                                              // [0x4681d20] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// FVector SelectVector(FVector A, FVector B, bool bPickA);                                                                 // [0x4681870] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FTransform SelectTransform(FTransform& A, FTransform& B, bool bPickA);                                                   // [0x4681b50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FString SelectString(FString A, FString B, bool bPickA);                                                                 // [0x46819b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FRotator SelectRotator(FRotator A, FRotator B, bool bPickA);                                                             // [0x4681870] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// class UObject* SelectObject(class UObject* A, class UObject* B, bool bSelectA);                                          // [0x4681430] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t SelectInt(int32_t A, int32_t B, bool bPickA);                                                                    // [0x4681770] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float SelectFloat(float A, float B, bool bPickA);                                                                        // [0x4681650] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FLinearColor SelectColor(FLinearColor A, FLinearColor B, bool bPickA);                                                   // [0x4681530] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// class UClass* SelectClass(class UClass* A, class UClass* B, bool bSelectA);                                              // [0x4681430] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void SeedRandomStream(FRandomStream& Stream);                                                                            // [0x46813b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// float SafeDivide(float A, float B);                                                                                      // [0x46812e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int64_t Round64(float A);                                                                                                // [0x4681180] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t Round(float A);                                                                                                  // [0x4681250] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FRotator RotatorFromAxisAndAngle(FVector Axis, float Angle);                                                             // [0x4681090] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector RotateAngleAxis(FVector InVect, float AngleDeg, FVector Axis);                                                   // [0x4680f40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FRotator RLerp(FRotator A, FRotator B, float ALPHA, bool bShortestPath);                                                 // [0x467f2d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FRotator RInterpTo_Constant(FRotator Current, FRotator Target, float DeltaTime, float InterpSpeed);                      // [0x467f140] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FRotator RInterpTo(FRotator Current, FRotator Target, float DeltaTime, float InterpSpeed);                               // [0x467efb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// void RGBToHSV_Vector(FLinearColor rgb, FLinearColor& HSV);                                                               // [0x467eed0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void RGBToHSV(FLinearColor InColor, float& H, float& S, float& V, float& A);                                             // [0x467ece0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FLinearColor RGBLinearToHSV(FLinearColor rgb);                                                                           // [0x467ec50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// void ResetVectorSpringState(FVectorSpringState& SpringState);                                                            // [0x4680ea0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void ResetRandomStream(FRandomStream& Stream);                                                                           // [0x4680e20] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void ResetFloatSpringState(FFloatSpringState& SpringState);                                                              // [0x4680d90] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// FRotator REase(FRotator A, FRotator B, float ALPHA, bool bShortestPath, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int32_t Steps); // [0x467ea00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector RandomUnitVectorInEllipticalConeInRadiansFromStream(FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians, FRandomStream& Stream); // [0x4680c00] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector RandomUnitVectorInEllipticalConeInRadians(FVector ConeDir, float MaxYawInRadians, float MaxPitchInRadians);      // [0x4680ad0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector RandomUnitVectorInEllipticalConeInDegreesFromStream(FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, FRandomStream& Stream); // [0x4680930] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector RandomUnitVectorInEllipticalConeInDegrees(FVector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees);      // [0x46807f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector RandomUnitVectorInConeInRadiansFromStream(FVector& ConeDir, float ConeHalfAngleInRadians, FRandomStream& Stream); // [0x46806c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector RandomUnitVectorInConeInRadians(FVector ConeDir, float ConeHalfAngleInRadians);                                  // [0x46805d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector RandomUnitVectorInConeInDegreesFromStream(FVector& ConeDir, float ConeHalfAngleInDegrees, FRandomStream& Stream); // [0x4680490] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector RandomUnitVectorInConeInDegrees(FVector ConeDir, float ConeHalfAngleInDegrees);                                  // [0x46803a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector RandomUnitVectorFromStream(FRandomStream& Stream);                                                               // [0x4680300] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector RandomUnitVector();                                                                                              // [0x46802c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FRotator RandomRotatorFromStream(bool bRoll, FRandomStream& Stream);                                                     // [0x46801d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FRotator RandomRotator(bool bRoll);                                                                                      // [0x4680130] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector RandomPointInBoundingBox(FVector Origin, FVector BoxExtent);                                                     // [0x467fff0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// int32_t RandomIntegerInRangeFromStream(int32_t Min, int32_t Max, FRandomStream& Stream);                                 // [0x467fee0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// int32_t RandomIntegerInRange(int32_t Min, int32_t Max);                                                                  // [0x467fdd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t RandomIntegerFromStream(int32_t Max, FRandomStream& Stream);                                                     // [0x467fd00] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// int64_t RandomInteger64InRange(int64_t Min, int64_t Max);                                                                // [0x467fb20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int64_t RandomInteger64(int64_t Max);                                                                                    // [0x467fa50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t RandomInteger(int32_t Max);                                                                                      // [0x467fc40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float RandomFloatInRangeFromStream(float Min, float Max, FRandomStream& Stream);                                         // [0x467f930] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// float RandomFloatInRange(float Min, float Max);                                                                          // [0x467f830] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float RandomFloatFromStream(FRandomStream& Stream);                                                                      // [0x467f7a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// float RandomFloat();                                                                                                     // [0x467f760] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool RandomBoolWithWeightFromStream(float Weight, FRandomStream& RandomStream);                                          // [0x467f680] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool RandomBoolWithWeight(float Weight);                                                                                 // [0x467f600] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool RandomBoolFromStream(FRandomStream& Stream);                                                                        // [0x467f570] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool RandomBool();                                                                                                       // [0x467f510] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float RadiansToDegrees(float A);                                                                                         // [0x467f480] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FVector Quat_VectorUp(FQuat& Q);                                                                                         // [0x467d6a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Quat_VectorRight(FQuat& Q);                                                                                      // [0x467d5b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Quat_VectorForward(FQuat& Q);                                                                                    // [0x467d4b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Quat_UnrotateVector(FQuat& Q, FVector& V);                                                                       // [0x467e7e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// float Quat_SizeSquared(FQuat& Q);                                                                                        // [0x467e720] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// float Quat_Size(FQuat& Q);                                                                                               // [0x467e660] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void Quat_SetFromEuler(FQuat& Q, FVector& Euler);                                                                        // [0x467e580] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void Quat_SetComponents(FQuat& Q, float X, float Y, float Z, float W);                                                   // [0x467e3d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// FRotator Quat_Rotator(FQuat& Q);                                                                                         // [0x467e330] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Quat_RotateVector(FQuat& Q, FVector& V);                                                                         // [0x467e130] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FQuat Quat_Normalized(FQuat& Q, float Tolerance);                                                                        // [0x467dfd0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void Quat_Normalize(FQuat& Q, float Tolerance);                                                                          // [0x467de80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// FQuat Quat_MakeFromEuler(FVector& Euler);                                                                                // [0x467dde0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FQuat Quat_Log(FQuat& Q);                                                                                                // [0x467dd40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool Quat_IsNormalized(FQuat& Q);                                                                                        // [0x467dc70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool Quat_IsNonFinite(FQuat& Q);                                                                                         // [0x467db90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool Quat_IsIdentity(FQuat& Q, float Tolerance);                                                                         // [0x467da70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool Quat_IsFinite(FQuat& Q);                                                                                            // [0x467d990] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FQuat Quat_Inversed(FQuat& Q);                                                                                           // [0x467d900] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FQuat Quat_Identity();                                                                                                   // [0x467d8e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Quat_GetRotationAxis(FQuat& Q);                                                                                  // [0x467d7b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Quat_GetAxisZ(FQuat& Q);                                                                                         // [0x467d6a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Quat_GetAxisY(FQuat& Q);                                                                                         // [0x467d5b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Quat_GetAxisX(FQuat& Q);                                                                                         // [0x467d4b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// float Quat_GetAngle(FQuat& Q);                                                                                           // [0x467d400] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FQuat Quat_FindBetween(FVector& v1, FVector& v2);                                                                        // [0x467d310] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FQuat Quat_Exp(FQuat& Q);                                                                                                // [0x467d270] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Quat_Euler(FQuat& Q);                                                                                            // [0x467d1d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void Quat_EnforceShortestArcWith(FQuat& A, FQuat& B);                                                                    // [0x467d0a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// float Quat_AngularDistance(FQuat& A, FQuat& B);                                                                          // [0x467cf60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector ProjectVectorOnToVector(FVector V, FVector Target);                                                              // [0x467cdf0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector ProjectVectorOnToPlane(FVector V, FVector PlaneNormal);                                                          // [0x467ccd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector ProjectPointOnToPlane(FVector Point, FVector PlaneBase, FVector PlaneNormal);                                    // [0x467cb60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool PointsAreCoplanar(TArray<FVector>& Points, float Tolerance);                                                        // [0x467ca60] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// float PerlinNoise1D(float Value);                                                                                        // [0x467c9d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t Percent_IntInt(int32_t A, int32_t B);                                                                            // [0x467c8f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float Percent_FloatFloat(float A, float B);                                                                              // [0x467c750] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// char Percent_ByteByte(char A, char B);                                                                                   // [0x467c670] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t Or_IntInt(int32_t A, int32_t B);                                                                                 // [0x1020450] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int64_t Or_Int64Int64(int64_t A, int64_t B);                                                                             // [0x1020a20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FDateTime Now();                                                                                                         // [0x467c630] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool NotEqualExactly_VectorVector(FVector A, FVector B);                                                                 // [0x467b370] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool NotEqualExactly_Vector4Vector4(FVector4& A, FVector4& B);                                                           // [0x467b240] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool NotEqualExactly_Vector2DVector2D(FVector2D A, FVector2D B);                                                         // [0x467b170] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool NotEqual_VectorVector(FVector A, FVector B, float ErrorTolerance);                                                  // [0x467c450] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool NotEqual_Vector4Vector4(FVector4& A, FVector4& B, float ErrorTolerance);                                            // [0x467c2c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool NotEqual_Vector2DVector2D(FVector2D A, FVector2D B, float ErrorTolerance);                                          // [0x467c190] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool NotEqual_TimespanTimespan(FTimespan A, FTimespan B);                                                                // [0x467b6c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool NotEqual_RotatorRotator(FRotator A, FRotator B, float ErrorTolerance);                                              // [0x467bfa0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool NotEqual_QuatQuat(FQuat& A, FQuat& B, float ErrorTolerance);                                                        // [0x467be40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool NotEqual_ObjectObject(class UObject* A, class UObject* B);                                                          // [0x467b5f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool NotEqual_NameName(FName A, FName B);                                                                                // [0x467bd50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool NotEqual_MatrixMatrix(FMatrix& A, FMatrix& B, float Tolerance);                                                     // [0x467bbc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool NotEqual_LinearColorLinearColor(FLinearColor A, FLinearColor B);                                                    // [0x467bad0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool NotEqual_IntPointIntPoint(FIntPoint A, FIntPoint B);                                                                // [0x467ba00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool NotEqual_IntInt(int32_t A, int32_t B);                                                                              // [0x467b930] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool NotEqual_Int64Int64(int64_t A, int64_t B);                                                                          // [0x467b860] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool NotEqual_FloatFloat(float A, float B);                                                                              // [0x467b780] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool NotEqual_DateTimeDateTime(FDateTime A, FDateTime B);                                                                // [0x467b6c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool NotEqual_ClassClass(class UClass* A, class UClass* B);                                                              // [0x467b5f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool NotEqual_ByteByte(char A, char B);                                                                                  // [0x467b530] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool NotEqual_BoolBool(bool A, bool B);                                                                                  // [0x467b450] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool Not_PreBool(bool A);                                                                                                // [0x467c5a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int64_t Not_Int64(int64_t A);                                                                                            // [0x1020990] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t Not_Int(int32_t A);                                                                                              // [0x10203d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FVector2D NormalSafe2D(FVector2D A, float Tolerance);                                                                    // [0x467abd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float NormalizeToRange(float Value, float RangeMin, float RangeMax);                                                     // [0x467af50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FRotator NormalizedDeltaRotator(FRotator A, FRotator B);                                                                 // [0x467b070] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float NormalizeAxis(float Angle);                                                                                        // [0x467aec0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void Normalize2D(FVector2D& A, float Tolerance);                                                                         // [0x467ad40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// FVector2D Normal2D(FVector2D A);                                                                                         // [0x467a8f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Normal(FVector A, float Tolerance);                                                                              // [0x467aa10] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector NegateVector(FVector A);                                                                                         // [0x467a7b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FRotator NegateRotator(FRotator A);                                                                                      // [0x467a710] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector2D Negated2D(FVector2D& A);                                                                                       // [0x467a850] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool NearlyEqual_TransformTransform(FTransform& A, FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance); // [0x467a4e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance);                                                     // [0x467a3c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float MultiplyMultiply_FloatFloat(float Base, float Exp);                                                                // [0x4679070] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float MultiplyByPi(float Value);                                                                                         // [0x4678fe0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FVector Multiply_VectorVector(FVector A, FVector B);                                                                     // [0x467a2e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Multiply_VectorInt(FVector A, int32_t B);                                                                        // [0x4679e50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Multiply_VectorFloat(FVector A, float B);                                                                        // [0x4679d70] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector4 Multiply_Vector4Vector4(FVector4& A, FVector4& B);                                                              // [0x467a1b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector2D Multiply_Vector2DVector2D(FVector2D A, FVector2D B);                                                           // [0x467a0e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector2D Multiply_Vector2DFloat(FVector2D A, float B);                                                                  // [0x467a010] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FTimespan Multiply_TimespanFloat(FTimespan A, float Scalar);                                                             // [0x4679f40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FRotator Multiply_RotatorInt(FRotator A, int32_t B);                                                                     // [0x4679e50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FRotator Multiply_RotatorFloat(FRotator A, float B);                                                                     // [0x4679d70] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FQuat Multiply_QuatQuat(FQuat& A, FQuat& B);                                                                             // [0x4679c30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FMatrix Multiply_MatrixMatrix(FMatrix& A, FMatrix& B);                                                                   // [0x4679a20] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FMatrix Multiply_MatrixFloat(FMatrix& A, float B);                                                                       // [0x46798b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FLinearColor Multiply_LinearColorLinearColor(FLinearColor A, FLinearColor B);                                            // [0x46797c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FLinearColor Multiply_LinearColorFloat(FLinearColor A, float B);                                                         // [0x46796f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FIntPoint Multiply_IntPointIntPoint(FIntPoint A, FIntPoint B);                                                           // [0x4679610] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FIntPoint Multiply_IntPointInt(FIntPoint A, int32_t B);                                                                  // [0x4679530] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// int32_t Multiply_IntInt(int32_t A, int32_t B);                                                                           // [0x4679470] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float Multiply_IntFloat(int32_t A, float B);                                                                             // [0x46793a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int64_t Multiply_Int64Int64(int64_t A, int64_t B);                                                                       // [0x46792d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float Multiply_FloatFloat(float A, float B);                                                                             // [0x4679200] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// char Multiply_ByteByte(char A, char B);                                                                                  // [0x4679140] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FVector MirrorVectorByNormal(FVector InVect, FVector InNormal);                                                          // [0x466b900] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// void MinOfIntArray(TArray<int32_t>& IntArray, int32_t& IndexOfMinValue, int32_t& MinValue);                              // [0x4678be0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// void MinOfFloatArray(TArray<float>& FloatArray, int32_t& IndexOfMinValue, float& MinValue);                              // [0x4678aa0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// void MinOfByteArray(TArray<char>& ByteArray, int32_t& IndexOfMinValue, char& MinValue);                                  // [0x4678960] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// int64_t MinInt64(int64_t A, int64_t B);                                                                                  // [0x4678890] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void MinimumAreaRectangle(class UObject* WorldContextObject, TArray<FVector>& InVerts, FVector& SampleSurfaceNormal, FVector& OutRectCenter, FRotator& OutRectRotation, float& OutSideLengthX, float& OutSideLengthY, bool bDebugDraw); // [0x4678d20] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// int32_t Min(int32_t A, int32_t B);                                                                                       // [0x46787c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void MaxOfIntArray(TArray<int32_t>& IntArray, int32_t& IndexOfMaxValue, int32_t& MaxValue);                              // [0x4678680] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// void MaxOfFloatArray(TArray<float>& FloatArray, int32_t& IndexOfMaxValue, float& MaxValue);                              // [0x4678540] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// void MaxOfByteArray(TArray<char>& ByteArray, int32_t& IndexOfMaxValue, char& MaxValue);                                  // [0x4678400] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// int64_t MaxInt64(int64_t A, int64_t B);                                                                                  // [0x4678330] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t Max(int32_t A, int32_t B);                                                                                       // [0x4678260] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FVector4 Matrix_TransformVector4(FMatrix& M, FVector4 V);                                                                // [0x4678000] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector4 Matrix_TransformVector(FMatrix& M, FVector V);                                                                  // [0x4678120] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector4 Matrix_TransformPosition(FMatrix& M, FVector V);                                                                // [0x4677ec0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FQuat Matrix_ToQuat(FMatrix& M);                                                                                         // [0x4677e20] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void Matrix_SetOrigin(FMatrix& M, FVector NewOrigin);                                                                    // [0x4677d40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void Matrix_SetColumn(FMatrix& M, TEnumAsByte<EMatrixColumns> Column, FVector Value);                                    // [0x4677c10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void Matrix_SetAxis(FMatrix& M, TEnumAsByte<EAxis> Axis, FVector AxisVector);                                            // [0x4677ac0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// FMatrix Matrix_ScaleTranslation(FMatrix& M, FVector Scale3D);                                                            // [0x4677980] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FMatrix Matrix_RemoveTranslation(FMatrix& M);                                                                            // [0x46778c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void Matrix_RemoveScaling(FMatrix& M, float Tolerance);                                                                  // [0x4677530] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// FMatrix Matrix_Mirror(FMatrix& M, TEnumAsByte<EAxis> MirrorAxis, TEnumAsByte<EAxis> FlipAxis);                           // [0x46773b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Matrix_InverseTransformVector(FMatrix& M, FVector V);                                                            // [0x4676ad0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Matrix_InverseTransformPosition(FMatrix& M, FVector V);                                                          // [0x46761e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FMatrix Matrix_Identity();                                                                                               // [0x4676190] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Matrix_GetUnitAxis(FMatrix& M, TEnumAsByte<EAxis> Axis);                                                         // [0x4675f30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void Matrix_GetUnitAxes(FMatrix& M, FVector& X, FVector& Y, FVector& Z);                                                 // [0x4675b70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FMatrix Matrix_GetTransposed(FMatrix& M);                                                                                // [0x4675980] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FMatrix Matrix_GetTransposeAdjoint(FMatrix& M);                                                                          // [0x4675770] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Matrix_GetScaleVector(FMatrix& M, float Tolerance);                                                              // [0x46752a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Matrix_GetScaledAxis(FMatrix& M, TEnumAsByte<EAxis> Axis);                                                       // [0x4675600] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void Matrix_GetScaledAxes(FMatrix& M, FVector& X, FVector& Y, FVector& Z);                                               // [0x4675450] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// float Matrix_GetRotDeterminant(FMatrix& M);                                                                              // [0x4675190] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FRotator Matrix_GetRotator(FMatrix& M);                                                                                  // [0x4663b90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Matrix_GetOrigin(FMatrix& InMatrix);                                                                             // [0x46750f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// float Matrix_GetMaximumAxisScale(FMatrix& M);                                                                            // [0x4674fc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FMatrix Matrix_GetMatrixWithoutScale(FMatrix& M, float Tolerance);                                                       // [0x4674b90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FMatrix Matrix_GetInverse(FMatrix& M);                                                                                   // [0x46742f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool Matrix_GetFrustumTopPlane(FMatrix& M, FPlane& OutPlane);                                                            // [0x4674100] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool Matrix_GetFrustumRightPlane(FMatrix& M, FPlane& OutPlane);                                                          // [0x4673f10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool Matrix_GetFrustumNearPlane(FMatrix& M, FPlane& OutPlane);                                                           // [0x4673d60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool Matrix_GetFrustumLeftPlane(FMatrix& M, FPlane& OutPlane);                                                           // [0x4673b70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool Matrix_GetFrustumFarPlane(FMatrix& M, FPlane& OutPlane);                                                            // [0x4673980] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool Matrix_GetFrustumBottomPlane(FMatrix& M, FPlane& OutPlane);                                                         // [0x4673790] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// float Matrix_GetDeterminant(FMatrix& M);                                                                                 // [0x4673540] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Matrix_GetColumn(FMatrix& M, TEnumAsByte<EMatrixColumns> Column);                                                // [0x4673440] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool Matrix_ContainsNaN(FMatrix& M);                                                                                     // [0x4673360] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FMatrix Matrix_ConcatenateTranslation(FMatrix& M, FVector Translation);                                                  // [0x46731f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FMatrix Matrix_ApplyScale(FMatrix& M, float Scale);                                                                      // [0x4672f80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// float MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);                  // [0x4672dd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);                    // [0x4672c20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FVector4 MakeVector4(float X, float Y, float Z, float W);                                                                // [0x4672980] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector2D MakeVector2D(float X, float Y);                                                                                // [0x46728b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector MakeVector(float X, float Y, float Z);                                                                           // [0x4672b00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FTransform MakeTransform(FVector Location, FRotator Rotation, FVector Scale);                                            // [0x4672710] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FTimespan MakeTimespan2(int32_t Days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t FractionNano);            // [0x46723f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FTimespan MakeTimespan(int32_t Days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t Milliseconds);             // [0x4672580] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FRotator MakeRotFromZY(FVector& Z, FVector& Y);                                                                          // [0x4672070] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FRotator MakeRotFromZX(FVector& Z, FVector& X);                                                                          // [0x4671f60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FRotator MakeRotFromZ(FVector& Z);                                                                                       // [0x4671ea0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FRotator MakeRotFromYZ(FVector& Y, FVector& Z);                                                                          // [0x4671d90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FRotator MakeRotFromYX(FVector& Y, FVector& X);                                                                          // [0x4671c80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FRotator MakeRotFromY(FVector& Y);                                                                                       // [0x4671bc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FRotator MakeRotFromXZ(FVector& X, FVector& Z);                                                                          // [0x4671ab0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FRotator MakeRotFromXY(FVector& X, FVector& Y);                                                                          // [0x46719a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FRotator MakeRotFromX(FVector& X);                                                                                       // [0x46718e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FRotator MakeRotator(float Roll, float Pitch, float Yaw);                                                                // [0x46722d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FRotator MakeRotationFromAxes(FVector Forward, FVector Right, FVector Up);                                               // [0x4672180] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FTransform MakeRelativeTransform(FTransform& A, FTransform& RelativeTo);                                                 // [0x4671750] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FRandomStream MakeRandomStream(int32_t InitialSeed);                                                                     // [0x46716c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FQualifiedFrameTime MakeQualifiedFrameTime(FFrameNumber Frame, FFrameRate FrameRate, float SubFrame);                    // [0x46715a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase);                                   // [0x4671480] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FPlane MakePlaneFromPointAndNormal(FVector Point, FVector Normal);                                                       // [0x4671390] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FFrameRate MakeFrameRate(int32_t Numerator, int32_t Denominator);                                                        // [0x46712d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FDateTime MakeDateTime(int32_t Year, int32_t Month, int32_t Day, int32_t Hour, int32_t Minute, int32_t Second, int32_t Millisecond); // [0x46710c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FLinearColor MakeColor(float R, float G, float B, float A);                                                              // [0x4670f40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FBox2D MakeBox2D(FVector2D Min, FVector2D Max);                                                                          // [0x4670d70] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FBox MakeBox(FVector Min, FVector Max);                                                                                  // [0x4670e50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float Loge(float A);                                                                                                     // [0x4670ce0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float Log(float A, float Base);                                                                                          // [0x4670c10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool LinePlaneIntersection_OriginNormal(FVector& LineStart, FVector& LineEnd, FVector PlaneOrigin, FVector PlaneNormal, float& T, FVector& Intersection); // [0x466f750] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool LinePlaneIntersection(FVector& LineStart, FVector& LineEnd, FPlane& APlane, float& T, FVector& Intersection);       // [0x466f560] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FLinearColor LinearColorLerpUsingHSV(FLinearColor A, FLinearColor B, float ALPHA);                                       // [0x466fae0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FLinearColor LinearColorLerp(FLinearColor A, FLinearColor B, float ALPHA);                                               // [0x466f980] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FLinearColor LinearColor_Yellow();                                                                                       // [0x4670bf0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FLinearColor LinearColor_White();                                                                                        // [0x4670bd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FLinearColor LinearColor_Transparent();                                                                                  // [0x4670bb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FColor LinearColor_ToRGBE(FLinearColor InLinearColor);                                                                   // [0x4670b20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FLinearColor LinearColor_ToNewOpacity(FLinearColor InColor, float InOpacity);                                            // [0x4670a30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// void LinearColor_SetTemperature(FLinearColor& InOutColor, float InTemperature);                                          // [0x4670950] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void LinearColor_SetRGBA(FLinearColor& InOutColor, float R, float G, float B, float A);                                  // [0x4670710] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void LinearColor_SetRandomHue(FLinearColor& InOutColor);                                                                 // [0x46708c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void LinearColor_SetFromSRGB(FLinearColor& InOutColor, FColor& InSRGB);                                                  // [0x4670630] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void LinearColor_SetFromPow22(FLinearColor& InOutColor, FColor& InColor);                                                // [0x4670550] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void LinearColor_SetFromHSV(FLinearColor& InOutColor, float H, float S, float V, float A);                               // [0x46703a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void LinearColor_Set(FLinearColor& InOutColor, FLinearColor InColor);                                                    // [0x46702d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// FLinearColor LinearColor_Red();                                                                                          // [0x46702b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FColor LinearColor_QuantizeRound(FLinearColor InColor);                                                                  // [0x4670220] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FColor LinearColor_Quantize(FLinearColor InColor);                                                                       // [0x4670190] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool LinearColor_IsNearEqual(FLinearColor A, FLinearColor B, float Tolerance);                                           // [0x4670030] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FLinearColor LinearColor_Green();                                                                                        // [0x4670010] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FLinearColor LinearColor_Gray();                                                                                         // [0x466fff0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float LinearColor_GetMin(FLinearColor InColor);                                                                          // [0x466ff60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float LinearColor_GetMax(FLinearColor InColor);                                                                          // [0x466fed0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float LinearColor_GetLuminance(FLinearColor InColor);                                                                    // [0x466fe30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float LinearColor_Distance(FLinearColor C1, FLinearColor C2);                                                            // [0x466fd30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FLinearColor LinearColor_Desaturated(FLinearColor InColor, float InDesaturation);                                        // [0x466fc50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FLinearColor LinearColor_Blue();                                                                                         // [0x466fc30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FLinearColor LinearColor_Black();                                                                                        // [0x466fc10] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector LessLess_VectorRotator(FVector A, FRotator B);                                                                   // [0x466f070] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool LessEqual_TimespanTimespan(FTimespan A, FTimespan B);                                                               // [0x466ed40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool LessEqual_IntInt(int32_t A, int32_t B);                                                                             // [0x466efa0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool LessEqual_Int64Int64(int64_t A, int64_t B);                                                                         // [0x466eed0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool LessEqual_FloatFloat(float A, float B);                                                                             // [0x466ee00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool LessEqual_DateTimeDateTime(FDateTime A, FDateTime B);                                                               // [0x466ed40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool LessEqual_ByteByte(char A, char B);                                                                                 // [0x466ec80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool Less_TimespanTimespan(FTimespan A, FTimespan B);                                                                    // [0x466f230] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool Less_IntInt(int32_t A, int32_t B);                                                                                  // [0x466f490] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool Less_Int64Int64(int64_t A, int64_t B);                                                                              // [0x466f3c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool Less_FloatFloat(float A, float B);                                                                                  // [0x466f2f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool Less_DateTimeDateTime(FDateTime A, FDateTime B);                                                                    // [0x466f230] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool Less_ByteByte(char A, char B);                                                                                      // [0x466f170] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float Lerp(float A, float B, float ALPHA);                                                                               // [0x466eb60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool IsZero2D(FVector2D& A);                                                                                             // [0x466eab0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool IsPointInBoxWithTransform(FVector Point, FTransform& BoxWorldTransform, FVector BoxExtent);                         // [0x466e920] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool IsPointInBox(FVector Point, FVector BoxOrigin, FVector BoxExtent);                                                  // [0x466e7e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool IsNearlyZero2D(FVector2D& A, float Tolerance);                                                                      // [0x466e6e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool IsMorning(FDateTime A);                                                                                             // [0x466e630] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool IsLeapYear(int32_t Year);                                                                                           // [0x466e5a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool IsAfternoon(FDateTime A);                                                                                           // [0x466e4f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FTransform InvertTransform(FTransform& T);                                                                               // [0x466e2e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FRotator InverseTransformRotation(FTransform& T, FRotator Rotation);                                                     // [0x466e190] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector InverseTransformLocation(FTransform& T, FVector Location);                                                       // [0x466df90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector InverseTransformDirection(FTransform& T, FVector Direction);                                                     // [0x466ddf0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FIntPoint IntPoint_Zero();                                                                                               // [0x466ddc0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FIntPoint IntPoint_Up();                                                                                                 // [0x466dd90] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FIntPoint IntPoint_Right();                                                                                              // [0x466dd70] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FIntPoint IntPoint_One();                                                                                                // [0x466dd40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FIntPoint IntPoint_Left();                                                                                               // [0x466dd10] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FIntPoint IntPoint_Down();                                                                                               // [0x466dce0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool InRange_IntInt(int32_t Value, int32_t Min, int32_t Max, bool InclusiveMin, bool InclusiveMax);                      // [0x466db40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool InRange_Int64Int64(int64_t Value, int64_t Min, int64_t Max, bool InclusiveMin, bool InclusiveMax);                  // [0x466d9a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax);                        // [0x466d7f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float Hypotenuse(float Width, float Height);                                                                             // [0x466d720] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FLinearColor HSVToRGBLinear(FLinearColor HSV);                                                                           // [0x466d5b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// void HSVToRGB_Vector(FLinearColor HSV, FLinearColor& rgb);                                                               // [0x466d640] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FLinearColor HSVToRGB(float H, float S, float V, float A);                                                               // [0x466d420] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float GridSnap_Float(float Location, float GridSize);                                                                    // [0x466d2f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FVector GreaterGreater_VectorRotator(FVector A, FRotator B);                                                             // [0x466ce00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool GreaterEqual_TimespanTimespan(FTimespan A, FTimespan B);                                                            // [0x466cad0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool GreaterEqual_IntInt(int32_t A, int32_t B);                                                                          // [0x466cd30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool GreaterEqual_Int64Int64(int64_t A, int64_t B);                                                                      // [0x466cc60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool GreaterEqual_FloatFloat(float A, float B);                                                                          // [0x466cb90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool GreaterEqual_DateTimeDateTime(FDateTime A, FDateTime B);                                                            // [0x466cad0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool GreaterEqual_ByteByte(char A, char B);                                                                              // [0x466ca10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool Greater_TimespanTimespan(FTimespan A, FTimespan B);                                                                 // [0x466cfc0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool Greater_IntInt(int32_t A, int32_t B);                                                                               // [0x466d220] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool Greater_Int64Int64(int64_t A, int64_t B);                                                                           // [0x466d150] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool Greater_FloatFloat(float A, float B);                                                                               // [0x466d080] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool Greater_DateTimeDateTime(FDateTime A, FDateTime B);                                                                 // [0x466cfc0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool Greater_ByteByte(char A, char B);                                                                                   // [0x466cf00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t GetYear(FDateTime A);                                                                                            // [0x466c990] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// void GetYawPitchFromVector(FVector InVec, float& Yaw, float& Pitch);                                                     // [0x466c860] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector GetVectorArrayAverage(TArray<FVector>& Vectors);                                                                 // [0x466c670] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector GetUpVector(FRotator InRot);                                                                                     // [0x466c5d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float GetTotalSeconds(FTimespan A);                                                                                      // [0x466c540] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float GetTotalMinutes(FTimespan A);                                                                                      // [0x466c4b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float GetTotalMilliseconds(FTimespan A);                                                                                 // [0x466c420] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float GetTotalHours(FTimespan A);                                                                                        // [0x466c390] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float GetTotalDays(FTimespan A);                                                                                         // [0x466c300] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FTimespan GetTimeOfDay(FDateTime A);                                                                                     // [0x466c280] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float GetTAU();                                                                                                          // [0x466c260] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void GetSlopeDegreeAngles(FVector& MyRightYAxis, FVector& FloorNormal, FVector& UpVector, float& OutSlopePitchDegreeAngle, float& OutSlopeRollDegreeAngle); // [0x466beb0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// int32_t GetSeconds(FTimespan A);                                                                                         // [0x466bdf0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// int32_t GetSecond(FDateTime A);                                                                                          // [0x466bdf0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector2D GetRotated2D(FVector2D A, float AngleDeg);                                                                     // [0x466baa0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector GetRightVector(FRotator InRot);                                                                                  // [0x466ba00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector GetReflectionVector(FVector Direction, FVector SurfaceNormal);                                                   // [0x466b900] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float GetPointDistanceToSegment(FVector Point, FVector SegmentStart, FVector SegmentEnd);                                // [0x466b7c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float GetPointDistanceToLine(FVector Point, FVector LineOrigin, FVector LineDirection);                                  // [0x466b680] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float GetPI();                                                                                                           // [0x466b660] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t GetMonth(FDateTime A);                                                                                           // [0x466b510] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// int32_t GetMinutes(FTimespan A);                                                                                         // [0x466b460] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// int32_t GetMinute(FDateTime A);                                                                                          // [0x466b460] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float GetMinElement(FVector A);                                                                                          // [0x466b3e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float GetMin2D(FVector2D A);                                                                                             // [0x466b360] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// int32_t GetMilliseconds(FTimespan A);                                                                                    // [0x466b2a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// int32_t GetMillisecond(FDateTime A);                                                                                     // [0x466b1f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float GetMaxElement(FVector A);                                                                                          // [0x466b170] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float GetMax2D(FVector2D A);                                                                                             // [0x466b0f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// int32_t GetHours(FTimespan A);                                                                                           // [0x466ad20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// int32_t GetHour12(FDateTime A);                                                                                          // [0x466aca0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// int32_t GetHour(FDateTime A);                                                                                            // [0x466ad20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector GetForwardVector(FRotator InRot);                                                                                // [0x466ac00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FTimespan GetDuration(FTimespan A);                                                                                      // [0x466ab80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector GetDirectionUnitVector(FVector From, FVector To);                                                                // [0x466a980] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// int32_t GetDays(FTimespan A);                                                                                            // [0x466a900] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// int32_t GetDayOfYear(FDateTime A);                                                                                       // [0x466a880] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// int32_t GetDay(FDateTime A);                                                                                             // [0x466a800] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FDateTime GetDate(FDateTime A);                                                                                          // [0x466a770] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// void GetAzimuthAndElevation(FVector InDirection, FTransform& ReferenceFrame, float& Azimuth, float& Elevation);          // [0x466a290] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void GetAxes(FRotator A, FVector& X, FVector& Y, FVector& Z);                                                            // [0x466a110] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// float GetAbsMax2D(FVector2D A);                                                                                          // [0x466a080] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector2D GetAbs2D(FVector2D A);                                                                                         // [0x4669ff0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float FWrap(float Value, float Min, float Max);                                                                          // [0x46691f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FIntVector FTruncVector(FVector& InVector);                                                                              // [0x4669150] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// int64_t FTrunc64(float A);                                                                                               // [0x4669050] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t FTrunc(float A);                                                                                                 // [0x46690d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FTimespan FromSeconds(float Seconds);                                                                                    // [0x4669f60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FTimespan FromMinutes(float Minutes);                                                                                    // [0x4669ed0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FTimespan FromMilliseconds(float Milliseconds);                                                                          // [0x4669e40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FTimespan FromHours(float Hours);                                                                                        // [0x4669db0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FTimespan FromDays(float Days);                                                                                          // [0x4669d20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float Fraction(float A);                                                                                                 // [0x4669c80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t FMod(float Dividend, float Divisor, float& Remainder);                                                           // [0x4668f30] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// float FMin(float A, float B);                                                                                            // [0x4668e60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float FMax(float A, float B);                                                                                            // [0x4668d90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float FloatSpringInterp(float Current, float Target, FFloatSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass); // [0x4669a50] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// float FixedTurn(float InCurrent, float InDesired, float InDeltaRate);                                                    // [0x4669930] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed);                               // [0x4668c30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed);                                        // [0x4668ad0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float FInterpEaseInOut(float A, float B, float ALPHA, float Exponent);                                                   // [0x4668970] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void FindNearestPointsOnLineSegments(FVector Segment1Start, FVector Segment1End, FVector Segment2Start, FVector Segment2End, FVector& Segment1Point, FVector& Segment2Point); // [0x4669710] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FRotator FindLookAtRotation(FVector& Start, FVector& Target);                                                            // [0x46695d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector FindClosestPointOnSegment(FVector Point, FVector SegmentStart, FVector SegmentEnd);                              // [0x4669480] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector FindClosestPointOnLine(FVector Point, FVector LineOrigin, FVector LineDirection);                                // [0x4669330] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// int64_t FFloor64(float A);                                                                                               // [0x4668820] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t FFloor(float A);                                                                                                 // [0x46688e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float FClamp(float Value, float Min, float Max);                                                                         // [0x4668700] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int64_t FCeil64(float A);                                                                                                // [0x4668590] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t FCeil(float A);                                                                                                  // [0x4668660] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float Exp(float A);                                                                                                      // [0x4668500] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool EqualExactly_VectorVector(FVector A, FVector B);                                                                    // [0x4668350] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool EqualExactly_Vector4Vector4(FVector4& A, FVector4& B);                                                              // [0x4668220] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool EqualExactly_Vector2DVector2D(FVector2D A, FVector2D B);                                                            // [0x4668150] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool EqualEqual_VectorVector(FVector A, FVector B, float ErrorTolerance);                                                // [0x4668000] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool EqualEqual_Vector4Vector4(FVector4& A, FVector4& B, float ErrorTolerance);                                          // [0x4667e70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool EqualEqual_Vector2DVector2D(FVector2D A, FVector2D B, float ErrorTolerance);                                        // [0x4667d40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool EqualEqual_TransformTransform(FTransform& A, FTransform& B);                                                        // [0x4667bc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool EqualEqual_TimespanTimespan(FTimespan A, FTimespan B);                                                              // [0x46671c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool EqualEqual_RotatorRotator(FRotator A, FRotator B, float ErrorTolerance);                                            // [0x46679d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool EqualEqual_QuatQuat(FQuat& A, FQuat& B, float Tolerance);                                                           // [0x4667870] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool EqualEqual_ObjectObject(class UObject* A, class UObject* B);                                                        // [0x46670f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool EqualEqual_NameName(FName A, FName B);                                                                              // [0x4667780] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool EqualEqual_MatrixMatrix(FMatrix& A, FMatrix& B, float Tolerance);                                                   // [0x46675f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool EqualEqual_LinearColorLinearColor(FLinearColor A, FLinearColor B);                                                  // [0x4667500] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool EqualEqual_IntInt(int32_t A, int32_t B);                                                                            // [0x4667430] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool EqualEqual_Int64Int64(int64_t A, int64_t B);                                                                        // [0x4667360] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool EqualEqual_FloatFloat(float A, float B);                                                                            // [0x4667280] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool EqualEqual_DateTimeDateTime(FDateTime A, FDateTime B);                                                              // [0x46671c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool EqualEqual_ClassClass(class UClass* A, class UClass* B);                                                            // [0x46670f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool EqualEqual_ByteByte(char A, char B);                                                                                // [0x4667030] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool EqualEqual_BoolBool(bool A, bool B);                                                                                // [0x4666f50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool Equal_IntPointIntPoint(FIntPoint A, FIntPoint B);                                                                   // [0x4668430] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float Ease(float A, float B, float ALPHA, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int32_t Steps);           // [0x4666d70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FVector DynamicWeightedMovingAverage_FVector(FVector CurrentSample, FVector PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // [0x4666a00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FRotator DynamicWeightedMovingAverage_FRotator(FRotator CurrentSample, FRotator PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // [0x4666840] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // [0x4666bc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float DotProduct2D(FVector2D A, FVector2D B);                                                                            // [0x4666690] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float Dot_VectorVector(FVector A, FVector B);                                                                            // [0x4666760] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Divide_VectorVector(FVector A, FVector B);                                                                       // [0x4666560] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Divide_VectorInt(FVector A, int32_t B);                                                                          // [0x4666420] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Divide_VectorFloat(FVector A, float B);                                                                          // [0x46662e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector4 Divide_Vector4Vector4(FVector4& A, FVector4& B);                                                                // [0x46661b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector2D Divide_Vector2DVector2D(FVector2D A, FVector2D B);                                                             // [0x46660b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector2D Divide_Vector2DFloat(FVector2D A, float B);                                                                    // [0x4665f90] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FTimespan Divide_TimespanFloat(FTimespan A, float Scalar);                                                               // [0x4665ec0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FLinearColor Divide_LinearColorLinearColor(FLinearColor A, FLinearColor B);                                              // [0x4665dd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FIntPoint Divide_IntPointIntPoint(FIntPoint A, FIntPoint B);                                                             // [0x4665cd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FIntPoint Divide_IntPointInt(FIntPoint A, int32_t B);                                                                    // [0x4665bd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// int32_t Divide_IntInt(int32_t A, int32_t B);                                                                             // [0x4665af0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int64_t Divide_Int64Int64(int64_t A, int64_t B);                                                                         // [0x4665a00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float Divide_FloatFloat(float A, float B);                                                                               // [0x4665860] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// char Divide_ByteByte(char A, char B);                                                                                    // [0x4665780] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float DistanceSquared2D(FVector2D v1, FVector2D v2);                                                                     // [0x46656b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float Distance2D(FVector2D v1, FVector2D v2);                                                                            // [0x46655e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float DegTan(float A);                                                                                                   // [0x46654c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float DegSin(float A);                                                                                                   // [0x4665430] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float DegreesToRadians(float A);                                                                                         // [0x4665550] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float DegCos(float A);                                                                                                   // [0x46653a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float DegAtan2(float Y, float X);                                                                                        // [0x4665230] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float DegAtan(float A);                                                                                                  // [0x4665310] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float DegAsin(float A);                                                                                                  // [0x4665180] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float DegAcos(float A);                                                                                                  // [0x46650d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t DaysInYear(int32_t Year);                                                                                        // [0x4665040] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t DaysInMonth(int32_t Year, int32_t Month);                                                                        // [0x4664f50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FDateTime DateTimeMinValue();                                                                                            // [0x4664f30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FDateTime DateTimeMaxValue();                                                                                            // [0x4664f00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool DateTimeFromString(FString DateTimeString, FDateTime& Result);                                                      // [0x4664dc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool DateTimeFromIsoString(FString IsoString, FDateTime& Result);                                                        // [0x4664c70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// float CrossProduct2D(FVector2D A, FVector2D B);                                                                          // [0x4664a80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Cross_VectorVector(FVector A, FVector B);                                                                        // [0x4664b50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector CreateVectorFromYawPitch(float Yaw, float Pitch, float Length);                                                  // [0x4664950] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float Cos(float A);                                                                                                      // [0x4664760] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FTransform ConvertTransformToRelative(FTransform& Transform, FTransform& ParentTransform);                               // [0x46645d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector2D Conv_VectorToVector2D(FVector InVector);                                                                       // [0x4664550] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FTransform Conv_VectorToTransform(FVector InLocation);                                                                   // [0x46644b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FRotator Conv_VectorToRotator(FVector InVec);                                                                            // [0x4664410] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FQuat Conv_VectorToQuaternion(FVector InVec);                                                                            // [0x4664370] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FLinearColor Conv_VectorToLinearColor(FVector InVec);                                                                    // [0x46642d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Conv_Vector4ToVector(FVector4& InVector4);                                                                       // [0x4664220] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FRotator Conv_Vector4ToRotator(FVector4& InVec);                                                                         // [0x4664170] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FQuat Conv_Vector4ToQuaternion(FVector4& InVec);                                                                         // [0x46640d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Conv_Vector2DToVector(FVector2D InVector2D, float Z);                                                            // [0x4663ff0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FIntPoint Conv_Vector2DToIntPoint(FVector2D InVector2D);                                                                 // [0x4663f40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FMatrix Conv_TransformToMatrix(FTransform& Transform);                                                                   // [0x4663e30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Conv_RotatorToVector(FRotator InRot);                                                                            // [0x4663d90] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FTransform Conv_RotatorToTransform(FRotator& InRotator);                                                                 // [0x4663ce0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FTransform Conv_MatrixToTransform(FMatrix& InMatrix);                                                                    // [0x4663c30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FRotator Conv_MatrixToRotator(FMatrix& InMatrix);                                                                        // [0x4663b90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Conv_LinearColorToVector(FLinearColor InLinearColor);                                                            // [0x4663b00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FColor Conv_LinearColorToColor(FLinearColor InLinearColor, bool InUseSRGB);                                              // [0x4663a20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Conv_IntVectorToVector(FIntVector& InIntVector);                                                                 // [0x4663960] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FIntVector Conv_IntToIntVector(int32_t inInt);                                                                           // [0x46638d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// int64_t Conv_IntToInt64(int32_t inInt);                                                                                  // [0x4663850] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float Conv_IntToFloat(int32_t inInt);                                                                                    // [0x46637c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// char Conv_IntToByte(int32_t inInt);                                                                                      // [0x4663740] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool Conv_IntToBool(int32_t inInt);                                                                                      // [0x46636b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FVector2D Conv_IntPointToVector2D(FIntPoint InIntPoint);                                                                 // [0x4663620] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// int32_t Conv_Int64ToInt(int64_t inInt);                                                                                  // [0x46635a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// char Conv_Int64ToByte(int64_t inInt);                                                                                    // [0x4663520] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FVector Conv_FloatToVector(float InFloat);                                                                               // [0x4663490] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FLinearColor Conv_FloatToLinearColor(float InFloat);                                                                     // [0x4663400] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FLinearColor Conv_ColorToLinearColor(FColor InColor);                                                                    // [0x4663370] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// int32_t Conv_ByteToInt(char InByte);                                                                                     // [0x46632f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float Conv_ByteToFloat(char InByte);                                                                                     // [0x4663270] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t Conv_BoolToInt(bool InBool);                                                                                     // [0x46631e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float Conv_BoolToFloat(bool InBool);                                                                                     // [0x4663150] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// char Conv_BoolToByte(bool InBool);                                                                                       // [0x46630c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FTransform ComposeTransforms(FTransform& A, FTransform& B);                                                              // [0x4662f30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FRotator ComposeRotators(FRotator A, FRotator B);                                                                        // [0x4662e30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool ClassIsChildOf(class UClass* TestClass, class UClass* ParentClass);                                                 // [0x4662c80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FVector ClampVectorSize(FVector A, float Min, float Max);                                                                // [0x4662ab0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// int64_t ClampInt64(int64_t Value, int64_t Min, int64_t Max);                                                             // [0x46629a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float ClampAxis(float Angle);                                                                                            // [0x4662910] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FVector2D ClampAxes2D(FVector2D A, float MinAxisVal, float MaxAxisVal);                                                  // [0x46627e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees);                                      // [0x46626c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t Clamp(int32_t Value, int32_t Min, int32_t Max);                                                                  // [0x46625c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FLinearColor CInterpTo(FLinearColor Current, FLinearColor Target, float DeltaTime, float InterpSpeed);                   // [0x4662430] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// void BreakVector4(FVector4& InVec, float& X, float& Y, float& Z, float& W);                                              // [0x46620c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void BreakVector2D(FVector2D InVec, float& X, float& Y);                                                                 // [0x4661f90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void BreakVector(FVector InVec, float& X, float& Y, float& Z);                                                           // [0x46622b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void BreakTransform(FTransform& InTransform, FVector& Location, FRotator& Rotation, FVector& Scale);                     // [0x4661d70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void BreakTimespan2(FTimespan InTimespan, int32_t& Days, int32_t& Hours, int32_t& Minutes, int32_t& Seconds, int32_t& FractionNano); // [0x4661910] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void BreakTimespan(FTimespan InTimespan, int32_t& Days, int32_t& Hours, int32_t& Minutes, int32_t& Seconds, int32_t& Milliseconds); // [0x4661b40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void BreakRotIntoAxes(FRotator& InRot, FVector& X, FVector& Y, FVector& Z);                                              // [0x4661610] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void BreakRotator(FRotator InRot, float& Roll, float& Pitch, float& Yaw);                                                // [0x4661790] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void BreakRandomStream(FRandomStream& InRandomStream, int32_t& InitialSeed);                                             // [0x4661530] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void BreakQualifiedFrameTime(FQualifiedFrameTime& InFrameTime, FFrameNumber& Frame, FFrameRate& FrameRate, float& SubFrame); // [0x4661390] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void BreakFrameRate(FFrameRate& InFrameRate, int32_t& Numerator, int32_t& Denominator);                                  // [0x4661260] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// void BreakDateTime(FDateTime InDateTime, int32_t& Year, int32_t& Month, int32_t& Day, int32_t& Hour, int32_t& Minute, int32_t& Second, int32_t& Millisecond); // [0x4660fb0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void BreakColor(FLinearColor InColor, float& R, float& G, float& B, float& A);                                           // [0x4660dd0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool BooleanXOR(bool A, bool B);                                                                                         // [0x4660d00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool BooleanOR(bool A, bool B);                                                                                          // [0x4660c20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool BooleanNOR(bool A, bool B);                                                                                         // [0x4660b40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool BooleanNAND(bool A, bool B);                                                                                        // [0x4660a60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool BooleanAND(bool A, bool B);                                                                                         // [0x4660980] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// char BMin(char A, char B);                                                                                               // [0x46608b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// char BMax(char A, char B);                                                                                               // [0x46607e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float Atan2(float Y, float X);                                                                                           // [0x4660680] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float Atan(float A);                                                                                                     // [0x4660750] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float Asin(float A);                                                                                                     // [0x46605e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t And_IntInt(int32_t A, int32_t B);                                                                                // [0x1020310] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int64_t And_Int64Int64(int64_t A, int64_t B);                                                                            // [0x10208c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FVector Add_VectorVector(FVector A, FVector B);                                                                          // [0x4660500] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Add_VectorInt(FVector A, int32_t B);                                                                             // [0x4660410] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector Add_VectorFloat(FVector A, float B);                                                                             // [0x4660330] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector4 Add_Vector4Vector4(FVector4& A, FVector4& B);                                                                   // [0x4660200] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector2D Add_Vector2DVector2D(FVector2D A, FVector2D B);                                                                // [0x4660130] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector2D Add_Vector2DFloat(FVector2D A, float B);                                                                       // [0x4660060] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FTimespan Add_TimespanTimespan(FTimespan A, FTimespan B);                                                                // [0x465f830] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FQuat Add_QuatQuat(FQuat& A, FQuat& B);                                                                                  // [0x465ff80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FMatrix Add_MatrixMatrix(FMatrix& A, FMatrix& B);                                                                        // [0x465fdf0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FLinearColor Add_LinearColorLinearColor(FLinearColor A, FLinearColor B);                                                 // [0x465fd00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FIntPoint Add_IntPointIntPoint(FIntPoint A, FIntPoint B);                                                                // [0x465fc30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FIntPoint Add_IntPointInt(FIntPoint A, int32_t B);                                                                       // [0x465fb50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// int32_t Add_IntInt(int32_t A, int32_t B);                                                                                // [0x465fa90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int64_t Add_Int64Int64(int64_t A, int64_t B);                                                                            // [0x465f9c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float Add_FloatFloat(float A, float B);                                                                                  // [0x465f8f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FDateTime Add_DateTimeTimespan(FDateTime A, FTimespan B);                                                                // [0x465f830] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FDateTime Add_DateTimeDateTime(FDateTime A, FDateTime B);                                                                // [0x465f830] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// char Add_ByteByte(char A, char B);                                                                                       // [0x465f770] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float Acos(float A);                                                                                                     // [0x465f6d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int64_t Abs_Int64(int64_t A);                                                                                            // [0x465f5b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t Abs_Int(int32_t A);                                                                                              // [0x465f640] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float Abs(float A);                                                                                                      // [0x465f520] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.KismetNodeHelperLibrary
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
{ 
public:
	// void MarkBit(int32_t& Data, int32_t Index);                                                                              // [0x4691540] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// bool HasUnmarkedBit(int32_t Data, int32_t NumBits);                                                                      // [0x46907d0] Final|Native|Static|Public|BlueprintCallable 
	// bool HasMarkedBit(int32_t Data, int32_t NumBits);                                                                        // [0x4690700] Final|Native|Static|Public|BlueprintCallable 
	// char GetValidValue(class UEnum* Enum, char EnumeratorValue);                                                             // [0x4690630] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t GetUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits, bool bRandom);                                   // [0x46904f0] Final|Native|Static|Public|BlueprintCallable 
	// int32_t GetRandomUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits);                                           // [0x4690290] Final|Native|Static|Public|BlueprintCallable 
	// int32_t GetFirstUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits);                                            // [0x4690190] Final|Native|Static|Public|BlueprintCallable 
	// char GetEnumeratorValueFromIndex(class UEnum* Enum, char EnumeratorIndex);                                               // [0x46900c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetEnumeratorUserFriendlyName(class UEnum* Enum, char EnumeratorValue);                                          // [0x468ffb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FName GetEnumeratorName(class UEnum* Enum, char EnumeratorValue);                                                        // [0x468fed0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void ClearBit(int32_t& Data, int32_t Index);                                                                             // [0x468d2d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void ClearAllBits(int32_t& Data);                                                                                        // [0x468d250] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// bool BitIsMarked(int32_t Data, int32_t Index);                                                                           // [0x468bb80] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.KismetRenderingLibrary
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
{ 
public:
	// void SetCastInsetShadowForAllAttachments(class UPrimitiveComponent* PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup); // [0x4692a00] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// class UTexture2D* RenderTargetCreateStaticTexture2DEditorOnly(class UTextureRenderTarget2D* RenderTarget, FString Name, TEnumAsByte<TextureCompressionSettings> CompressionSettings, TEnumAsByte<TextureMipGenSettings> MipSettings); // [0x46920b0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// void ReleaseRenderTarget2D(class UTextureRenderTarget2D* TextureRenderTarget);                                           // [0x4692030] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// FColor ReadRenderTargetUV(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, float U, float V); // [0x4691ee0] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// FLinearColor ReadRenderTargetRawUV(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, float U, float V); // [0x4691d70] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// FLinearColor ReadRenderTargetRawPixel(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int32_t X, int32_t Y); // [0x4691c00] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// FColor ReadRenderTargetPixel(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int32_t X, int32_t Y); // [0x4691ab0] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// FSkelMeshSkinWeightInfo MakeSkinWeightInfo(int32_t Bone0, char Weight0, int32_t Bone1, char Weight1, int32_t Bone2, char Weight2, int32_t Bone3, char Weight3); // [0x46912c0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void KuroDrawMaterialToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UMaterialInterface* Material); // [0x4690d20] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// class UTexture2D* ImportFileAsTexture2D(class UObject* WorldContextObject, FString Filename);                            // [0x4690990] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// class UTexture2D* ImportBufferAsTexture2D(class UObject* WorldContextObject, TArray<char>& Buffer);                      // [0x46908a0] Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void ExportTexture2D(class UObject* WorldContextObject, class UTexture2D* Texture, FString FilePath, FString Filename);  // [0x468f9e0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// void ExportRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, FString FilePath, FString Filename); // [0x468f870] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// void EndDrawCanvasToRenderTarget(class UObject* WorldContextObject, FDrawToRenderTargetContext& Context);                // [0x468f480] Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void DrawMaterialToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UMaterialInterface* Material); // [0x468f380] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// class UTextureRenderTargetVolume* CreateRenderTargetVolume(class UObject* WorldContextObject, int32_t Width, int32_t Height, int32_t Depth, TEnumAsByte<ETextureRenderTargetFormat> Format, FLinearColor ClearColor, bool bAutoGenerateMipMaps); // [0x468f040] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// class UTextureRenderTarget2DArray* CreateRenderTarget2DArray(class UObject* WorldContextObject, int32_t Width, int32_t Height, int32_t Slices, TEnumAsByte<ETextureRenderTargetFormat> Format, FLinearColor ClearColor, bool bAutoGenerateMipMaps); // [0x468ee30] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// class UTextureRenderTarget2D* CreateRenderTarget2D(class UObject* WorldContextObject, int32_t Width, int32_t Height, TEnumAsByte<ETextureRenderTargetFormat> Format, FLinearColor ClearColor, bool bAutoGenerateMipMaps); // [0x468ec60] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// void ConvertRenderTargetToTexture2DEditorOnly(class UObject* WorldContextObject, class UTextureRenderTarget2D* RenderTarget, class UTexture2D* Texture); // [0x468eb60] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// void ClearRenderTarget2D(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, FLinearColor ClearColor); // [0x468d3a0] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// void BreakSkinWeightInfo(FSkelMeshSkinWeightInfo InWeight, int32_t& Bone0, char& Weight0, int32_t& Bone1, char& Weight1, int32_t& Bone2, char& Weight2, int32_t& Bone3, char& Weight3); // [0x468bc50] Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// void BeginDrawCanvasToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UCanvas*& Canvas, FVector2D& Size, FDrawToRenderTargetContext& Context); // [0x468b9c0] Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.KismetStringLibrary
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UKismetStringLibrary : public UBlueprintFunctionLibrary
{ 
public:
	// FString TrimTrailing(FString SourceString);                                                                              // [0x4693200] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString Trim(FString SourceString);                                                                                      // [0x4693120] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString ToUpper(FString SourceString);                                                                                   // [0x4693040] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString ToLower(FString SourceString);                                                                                   // [0x4692f60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString TimeSecondsToString(float InSeconds);                                                                            // [0x4692e90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool StartsWith(FString SourceString, FString InPrefix, TEnumAsByte<ESearchCase> SearchCase);                            // [0x4692d50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool Split(FString SourceString, FString InStr, FString& LeftS, FString& RightS, TEnumAsByte<ESearchCase> SearchCase, TEnumAsByte<ESearchDir> SearchDir); // [0x4692b10] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FString RightPad(FString SourceString, int32_t ChCount);                                                                 // [0x46928e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString RightChop(FString SourceString, int32_t Count);                                                                  // [0x46927c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString Right(FString SourceString, int32_t Count);                                                                      // [0x46926a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString Reverse(FString SourceString);                                                                                   // [0x46925c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t ReplaceInline(FString& SourceString, FString SearchText, FString ReplacementText, TEnumAsByte<ESearchCase> SearchCase); // [0x4692420] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// FString Replace(FString SourceString, FString From, FString To, TEnumAsByte<ESearchCase> SearchCase);                    // [0x4692250] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// TArray<FString> ParseIntoArray(FString SourceString, FString Delimiter, bool CullEmptyStrings);                          // [0x4691930] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool NotEqual_StrStr(FString A, FString B);                                                                              // [0x4691750] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool NotEqual_StriStri(FString A, FString B);                                                                            // [0x4691840] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString Mid(FString SourceString, int32_t Start, int32_t Count);                                                         // [0x4690390] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool MatchesWildcard(FString SourceString, FString Wildcard, TEnumAsByte<ESearchCase> SearchCase);                       // [0x4691610] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t LenInUTF8(FString S);                                                                                            // [0x4691220] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t Len(FString S);                                                                                                  // [0x4691180] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString LeftPad(FString SourceString, int32_t ChCount);                                                                  // [0x4691060] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString LeftChop(FString SourceString, int32_t Count);                                                                   // [0x4690f40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString Left(FString SourceString, int32_t Count);                                                                       // [0x4690e20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString JoinStringArray(TArray<FString>& SourceArray, FString Separator);                                                // [0x4690bb0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool IsNumeric(FString SourceString);                                                                                    // [0x4690b10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool IsEmpty(FString InString);                                                                                          // [0x4690a70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetSubstring(FString SourceString, int32_t StartIndex, int32_t Length);                                          // [0x4690390] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t GetCharacterAsNumber(FString SourceString, int32_t Index);                                                       // [0x468fdf0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// TArray<FString> GetCharacterArrayFromString(FString SourceString);                                                       // [0x468fd10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t FindSubstring(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd, int32_t StartPosition);   // [0x468fb50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool EqualEqual_StrStr(FString A, FString B);                                                                            // [0x468f690] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool EqualEqual_StriStri(FString A, FString B);                                                                          // [0x468f780] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool EndsWith(FString SourceString, FString InSuffix, TEnumAsByte<ESearchCase> SearchCase);                              // [0x468f550] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t CullArray(FString SourceString, TArray<FString>& inArray);                                                       // [0x468f250] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FString Conv_VectorToString(FVector InVec);                                                                              // [0x468ea80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FString Conv_Vector2dToString(FVector2D InVec);                                                                          // [0x468e9c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FString Conv_TransformToString(FTransform& InTrans);                                                                     // [0x468e8a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void Conv_StringToVector2D(FString InString, FVector2D& OutConvertedVector2D, bool& OutIsValid);                         // [0x468e640] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void Conv_StringToVector(FString InString, FVector& OutConvertedVector, bool& OutIsValid);                               // [0x468e770] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void Conv_StringToRotator(FString InString, FRotator& OutConvertedRotator, bool& OutIsValid);                            // [0x468e510] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FName Conv_StringToName(FString InString);                                                                               // [0x468e460] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int64_t Conv_StringToInt64(FString InString);                                                                            // [0x468e320] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t Conv_StringToInt(FString InString);                                                                              // [0x468e3c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float Conv_StringToFloat(FString InString);                                                                              // [0x468e280] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void Conv_StringToColor(FString InString, FLinearColor& OutConvertedColor, bool& OutIsValid);                            // [0x468e150] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FString Conv_RotatorToString(FRotator InRot);                                                                            // [0x468e070] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FString Conv_ObjectToString(class UObject* InObj);                                                                       // [0x468dfa0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString Conv_NameToString(FName InName);                                                                                 // [0x468dec0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString Conv_MatrixToString(FMatrix& InMatrix);                                                                          // [0x468ddf0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FString Conv_IntVectorToString(FIntVector InIntVec);                                                                     // [0x468dd10] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FString Conv_IntToString(int32_t inInt);                                                                                 // [0x468dc40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString Conv_IntPointToString(FIntPoint InIntPoint);                                                                     // [0x468db80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FString Conv_Int64ToString(int64_t InInt64);                                                                             // [0x468dab0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString Conv_FloatToString(float InFloat);                                                                               // [0x468d9e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString Conv_ColorToString(FLinearColor InColor);                                                                        // [0x468d910] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FString Conv_ByteToString(char InByte);                                                                                  // [0x468d840] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString Conv_BoolToString(bool InBool);                                                                                  // [0x468d770] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool Contains(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd);                                  // [0x468d5f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString Concat_StrStr(FString A, FString B);                                                                             // [0x468d4b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString BuildString_Vector2d(FString AppendTo, FString Prefix, FVector2D InVector2D, FString Suffix);                    // [0x468cea0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FString BuildString_Vector(FString AppendTo, FString Prefix, FVector InVector, FString Suffix);                          // [0x468d070] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FString BuildString_Rotator(FString AppendTo, FString Prefix, FRotator InRot, FString Suffix);                           // [0x468ccc0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FString BuildString_Object(FString AppendTo, FString Prefix, class UObject* InObj, FString Suffix);                      // [0x468caf0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString BuildString_Name(FString AppendTo, FString Prefix, FName InName, FString Suffix);                                // [0x468c900] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString BuildString_IntVector(FString AppendTo, FString Prefix, FIntVector InIntVector, FString Suffix);                 // [0x468c720] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FString BuildString_Int(FString AppendTo, FString Prefix, int32_t inInt, FString Suffix);                                // [0x468c550] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString BuildString_Float(FString AppendTo, FString Prefix, float InFloat, FString Suffix);                              // [0x468c380] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString BuildString_Color(FString AppendTo, FString Prefix, FLinearColor InColor, FString Suffix);                       // [0x468c1a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FString BuildString_Bool(FString AppendTo, FString Prefix, bool InBool, FString Suffix);                                 // [0x468bfd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.KismetStringTableLibrary
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UKismetStringTableLibrary : public UBlueprintFunctionLibrary
{ 
public:
	// bool IsRegisteredTableId(FName TableId);                                                                                 // [0x46a1480] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool IsRegisteredTableEntry(FName TableId, FString Key);                                                                 // [0x46a1380] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetTableNamespace(FName TableId);                                                                                // [0x46a1070] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetTableEntrySourceString(FName TableId, FString Key);                                                           // [0x46a0f30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetTableEntryMetaData(FName TableId, FString Key, FName MetaDataId);                                             // [0x46a0da0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// TArray<FName> GetRegisteredStringTables();                                                                               // [0x46a0980] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// TArray<FName> GetMetaDataIdsFromStringTableEntry(FName TableId, FString Key);                                            // [0x469fb30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// TArray<FString> GetKeysFromStringTable(FName TableId);                                                                   // [0x469fa50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.KismetSystemLibrary
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UKismetSystemLibrary : public UBlueprintFunctionLibrary
{ 
public:
	// void UnregisterForRemoteNotifications();                                                                                 // [0x224c9e0] Final|Native|Static|Public|BlueprintCallable 
	// void UnloadPrimaryAssetList(TArray<FPrimaryAssetId>& PrimaryAssetIdList);                                                // [0x46aab10] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void UnloadPrimaryAsset(FPrimaryAssetId PrimaryAssetId);                                                                 // [0x46aaa70] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// void TransactObject(class UObject* Object);                                                                              // [0xfe37d0] Final|Native|Static|Public|BlueprintCallable 
	// void StackTrace();                                                                                                       // [0x46aaa50] Final|Native|Static|Public|BlueprintCallable 
	// bool SphereTraceSingleForObjects(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x46aa5a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool SphereTraceSingleByProfile(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x46aa100] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool SphereTraceSingle(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x46a9c70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool SphereTraceMultiForObjects(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x46a9800] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool SphereTraceMultiByProfile(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x46a9390] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool SphereTraceMulti(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x46a8f40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool SphereOverlapComponents(class UObject* WorldContextObject, FVector SpherePos, float SphereRadius, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, class UClass* ComponentClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<UPrimitiveComponent*>& OutComponents); // [0x46a8cb0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool SphereOverlapActors(class UObject* WorldContextObject, FVector SpherePos, float SphereRadius, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, class UClass* ActorClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<AActor*>& OutActors); // [0x46a8a20] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SnapshotObject(class UObject* Object);                                                                              // [0xfe37d0] Final|Native|Static|Public|BlueprintCallable 
	// void ShowPlatformSpecificLeaderboardScreen(FString CategoryName);                                                        // [0x46a8990] Final|Native|Static|Public|BlueprintCallable 
	// void ShowPlatformSpecificAchievementsScreen(class APlayerController* SpecificPlayer);                                    // [0x46a8910] Final|Native|Static|Public|BlueprintCallable 
	// void ShowInterstitialAd();                                                                                               // [0x46a88f0] Final|Native|Static|Public|BlueprintCallable 
	// void ShowAdBanner(int32_t AdIdIndex, bool bShowOnBottomOfScreen);                                                        // [0x46a8830] Final|Native|Static|Public|BlueprintCallable 
	// void SetWindowTitle(FText& Title);                                                                                       // [0x46a8770] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void SetVolumeButtonsHandledBySystem(bool bEnabled);                                                                     // [0xf17190] Final|Native|Static|Public|BlueprintCallable 
	// void SetVectorPropertyByName(class UObject* Object, FName PropertyName, FVector& Value);                                 // [0x46a8650] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetUserActivity(FUserActivity& UserActivity);                                                                       // [0x46a85b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void SetTransformPropertyByName(class UObject* Object, FName PropertyName, FTransform& Value);                           // [0x46a8430] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetTextPropertyByName(class UObject* Object, FName PropertyName, FText& Value);                                     // [0x46a82d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void SetSuppressViewportTransitionMessage(class UObject* WorldContextObject, bool bState);                               // [0x46a8210] Final|Native|Static|Public|BlueprintCallable 
	// void SetStructurePropertyByName(class UObject* Object, FName PropertyName, FGenericStruct& Value);                       // [0x46a71b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void SetStringPropertyByName(class UObject* Object, FName PropertyName, FString Value);                                  // [0x46a80e0] Final|Native|Static|Public|BlueprintCallable 
	// void SetSoftObjectPropertyByName(class UObject* Object, FName PropertyName, TWeakObjectPtr<UObject*>& Value);            // [0x46a7f90] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void SetSoftClassPropertyByName(class UObject* Object, FName PropertyName, TWeakObjectPtr<UClass*>& Value);              // [0x46a7e40] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void SetRotatorPropertyByName(class UObject* Object, FName PropertyName, FRotator& Value);                               // [0x46a7d20] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetObjectPropertyByName(class UObject* Object, FName PropertyName, class UObject* Value);                           // [0x46a7c00] Final|Native|Static|Public|BlueprintCallable 
	// void SetNamePropertyByName(class UObject* Object, FName PropertyName, FName& Value);                                     // [0x46a7ad0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void SetLinearColorPropertyByName(class UObject* Object, FName PropertyName, FLinearColor& Value);                       // [0x46a79b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetIntPropertyByName(class UObject* Object, FName PropertyName, int32_t Value);                                     // [0x46a7760] Final|Native|Static|Public|BlueprintCallable 
	// void SetInterfacePropertyByName(class UObject* Object, FName PropertyName, TScriptInterface<Class>& Value);              // [0x46a7880] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void SetInt64PropertyByName(class UObject* Object, FName PropertyName, int64_t Value);                                   // [0x46a7640] Final|Native|Static|Public|BlueprintCallable 
	// void SetGamepadsBlockDeviceFeedback(bool bBlock);                                                                        // [0xf17190] Final|Native|Static|Public|BlueprintCallable 
	// void SetFloatPropertyByName(class UObject* Object, FName PropertyName, float Value);                                     // [0x46a7520] Final|Native|Static|Public|BlueprintCallable 
	// void SetFieldPathPropertyByName(class UObject* Object, FName PropertyName, Value& Value);                                // [0x46a73e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void SetColorPropertyByName(class UObject* Object, FName PropertyName, FColor& Value);                                   // [0x46a72c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetCollisionProfileNameProperty(class UObject* Object, FName PropertyName, FCollisionProfileName& Value);           // [0x46a71b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void SetClassPropertyByName(class UObject* Object, FName PropertyName, class UClass* Value);                             // [0x46a7090] Final|Native|Static|Public|BlueprintCallable 
	// void SetBytePropertyByName(class UObject* Object, FName PropertyName, char Value);                                       // [0x46a6f70] Final|Native|Static|Public|BlueprintCallable 
	// void SetBoolPropertyByName(class UObject* Object, FName PropertyName, bool Value);                                       // [0x46a6e50] Final|Native|Static|Public|BlueprintCallable 
	// bool SetAllChannels(FCollisionResponseContainer& ResponseToChannels, TEnumAsByte<ECollisionResponse> NewResponse);       // [0x46a6d60] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void RetriggerableDelay(class UObject* WorldContextObject, float Duration, FLatentActionInfo LatentInfo);                // [0x46a6c20] Final|Native|Static|Public|BlueprintCallable 
	// void ResetGamepadAssignmentToController(int32_t ControllerId);                                                           // [0x155a3c0] Final|Native|Static|Public|BlueprintCallable 
	// void ResetGamepadAssignments();                                                                                          // [0xc036d0] Final|Native|Static|Public|BlueprintCallable 
	// void RegisterForRemoteNotifications();                                                                                   // [0x224c9e0] Final|Native|Static|Public|BlueprintCallable 
	// void QuitGame(class UObject* WorldContextObject, class APlayerController* SpecificPlayer, TEnumAsByte<EQuitPreference> QuitPreference, bool bIgnorePlatformRestrictions); // [0x46a6ad0] Final|Native|Static|Public|BlueprintCallable 
	// void PrintWarning(FString InString);                                                                                     // [0xf75540] Final|Native|Static|Public|BlueprintCallable 
	// void PrintText(class UObject* WorldContextObject, FText InText, bool bPrintToScreen, bool bPrintToLog, FLinearColor TextColor, float Duration); // [0x46a6880] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// void PrintString(class UObject* WorldContextObject, FString InString, bool bPrintToScreen, bool bPrintToLog, FLinearColor TextColor, float Duration); // [0x46a6680] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// bool ParseParamValue(FString InString, FString InParam, FString& OutValue);                                              // [0x46a6520] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool ParseParam(FString InString, FString InParam);                                                                      // [0x46a6430] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void ParseCommandLine(FString InCmdLine, TArray<FString>& OutTokens, TArray<FString>& OutSwitches, TMap<FString, FString>& OutParams); // [0x46a61c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void OnAssetLoaded__DelegateSignature(class UObject* Loaded);                                                            // [0x25a7960] Public|Delegate      
	// void OnAssetClassLoaded__DelegateSignature(class UClass* Loaded);                                                        // [0x25a7960] Public|Delegate      
	// bool NotEqual_SoftObjectReference(TWeakObjectPtr<UObject*>& A, TWeakObjectPtr<UObject*>& B);                             // [0x46a6080] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool NotEqual_SoftClassReference(TWeakObjectPtr<UClass*>& A, TWeakObjectPtr<UClass*>& B);                                // [0x46a6080] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool NotEqual_PrimaryAssetType(FPrimaryAssetType A, FPrimaryAssetType B);                                                // [0x3c9a270] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool NotEqual_PrimaryAssetId(FPrimaryAssetId A, FPrimaryAssetId B);                                                      // [0x46a5f70] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FString NormalizeFilename(FString InFilename);                                                                           // [0x46a5e90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void MoveComponentTo(class USceneComponent* Component, FVector TargetRelativeLocation, FRotator TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, TEnumAsByte<EMoveComponentAction> MoveAction, FLatentActionInfo LatentInfo); // [0x46a5ba0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// FSoftObjectPath MakeSoftObjectPath(FString PathString);                                                                  // [0x46a5ab0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FSoftClassPath MakeSoftClassPath(FString PathString);                                                                    // [0x46a59f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FText MakeLiteralText(FText Value);                                                                                      // [0x46a5890] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString MakeLiteralString(FString Value);                                                                                // [0x46a5780] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FName MakeLiteralName(FName Value);                                                                                      // [0x46a56f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t MakeLiteralInt(int32_t Value);                                                                                   // [0x46a5670] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float MakeLiteralFloat(float Value);                                                                                     // [0x46a55f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// char MakeLiteralByte(char Value);                                                                                        // [0x46a5570] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool MakeLiteralBool(bool Value);                                                                                        // [0x46630c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void LoadInterstitialAd(int32_t AdIdIndex);                                                                              // [0x46a54f0] Final|Native|Static|Public|BlueprintCallable 
	// class UClass* LoadClassAsset_Blocking(TWeakObjectPtr<UClass*> AssetClass);                                               // [0x46a53e0] Final|Native|Static|Public|BlueprintCallable 
	// void LoadAssetClass(class UObject* WorldContextObject, TWeakObjectPtr<UClass*> AssetClass, FDelegateProperty OnLoaded, FLatentActionInfo LatentInfo); // [0x46a5090] Final|Native|Static|Public|BlueprintCallable 
	// class UObject* LoadAsset_Blocking(TWeakObjectPtr<UObject*> Asset);                                                       // [0x46a52d0] Final|Native|Static|Public|BlueprintCallable 
	// void LoadAsset(class UObject* WorldContextObject, TWeakObjectPtr<UObject*> Asset, FDelegateProperty OnLoaded, FLatentActionInfo LatentInfo); // [0x46a4e50] Final|Native|Static|Public|BlueprintCallable 
	// bool LineTraceSingleForObjects(class UObject* WorldContextObject, FVector Start, FVector End, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x46a49e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool LineTraceSingleByProfile(class UObject* WorldContextObject, FVector Start, FVector End, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x46a4580] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool LineTraceSingle(class UObject* WorldContextObject, FVector Start, FVector End, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x46a4130] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool LineTraceMultiForObjects(class UObject* WorldContextObject, FVector Start, FVector End, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x46a3d10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool LineTraceMultiByProfile(class UObject* WorldContextObject, FVector Start, FVector End, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x46a38f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool LineTraceMulti(class UObject* WorldContextObject, FVector Start, FVector End, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x46a34f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void LaunchURL(FString URL);                                                                                             // [0x46a3460] Final|Native|Static|Public|BlueprintCallable 
	// void K2_UnPauseTimerHandle(class UObject* WorldContextObject, FTimerHandle Handle);                                      // [0x46a33a0] Final|Native|Static|Public|BlueprintCallable 
	// void K2_UnPauseTimerDelegate(FDelegateProperty Delegate);                                                                // [0x46a3300] Final|Native|Static|Public|BlueprintCallable 
	// void K2_UnPauseTimer(class UObject* Object, FString FunctionName);                                                       // [0x46a31e0] Final|Native|Static|Public|BlueprintCallable 
	// bool K2_TimerExistsHandle(class UObject* WorldContextObject, FTimerHandle Handle);                                       // [0x46a3110] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool K2_TimerExistsDelegate(FDelegateProperty Delegate);                                                                 // [0x46a3060] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool K2_TimerExists(class UObject* Object, FString FunctionName);                                                        // [0x46a2f30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FTimerHandle K2_SetTimerDelegate(FDelegateProperty Delegate, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance); // [0x46a2d70] Final|Native|Static|Public|BlueprintCallable 
	// FTimerHandle K2_SetTimer(class UObject* Object, FString FunctionName, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance); // [0x46a2b10] Final|Native|Static|Public|BlueprintCallable 
	// void K2_PauseTimerHandle(class UObject* WorldContextObject, FTimerHandle Handle);                                        // [0x46a2a50] Final|Native|Static|Public|BlueprintCallable 
	// void K2_PauseTimerDelegate(FDelegateProperty Delegate);                                                                  // [0x46a29b0] Final|Native|Static|Public|BlueprintCallable 
	// void K2_PauseTimer(class UObject* Object, FString FunctionName);                                                         // [0x46a2890] Final|Native|Static|Public|BlueprintCallable 
	// bool K2_IsValidTimerHandle(FTimerHandle Handle);                                                                         // [0x46a2800] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool K2_IsTimerPausedHandle(class UObject* WorldContextObject, FTimerHandle Handle);                                     // [0x46a2730] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool K2_IsTimerPausedDelegate(FDelegateProperty Delegate);                                                               // [0x46a2680] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool K2_IsTimerPaused(class UObject* Object, FString FunctionName);                                                      // [0x46a2550] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool K2_IsTimerActiveHandle(class UObject* WorldContextObject, FTimerHandle Handle);                                     // [0x46a2480] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool K2_IsTimerActiveDelegate(FDelegateProperty Delegate);                                                               // [0x46a23d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool K2_IsTimerActive(class UObject* Object, FString FunctionName);                                                      // [0x46a22a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FTimerHandle K2_InvalidateTimerHandle(FTimerHandle& Handle);                                                             // [0x46a2200] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// float K2_GetTimerRemainingTimeHandle(class UObject* WorldContextObject, FTimerHandle Handle);                            // [0x46a2130] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float K2_GetTimerRemainingTimeDelegate(FDelegateProperty Delegate);                                                      // [0x46a2080] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float K2_GetTimerRemainingTime(class UObject* Object, FString FunctionName);                                             // [0x46a1f50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float K2_GetTimerElapsedTimeHandle(class UObject* WorldContextObject, FTimerHandle Handle);                              // [0x46a1e80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float K2_GetTimerElapsedTimeDelegate(FDelegateProperty Delegate);                                                        // [0x46a1dd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// float K2_GetTimerElapsedTime(class UObject* Object, FString FunctionName);                                               // [0x46a1ca0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void K2_ClearTimerHandle(class UObject* WorldContextObject, FTimerHandle Handle);                                        // [0x46a1be0] Final|Native|Static|Public|BlueprintCallable 
	// void K2_ClearTimerDelegate(FDelegateProperty Delegate);                                                                  // [0x46a1b40] Final|Native|Static|Public|BlueprintCallable 
	// void K2_ClearTimer(class UObject* Object, FString FunctionName);                                                         // [0x46a1a20] Final|Native|Static|Public|BlueprintCallable 
	// void K2_ClearAndInvalidateTimerHandle(class UObject* WorldContextObject, FTimerHandle& Handle);                          // [0x46a1950] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// bool IsValidSoftObjectReference(TWeakObjectPtr<UObject*>& SoftObjectReference);                                          // [0x46a1890] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool IsValidSoftClassReference(TWeakObjectPtr<UClass*>& SoftClassReference);                                             // [0x46a1890] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool IsValidPrimaryAssetType(FPrimaryAssetType PrimaryAssetType);                                                        // [0x3c999c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool IsValidPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);                                                              // [0x46a17e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool IsValidClass(class UClass* Class);                                                                                  // [0x46a1700] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool IsValid(class UObject* Object);                                                                                     // [0x46a1700] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool IsUnattended();                                                                                                     // [0x46a16d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool IsStandalone(class UObject* WorldContextObject);                                                                    // [0x46a1640] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool IsSplitScreen(class UObject* WorldContextObject);                                                                   // [0x46a15b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool IsServer(class UObject* WorldContextObject);                                                                        // [0x46a1520] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool IsScreensaverEnabled();                                                                                             // [0xf16ea0] Final|Native|Static|Public|BlueprintCallable 
	// bool IsPackagedForDistribution();                                                                                        // [0x1026880] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool IsLoggedIn(class APlayerController* SpecificPlayer);                                                                // [0x46a12f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool IsInterstitialAdRequested();                                                                                        // [0x46a12c0] Final|Native|Static|Public|BlueprintCallable 
	// bool IsInterstitialAdAvailable();                                                                                        // [0x46a1290] Final|Native|Static|Public|BlueprintCallable 
	// bool IsDedicatedServer(class UObject* WorldContextObject);                                                               // [0x46a1200] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool IsControllerAssignedToGamepad(int32_t ControllerId);                                                                // [0x46a1170] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void HideAdBanner();                                                                                                     // [0x46a1150] Final|Native|Static|Public|BlueprintCallable 
	// bool GetVolumeButtonsHandledBySystem();                                                                                  // [0x1026880] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetUniqueDeviceId();                                                                                             // [0x1025690] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetSystemPath(class UObject* Object);                                                                            // [0x46a0cd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool GetSupportedFullscreenResolutions(TArray<FIntPoint>& Resolutions);                                                  // [0x46a0c20] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// TWeakObjectPtr<UObject*> GetSoftObjectReferenceFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);                       // [0x46a0b40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// TWeakObjectPtr<UClass*> GetSoftClassReferenceFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);                         // [0x46a0a60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// int32_t GetRenderingMaterialQualityLevel();                                                                              // [0x46a0a30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t GetRenderingDetailMode();                                                                                        // [0x46a0a00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetProjectSavedDirectory();                                                                                      // [0x46a0900] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetProjectDirectory();                                                                                           // [0x46a0880] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetProjectContentDirectory();                                                                                    // [0x46a0800] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void GetPrimaryAssetsWithBundleState(TArray<FName>& RequiredBundles, TArray<FName>& ExcludedBundles, TArray<FPrimaryAssetType>& ValidTypes, bool bForceCurrentState, TArray<FPrimaryAssetId>& OutPrimaryAssetIdList); // [0x46a05e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void GetPrimaryAssetIdList(FPrimaryAssetType PrimaryAssetType, TArray<FPrimaryAssetId>& OutPrimaryAssetIdList);          // [0x46a04f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// FPrimaryAssetId GetPrimaryAssetIdFromSoftObjectReference(TWeakObjectPtr<UObject*> SoftObjectReference);                  // [0x46a03c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FPrimaryAssetId GetPrimaryAssetIdFromSoftClassReference(TWeakObjectPtr<UClass*> SoftClassReference);                     // [0x46a0290] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FPrimaryAssetId GetPrimaryAssetIdFromObject(class UObject* Object);                                                      // [0x46a01e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FPrimaryAssetId GetPrimaryAssetIdFromClass(class UClass* Class);                                                         // [0x46a0130] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// TArray<FString> GetPreferredLanguages();                                                                                 // [0x46a00b0] Final|Native|Static|Public|BlueprintCallable 
	// FString GetPlatformUserName();                                                                                           // [0x46a0030] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetPlatformUserDir();                                                                                            // [0x469ffb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetPathName(class UObject* Object);                                                                              // [0x469fee0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// class UObject* GetOuterObject(class UObject* Object);                                                                    // [0x469fe50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetObjectName(class UObject* Object);                                                                            // [0x469fd80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// class UObject* GetObjectFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);                                              // [0x469fcd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// int32_t GetMinYResolutionForUI();                                                                                        // [0x469fca0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t GetMinYResolutionFor3DView();                                                                                    // [0x469fc70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetLocalCurrencySymbol();                                                                                        // [0x469f5a0] Final|Native|Static|Public|BlueprintCallable 
	// FString GetLocalCurrencyCode();                                                                                          // [0x469f5a0] Final|Native|Static|Public|BlueprintCallable 
	// float GetGameTimeInSeconds(class UObject* WorldContextObject);                                                           // [0x4632050] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetGamepadControllerName(int32_t ControllerId);                                                                  // [0x469f980] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// class UTexture2D* GetGamepadButtonGlyph(FString ButtonKey, int32_t ControllerIndex);                                     // [0x469f8a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetGameName();                                                                                                   // [0x469f820] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetGameBundleId();                                                                                               // [0x469f7a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int64_t GetFrameCount();                                                                                                 // [0x469f770] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetEngineVersion();                                                                                              // [0x469f6f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetDisplayName(class UObject* Object);                                                                           // [0x469f620] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetDeviceId();                                                                                                   // [0x469f5a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetDefaultLocale();                                                                                              // [0x469f520] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString GetDefaultLanguage();                                                                                            // [0x469f4a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool GetCurrentBundleState(FPrimaryAssetId PrimaryAssetId, bool bForceCurrentState, TArray<FName>& OutBundles);          // [0x469f350] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool GetConvenientWindowedResolutions(TArray<FIntPoint>& Resolutions);                                                   // [0x469f2a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// int32_t GetConsoleVariableIntValue(FString VariableName);                                                                // [0x469f200] Final|Native|Static|Public|BlueprintCallable 
	// float GetConsoleVariableFloatValue(FString VariableName);                                                                // [0x469f160] Final|Native|Static|Public|BlueprintCallable 
	// bool GetConsoleVariableBoolValue(FString VariableName);                                                                  // [0x469f0c0] Final|Native|Static|Public|BlueprintCallable 
	// void GetComponentBounds(class USceneComponent* Component, FVector& Origin, FVector& BoxExtent, float& SphereRadius);     // [0x469ef50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FString GetCommandLine();                                                                                                // [0x469eed0] Final|Native|Static|Public|BlueprintCallable 
	// class UClass* GetClassFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);                                                // [0x469ee20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FString GetClassDisplayName(class UClass* Class);                                                                        // [0x469ed50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// int32_t GetAdIDCount();                                                                                                  // [0x469ed20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void GetActorListFromComponentList(TArray<UPrimitiveComponent*>& ComponentList, class UClass* ActorClassFilter, TArray<AActor*>& OutActorList); // [0x469ebd0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void GetActorBounds(class AActor* Actor, FVector& Origin, FVector& BoxExtent);                                           // [0x469eab0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void ForceCloseAdBanner();                                                                                               // [0x469ea90] Final|Native|Static|Public|BlueprintCallable 
	// void FlushPersistentDebugLines(class UObject* WorldContextObject);                                                       // [0xfe37d0] Final|Native|Static|Public|BlueprintCallable 
	// void FlushDebugStrings(class UObject* WorldContextObject);                                                               // [0xfe37d0] Final|Native|Static|Public|BlueprintCallable 
	// void ExecuteConsoleCommand(class UObject* WorldContextObject, FString Command, class APlayerController* SpecificPlayer); // [0x469e970] Final|Native|Static|Public|BlueprintCallable 
	// bool EqualEqual_SoftObjectReference(TWeakObjectPtr<UObject*>& A, TWeakObjectPtr<UObject*>& B);                           // [0x469e830] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool EqualEqual_SoftClassReference(TWeakObjectPtr<UClass*>& A, TWeakObjectPtr<UClass*>& B);                              // [0x469e830] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool EqualEqual_PrimaryAssetType(FPrimaryAssetType A, FPrimaryAssetType B);                                              // [0x3c98980] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool EqualEqual_PrimaryAssetId(FPrimaryAssetId A, FPrimaryAssetId B);                                                    // [0x469e720] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// int32_t EndTransaction();                                                                                                // [0x469e6f0] Final|Native|Static|Public|BlueprintCallable 
	// void DynamicQueueSubtitles(class UObject* WorldContextObject, FString InString, float Duration, int32_t FontSize);       // [0x469e590] Final|Native|Static|Public|BlueprintCallable 
	// void DrawDebugString(class UObject* WorldContextObject, FVector TextLocation, FString Text, class AActor* TestBaseActor, FLinearColor TextColor, float Duration); // [0x469e390] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// void DrawDebugSphere(class UObject* WorldContextObject, FVector Center, float Radius, int32_t Segments, FLinearColor LineColor, float Duration, float Thickness); // [0x469e160] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// void DrawDebugPoint(class UObject* WorldContextObject, FVector Position, float Size, FLinearColor PointColor, float Duration); // [0x469dfc0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// void DrawDebugPlane(class UObject* WorldContextObject, FPlane& PlaneCoordinates, FVector Location, float Size, FLinearColor PlaneColor, float Duration); // [0x469ddd0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void DrawDebugLine(class UObject* WorldContextObject, FVector LineStart, FVector LineEnd, FLinearColor LineColor, float Duration, float Thickness); // [0x469dbd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// void DrawDebugFrustum(class UObject* WorldContextObject, FTransform& FrustumTransform, FLinearColor FrustumColor, float Duration, float Thickness); // [0x469d9d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void DrawDebugFloatHistoryTransform(class UObject* WorldContextObject, FDebugFloatHistory& FloatHistory, FTransform& DrawTransform, FVector2D DrawSize, FLinearColor DrawColor, float Duration); // [0x469d770] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void DrawDebugFloatHistoryLocation(class UObject* WorldContextObject, FDebugFloatHistory& FloatHistory, FVector DrawLocation, FVector2D DrawSize, FLinearColor DrawColor, float Duration); // [0x469d560] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void DrawDebugCylinder(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, int32_t Segments, FLinearColor LineColor, float Duration, float Thickness); // [0x469d2e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// void DrawDebugCoordinateSystem(class UObject* WorldContextObject, FVector AxisLoc, FRotator AxisRot, float Scale, float Duration, float Thickness); // [0x469d0f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// void DrawDebugConeInDegrees(class UObject* WorldContextObject, FVector Origin, FVector Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, FLinearColor LineColor, float Duration, float Thickness); // [0x469cde0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// void DrawDebugCone(class UObject* WorldContextObject, FVector Origin, FVector Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, FLinearColor LineColor, float Duration, float Thickness); // [0x469cde0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// void DrawDebugCircle(class UObject* WorldContextObject, FVector Center, float Radius, int32_t NumSegments, FLinearColor LineColor, float Duration, float Thickness, FVector YAxis, FVector ZAxis, bool bDrawAxis); // [0x469cac0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// void DrawDebugCapsule(class UObject* WorldContextObject, FVector Center, float HalfHeight, float Radius, FRotator Rotation, FLinearColor LineColor, float Duration, float Thickness); // [0x469c840] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// void DrawDebugCamera(class ACameraActor* CameraActor, FLinearColor CameraColor, float Duration);                         // [0x469c730] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// void DrawDebugBox(class UObject* WorldContextObject, FVector Center, FVector Extent, FLinearColor LineColor, FRotator Rotation, float Duration, float Thickness); // [0x469c4e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// void DrawDebugArrow(class UObject* WorldContextObject, FVector LineStart, FVector LineEnd, float ArrowSize, FLinearColor LineColor, float Duration, float Thickness); // [0x469c2a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// bool DoesImplementInterface(class UObject* TestObject, class UClass* Interface);                                         // [0x469c1d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void delay(class UObject* WorldContextObject, float Duration, FLatentActionInfo LatentInfo);                             // [0x469c090] Final|Native|Static|Public|BlueprintCallable 
	// void CreateCopyForUndoBuffer(class UObject* ObjectToModify);                                                             // [0xfe37d0] Final|Native|Static|Public|BlueprintCallable 
	// FString ConvertToRelativePath(FString Filename);                                                                         // [0x469bfb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FString ConvertToAbsolutePath(FString Filename);                                                                         // [0x469bed0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// TWeakObjectPtr<UObject*> Conv_SoftObjPathToSoftObjRef(FSoftObjectPath& SoftObjectPath);                                  // [0x469bd30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FString Conv_SoftObjectReferenceToString(TWeakObjectPtr<UObject*>& SoftObjectReference);                                 // [0x469bc30] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// class UObject* Conv_SoftObjectReferenceToObject(TWeakObjectPtr<UObject*>& SoftObject);                                   // [0x469be10] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FString Conv_SoftClassReferenceToString(TWeakObjectPtr<UClass*>& SoftClassReference);                                    // [0x469bc30] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// class UClass* Conv_SoftClassReferenceToClass(TWeakObjectPtr<UClass*>& SoftClass);                                        // [0x469bb70] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// TWeakObjectPtr<UClass*> Conv_SoftClassPathToSoftClassRef(FSoftClassPath& SoftClassPath);                                 // [0x469ba90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FString Conv_PrimaryAssetTypeToString(FPrimaryAssetType PrimaryAssetType);                                               // [0x3c98db0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FString Conv_PrimaryAssetIdToString(FPrimaryAssetId PrimaryAssetId);                                                     // [0x469b9a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// TWeakObjectPtr<UObject*> Conv_ObjectToSoftObjectReference(class UObject* Object);                                        // [0x469b8f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// class UObject* Conv_InterfaceToObject(TScriptInterface<Class>& Interface);                                               // [0x469b850] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// TWeakObjectPtr<UClass*> Conv_ClassToSoftClassReference(class UClass*& Class);                                            // [0x469b790] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// void ControlScreensaver(bool bAllowScreenSaver);                                                                         // [0xf17190] Final|Native|Static|Public|BlueprintCallable 
	// bool ComponentOverlapComponents(class UPrimitiveComponent* Component, FTransform& ComponentTransform, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, class UClass* ComponentClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<UPrimitiveComponent*>& OutComponents); // [0x469b500] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool ComponentOverlapActors(class UPrimitiveComponent* Component, FTransform& ComponentTransform, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, class UClass* ActorClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<AActor*>& OutActors); // [0x469b270] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void CollectGarbage();                                                                                                   // [0x469b250] Final|Native|Static|Public|BlueprintCallable 
	// bool CapsuleTraceSingleForObjects(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x469ad60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool CapsuleTraceSingleByProfile(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x469a870] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool CapsuleTraceSingle(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x469a3a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool CapsuleTraceMultiForObjects(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x4699ee0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool CapsuleTraceMultiByProfile(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x4699a30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool CapsuleTraceMulti(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x4699590] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool CapsuleOverlapComponents(class UObject* WorldContextObject, FVector CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, class UClass* ComponentClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<UPrimitiveComponent*>& OutComponents); // [0x46992c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool CapsuleOverlapActors(class UObject* WorldContextObject, FVector CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, class UClass* ActorClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<AActor*>& OutActors); // [0x4698ff0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool CanLaunchURL(FString URL);                                                                                          // [0x4698f50] Final|Native|Static|Public|BlueprintCallable 
	// void CancelTransaction(int32_t Index);                                                                                   // [0x155a3c0] Final|Native|Static|Public|BlueprintCallable 
	// void BreakSoftObjectPath(FSoftObjectPath InSoftObjectPath, FString& PathString);                                         // [0x4698df0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void BreakSoftClassPath(FSoftClassPath InSoftClassPath, FString& PathString);                                            // [0x4698df0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool BoxTraceSingleForObjects(class UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x46988e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool BoxTraceSingleByProfile(class UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x46983d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool BoxTraceSingle(class UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x4697ed0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool BoxTraceMultiForObjects(class UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x4697a00] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool BoxTraceMultiByProfile(class UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x4697530] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool BoxTraceMulti(class UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x4697070] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool BoxOverlapComponents(class UObject* WorldContextObject, FVector BoxPos, FVector Extent, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, class UClass* ComponentClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<UPrimitiveComponent*>& OutComponents); // [0x4696de0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// bool BoxOverlapActors(class UObject* WorldContextObject, FVector BoxPos, FVector BoxExtent, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, class UClass* ActorClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<AActor*>& OutActors); // [0x4696b50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// int32_t BeginTransaction(FString Context, FText Description, class UObject* PrimaryObject);                              // [0x46969c0] Final|Native|Static|Public|BlueprintCallable 
	// FDebugFloatHistory AddFloatHistorySample(float Value, FDebugFloatHistory& FloatHistory);                                 // [0x4696850] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.KismetTextLibrary
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UKismetTextLibrary : public UBlueprintFunctionLibrary
{ 
public:
	// FText TextTrimTrailing(FText& InText);                                                                                   // [0x46b1030] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FText TextTrimPrecedingAndTrailing(FText& InText);                                                                       // [0x46b0f00] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FText TextTrimPreceding(FText& InText);                                                                                  // [0x46b0dd0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FText TextToUpper(FText& InText);                                                                                        // [0x46b0ca0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FText TextToLower(FText& InText);                                                                                        // [0x46b0b70] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool TextIsTransient(FText& InText);                                                                                     // [0x46b0aa0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool TextIsFromStringTable(FText& Text);                                                                                 // [0x46b09d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool TextIsEmpty(FText& InText);                                                                                         // [0x46b0900] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool TextIsCultureInvariant(FText& InText);                                                                              // [0x46b0830] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FText TextFromStringTable(FName TableId, FString Key);                                                                   // [0x46b06d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool StringTableIdAndKeyFromText(FText Text, FName& OutTableId, FString& OutKey);                                        // [0x46b02b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FText PolyglotDataToText(FPolyglotTextData& PolyglotData);                                                               // [0x46affb0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool NotEqual_TextText(FText& A, FText& B);                                                                              // [0x46afe40] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool NotEqual_IgnoreCase_TextText(FText& A, FText& B);                                                                   // [0x46afcd0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// void IsPolyglotDataValid(FPolyglotTextData& PolyglotData, bool& IsValid, FText& ErrorMessage);                           // [0x46afa00] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FText GetEmptyText();                                                                                                    // [0x46af870] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FText Format(FText InPattern, TArray<FFormatArgumentData> InArgs);                                                       // [0x46af440] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool FindTextInLocalizationTable(FString Namespace, FString Key, FText& OutText);                                        // [0x46af2c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool EqualEqual_TextText(FText& A, FText& B);                                                                            // [0x46af0b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool EqualEqual_IgnoreCase_TextText(FText& A, FText& B);                                                                 // [0x46aef40] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FText Conv_VectorToText(FVector InVec);                                                                                  // [0x46aee50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FText Conv_Vector2dToText(FVector2D InVec);                                                                              // [0x46aed70] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FText Conv_TransformToText(FTransform& InTrans);                                                                         // [0x46aec30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FString Conv_TextToString(FText& InText);                                                                                // [0x46aeb20] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FText Conv_StringToText(FString InString);                                                                               // [0x46aea20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FText Conv_RotatorToText(FRotator InRot);                                                                                // [0x46ae930] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FText Conv_ObjectToText(class UObject* InObj);                                                                           // [0x46ae840] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FText Conv_NameToText(FName InName);                                                                                     // [0x46ae740] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FText Conv_IntToText(int32_t Value, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits); // [0x46ae520] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FText Conv_Int64ToText(int64_t Value, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits); // [0x46ae300] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FText Conv_FloatToText(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits); // [0x46ae030] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FText Conv_ColorToText(FLinearColor InColor);                                                                            // [0x46adf50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// FText Conv_ByteToText(char Value);                                                                                       // [0x46ade70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FText Conv_BoolToText(bool InBool);                                                                                      // [0x46add80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FText AsTimeZoneTime_DateTime(FDateTime& InDateTime, FString InTimeZone);                                                // [0x46ad890] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FText AsTimeZoneDateTime_DateTime(FDateTime& InDateTime, FString InTimeZone);                                            // [0x46ad5f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FText AsTimeZoneDate_DateTime(FDateTime& InDateTime, FString InTimeZone);                                                // [0x46ad740] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FText AsTimespan_Timespan(FTimespan& InTimespan);                                                                        // [0x46adad0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FText AsTime_DateTime(FDateTime& In);                                                                                    // [0x46ad9e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FText AsPercent_Float(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits); // [0x46ad320] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FText AsDateTime_DateTime(FDateTime& In);                                                                                // [0x46ad140] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FText AsDate_DateTime(FDateTime& InDateTime);                                                                            // [0x46ad230] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FText AsCurrencyBase(int32_t BaseValue, FString CurrencyCode);                                                           // [0x46ac9c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FText AsCurrency_Integer(int32_t Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits, FString CurrencyCode); // [0x46ace20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FText AsCurrency_Float(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits, FString CurrencyCode); // [0x46acb00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.KuroActorSubsystem
/// Size: 0x0160 (352 bytes) (0x000038 - 0x000198) align 8 pad: 0x0000
class UKuroActorSubsystem : public UWorldSubsystem
{ 
public:
	SDK_UNDEFINED(16,160) /* FMulticastInlineDelegate */ __um(OnAddToSubsystem);                                   // 0x0038   (0x0010)  
	SDK_UNDEFINED(16,161) /* FMulticastInlineDelegate */ __um(OnRemoveFromSubsystem);                              // 0x0048   (0x0010)  
	SDK_UNDEFINED(80,162) /* TMap<FName, AActor*> */   __um(ActorMap);                                             // 0x0058   (0x0050)  
	SDK_UNDEFINED(80,163) /* TMap<FName, FTransform> */ __um(ActorOriginalTransformMap);                           // 0x00A8   (0x0050)  
	unsigned char                                      UnknownData00_7[0xA0];                                      // 0x00F8   (0x00A0)  MISSED
	// bool GetActorOriginalTransform(FName ActorKey, FTransform& OutTransform);                                                // [0x46af730] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// class AActor* GetActor(FName ActorKey);                                                                                  // [0x1029bb0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.KuroFrameStatsSettings
/// Size: 0x0040 (64 bytes) (0x000048 - 0x000088) align 8 pad: 0x0000
class UKuroFrameStatsSettings : public UDeveloperSettings
{ 
public:
	float                                              Frequency;                                                  // 0x0048   (0x0004)  
	int32_t                                            DetailsDepth;                                               // 0x004C   (0x0004)  
	int32_t                                            DetailsDepthMobile;                                         // 0x0050   (0x0004)  
	int32_t                                            FilterMode;                                                 // 0x0054   (0x0004)  
	FString                                            Filter;                                                     // 0x0058   (0x0010)  
	int32_t                                            FontSize;                                                   // 0x0068   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x006C   (0x0004)  MISSED
	TArray<FString>                                    Category;                                                   // 0x0070   (0x0010)  
	class UFont*                                       Font;                                                       // 0x0080   (0x0008)  
};

/// Struct /Script/Engine.KuroMaterialVariantsInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FKuroMaterialVariantsInfo
{ 
	TArray<FName>                                      Keywords;                                                   // 0x0000   (0x0010)  
	class UMaterialInstance*                           Material;                                                   // 0x0010   (0x0008)  
};

/// Class /Script/Engine.KuroMaterialVariationCollection
/// Size: 0x0018 (24 bytes) (0x000038 - 0x000050) align 8 pad: 0x0000
class UKuroMaterialVariationCollection : public UDataAsset
{ 
public:
	class UMaterialInstance*                           OriginalMaterial;                                           // 0x0038   (0x0008)  
	TArray<FKuroMaterialVariantsInfo>                  MaterialVariants;                                           // 0x0040   (0x0010)  
};

/// Class /Script/Engine.KuroMaterialVariationData
/// Size: 0x0010 (16 bytes) (0x000038 - 0x000048) align 8 pad: 0x0000
class UKuroMaterialVariationData : public UDataAsset
{ 
public:
	TArray<class UKuroMaterialVariationCollection*>    VariationData;                                              // 0x0038   (0x0010)  
};

/// Class /Script/Engine.KuroPerfHeatmapLibrary
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UKuroPerfHeatmapLibrary : public UBlueprintFunctionLibrary
{ 
public:
	// void WaitForRenderAssetsStreamingFinished();                                                                             // [0x46b1160] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// TArray<bool> TestCameraIntersectSceneComponent(class UCameraComponent* Camera, TArray<USceneComponent*>& SceneComponents); // [0x46b05a0] Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 
	// TArray<bool> TestBoxIntersectSceneComponent(FBox Box, TArray<USceneComponent*>& SceneComponents);                        // [0x46b0450] Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetPreviewES3();                                                                                                    // [0xc036d0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// bool SaveFile(FString Content, FString Path);                                                                            // [0x46b01c0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// bool IsShaderCompiling();                                                                                                // [0x46afca0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// bool IsCapturingFinished();                                                                                              // [0x46af9d0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// int32_t GetNumTrianglesOfStaticMesh(class UStaticMesh* StaticMesh, int32_t LOD);                                         // [0x46af900] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// class UClass* FindClassByName(FString Name);                                                                             // [0x46af220] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// FKuroFrameStatsCaptureResult EndCaptureFrameStats();                                                                     // [0x1025690] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// void BeginCaptureFrameStatsMode(int32_t NumFrames, int32_t DelayFrames, TEnumAsByte<EKuroFrameStatsCaptureMode> Mode);   // [0x46adc80] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// void BeginCaptureFrameStats(int32_t NumFrames, int32_t DelayFrames);                                                     // [0x46adbc0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.KuroVoxelizationGeneratorBase
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UKuroVoxelizationGeneratorBase : public UObject
{ 
public:
};

/// Struct /Script/Engine.LayerActorStats
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FLayerActorStats
{ 
	class UClass*                                      Type;                                                       // 0x0000   (0x0008)  
	int32_t                                            Total;                                                      // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x000C   (0x0004)  MISSED
};

/// Class /Script/Engine.Layer
/// Size: 0x0020 (32 bytes) (0x000030 - 0x000050) align 8 pad: 0x0000
class ULayer : public UObject
{ 
public:
	FName                                              LayerName;                                                  // 0x0030   (0x000C)  
	bool                                               bIsVisible : 1;                                             // 0x003C:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x003D   (0x0003)  MISSED
	TArray<FLayerActorStats>                           ActorStats;                                                 // 0x0040   (0x0010)  
};

/// Class /Script/Engine.LevelPartitionInterface
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class ULevelPartitionInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.ActorContainer
/// Size: 0x0050 (80 bytes) (0x000030 - 0x000080) align 8 pad: 0x0000
class UActorContainer : public UObject
{ 
public:
	SDK_UNDEFINED(80,164) /* TMap<FName, AActor*> */   __um(Actors);                                               // 0x0030   (0x0050)  
};

/// Struct /Script/Engine.ReplicatedStaticActorDestructionInfo
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 pad: 0x0000
struct FReplicatedStaticActorDestructionInfo
{ 
	unsigned char                                      UnknownData00_7[0x38];                                      // 0x0000   (0x0038)  MISSED
	class UClass*                                      ObjClass;                                                   // 0x0038   (0x0008)  
};

/// Class /Script/Engine.Level
/// Size: 0x0278 (632 bytes) (0x000030 - 0x0002A8) align 8 pad: 0x0000
class ULevel : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x90];                                      // 0x0030   (0x0090)  MISSED
	class UWorld*                                      OwningWorld;                                                // 0x00C0   (0x0008)  
	class UModel*                                      Model;                                                      // 0x00C8   (0x0008)  
	TArray<class UModelComponent*>                     ModelComponents;                                            // 0x00D0   (0x0010)  
	class ULevelActorContainer*                        ActorCluster;                                               // 0x00E0   (0x0008)  
	int32_t                                            NumTextureStreamingUnbuiltComponents;                       // 0x00E8   (0x0004)  
	int32_t                                            NumTextureStreamingDirtyResources;                          // 0x00EC   (0x0004)  
	class ALevelScriptActor*                           LevelScriptActor;                                           // 0x00F0   (0x0008)  
	class ANavigationObjectBase*                       NavListStart;                                               // 0x00F8   (0x0008)  
	class ANavigationObjectBase*                       NavListEnd;                                                 // 0x0100   (0x0008)  
	TArray<class UNavigationDataChunk*>                NavDataChunks;                                              // 0x0108   (0x0010)  
	float                                              LightmapTotalSize;                                          // 0x0118   (0x0004)  
	float                                              ShadowmapTotalSize;                                         // 0x011C   (0x0004)  
	TArray<FVector>                                    StaticNavigableGeometry;                                    // 0x0120   (0x0010)  
	TArray<FGuid>                                      StreamingTextureGuids;                                      // 0x0130   (0x0010)  
	unsigned char                                      UnknownData01_6[0x98];                                      // 0x0140   (0x0098)  MISSED
	FGuid                                              LevelBuildDataId;                                           // 0x01D8   (0x0010)  
	class UMapBuildDataRegistry*                       MapBuildData;                                               // 0x01E8   (0x0008)  
	FIntVector                                         LightBuildLevelOffset;                                      // 0x01F0   (0x000C)  
	bool                                               bIsLightingScenario : 1;                                    // 0x01FC:0 (0x0001)  
	unsigned char                                      UnknownBit02 : 1;                                           // 0x01FC:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit03 : 1;                                           // 0x01FC:2 (0x0001)  MISSED
	bool                                               bTextureStreamingRotationChanged : 1;                       // 0x01FC:3 (0x0001)  
	bool                                               bStaticComponentsRegisteredInStreamingManager : 1;          // 0x01FC:4 (0x0001)  
	bool                                               bIsVisible : 1;                                             // 0x01FC:5 (0x0001)  
	unsigned char                                      UnknownData04_3[0x1];                                       // 0x01FD   (0x0001)  MISSED
	unsigned char                                      UnknownBit05 : 1;                                           // 0x01FE:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit06 : 1;                                           // 0x01FE:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit07 : 1;                                           // 0x01FE:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit08 : 1;                                           // 0x01FE:3 (0x0001)  MISSED
	unsigned char                                      UnknownBit09 : 1;                                           // 0x01FE:4 (0x0001)  MISSED
	unsigned char                                      UnknownBit10 : 1;                                           // 0x01FE:5 (0x0001)  MISSED
	unsigned char                                      UnknownBit11 : 1;                                           // 0x01FE:6 (0x0001)  MISSED
	bool                                               bIsPartitioned : 1;                                         // 0x01FE:7 (0x0001)  
	bool                                               bIsWorldPartitionRuntimeCell : 1;                           // 0x01FF:0 (0x0001)  
	bool                                               bTickEvenPaused : 1;                                        // 0x01FF:1 (0x0001)  
	unsigned char                                      UnknownData12_5[0x68];                                      // 0x0200   (0x0068)  MISSED
	class AWorldSettings*                              WorldSettings;                                              // 0x0268   (0x0008)  
	unsigned char                                      UnknownData13_6[0x8];                                       // 0x0270   (0x0008)  MISSED
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0278   (0x0010)  
	unsigned char                                      UnknownData14_6[0x10];                                      // 0x0288   (0x0010)  MISSED
	TArray<FReplicatedStaticActorDestructionInfo>      DestroyedReplicatedStaticActors;                            // 0x0298   (0x0010)  
};

/// Class /Script/Engine.LevelActorContainer
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class ULevelActorContainer : public UObject
{ 
public:
	TArray<class AActor*>                              Actors;                                                     // 0x0030   (0x0010)  
};

/// Class /Script/Engine.LevelBounds
/// Size: 0x0010 (16 bytes) (0x0002A8 - 0x0002B8) align 8 pad: 0x0000
class ALevelBounds : public AActor
{ 
public:
	class UBoxComponent*                               BoxComponent;                                               // 0x02A8   (0x0008)  
	bool                                               bAutoUpdateBounds;                                          // 0x02B0   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x02B1   (0x0007)  MISSED
};

/// Class /Script/Engine.LevelInstance
/// Size: 0x0048 (72 bytes) (0x0002A8 - 0x0002F0) align 8 pad: 0x0000
class ALevelInstance : public AActor
{ 
public:
	SDK_UNDEFINED(48,165) /* TWeakObjectPtr<UWorld*> */ __um(WorldAsset);                                          // 0x02A8   (0x0030)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x02D8   (0x0018)  MISSED
};

/// Class /Script/Engine.LevelInstanceComponent
/// Size: 0x0008 (8 bytes) (0x000218 - 0x000220) align 16 pad: 0x0000
class ULevelInstanceComponent : public USceneComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0218   (0x0008)  MISSED
};

/// Class /Script/Engine.LevelInstanceEditorInstanceActor
/// Size: 0x0000 (0 bytes) (0x0002A8 - 0x0002A8) align 8 pad: 0x0000
class ALevelInstanceEditorInstanceActor : public AActor
{ 
public:
};

/// Class /Script/Engine.LevelStreaming
/// Size: 0x0160 (352 bytes) (0x000030 - 0x000190) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class ULevelStreaming : public UObject
{ 
public:
	SDK_UNDEFINED(48,166) /* TWeakObjectPtr<UWorld*> */ __um(WorldAsset);                                          // 0x0030   (0x0030)  
	int32_t                                            StreamingPriority;                                          // 0x0060   (0x0004)  
	FName                                              PackageNameToLoad;                                          // 0x0064   (0x000C)  
	TArray<FName>                                      LODPackageNames;                                            // 0x0070   (0x0010)  
	unsigned char                                      UnknownData00_6[0x10];                                      // 0x0080   (0x0010)  MISSED
	FTransform                                         LevelTransform;                                             // 0x0090   (0x0030)  
	int32_t                                            LevelLODIndex;                                              // 0x00C0   (0x0004)  
	unsigned char                                      UnknownBit01 : 1;                                           // 0x00C4:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit02 : 1;                                           // 0x00C4:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit03 : 1;                                           // 0x00C4:2 (0x0001)  MISSED
	bool                                               bShouldBeVisible : 1;                                       // 0x00C4:3 (0x0001)  
	bool                                               bShouldBeLoaded : 1;                                        // 0x00C4:4 (0x0001)  
	unsigned char                                      UnknownData04_3[0x2];                                       // 0x00C5   (0x0002)  MISSED
	bool                                               bLocked : 1;                                                // 0x00C7:0 (0x0001)  
	bool                                               bIsStatic : 1;                                              // 0x00C7:1 (0x0001)  
	bool                                               bShouldBlockOnLoad : 1;                                     // 0x00C7:2 (0x0001)  
	bool                                               bShouldBlockOnUnload : 1;                                   // 0x00C7:3 (0x0001)  
	bool                                               bDisableDistanceStreaming : 1;                              // 0x00C7:4 (0x0001)  
	bool                                               bDrawOnLevelStatusMap : 1;                                  // 0x00C7:5 (0x0001)  
	FLinearColor                                       LevelColor;                                                 // 0x00C8   (0x0010)  
	TArray<class ALevelStreamingVolume*>               EditorStreamingVolumes;                                     // 0x00D8   (0x0010)  
	float                                              MinTimeBetweenVolumeUnloadRequests;                         // 0x00E8   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x00EC   (0x0004)  MISSED
	SDK_UNDEFINED(16,167) /* FMulticastInlineDelegate */ __um(OnLevelLoaded);                                      // 0x00F0   (0x0010)  
	SDK_UNDEFINED(16,168) /* FMulticastInlineDelegate */ __um(OnLevelUnloaded);                                    // 0x0100   (0x0010)  
	SDK_UNDEFINED(16,169) /* FMulticastInlineDelegate */ __um(OnLevelShown);                                       // 0x0110   (0x0010)  
	SDK_UNDEFINED(16,170) /* FMulticastInlineDelegate */ __um(OnLevelHidden);                                      // 0x0120   (0x0010)  
	unsigned char                                      UnknownData06_6[0x30];                                      // 0x0130   (0x0030)  MISSED
	class ULevel*                                      LoadedLevel;                                                // 0x0160   (0x0008)  
	class ULevel*                                      PendingUnloadLevel;                                         // 0x0168   (0x0008)  
	unsigned char                                      UnknownData07_7[0x18];                                      // 0x0170   (0x0018)  MISSED
	// bool ShouldBeLoaded();                                                                                                   // [0xc03d00] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void SetShouldBeVisible(bool bInShouldBeVisible);                                                                        // [0x46beac0] Final|Native|Public|BlueprintCallable 
	// void SetShouldBeLoaded(bool bInShouldBeLoaded);                                                                          // [0x14b3b90] Native|Public|BlueprintCallable 
	// void SetPriority(int32_t NewPriority);                                                                                   // [0x46bea30] Final|Native|Public|BlueprintCallable 
	// void SetLevelLODIndex(int32_t LODIndex);                                                                                 // [0x46be9a0] Final|Native|Public|BlueprintCallable 
	// void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval);                                              // [0x46be910] Final|Native|Public|BlueprintCallable 
	// bool IsStreamingStatePending();                                                                                          // [0x46be070] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsLevelVisible();                                                                                                   // [0x46be040] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsLevelLoaded();                                                                                                    // [0x46be010] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FName GetWorldAssetPackageFName();                                                                                       // [0x46bdfd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class ULevel* GetLoadedLevel();                                                                                          // [0x4603470] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class ALevelScriptActor* GetLevelScriptActor();                                                                          // [0x46bdfa0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// bool GetIsRequestingUnloadAndRemoval();                                                                                  // [0x46bdf70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class ULevelStreaming* CreateInstance(FString UniqueInstanceName);                                                       // [0x46bdec0] Final|Native|Public|BlueprintCallable 
};
#pragma pack(pop)

/// Class /Script/Engine.LevelStreamingAlwaysLoaded
/// Size: 0x0008 (8 bytes) (0x000188 - 0x000190) align 16 pad: 0x0000
class ULevelStreamingAlwaysLoaded : public ULevelStreaming
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0188   (0x0008)  MISSED
};

/// Class /Script/Engine.LevelStreamingLevelInstanceEditor
/// Size: 0x0000 (0 bytes) (0x000190 - 0x000190) align 16 pad: 0x0000
class ULevelStreamingLevelInstanceEditor : public ULevelStreamingAlwaysLoaded
{ 
public:
};

/// Class /Script/Engine.LevelInstancePivot
/// Size: 0x0000 (0 bytes) (0x0002A8 - 0x0002A8) align 8 pad: 0x0000
class ALevelInstancePivot : public AActor
{ 
public:
};

/// Class /Script/Engine.LevelStreamingDynamic
/// Size: 0x0008 (8 bytes) (0x000188 - 0x000190) align 16 pad: 0x0000
class ULevelStreamingDynamic : public ULevelStreaming
{ 
public:
	bool                                               bInitiallyLoaded : 1;                                       // 0x0188:0 (0x0001)  
	bool                                               bInitiallyVisible : 1;                                      // 0x0188:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0189   (0x0007)  MISSED
	// class ULevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(class UObject* WorldContextObject, TWeakObjectPtr<UWorld*> Level, FVector Location, FRotator Rotation, bool& bOutSuccess, FString OptionalLevelNameOverride, class UClass* OptionalLevelStreamingClass); // [0x46be370] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// class ULevelStreamingDynamic* LoadLevelInstance(class UObject* WorldContextObject, FString LevelName, FVector Location, FRotator Rotation, bool& bOutSuccess, FString OptionalLevelNameOverride, class UClass* OptionalLevelStreamingClass); // [0x46be0a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.LevelStreamingLevelInstance
/// Size: 0x0010 (16 bytes) (0x000190 - 0x0001A0) align 16 pad: 0x0000
class ULevelStreamingLevelInstance : public ULevelStreamingDynamic
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0190   (0x0010)  MISSED
};

/// Class /Script/Engine.LevelInstanceSubsystem
/// Size: 0x0148 (328 bytes) (0x000038 - 0x000180) align 8 pad: 0x0000
class ULevelInstanceSubsystem : public UWorldSubsystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x148];                                     // 0x0038   (0x0148)  MISSED
};

/// Class /Script/Engine.LevelScriptActor
/// Size: 0x0008 (8 bytes) (0x0002A8 - 0x0002B0) align 8 pad: 0x0000
class ALevelScriptActor : public AActor
{ 
public:
	bool                                               bInputEnabled : 1;                                          // 0x02A8:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x02A9   (0x0007)  MISSED
	// void WorldOriginLocationChanged(FIntVector OldOriginLocation, FIntVector NewOriginLocation);                             // [0x25a7960] Event|Public|HasDefaults|BlueprintEvent 
	// void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning); // [0x46be730] Native|Public|BlueprintCallable 
	// bool RemoteEvent(FName EventName);                                                                                       // [0x46be670] Native|Public|BlueprintCallable 
	// void LevelReset();                                                                                                       // [0x25a7960] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
};

/// Class /Script/Engine.LevelScriptBlueprint
/// Size: 0x0000 (0 bytes) (0x0000A8 - 0x0000A8) align 8 pad: 0x0000
class ULevelScriptBlueprint : public UBlueprint
{ 
public:
};

/// Class /Script/Engine.LevelStreamingPersistent
/// Size: 0x0008 (8 bytes) (0x000188 - 0x000190) align 16 pad: 0x0000
class ULevelStreamingPersistent : public ULevelStreaming
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0188   (0x0008)  MISSED
};

/// Class /Script/Engine.LevelStreamingVolume
/// Size: 0x0018 (24 bytes) (0x0002E0 - 0x0002F8) align 8 pad: 0x0000
class ALevelStreamingVolume : public AVolume
{ 
public:
	TArray<FName>                                      StreamingLevelNames;                                        // 0x02E0   (0x0010)  
	bool                                               bEditorPreVisOnly : 1;                                      // 0x02F0:0 (0x0001)  
	bool                                               bDisabled : 1;                                              // 0x02F0:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x02F1   (0x0003)  MISSED
	TEnumAsByte<EStreamingVolumeUsage>                 StreamingUsage;                                             // 0x02F4   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x02F5   (0x0003)  MISSED
};

/// Class /Script/Engine.LightmappedSurfaceCollection
/// Size: 0x0018 (24 bytes) (0x000030 - 0x000048) align 8 pad: 0x0000
class ULightmappedSurfaceCollection : public UObject
{ 
public:
	class UModel*                                      SourceModel;                                                // 0x0030   (0x0008)  
	TArray<int32_t>                                    Surfaces;                                                   // 0x0038   (0x0010)  
};

/// Class /Script/Engine.LightMapTexture2D
/// Size: 0x0008 (8 bytes) (0x000118 - 0x000120) align 8 pad: 0x0000
class ULightMapTexture2D : public UTexture2D
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0118   (0x0008)  MISSED
};

/// Class /Script/Engine.LightMapVirtualTexture2D
/// Size: 0x0018 (24 bytes) (0x000118 - 0x000130) align 8 pad: 0x0000
class ULightMapVirtualTexture2D : public UTexture2D
{ 
public:
	TArray<int8_t>                                     TypeToLayer;                                                // 0x0118   (0x0010)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0128   (0x0008)  MISSED
};

/// Class /Script/Engine.LightmassCharacterIndirectDetailVolume
/// Size: 0x0000 (0 bytes) (0x0002E0 - 0x0002E0) align 8 pad: 0x0000
class ALightmassCharacterIndirectDetailVolume : public AVolume
{ 
public:
};

/// Class /Script/Engine.LightmassImportanceVolume
/// Size: 0x0000 (0 bytes) (0x0002E0 - 0x0002E0) align 8 pad: 0x0000
class ALightmassImportanceVolume : public AVolume
{ 
public:
};

/// Class /Script/Engine.LightmassPortal
/// Size: 0x0008 (8 bytes) (0x0002A8 - 0x0002B0) align 8 pad: 0x0000
class ALightmassPortal : public AActor
{ 
public:
	class ULightmassPortalComponent*                   PortalComponent;                                            // 0x02A8   (0x0008)  
};

/// Class /Script/Engine.LightmassPortalComponent
/// Size: 0x0008 (8 bytes) (0x000218 - 0x000220) align 16 pad: 0x0000
class ULightmassPortalComponent : public USceneComponent
{ 
public:
	class UBoxComponent*                               PreviewBox;                                                 // 0x0218   (0x0008)  
};

/// Class /Script/Engine.LightmassPrimitiveSettingsObject
/// Size: 0x0018 (24 bytes) (0x000030 - 0x000048) align 8 pad: 0x0000
class ULightmassPrimitiveSettingsObject : public UObject
{ 
public:
	FLightmassPrimitiveSettings                        LightmassSettings;                                          // 0x0030   (0x0018)  
};

/// Class /Script/Engine.LineBatchComponent
/// Size: 0x0040 (64 bytes) (0x0004E0 - 0x000520) align 16 pad: 0x0000
class ULineBatchComponent : public UPrimitiveComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x40];                                      // 0x04E0   (0x0040)  MISSED
};

/// Struct /Script/Engine.LightmassPointLightSettings
/// Size: 0x0000 (0 bytes) (0x00000C - 0x00000C) align 4 pad: 0x0000
struct FLightmassPointLightSettings : FLightmassLightSettings
{ 
};

/// Class /Script/Engine.LocalLightComponent
/// Size: 0x0018 (24 bytes) (0x0003B8 - 0x0003D0) align 16 pad: 0x0000
class ULocalLightComponent : public ULightComponent
{ 
public:
	ELightUnits                                        IntensityUnits;                                             // 0x03B8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x03B9   (0x0003)  MISSED
	float                                              Radius;                                                     // 0x03BC   (0x0004)  
	float                                              AttenuationRadius;                                          // 0x03C0   (0x0004)  
	FLightmassPointLightSettings                       LightmassSettings;                                          // 0x03C4   (0x000C)  
	// void SetIntensityUnits(ELightUnits NewIntensityUnits);                                                                   // [0x46c5210] Final|Native|Public|BlueprintCallable 
	// void SetAttenuationRadius(float NewRadius);                                                                              // [0x46c5190] Final|Native|Public|BlueprintCallable 
	// float GetUnitsConversionFactor(ELightUnits SrcUnits, ELightUnits TargetUnits, float CosHalfConeAngle);                   // [0x46c5080] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.LODActor
/// Size: 0x0090 (144 bytes) (0x0002A8 - 0x000338) align 8 pad: 0x0000
class ALODActor : public AActor
{ 
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                        // 0x02A8   (0x0008)  
	SDK_UNDEFINED(80,171) /* TMap<FHLODInstancingKey, UInstancedStaticMeshComponent*> */ __um(InstancedStaticMeshComponents); // 0x02B0   (0x0050)  
	class UHLODProxy*                                  Proxy;                                                      // 0x0300   (0x0008)  
	FName                                              Key;                                                        // 0x0308   (0x000C)  
	float                                              LODDrawDistance;                                            // 0x0314   (0x0004)  
	int32_t                                            LODLevel;                                                   // 0x0318   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x031C   (0x0004)  MISSED
	TArray<class AActor*>                              SubActors;                                                  // 0x0320   (0x0010)  
	char                                               CachedNumHLODLevels;                                        // 0x0330   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0331   (0x0007)  MISSED
};

/// Struct /Script/Engine.ComponentSync
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FComponentSync
{ 
	FName                                              Name;                                                       // 0x0000   (0x000C)  
	ESyncOption                                        SyncOption;                                                 // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Class /Script/Engine.LODSyncComponent
/// Size: 0x0090 (144 bytes) (0x0000C0 - 0x000150) align 8 pad: 0x0000
class ULODSyncComponent : public UActorComponent
{ 
public:
	int32_t                                            NumLODs;                                                    // 0x00C0   (0x0004)  
	int32_t                                            ForcedLOD;                                                  // 0x00C4   (0x0004)  
	TArray<FComponentSync>                             ComponentsToSync;                                           // 0x00C8   (0x0010)  
	SDK_UNDEFINED(80,172) /* TMap<FName, FLODMappingData> */ __um(CustomLODMapping);                               // 0x00D8   (0x0050)  
	int32_t                                            CurrentLOD;                                                 // 0x0128   (0x0004)  
	int32_t                                            CurrentNumLODs;                                             // 0x012C   (0x0004)  
	TArray<class UPrimitiveComponent*>                 DriveComponents;                                            // 0x0130   (0x0010)  
	TArray<class UPrimitiveComponent*>                 SubComponents;                                              // 0x0140   (0x0010)  
	// FString GetLODSyncDebugText();                                                                                           // [0x46c5000] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.LODSyncInterface
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class ULODSyncInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.MapBuildDataRegistry
/// Size: 0x0210 (528 bytes) (0x000030 - 0x000240) align 8 pad: 0x0000
class UMapBuildDataRegistry : public UObject
{ 
public:
	TEnumAsByte<ELightingBuildQuality>                 LevelLightingQuality;                                       // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_7[0x20F];                                     // 0x0031   (0x020F)  MISSED
};

/// Struct /Script/Engine.MaterialInput
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FMaterialInput
{ 
	int32_t                                            OutputIndex;                                                // 0x0000   (0x0004)  
	FName                                              ExpressionName;                                             // 0x0004   (0x000C)  
};

/// Struct /Script/Engine.ScalarMaterialInput
/// Size: 0x0000 (0 bytes) (0x000010 - 0x000010) align 4 pad: 0x0000
struct FScalarMaterialInput : FMaterialInput
{ 
};

/// Struct /Script/Engine.VectorMaterialInput
/// Size: 0x0000 (0 bytes) (0x000010 - 0x000010) align 4 pad: 0x0000
struct FVectorMaterialInput : FMaterialInput
{ 
};

/// Struct /Script/Engine.ColorMaterialInput
/// Size: 0x0000 (0 bytes) (0x000010 - 0x000010) align 4 pad: 0x0000
struct FColorMaterialInput : FMaterialInput
{ 
};

/// Struct /Script/Engine.MaterialShadingModelField
/// Size: 0x0002 (2 bytes) (0x000000 - 0x000002) align 2 pad: 0x0000
struct FMaterialShadingModelField
{ 
	uint16_t                                           ShadingModelField;                                          // 0x0000   (0x0002)  
};

/// Struct /Script/Engine.ExpressionInput
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FExpressionInput
{ 
	int32_t                                            OutputIndex;                                                // 0x0000   (0x0004)  
	FName                                              ExpressionName;                                             // 0x0004   (0x000C)  
};

/// Struct /Script/Engine.MaterialAttributesInput
/// Size: 0x0004 (4 bytes) (0x000010 - 0x000014) align 4 pad: 0x0000
struct FMaterialAttributesInput : FExpressionInput
{ 
	int32_t                                            PropertyConnectedBitmask;                                   // 0x0010   (0x0004)  
};

/// Struct /Script/Engine.ShadingModelMaterialInput
/// Size: 0x0000 (0 bytes) (0x000010 - 0x000010) align 4 pad: 0x0000
struct FShadingModelMaterialInput : FMaterialInput
{ 
};

/// Struct /Script/Engine.MaterialFunctionInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FMaterialFunctionInfo
{ 
	FGuid                                              StateId;                                                    // 0x0000   (0x0010)  
	class UMaterialFunctionInterface*                  Function;                                                   // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.MaterialParameterCollectionInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FMaterialParameterCollectionInfo
{ 
	FGuid                                              StateId;                                                    // 0x0000   (0x0010)  
	class UMaterialParameterCollection*                ParameterCollection;                                        // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.MaterialCachedExpressionData
/// Size: 0x0238 (568 bytes) (0x000000 - 0x000238) align 8 pad: 0x0000
struct FMaterialCachedExpressionData
{ 
	FMaterialCachedParameters                          Parameters;                                                 // 0x0000   (0x01A0)  
	TArray<class UObject*>                             ReferencedTextures;                                         // 0x01A0   (0x0010)  
	TArray<FMaterialFunctionInfo>                      FunctionInfos;                                              // 0x01B0   (0x0010)  
	TArray<FMaterialParameterCollectionInfo>           ParameterCollectionInfos;                                   // 0x01C0   (0x0010)  
	TArray<class UMaterialFunctionInterface*>          DefaultLayers;                                              // 0x01D0   (0x0010)  
	TArray<class UMaterialFunctionInterface*>          DefaultLayerBlends;                                         // 0x01E0   (0x0010)  
	TArray<class ULandscapeGrassType*>                 GrassTypes;                                                 // 0x01F0   (0x0010)  
	TArray<FName>                                      DynamicParameterNames;                                      // 0x0200   (0x0010)  
	TArray<bool>                                       QualityLevelsUsed;                                          // 0x0210   (0x0010)  
	TArray<uint32_t>                                   QualityLevelsUsedFeatureLevelMask;                          // 0x0220   (0x0010)  
	bool                                               bHasRuntimeVirtualTextureOutput : 1;                        // 0x0230:0 (0x0001)  
	bool                                               bHasSceneColor : 1;                                         // 0x0230:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0231   (0x0007)  MISSED
};

/// Class /Script/Engine.Material
/// Size: 0x04A0 (1184 bytes) (0x000090 - 0x000530) align 8 pad: 0x0000
class UMaterial : public UMaterialInterface
{ 
public:
	class UPhysicalMaterial*                           PhysMaterial;                                               // 0x0090   (0x0008)  
	class UPhysicalMaterialMask*                       PhysMaterialMask;                                           // 0x0098   (0x0008)  
	class UPhysicalMaterial*                           PhysicalMaterialMap[8];                                     // 0x00A0   (0x0040)  
	FScalarMaterialInput                               Metallic;                                                   // 0x00E0   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x00F0   (0x000C)  MISSED
	FScalarMaterialInput                               Specular;                                                   // 0x00FC   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x010C   (0x000C)  MISSED
	FScalarMaterialInput                               Anisotropy;                                                 // 0x0118   (0x0010)  
	unsigned char                                      UnknownData02_6[0xC];                                       // 0x0128   (0x000C)  MISSED
	FVectorMaterialInput                               Normal;                                                     // 0x0134   (0x0010)  
	unsigned char                                      UnknownData03_6[0xC];                                       // 0x0144   (0x000C)  MISSED
	FVectorMaterialInput                               Tangent;                                                    // 0x0150   (0x0010)  
	unsigned char                                      UnknownData04_6[0xC];                                       // 0x0160   (0x000C)  MISSED
	FColorMaterialInput                                EmissiveColor;                                              // 0x016C   (0x0010)  
	unsigned char                                      UnknownData05_6[0xC];                                       // 0x017C   (0x000C)  MISSED
	TEnumAsByte<EMaterialDomain>                       MaterialDomain;                                             // 0x0188   (0x0001)  
	TEnumAsByte<EBlendMode>                            BlendMode;                                                  // 0x0189   (0x0001)  
	TEnumAsByte<EDecalBlendMode>                       DecalBlendMode;                                             // 0x018A   (0x0001)  
	TEnumAsByte<EMaterialDecalResponse>                MaterialDecalResponse;                                      // 0x018B   (0x0001)  
	TEnumAsByte<EMaterialShadingModel>                 ShadingModel;                                               // 0x018C   (0x0001)  
	bool                                               bCastDynamicShadowAsMasked : 1;                             // 0x018D:0 (0x0001)  
	FMaterialShadingModelField                         ShadingModels;                                              // 0x018E   (0x0002)  
	float                                              OpacityMaskClipValue;                                       // 0x0190   (0x0004)  
	FVectorMaterialInput                               WorldPositionOffset;                                        // 0x0194   (0x0010)  
	unsigned char                                      UnknownData06_6[0xC];                                       // 0x01A4   (0x000C)  MISSED
	FScalarMaterialInput                               Refraction;                                                 // 0x01B0   (0x0010)  
	unsigned char                                      UnknownData07_6[0xC];                                       // 0x01C0   (0x000C)  MISSED
	FMaterialAttributesInput                           MaterialAttributes;                                         // 0x01CC   (0x0014)  
	unsigned char                                      UnknownData08_6[0xC];                                       // 0x01E0   (0x000C)  MISSED
	FScalarMaterialInput                               PixelDepthOffset;                                           // 0x01EC   (0x0010)  
	unsigned char                                      UnknownData09_6[0xC];                                       // 0x01FC   (0x000C)  MISSED
	FShadingModelMaterialInput                         ShadingModelFromMaterialExpression;                         // 0x0208   (0x0010)  
	unsigned char                                      UnknownData10_6[0xC];                                       // 0x0218   (0x000C)  MISSED
	FScalarMaterialInput                               ShadowPixelDepthOffset;                                     // 0x0224   (0x0010)  
	unsigned char                                      UnknownData11_6[0xC];                                       // 0x0234   (0x000C)  MISSED
	bool                                               bEnableSeparateTranslucency : 1;                            // 0x0240:0 (0x0001)  
	bool                                               bEnableResponsiveAA : 1;                                    // 0x0240:1 (0x0001)  
	bool                                               bScreenSpaceReflections : 1;                                // 0x0240:2 (0x0001)  
	bool                                               bContactShadows : 1;                                        // 0x0240:3 (0x0001)  
	bool                                               bTranslucencyReceiveLightFunctionShadow : 1;                // 0x0240:4 (0x0001)  
	bool                                               TwoSided : 1;                                               // 0x0240:5 (0x0001)  
	bool                                               KuroWater : 1;                                              // 0x0240:6 (0x0001)  
	bool                                               BackFace : 1;                                               // 0x0240:7 (0x0001)  
	unsigned char                                      UnknownData12_5[0x1];                                       // 0x0241   (0x0001)  MISSED
	uint16_t                                           RenderQueue;                                                // 0x0242   (0x0002)  
	bool                                               bDisableShadowCacheForSPDO : 1;                             // 0x0244:0 (0x0001)  
	unsigned char                                      UnknownData13_3[0x1];                                       // 0x0245   (0x0001)  MISSED
	bool                                               bCustomAlphaTest : 1;                                       // 0x0246:0 (0x0001)  
	bool                                               bEnableBattle : 1;                                          // 0x0246:1 (0x0001)  
	bool                                               bEnableBattleMask : 1;                                      // 0x0246:2 (0x0001)  
	bool                                               bIsCharacterHairMat : 1;                                    // 0x0246:3 (0x0001)  
	bool                                               bIsCharacterHETMat : 1;                                     // 0x0246:4 (0x0001)  
	bool                                               bUseMobileDistortion : 1;                                   // 0x0246:5 (0x0001)  
	bool                                               bLGUIMaterial : 1;                                          // 0x0246:6 (0x0001)  
	bool                                               bTranslucencyUse3xPCF : 1;                                  // 0x0246:7 (0x0001)  
	bool                                               bTranslucencyIBLUseCustomdataRoughness : 1;                 // 0x0247:0 (0x0001)  
	bool                                               DitheredLODTransition : 1;                                  // 0x0247:1 (0x0001)  
	bool                                               DitherOpacityMask : 1;                                      // 0x0247:2 (0x0001)  
	bool                                               bAllowNegativeEmissiveColor : 1;                            // 0x0247:3 (0x0001)  
	TEnumAsByte<ETranslucencyLightingMode>             TranslucencyLightingMode;                                   // 0x0248   (0x0001)  
	bool                                               bEnableMobileSeparateTranslucency : 1;                      // 0x0249:0 (0x0001)  
	bool                                               bUseNormalDither : 1;                                       // 0x0249:1 (0x0001)  
	unsigned char                                      UnknownData14_5[0x2];                                       // 0x024A   (0x0002)  MISSED
	float                                              NormalDitherScale;                                          // 0x024C   (0x0004)  
	int32_t                                            NumCustomizedUVs;                                           // 0x0250   (0x0004)  
	float                                              TranslucencyDirectionalLightingIntensity;                   // 0x0254   (0x0004)  
	float                                              TranslucentShadowDensityScale;                              // 0x0258   (0x0004)  
	float                                              TranslucentSelfShadowDensityScale;                          // 0x025C   (0x0004)  
	float                                              TranslucentSelfShadowSecondDensityScale;                    // 0x0260   (0x0004)  
	float                                              TranslucentSelfShadowSecondOpacity;                         // 0x0264   (0x0004)  
	float                                              TranslucentBackscatteringExponent;                          // 0x0268   (0x0004)  
	FLinearColor                                       TranslucentMultipleScatteringExtinction;                    // 0x026C   (0x0010)  
	float                                              TranslucentShadowStartOffset;                               // 0x027C   (0x0004)  
	bool                                               bDisableDepthTest : 1;                                      // 0x0280:0 (0x0001)  
	bool                                               bWriteOnlyAlpha : 1;                                        // 0x0280:1 (0x0001)  
	bool                                               bGenerateSphericalParticleNormals : 1;                      // 0x0280:2 (0x0001)  
	bool                                               bTangentSpaceNormal : 1;                                    // 0x0280:3 (0x0001)  
	bool                                               bUseEmissiveForDynamicAreaLighting : 1;                     // 0x0280:4 (0x0001)  
	bool                                               bBlockGI : 1;                                               // 0x0280:5 (0x0001)  
	bool                                               bUsedAsSpecialEngineMaterial : 1;                           // 0x0280:6 (0x0001)  
	bool                                               bUsedWithSkeletalMesh : 1;                                  // 0x0280:7 (0x0001)  
	bool                                               bSingleLayerWaterRainDrop : 1;                              // 0x0281:0 (0x0001)  
	bool                                               bSingleLayerWaterSSRProxy : 1;                              // 0x0281:1 (0x0001)  
	unsigned char                                      UnknownBit15 : 1;                                           // 0x0281:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit16 : 1;                                           // 0x0281:3 (0x0001)  MISSED
	unsigned char                                      UnknownBit17 : 1;                                           // 0x0281:4 (0x0001)  MISSED
	unsigned char                                      UnknownBit18 : 1;                                           // 0x0281:5 (0x0001)  MISSED
	unsigned char                                      UnknownBit19 : 1;                                           // 0x0281:6 (0x0001)  MISSED
	unsigned char                                      UnknownBit20 : 1;                                           // 0x0281:7 (0x0001)  MISSED
	bool                                               bWriteDepthToGbuffer : 1;                                   // 0x0282:0 (0x0001)  
	unsigned char                                      UnknownData21_3[0x1];                                       // 0x0283   (0x0001)  MISSED
	bool                                               bUsedWithOutline : 1;                                       // 0x0284:0 (0x0001)  
	bool                                               bUsedWithStencilOnlyWrite : 1;                              // 0x0284:1 (0x0001)  
	bool                                               bUsedWithFaceShadowMesh : 1;                                // 0x0284:2 (0x0001)  
	bool                                               bUsedWithEmpty : 1;                                         // 0x0284:3 (0x0001)  
	bool                                               bUsedForGenerate2DMap : 1;                                  // 0x0284:4 (0x0001)  
	char                                               Generate2DMapStencil;                                       // 0x0285   (0x0001)  
	bool                                               bLandscapeMaterialWithHoles : 1;                            // 0x0286:0 (0x0001)  
	bool                                               bBakeImposter : 1;                                          // 0x0286:1 (0x0001)  
	bool                                               bUsedWithHLODVertexCompression : 1;                         // 0x0286:2 (0x0001)  
	bool                                               bHasPreDepthPass : 1;                                       // 0x0286:3 (0x0001)  
	TEnumAsByte<EKuroTranslucentPreDepthTestMode>      KuroTranslucentPreDepthTestMode;                            // 0x0287   (0x0001)  
	bool                                               bSupportsUBInstancing : 1;                                  // 0x0288:0 (0x0001)  
	bool                                               bSupportsDrawMaterialToRT : 1;                              // 0x0288:1 (0x0001)  
	bool                                               bUsedWithEditorCompositing : 1;                             // 0x0288:2 (0x0001)  
	bool                                               bUsedWithParticleSprites : 1;                               // 0x0288:3 (0x0001)  
	bool                                               bUsedWithBeamTrails : 1;                                    // 0x0288:4 (0x0001)  
	bool                                               bUsedWithMeshParticles : 1;                                 // 0x0288:5 (0x0001)  
	bool                                               bUsedWithNiagaraSprites : 1;                                // 0x0288:6 (0x0001)  
	bool                                               bUsedWithNiagaraRibbons : 1;                                // 0x0288:7 (0x0001)  
	bool                                               bUsedWithNiagaraMeshParticles : 1;                          // 0x0289:0 (0x0001)  
	bool                                               bUsedWithGeometryCache : 1;                                 // 0x0289:1 (0x0001)  
	bool                                               bUsedWithStaticLighting : 1;                                // 0x0289:2 (0x0001)  
	bool                                               bUsedWithMorphTargets : 1;                                  // 0x0289:3 (0x0001)  
	bool                                               bUsedWithSplineMeshes : 1;                                  // 0x0289:4 (0x0001)  
	bool                                               bUsedWithInstancedStaticMeshes : 1;                         // 0x0289:5 (0x0001)  
	bool                                               bUsedWithGeometryCollections : 1;                           // 0x0289:6 (0x0001)  
	bool                                               bUsesDistortion : 1;                                        // 0x0289:7 (0x0001)  
	bool                                               bUsedWithClothing : 1;                                      // 0x028A:0 (0x0001)  
	unsigned char                                      UnknownData22_3[0x1];                                       // 0x028B   (0x0001)  MISSED
	bool                                               bUsedWithWater : 1;                                         // 0x028C:0 (0x0001)  
	bool                                               bUsedWithHairStrands : 1;                                   // 0x028C:1 (0x0001)  
	bool                                               bUsedWithLidarPointCloud : 1;                               // 0x028C:2 (0x0001)  
	bool                                               bUsedWithVirtualHeightfieldMesh : 1;                        // 0x028C:3 (0x0001)  
	unsigned char                                      UnknownData23_3[0x3];                                       // 0x028D   (0x0003)  MISSED
	bool                                               bUsedWithUI : 1;                                            // 0x0290:0 (0x0001)  
	bool                                               bAutomaticallySetUsageInEditor : 1;                         // 0x0290:1 (0x0001)  
	bool                                               bFullyRough : 1;                                            // 0x0290:2 (0x0001)  
	bool                                               bUseFullPrecision : 1;                                      // 0x0290:3 (0x0001)  
	bool                                               bUseFullPrecisionParams : 1;                                // 0x0290:4 (0x0001)  
	bool                                               bUseHalfPrecisionVS : 1;                                    // 0x0290:5 (0x0001)  
	bool                                               bUseLightmapDirectionality : 1;                             // 0x0290:6 (0x0001)  
	bool                                               bUseAlphaToCoverage : 1;                                    // 0x0290:7 (0x0001)  
	unsigned char                                      UnknownData24_3[0x2];                                       // 0x0292   (0x0002)  MISSED
	bool                                               bForwardRenderUsePreintegratedGFForSimpleIBL : 1;           // 0x0294:0 (0x0001)  
	unsigned char                                      UnknownData25_3[0x3];                                       // 0x0295   (0x0003)  MISSED
	bool                                               bUseHQForwardReflections : 1;                               // 0x0298:0 (0x0001)  
	bool                                               bUsePlanarForwardReflections : 1;                           // 0x0298:1 (0x0001)  
	bool                                               bNormalCurvatureToRoughness : 1;                            // 0x0298:2 (0x0001)  
	TEnumAsByte<EMaterialTessellationMode>             D3D11TessellationMode;                                      // 0x0299   (0x0001)  
	bool                                               bEnableCrackFreeDisplacement : 1;                           // 0x029A:0 (0x0001)  
	bool                                               bEnableAdaptiveTessellation : 1;                            // 0x029A:1 (0x0001)  
	bool                                               AllowTranslucentCustomDepthWrites : 1;                      // 0x029A:2 (0x0001)  
	bool                                               Wireframe : 1;                                              // 0x029A:3 (0x0001)  
	TEnumAsByte<EMaterialShadingRate>                  ShadingRate;                                                // 0x029B   (0x0001)  
	bool                                               bCanMaskedBeAssumedOpaque : 1;                              // 0x029C:0 (0x0001)  
	bool                                               bIsMasked : 1;                                              // 0x029C:1 (0x0001)  
	bool                                               bIsPreviewMaterial : 1;                                     // 0x029C:2 (0x0001)  
	bool                                               bIsFunctionPreviewMaterial : 1;                             // 0x029C:3 (0x0001)  
	bool                                               bUseMaterialAttributes : 1;                                 // 0x029C:4 (0x0001)  
	bool                                               bCastRayTracedShadows : 1;                                  // 0x029C:5 (0x0001)  
	bool                                               bUseTranslucencyVertexFog : 1;                              // 0x029C:6 (0x0001)  
	bool                                               bApplyCloudFogging : 1;                                     // 0x029C:7 (0x0001)  
	bool                                               bIsSky : 1;                                                 // 0x029D:0 (0x0001)  
	bool                                               bComputeFogPerPixel : 1;                                    // 0x029D:1 (0x0001)  
	bool                                               bOutputTranslucentVelocity : 1;                             // 0x029D:2 (0x0001)  
	bool                                               bAllowDevelopmentShaderCompile : 1;                         // 0x029D:3 (0x0001)  
	bool                                               bIsMaterialEditorStatsMaterial : 1;                         // 0x029D:4 (0x0001)  
	TEnumAsByte<EBlendableLocation>                    BlendableLocation;                                          // 0x029E   (0x0001)  
	bool                                               BlendableOutputAlpha : 1;                                   // 0x029F:0 (0x0001)  
	bool                                               bEnableStencilTest : 1;                                     // 0x029F:1 (0x0001)  
	TEnumAsByte<EMaterialStencilCompare>               StencilCompare;                                             // 0x02A0   (0x0001)  
	char                                               StencilRefValue;                                            // 0x02A1   (0x0001)  
	TEnumAsByte<ERefractionMode>                       RefractionMode;                                             // 0x02A2   (0x0001)  
	unsigned char                                      UnknownData26_6[0x1];                                       // 0x02A3   (0x0001)  MISSED
	int32_t                                            BlendablePriority;                                          // 0x02A4   (0x0004)  
	bool                                               bIsBlendable : 1;                                           // 0x02A8:0 (0x0001)  
	unsigned char                                      UnknownData27_5[0x3];                                       // 0x02A9   (0x0003)  MISSED
	uint32_t                                           UsageFlagWarnings;                                          // 0x02AC   (0x0004)  
	float                                              RefractionDepthBias;                                        // 0x02B0   (0x0004)  
	FGuid                                              StateId;                                                    // 0x02B4   (0x0010)  
	float                                              MaxDisplacement;                                            // 0x02C4   (0x0004)  
	unsigned char                                      UnknownData28_6[0x30];                                      // 0x02C8   (0x0030)  MISSED
	FMaterialCachedExpressionData                      CachedExpressionData;                                       // 0x02F8   (0x0238)  
};

/// Struct /Script/Engine.MaterialSpriteElement
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FMaterialSpriteElement
{ 
	class UMaterialInterface*                          Material;                                                   // 0x0000   (0x0008)  
	class UCurveFloat*                                 DistanceToOpacityCurve;                                     // 0x0008   (0x0008)  
	bool                                               bSizeIsInScreenSpace : 1;                                   // 0x0010:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0011   (0x0003)  MISSED
	float                                              BaseSizeX;                                                  // 0x0014   (0x0004)  
	float                                              BaseSizeY;                                                  // 0x0018   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	class UCurveFloat*                                 DistanceToSizeCurve;                                        // 0x0020   (0x0008)  
};

/// Class /Script/Engine.MaterialBillboardComponent
/// Size: 0x0010 (16 bytes) (0x0004E0 - 0x0004F0) align 16 pad: 0x0000
class UMaterialBillboardComponent : public UPrimitiveComponent
{ 
public:
	TArray<FMaterialSpriteElement>                     Elements;                                                   // 0x04E0   (0x0010)  
	// void SetElements(TArray<FMaterialSpriteElement>& NewElements);                                                           // [0x46c9230] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void AddElement(class UMaterialInterface* Material, class UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, class UCurveFloat* DistanceToSizeCurve); // [0x46c9040] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.MaterialExpressionAbs
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionAbs : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionActorPositionWS
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionActorPositionWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionAdd
/// Size: 0x0040 (64 bytes) (0x000048 - 0x000088) align 8 pad: 0x0000
class UMaterialExpressionAdd : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   B;                                                          // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	float                                              ConstA;                                                     // 0x0080   (0x0004)  
	float                                              ConstB;                                                     // 0x0084   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionTextureBase
/// Size: 0x0008 (8 bytes) (0x000048 - 0x000050) align 8 pad: 0x0000
class UMaterialExpressionTextureBase : public UMaterialExpression
{ 
public:
	class UTexture*                                    Texture;                                                    // 0x0048   (0x0008)  
};

/// Class /Script/Engine.MaterialExpressionTextureSample
/// Size: 0x0020 (32 bytes) (0x000050 - 0x000070) align 8 pad: 0x0000
class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
{ 
public:
	FExpressionInput                                   Coordinates;                                                // 0x0050   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0060   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameter
/// Size: 0x0028 (40 bytes) (0x000070 - 0x000098) align 8 pad: 0x0000
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{ 
public:
	FName                                              ParameterName;                                              // 0x0070   (0x000C)  
	FGuid                                              ExpressionGUID;                                             // 0x007C   (0x0010)  
	FName                                              Group;                                                      // 0x008C   (0x000C)  
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameter2D
/// Size: 0x0000 (0 bytes) (0x000098 - 0x000098) align 8 pad: 0x0000
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionAntialiasedTextureMask
/// Size: 0x0008 (8 bytes) (0x000098 - 0x0000A0) align 8 pad: 0x0000
class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
{ 
public:
	float                                              Threshold;                                                  // 0x0098   (0x0004)  
	TEnumAsByte<ETextureColorChannel>                  Channel;                                                    // 0x009C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x009D   (0x0003)  MISSED
};

/// Class /Script/Engine.MaterialExpressionAppendVector
/// Size: 0x0038 (56 bytes) (0x000048 - 0x000080) align 8 pad: 0x0000
class UMaterialExpressionAppendVector : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   B;                                                          // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0074   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionArccosine
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionArccosine : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionArccosineFast
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionArccosineFast : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionArcsine
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionArcsine : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionArcsineFast
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionArcsineFast : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionArctangent
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionArctangent : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionArctangent2
/// Size: 0x0038 (56 bytes) (0x000048 - 0x000080) align 8 pad: 0x0000
class UMaterialExpressionArctangent2 : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Y;                                                          // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   X;                                                          // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0074   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionArctangent2Fast
/// Size: 0x0038 (56 bytes) (0x000048 - 0x000080) align 8 pad: 0x0000
class UMaterialExpressionArctangent2Fast : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Y;                                                          // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   X;                                                          // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0074   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionArctangentFast
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionArctangentFast : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionAtmosphericFogColor
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
{ 
public:
	FExpressionInput                                   WorldPosition;                                              // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionAtmosphericLightColor
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionAtmosphericLightVector
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionBentNormalCustomOutput
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionBlackBody
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionBlackBody : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Temp;                                                       // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionBlendMaterialAttributes
/// Size: 0x0060 (96 bytes) (0x000048 - 0x0000A8) align 8 pad: 0x0000
class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression
{ 
public:
	FMaterialAttributesInput                           A;                                                          // 0x0048   (0x0014)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x005C   (0x000C)  MISSED
	FMaterialAttributesInput                           B;                                                          // 0x0068   (0x0014)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x007C   (0x000C)  MISSED
	FExpressionInput                                   ALPHA;                                                      // 0x0088   (0x0010)  
	unsigned char                                      UnknownData02_6[0xC];                                       // 0x0098   (0x000C)  MISSED
	TEnumAsByte<EMaterialAttributeBlend>               PixelAttributeBlendType;                                    // 0x00A4   (0x0001)  
	TEnumAsByte<EMaterialAttributeBlend>               VertexAttributeBlendType;                                   // 0x00A5   (0x0001)  
	unsigned char                                      UnknownData03_7[0x2];                                       // 0x00A6   (0x0002)  MISSED
};

/// Class /Script/Engine.MaterialExpressionBreakMaterialAttributes
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
{ 
public:
	FMaterialAttributesInput                           MaterialAttributes;                                         // 0x0048   (0x0014)  
	unsigned char                                      UnknownData00_7[0xC];                                       // 0x005C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionBumpOffset
/// Size: 0x0060 (96 bytes) (0x000048 - 0x0000A8) align 8 pad: 0x0000
class UMaterialExpressionBumpOffset : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Coordinate;                                                 // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   Height;                                                     // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	FExpressionInput                                   HeightRatioInput;                                           // 0x0080   (0x0010)  
	unsigned char                                      UnknownData02_6[0xC];                                       // 0x0090   (0x000C)  MISSED
	float                                              HeightRatio;                                                // 0x009C   (0x0004)  
	float                                              ReferencePlane;                                             // 0x00A0   (0x0004)  
	uint32_t                                           ConstCoordinate;                                            // 0x00A4   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionCameraPositionWS
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionCameraPositionWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionCameraVectorWS
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionCameraVectorWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionCeil
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionCeil : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionParameter
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionParameter : public UMaterialExpression
{ 
public:
	FName                                              ParameterName;                                              // 0x0048   (0x000C)  
	FGuid                                              ExpressionGUID;                                             // 0x0054   (0x0010)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0064   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionVectorParameter
/// Size: 0x0018 (24 bytes) (0x000068 - 0x000080) align 8 pad: 0x0000
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{ 
public:
	FLinearColor                                       DefaultValue;                                               // 0x0068   (0x0010)  
	bool                                               bUseCustomPrimitiveData;                                    // 0x0078   (0x0001)  
	char                                               PrimitiveDataIndex;                                         // 0x0079   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x007A   (0x0006)  MISSED
};

/// Class /Script/Engine.MaterialExpressionChannelMaskParameter
/// Size: 0x0008 (8 bytes) (0x000080 - 0x000088) align 8 pad: 0x0000
class UMaterialExpressionChannelMaskParameter : public UMaterialExpressionVectorParameter
{ 
public:
	TEnumAsByte<EChannelMaskParameterColor>            MaskChannel;                                                // 0x0080   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionClamp
/// Size: 0x0060 (96 bytes) (0x000048 - 0x0000A8) align 8 pad: 0x0000
class UMaterialExpressionClamp : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   Min;                                                        // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	FExpressionInput                                   Max;                                                        // 0x0080   (0x0010)  
	unsigned char                                      UnknownData02_6[0xC];                                       // 0x0090   (0x000C)  MISSED
	TEnumAsByte<EClampMode>                            ClampMode;                                                  // 0x009C   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x009D   (0x0003)  MISSED
	float                                              MinDefault;                                                 // 0x00A0   (0x0004)  
	float                                              MaxDefault;                                                 // 0x00A4   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionClearCoatNormalCustomOutput
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionCloudSampleAttribute
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionCloudSampleAttribute : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionCollectionParameter
/// Size: 0x0028 (40 bytes) (0x000048 - 0x000070) align 8 pad: 0x0000
class UMaterialExpressionCollectionParameter : public UMaterialExpression
{ 
public:
	class UMaterialParameterCollection*                Collection;                                                 // 0x0048   (0x0008)  
	FName                                              ParameterName;                                              // 0x0050   (0x000C)  
	FGuid                                              ParameterId;                                                // 0x005C   (0x0010)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x006C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionComment
/// Size: 0x0030 (48 bytes) (0x000048 - 0x000078) align 8 pad: 0x0000
class UMaterialExpressionComment : public UMaterialExpression
{ 
public:
	int32_t                                            SizeX;                                                      // 0x0048   (0x0004)  
	int32_t                                            SizeY;                                                      // 0x004C   (0x0004)  
	FString                                            Text;                                                       // 0x0050   (0x0010)  
	FLinearColor                                       CommentColor;                                               // 0x0060   (0x0010)  
	int32_t                                            FontSize;                                                   // 0x0070   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0074   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionComponentMask
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionComponentMask : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	bool                                               R : 1;                                                      // 0x0064:0 (0x0001)  
	bool                                               G : 1;                                                      // 0x0064:1 (0x0001)  
	bool                                               B : 1;                                                      // 0x0064:2 (0x0001)  
	bool                                               A : 1;                                                      // 0x0064:3 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0065   (0x0003)  MISSED
};

/// Class /Script/Engine.MaterialExpressionConstant
/// Size: 0x0008 (8 bytes) (0x000048 - 0x000050) align 8 pad: 0x0000
class UMaterialExpressionConstant : public UMaterialExpression
{ 
public:
	float                                              R;                                                          // 0x0048   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionConstant2Vector
/// Size: 0x0008 (8 bytes) (0x000048 - 0x000050) align 8 pad: 0x0000
class UMaterialExpressionConstant2Vector : public UMaterialExpression
{ 
public:
	float                                              R;                                                          // 0x0048   (0x0004)  
	float                                              G;                                                          // 0x004C   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionConstant3Vector
/// Size: 0x0010 (16 bytes) (0x000048 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionConstant3Vector : public UMaterialExpression
{ 
public:
	FLinearColor                                       Constant;                                                   // 0x0048   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionConstant4Vector
/// Size: 0x0010 (16 bytes) (0x000048 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionConstant4Vector : public UMaterialExpression
{ 
public:
	FLinearColor                                       Constant;                                                   // 0x0048   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionConstantBiasScale
/// Size: 0x0028 (40 bytes) (0x000048 - 0x000070) align 8 pad: 0x0000
class UMaterialExpressionConstantBiasScale : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	float                                              Bias;                                                       // 0x0064   (0x0004)  
	float                                              Scale;                                                      // 0x0068   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x006C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionCosine
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionCosine : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	float                                              Period;                                                     // 0x0064   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionCrossProduct
/// Size: 0x0038 (56 bytes) (0x000048 - 0x000080) align 8 pad: 0x0000
class UMaterialExpressionCrossProduct : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   B;                                                          // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0074   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionScalarParameter
/// Size: 0x0008 (8 bytes) (0x000068 - 0x000070) align 8 pad: 0x0000
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{ 
public:
	float                                              DefaultValue;                                               // 0x0068   (0x0004)  
	bool                                               bUseCustomPrimitiveData;                                    // 0x006C   (0x0001)  
	char                                               PrimitiveDataIndex;                                         // 0x006D   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x006E   (0x0002)  MISSED
};

/// Class /Script/Engine.MaterialExpressionCurveAtlasRowParameter
/// Size: 0x0030 (48 bytes) (0x000070 - 0x0000A0) align 8 pad: 0x0000
class UMaterialExpressionCurveAtlasRowParameter : public UMaterialExpressionScalarParameter
{ 
public:
	class UCurveLinearColor*                           Curve;                                                      // 0x0070   (0x0008)  
	class UCurveLinearColorAtlas*                      Atlas;                                                      // 0x0078   (0x0008)  
	FExpressionInput                                   InputTime;                                                  // 0x0080   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0090   (0x0010)  MISSED
};

/// Struct /Script/Engine.CustomInput
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 4 pad: 0x0000
struct FCustomInput
{ 
	FName                                              InputName;                                                  // 0x0000   (0x000C)  
	FExpressionInput                                   Input;                                                      // 0x000C   (0x0010)  
	unsigned char                                      UnknownData00_7[0xC];                                       // 0x001C   (0x000C)  MISSED
};

/// Struct /Script/Engine.CustomOutput
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FCustomOutput
{ 
	FName                                              OutputName;                                                 // 0x0000   (0x000C)  
	TEnumAsByte<ECustomMaterialOutputType>             OutputType;                                                 // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Struct /Script/Engine.CustomDefine
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FCustomDefine
{ 
	FString                                            DefineName;                                                 // 0x0000   (0x0010)  
	FString                                            DefineValue;                                                // 0x0010   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionCustom
/// Size: 0x0068 (104 bytes) (0x000048 - 0x0000B0) align 8 pad: 0x0000
class UMaterialExpressionCustom : public UMaterialExpression
{ 
public:
	FString                                            Code;                                                       // 0x0048   (0x0010)  
	TEnumAsByte<ECustomMaterialOutputType>             OutputType;                                                 // 0x0058   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0059   (0x0007)  MISSED
	FString                                            Description;                                                // 0x0060   (0x0010)  
	TArray<FCustomInput>                               Inputs;                                                     // 0x0070   (0x0010)  
	TArray<FCustomOutput>                              AdditionalOutputs;                                          // 0x0080   (0x0010)  
	TArray<FCustomDefine>                              AdditionalDefines;                                          // 0x0090   (0x0010)  
	TArray<FString>                                    IncludeFilePaths;                                           // 0x00A0   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionDDX
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionDDX : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Value;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDDY
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionDDY : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Value;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDecalDerivative
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionDecalDerivative : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionDecalLifetimeOpacity
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionDecalMipmapLevel
/// Size: 0x0028 (40 bytes) (0x000048 - 0x000070) align 8 pad: 0x0000
class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
{ 
public:
	FExpressionInput                                   TextureSize;                                                // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	float                                              ConstWidth;                                                 // 0x0064   (0x0004)  
	float                                              ConstHeight;                                                // 0x0068   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x006C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDeltaTime
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionDeltaTime : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionDepthFade
/// Size: 0x0040 (64 bytes) (0x000048 - 0x000088) align 8 pad: 0x0000
class UMaterialExpressionDepthFade : public UMaterialExpression
{ 
public:
	FExpressionInput                                   InOpacity;                                                  // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   FadeDistance;                                               // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	float                                              OpacityDefault;                                             // 0x0080   (0x0004)  
	float                                              FadeDistanceDefault;                                        // 0x0084   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionDepthOfFieldFunction
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
{ 
public:
	TEnumAsByte<EDepthOfFieldFunctionValue>            FunctionValue;                                              // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	FExpressionInput                                   Depth;                                                      // 0x004C   (0x0010)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x005C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDeriveNormalZ
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
{ 
public:
	FExpressionInput                                   InXY;                                                       // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDesaturation
/// Size: 0x0048 (72 bytes) (0x000048 - 0x000090) align 8 pad: 0x0000
class UMaterialExpressionDesaturation : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   Fraction;                                                   // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	FLinearColor                                       LuminanceFactors;                                           // 0x0080   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionDistance
/// Size: 0x0038 (56 bytes) (0x000048 - 0x000080) align 8 pad: 0x0000
class UMaterialExpressionDistance : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   B;                                                          // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0074   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDistanceCullFade
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionDistanceCullFade : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionDistanceFieldGradient
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Position;                                                   // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDistanceToNearestSurface
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Position;                                                   // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDivide
/// Size: 0x0040 (64 bytes) (0x000048 - 0x000088) align 8 pad: 0x0000
class UMaterialExpressionDivide : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   B;                                                          // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	float                                              ConstA;                                                     // 0x0080   (0x0004)  
	float                                              ConstB;                                                     // 0x0084   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionDotProduct
/// Size: 0x0038 (56 bytes) (0x000048 - 0x000080) align 8 pad: 0x0000
class UMaterialExpressionDotProduct : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   B;                                                          // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0074   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDynamicParameter
/// Size: 0x0028 (40 bytes) (0x000048 - 0x000070) align 8 pad: 0x0000
class UMaterialExpressionDynamicParameter : public UMaterialExpression
{ 
public:
	TArray<FString>                                    ParamNames;                                                 // 0x0048   (0x0010)  
	FLinearColor                                       DefaultValue;                                               // 0x0058   (0x0010)  
	uint32_t                                           ParameterIndex;                                             // 0x0068   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x006C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDynamicSwitchParameter
/// Size: 0x0000 (0 bytes) (0x000070 - 0x000070) align 8 pad: 0x0000
class UMaterialExpressionDynamicSwitchParameter : public UMaterialExpressionScalarParameter
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionEyeAdaptation
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionEyeAdaptation : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionFeatureLevelSwitch
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Default;                                                    // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionFetchDepth
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionFetchDepth : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionFloor
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionFloor : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionFmod
/// Size: 0x0038 (56 bytes) (0x000048 - 0x000080) align 8 pad: 0x0000
class UMaterialExpressionFmod : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   B;                                                          // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0074   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionFontSample
/// Size: 0x0010 (16 bytes) (0x000048 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionFontSample : public UMaterialExpression
{ 
public:
	class UFont*                                       Font;                                                       // 0x0048   (0x0008)  
	int32_t                                            FontTexturePage;                                            // 0x0050   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionFontSampleParameter
/// Size: 0x0028 (40 bytes) (0x000058 - 0x000080) align 8 pad: 0x0000
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
{ 
public:
	FName                                              ParameterName;                                              // 0x0058   (0x000C)  
	FGuid                                              ExpressionGUID;                                             // 0x0064   (0x0010)  
	FName                                              Group;                                                      // 0x0074   (0x000C)  
};

/// Class /Script/Engine.MaterialExpressionFrac
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionFrac : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionFresnel
/// Size: 0x0060 (96 bytes) (0x000048 - 0x0000A8) align 8 pad: 0x0000
class UMaterialExpressionFresnel : public UMaterialExpression
{ 
public:
	FExpressionInput                                   ExponentIn;                                                 // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	float                                              Exponent;                                                   // 0x0064   (0x0004)  
	FExpressionInput                                   BaseReflectFractionIn;                                      // 0x0068   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0078   (0x000C)  MISSED
	float                                              BaseReflectFraction;                                        // 0x0084   (0x0004)  
	FExpressionInput                                   Normal;                                                     // 0x0088   (0x0010)  
	unsigned char                                      UnknownData02_7[0x10];                                      // 0x0098   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionFunctionInput
/// Size: 0x0098 (152 bytes) (0x000048 - 0x0000E0) align 16 pad: 0x0000
class UMaterialExpressionFunctionInput : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Preview;                                                    // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FName                                              InputName;                                                  // 0x0064   (0x000C)  
	FString                                            Description;                                                // 0x0070   (0x0010)  
	FGuid                                              ID;                                                         // 0x0080   (0x0010)  
	TEnumAsByte<EFunctionInputType>                    InputType;                                                  // 0x0090   (0x0001)  
	unsigned char                                      UnknownData01_6[0xF];                                       // 0x0091   (0x000F)  MISSED
	FVector4                                           PreviewValue;                                               // 0x00A0   (0x0010)  
	bool                                               bUsePreviewValueAsDefault : 1;                              // 0x00B0:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x00B1   (0x0003)  MISSED
	int32_t                                            SortPriority;                                               // 0x00B4   (0x0004)  
	bool                                               bCompilingFunctionPreview : 1;                              // 0x00B8:0 (0x0001)  
	unsigned char                                      UnknownData03_7[0x27];                                      // 0x00B9   (0x0027)  MISSED
};

/// Class /Script/Engine.MaterialExpressionFunctionOutput
/// Size: 0x0058 (88 bytes) (0x000048 - 0x0000A0) align 8 pad: 0x0000
class UMaterialExpressionFunctionOutput : public UMaterialExpression
{ 
public:
	FName                                              OutputName;                                                 // 0x0048   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0054   (0x0004)  MISSED
	FString                                            Description;                                                // 0x0058   (0x0010)  
	int32_t                                            SortPriority;                                               // 0x0068   (0x0004)  
	FExpressionInput                                   A;                                                          // 0x006C   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x007C   (0x000C)  MISSED
	bool                                               bLastPreviewed : 1;                                         // 0x0088:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0089   (0x0003)  MISSED
	FGuid                                              ID;                                                         // 0x008C   (0x0010)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x009C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionGetMaterialAttributes
/// Size: 0x0030 (48 bytes) (0x000048 - 0x000078) align 8 pad: 0x0000
class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression
{ 
public:
	FMaterialAttributesInput                           MaterialAttributes;                                         // 0x0048   (0x0014)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x005C   (0x000C)  MISSED
	TArray<FGuid>                                      AttributeGetTypes;                                          // 0x0068   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionGIReplace
/// Size: 0x0058 (88 bytes) (0x000048 - 0x0000A0) align 8 pad: 0x0000
class UMaterialExpressionGIReplace : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Default;                                                    // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   StaticIndirect;                                             // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	FExpressionInput                                   DynamicIndirect;                                            // 0x0080   (0x0010)  
	unsigned char                                      UnknownData02_7[0x10];                                      // 0x0090   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionHairAttributes
/// Size: 0x0008 (8 bytes) (0x000048 - 0x000050) align 8 pad: 0x0000
class UMaterialExpressionHairAttributes : public UMaterialExpression
{ 
public:
	bool                                               bUseTangentSpace : 1;                                       // 0x0048:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0049   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionHairColor
/// Size: 0x0058 (88 bytes) (0x000048 - 0x0000A0) align 8 pad: 0x0000
class UMaterialExpressionHairColor : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Melanin;                                                    // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   Redness;                                                    // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	FExpressionInput                                   DyeColor;                                                   // 0x0080   (0x0010)  
	unsigned char                                      UnknownData02_7[0x10];                                      // 0x0090   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionIf
/// Size: 0x0098 (152 bytes) (0x000048 - 0x0000E0) align 8 pad: 0x0000
class UMaterialExpressionIf : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   B;                                                          // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	FExpressionInput                                   AGreaterThanB;                                              // 0x0080   (0x0010)  
	unsigned char                                      UnknownData02_6[0xC];                                       // 0x0090   (0x000C)  MISSED
	FExpressionInput                                   AEqualsB;                                                   // 0x009C   (0x0010)  
	unsigned char                                      UnknownData03_6[0xC];                                       // 0x00AC   (0x000C)  MISSED
	FExpressionInput                                   ALessThanB;                                                 // 0x00B8   (0x0010)  
	unsigned char                                      UnknownData04_6[0xC];                                       // 0x00C8   (0x000C)  MISSED
	float                                              EqualsThreshold;                                            // 0x00D4   (0x0004)  
	float                                              ConstB;                                                     // 0x00D8   (0x0004)  
	float                                              ConstAEqualsB;                                              // 0x00DC   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionImposterBakeAlphaOutput
/// Size: 0x0038 (56 bytes) (0x000048 - 0x000080) align 8 pad: 0x0000
class UMaterialExpressionImposterBakeAlphaOutput : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   BakeDiffuse;                                                // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   BakeAlpha;                                                  // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0074   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionInverseLinearInterpolate
/// Size: 0x0068 (104 bytes) (0x000048 - 0x0000B0) align 8 pad: 0x0000
class UMaterialExpressionInverseLinearInterpolate : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   B;                                                          // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	FExpressionInput                                   Value;                                                      // 0x0080   (0x0010)  
	unsigned char                                      UnknownData02_6[0xC];                                       // 0x0090   (0x000C)  MISSED
	float                                              ConstA;                                                     // 0x009C   (0x0004)  
	float                                              ConstB;                                                     // 0x00A0   (0x0004)  
	float                                              ConstValue;                                                 // 0x00A4   (0x0004)  
	bool                                               bClampResult;                                               // 0x00A8   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x00A9   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionKuroGlobalColor
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionKuroGlobalColor : public UMaterialExpression
{ 
public:
	FExpressionInput                                   WorldPosition;                                              // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionKuroGlobalHeight
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionKuroGlobalHeight : public UMaterialExpression
{ 
public:
	FExpressionInput                                   InputPosition;                                              // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	TEnumAsByte<EMaterialKuroGlobalHeightSampleSpace>  SampleSpace;                                                // 0x0064   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0065   (0x0003)  MISSED
};

/// Class /Script/Engine.MaterialExpressionKuroMainLightColor
/// Size: 0x0008 (8 bytes) (0x000048 - 0x000050) align 8 pad: 0x0000
class UMaterialExpressionKuroMainLightColor : public UMaterialExpression
{ 
public:
	bool                                               bDivPi : 1;                                                 // 0x0048:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0049   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionKuroMainLightDirection
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionKuroMainLightDirection : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionKuroMaterialDynamicReflectionTexture
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionKuroMaterialDynamicReflectionTexture : public UMaterialExpression
{ 
public:
	FExpressionInput                                   UVS;                                                        // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionKuroToonShadingOutput
/// Size: 0x00C8 (200 bytes) (0x000048 - 0x000110) align 8 pad: 0x0000
class UMaterialExpressionKuroToonShadingOutput : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   ToonShadowColor;                                            // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   ToonShadowBlendFactor;                                      // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	FExpressionInput                                   ToonSkinMask;                                               // 0x0080   (0x0010)  
	unsigned char                                      UnknownData02_6[0xC];                                       // 0x0090   (0x000C)  MISSED
	FExpressionInput                                   ToonRimWidth;                                               // 0x009C   (0x0010)  
	unsigned char                                      UnknownData03_6[0xC];                                       // 0x00AC   (0x000C)  MISSED
	FExpressionInput                                   ToonVariationEnableBattle;                                  // 0x00B8   (0x0010)  
	unsigned char                                      UnknownData04_6[0xC];                                       // 0x00C8   (0x000C)  MISSED
	FExpressionInput                                   ToonVariationEnableBattleMask;                              // 0x00D4   (0x0010)  
	unsigned char                                      UnknownData05_6[0xC];                                       // 0x00E4   (0x000C)  MISSED
	FExpressionInput                                   ToonVariationEnableDither;                                  // 0x00F0   (0x0010)  
	unsigned char                                      UnknownData06_7[0x10];                                      // 0x0100   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionKuroToonLightData
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionKuroToonLightData : public UMaterialExpression
{ 
public:
	FExpressionInput                                   LightIndex;                                                 // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionKuroUIBlurTexture
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionKuroUIBlurTexture : public UMaterialExpression
{ 
public:
	FExpressionInput                                   ScreenUV;                                                   // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionLandscapeCaptureColorRoughness
/// Size: 0x0028 (40 bytes) (0x000048 - 0x000070) align 8 pad: 0x0000
class UMaterialExpressionLandscapeCaptureColorRoughness : public UMaterialExpression
{ 
public:
	TEnumAsByte<EMaterialSceneAttributeInputMode>      InputMode;                                                  // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	FExpressionInput                                   Input;                                                      // 0x004C   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x005C   (0x000C)  MISSED
	FVector2D                                          ConstInput;                                                 // 0x0068   (0x0008)  
};

/// Class /Script/Engine.MaterialExpressionLandscapeCaptureNormalSpecular
/// Size: 0x0028 (40 bytes) (0x000048 - 0x000070) align 8 pad: 0x0000
class UMaterialExpressionLandscapeCaptureNormalSpecular : public UMaterialExpression
{ 
public:
	TEnumAsByte<EMaterialSceneAttributeInputMode>      InputMode;                                                  // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	FExpressionInput                                   Input;                                                      // 0x004C   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x005C   (0x000C)  MISSED
	FVector2D                                          ConstInput;                                                 // 0x0068   (0x0008)  
};

/// Class /Script/Engine.MaterialExpressionLandscapeCaptureDepth
/// Size: 0x0048 (72 bytes) (0x000048 - 0x000090) align 8 pad: 0x0000
class UMaterialExpressionLandscapeCaptureDepth : public UMaterialExpression
{ 
public:
	TEnumAsByte<EMaterialSceneAttributeInputMode>      InputMode;                                                  // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	FExpressionInput                                   Input;                                                      // 0x004C   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x005C   (0x000C)  MISSED
	FExpressionInput                                   DefaultDepth;                                               // 0x0068   (0x0010)  
	unsigned char                                      UnknownData02_6[0xC];                                       // 0x0078   (0x000C)  MISSED
	FVector2D                                          ConstInput;                                                 // 0x0084   (0x0008)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x008C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionLensflareSceneSample
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionLensflareSceneSample : public UMaterialExpression
{ 
public:
	FExpressionInput                                   InputIndex;                                                 // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionLightmapUVs
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionLightmapUVs : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionLightmassReplace
/// Size: 0x0038 (56 bytes) (0x000048 - 0x000080) align 8 pad: 0x0000
class UMaterialExpressionLightmassReplace : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Realtime;                                                   // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   Lightmass;                                                  // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0074   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionLightVector
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionLightVector : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionLinearInterpolate
/// Size: 0x0060 (96 bytes) (0x000048 - 0x0000A8) align 8 pad: 0x0000
class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   B;                                                          // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	FExpressionInput                                   ALPHA;                                                      // 0x0080   (0x0010)  
	unsigned char                                      UnknownData02_6[0xC];                                       // 0x0090   (0x000C)  MISSED
	float                                              ConstA;                                                     // 0x009C   (0x0004)  
	float                                              ConstB;                                                     // 0x00A0   (0x0004)  
	float                                              ConstAlpha;                                                 // 0x00A4   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionLogarithm10
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionLogarithm10 : public UMaterialExpression
{ 
public:
	FExpressionInput                                   X;                                                          // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionLogarithm2
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionLogarithm2 : public UMaterialExpression
{ 
public:
	FExpressionInput                                   X;                                                          // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionMakeMaterialAttributes
/// Size: 0x0330 (816 bytes) (0x000048 - 0x000378) align 8 pad: 0x0000
class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
{ 
public:
	FExpressionInput                                   BaseColor;                                                  // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   Metallic;                                                   // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	FExpressionInput                                   Specular;                                                   // 0x0080   (0x0010)  
	unsigned char                                      UnknownData02_6[0xC];                                       // 0x0090   (0x000C)  MISSED
	FExpressionInput                                   Roughness;                                                  // 0x009C   (0x0010)  
	unsigned char                                      UnknownData03_6[0xC];                                       // 0x00AC   (0x000C)  MISSED
	FExpressionInput                                   Anisotropy;                                                 // 0x00B8   (0x0010)  
	unsigned char                                      UnknownData04_6[0xC];                                       // 0x00C8   (0x000C)  MISSED
	FExpressionInput                                   EmissiveColor;                                              // 0x00D4   (0x0010)  
	unsigned char                                      UnknownData05_6[0xC];                                       // 0x00E4   (0x000C)  MISSED
	FExpressionInput                                   Opacity;                                                    // 0x00F0   (0x0010)  
	unsigned char                                      UnknownData06_6[0xC];                                       // 0x0100   (0x000C)  MISSED
	FExpressionInput                                   OpacityMask;                                                // 0x010C   (0x0010)  
	unsigned char                                      UnknownData07_6[0xC];                                       // 0x011C   (0x000C)  MISSED
	FExpressionInput                                   Normal;                                                     // 0x0128   (0x0010)  
	unsigned char                                      UnknownData08_6[0xC];                                       // 0x0138   (0x000C)  MISSED
	FExpressionInput                                   Tangent;                                                    // 0x0144   (0x0010)  
	unsigned char                                      UnknownData09_6[0xC];                                       // 0x0154   (0x000C)  MISSED
	FExpressionInput                                   WorldPositionOffset;                                        // 0x0160   (0x0010)  
	unsigned char                                      UnknownData10_6[0xC];                                       // 0x0170   (0x000C)  MISSED
	FExpressionInput                                   WorldDisplacement;                                          // 0x017C   (0x0010)  
	unsigned char                                      UnknownData11_6[0xC];                                       // 0x018C   (0x000C)  MISSED
	FExpressionInput                                   TessellationMultiplier;                                     // 0x0198   (0x0010)  
	unsigned char                                      UnknownData12_6[0xC];                                       // 0x01A8   (0x000C)  MISSED
	FExpressionInput                                   SubsurfaceColor;                                            // 0x01B4   (0x0010)  
	unsigned char                                      UnknownData13_6[0xC];                                       // 0x01C4   (0x000C)  MISSED
	FExpressionInput                                   ClearCoat;                                                  // 0x01D0   (0x0010)  
	unsigned char                                      UnknownData14_6[0xC];                                       // 0x01E0   (0x000C)  MISSED
	FExpressionInput                                   ClearCoatRoughness;                                         // 0x01EC   (0x0010)  
	unsigned char                                      UnknownData15_6[0xC];                                       // 0x01FC   (0x000C)  MISSED
	FExpressionInput                                   AmbientOcclusion;                                           // 0x0208   (0x0010)  
	unsigned char                                      UnknownData16_6[0xC];                                       // 0x0218   (0x000C)  MISSED
	FExpressionInput                                   Refraction;                                                 // 0x0224   (0x0010)  
	unsigned char                                      UnknownData17_6[0xC];                                       // 0x0234   (0x000C)  MISSED
	FExpressionInput                                   CustomizedUVs[8];                                           // 0x0240   (0x0080)  
	unsigned char                                      UnknownData18_6[0x60];                                      // 0x02C0   (0x0060)  MISSED
	FExpressionInput                                   PixelDepthOffset;                                           // 0x0320   (0x0010)  
	unsigned char                                      UnknownData19_6[0xC];                                       // 0x0330   (0x000C)  MISSED
	FExpressionInput                                   ShadingModel;                                               // 0x033C   (0x0010)  
	unsigned char                                      UnknownData20_6[0xC];                                       // 0x034C   (0x000C)  MISSED
	FExpressionInput                                   ShadowPixelDepthOffset;                                     // 0x0358   (0x0010)  
	unsigned char                                      UnknownData21_7[0x10];                                      // 0x0368   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionMapARPassthroughCameraUV
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionMapARPassthroughCameraUV : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Coordinates;                                                // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionMaterialAttributeLayers
/// Size: 0x00B8 (184 bytes) (0x000048 - 0x000100) align 8 pad: 0x0000
class UMaterialExpressionMaterialAttributeLayers : public UMaterialExpression
{ 
public:
	FName                                              ParameterName;                                              // 0x0048   (0x000C)  
	FGuid                                              ExpressionGUID;                                             // 0x0054   (0x0010)  
	FMaterialAttributesInput                           Input;                                                      // 0x0064   (0x0014)  
	unsigned char                                      UnknownData00_6[0x10];                                      // 0x0078   (0x0010)  MISSED
	FMaterialLayersFunctions                           DefaultLayers;                                              // 0x0088   (0x0040)  
	TArray<class UMaterialExpressionMaterialFunctionCall*> LayerCallers;                                           // 0x00C8   (0x0010)  
	int32_t                                            NumActiveLayerCallers;                                      // 0x00D8   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00DC   (0x0004)  MISSED
	TArray<class UMaterialExpressionMaterialFunctionCall*> BlendCallers;                                           // 0x00E0   (0x0010)  
	int32_t                                            NumActiveBlendCallers;                                      // 0x00F0   (0x0004)  
	bool                                               bIsLayerGraphBuilt;                                         // 0x00F4   (0x0001)  
	unsigned char                                      UnknownData02_7[0xB];                                       // 0x00F5   (0x000B)  MISSED
};

/// Class /Script/Engine.MaterialExpressionMaterialFunctionCall
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
{ 
public:
	class UMaterialFunctionInterface*                  MaterialFunction;                                           // 0x0048   (0x0008)  
	FMaterialParameterInfo                             FunctionParameterInfo;                                      // 0x0050   (0x0018)  
};

/// Class /Script/Engine.MaterialExpressionMaterialLayerOutput
/// Size: 0x0000 (0 bytes) (0x0000A0 - 0x0000A0) align 8 pad: 0x0000
class UMaterialExpressionMaterialLayerOutput : public UMaterialExpressionFunctionOutput
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionMaterialProxyReplace
/// Size: 0x0038 (56 bytes) (0x000048 - 0x000080) align 8 pad: 0x0000
class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Realtime;                                                   // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   MaterialProxy;                                              // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0074   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionMax
/// Size: 0x0040 (64 bytes) (0x000048 - 0x000088) align 8 pad: 0x0000
class UMaterialExpressionMax : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   B;                                                          // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	float                                              ConstA;                                                     // 0x0080   (0x0004)  
	float                                              ConstB;                                                     // 0x0084   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionMin
/// Size: 0x0040 (64 bytes) (0x000048 - 0x000088) align 8 pad: 0x0000
class UMaterialExpressionMin : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   B;                                                          // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	float                                              ConstA;                                                     // 0x0080   (0x0004)  
	float                                              ConstB;                                                     // 0x0084   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionMultiply
/// Size: 0x0040 (64 bytes) (0x000048 - 0x000088) align 8 pad: 0x0000
class UMaterialExpressionMultiply : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   B;                                                          // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	float                                              ConstA;                                                     // 0x0080   (0x0004)  
	float                                              ConstB;                                                     // 0x0084   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionRerouteBase
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionRerouteBase : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionNamedRerouteBase
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionNamedRerouteBase : public UMaterialExpressionRerouteBase
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionNamedRerouteDeclaration
/// Size: 0x0038 (56 bytes) (0x000048 - 0x000080) align 8 pad: 0x0000
class UMaterialExpressionNamedRerouteDeclaration : public UMaterialExpressionNamedRerouteBase
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FName                                              Name;                                                       // 0x0064   (0x000C)  
	FGuid                                              VariableGuid;                                               // 0x0070   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionNamedRerouteUsage
/// Size: 0x0018 (24 bytes) (0x000048 - 0x000060) align 8 pad: 0x0000
class UMaterialExpressionNamedRerouteUsage : public UMaterialExpressionNamedRerouteBase
{ 
public:
	class UMaterialExpressionNamedRerouteDeclaration*  Declaration;                                                // 0x0048   (0x0008)  
	FGuid                                              DeclarationGuid;                                            // 0x0050   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionNoise
/// Size: 0x0060 (96 bytes) (0x000048 - 0x0000A8) align 8 pad: 0x0000
class UMaterialExpressionNoise : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Position;                                                   // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   FilterWidth;                                                // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	float                                              Scale;                                                      // 0x0080   (0x0004)  
	int32_t                                            Quality;                                                    // 0x0084   (0x0004)  
	TEnumAsByte<ENoiseFunction>                        NoiseFunction;                                              // 0x0088   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0089   (0x0003)  MISSED
	bool                                               bTurbulence : 1;                                            // 0x008C:0 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x008D   (0x0003)  MISSED
	int32_t                                            Levels;                                                     // 0x0090   (0x0004)  
	float                                              OutputMin;                                                  // 0x0094   (0x0004)  
	float                                              OutputMax;                                                  // 0x0098   (0x0004)  
	float                                              LevelScale;                                                 // 0x009C   (0x0004)  
	bool                                               bTiling : 1;                                                // 0x00A0:0 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x00A1   (0x0003)  MISSED
	uint32_t                                           RepeatSize;                                                 // 0x00A4   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionNormalize
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionNormalize : public UMaterialExpression
{ 
public:
	FExpressionInput                                   VectorInput;                                                // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionObjectBounds
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionObjectBounds : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionObjectOrientation
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionObjectOrientation : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionObjectPositionWS
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionObjectPositionWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionObjectRadius
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionObjectRadius : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionOneMinus
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionOneMinus : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionPanner
/// Size: 0x0068 (104 bytes) (0x000048 - 0x0000B0) align 8 pad: 0x0000
class UMaterialExpressionPanner : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Coordinate;                                                 // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   Time;                                                       // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	FExpressionInput                                   Speed;                                                      // 0x0080   (0x0010)  
	unsigned char                                      UnknownData02_6[0xC];                                       // 0x0090   (0x000C)  MISSED
	float                                              SpeedX;                                                     // 0x009C   (0x0004)  
	float                                              SpeedY;                                                     // 0x00A0   (0x0004)  
	uint32_t                                           ConstCoordinate;                                            // 0x00A4   (0x0004)  
	bool                                               bFractionalPart;                                            // 0x00A8   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x00A9   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionParticleColor
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionParticleColor : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleDirection
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionParticleDirection : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleMacroUV
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionParticleMacroUV : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleMotionBlurFade
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticlePositionWS
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionParticlePositionWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleRadius
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionParticleRadius : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleRandom
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionParticleRandom : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleRelativeTime
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleSize
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionParticleSize : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleSpeed
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionParticleSpeed : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleSubUV
/// Size: 0x0008 (8 bytes) (0x000070 - 0x000078) align 8 pad: 0x0000
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
{ 
public:
	bool                                               bBlend : 1;                                                 // 0x0070:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0071   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionParticleSubUVProperties
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionParticleSubUVProperties : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPerInstanceCustomData
/// Size: 0x0028 (40 bytes) (0x000048 - 0x000070) align 8 pad: 0x0000
class UMaterialExpressionPerInstanceCustomData : public UMaterialExpression
{ 
public:
	FExpressionInput                                   DefaultValue;                                               // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	float                                              ConstDefaultValue;                                          // 0x0064   (0x0004)  
	uint32_t                                           DataIndex;                                                  // 0x0068   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x006C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionPerInstanceFadeAmount
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPerInstanceRandom
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPixelDepth
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionPixelDepth : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPixelNormalWS
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionPixelNormalWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPower
/// Size: 0x0040 (64 bytes) (0x000048 - 0x000088) align 8 pad: 0x0000
class UMaterialExpressionPower : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Base;                                                       // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   Exponent;                                                   // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	float                                              ConstExponent;                                              // 0x0080   (0x0004)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x0084   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionPrecomputedAOMask
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPreSkinnedLocalBounds
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionPreSkinnedLocalBounds : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPreSkinnedNormal
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPreSkinnedPosition
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPreviousFrameSwitch
/// Size: 0x0038 (56 bytes) (0x000048 - 0x000080) align 8 pad: 0x0000
class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   CurrentFrame;                                               // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   PreviousFrame;                                              // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0074   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionQualitySwitch
/// Size: 0x00A0 (160 bytes) (0x000048 - 0x0000E8) align 8 pad: 0x0000
class UMaterialExpressionQualitySwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Default;                                                    // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   Inputs[4];                                                  // 0x0064   (0x0040)  
	unsigned char                                      UnknownData01_6[0x34];                                      // 0x00A4   (0x0034)  MISSED
	SDK_UNDEFINED(16,173) /* TArray<TEnumAsByte<ERHIFeatureLevelStrip>> */ __um(StripFeatureLevels);               // 0x00D8   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionRayTracingQualitySwitch
/// Size: 0x0038 (56 bytes) (0x000048 - 0x000080) align 8 pad: 0x0000
class UMaterialExpressionRayTracingQualitySwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Normal;                                                     // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   RayTraced;                                                  // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0074   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionReflecionColor
/// Size: 0x0040 (64 bytes) (0x000048 - 0x000088) align 8 pad: 0x0000
class UMaterialExpressionReflecionColor : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   OffsetFraction;                                             // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	FVector2D                                          ConstInput;                                                 // 0x0080   (0x0008)  
};

/// Class /Script/Engine.MaterialExpressionReflectionCapturePassSwitch
/// Size: 0x0038 (56 bytes) (0x000048 - 0x000080) align 8 pad: 0x0000
class UMaterialExpressionReflectionCapturePassSwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Default;                                                    // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   Reflection;                                                 // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0074   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionReflectionVectorWS
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
{ 
public:
	FExpressionInput                                   CustomWorldNormal;                                          // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	bool                                               bNormalizeCustomWorldNormal : 1;                            // 0x0064:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0065   (0x0003)  MISSED
};

/// Class /Script/Engine.MaterialExpressionReroute
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionReroute : public UMaterialExpressionRerouteBase
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionRotateAboutAxis
/// Size: 0x0078 (120 bytes) (0x000048 - 0x0000C0) align 8 pad: 0x0000
class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
{ 
public:
	FExpressionInput                                   NormalizedRotationAxis;                                     // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   RotationAngle;                                              // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	FExpressionInput                                   PivotPoint;                                                 // 0x0080   (0x0010)  
	unsigned char                                      UnknownData02_6[0xC];                                       // 0x0090   (0x000C)  MISSED
	FExpressionInput                                   Position;                                                   // 0x009C   (0x0010)  
	unsigned char                                      UnknownData03_6[0xC];                                       // 0x00AC   (0x000C)  MISSED
	float                                              Period;                                                     // 0x00B8   (0x0004)  
	unsigned char                                      UnknownData04_7[0x4];                                       // 0x00BC   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionRotator
/// Size: 0x0048 (72 bytes) (0x000048 - 0x000090) align 8 pad: 0x0000
class UMaterialExpressionRotator : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Coordinate;                                                 // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   Time;                                                       // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	float                                              CenterX;                                                    // 0x0080   (0x0004)  
	float                                              CenterY;                                                    // 0x0084   (0x0004)  
	float                                              Speed;                                                      // 0x0088   (0x0004)  
	uint32_t                                           ConstCoordinate;                                            // 0x008C   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionRound
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionRound : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionRuntimeVirtualTextureOutput
/// Size: 0x00C8 (200 bytes) (0x000048 - 0x000110) align 8 pad: 0x0000
class UMaterialExpressionRuntimeVirtualTextureOutput : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   BaseColor;                                                  // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   Specular;                                                   // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	FExpressionInput                                   Roughness;                                                  // 0x0080   (0x0010)  
	unsigned char                                      UnknownData02_6[0xC];                                       // 0x0090   (0x000C)  MISSED
	FExpressionInput                                   Normal;                                                     // 0x009C   (0x0010)  
	unsigned char                                      UnknownData03_6[0xC];                                       // 0x00AC   (0x000C)  MISSED
	FExpressionInput                                   WorldHeight;                                                // 0x00B8   (0x0010)  
	unsigned char                                      UnknownData04_6[0xC];                                       // 0x00C8   (0x000C)  MISSED
	FExpressionInput                                   Opacity;                                                    // 0x00D4   (0x0010)  
	unsigned char                                      UnknownData05_6[0xC];                                       // 0x00E4   (0x000C)  MISSED
	FExpressionInput                                   Mask;                                                       // 0x00F0   (0x0010)  
	unsigned char                                      UnknownData06_7[0x10];                                      // 0x0100   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionRuntimeVirtualTextureReplace
/// Size: 0x0038 (56 bytes) (0x000048 - 0x000080) align 8 pad: 0x0000
class UMaterialExpressionRuntimeVirtualTextureReplace : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Default;                                                    // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   VirtualTextureOutput;                                       // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0074   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionRuntimeVirtualTextureSample
/// Size: 0x0068 (104 bytes) (0x000048 - 0x0000B0) align 8 pad: 0x0000
class UMaterialExpressionRuntimeVirtualTextureSample : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Coordinates;                                                // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   WorldPosition;                                              // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	FExpressionInput                                   MipValue;                                                   // 0x0080   (0x0010)  
	unsigned char                                      UnknownData02_6[0x10];                                      // 0x0090   (0x0010)  MISSED
	class URuntimeVirtualTexture*                      VirtualTexture;                                             // 0x00A0   (0x0008)  
	ERuntimeVirtualTextureMaterialType                 MaterialType;                                               // 0x00A8   (0x0001)  
	bool                                               bSinglePhysicalSpace;                                       // 0x00A9   (0x0001)  
	bool                                               bAdaptive;                                                  // 0x00AA   (0x0001)  
	TEnumAsByte<ERuntimeVirtualTextureMipValueMode>    MipValueMode;                                               // 0x00AB   (0x0001)  
	TEnumAsByte<ERuntimeVirtualTextureTextureAddressMode> TextureAddressMode;                                      // 0x00AC   (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x00AD   (0x0003)  MISSED
};

/// Class /Script/Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter
/// Size: 0x0028 (40 bytes) (0x0000B0 - 0x0000D8) align 8 pad: 0x0000
class UMaterialExpressionRuntimeVirtualTextureSampleParameter : public UMaterialExpressionRuntimeVirtualTextureSample
{ 
public:
	FName                                              ParameterName;                                              // 0x00B0   (0x000C)  
	FGuid                                              ExpressionGUID;                                             // 0x00BC   (0x0010)  
	FName                                              Group;                                                      // 0x00CC   (0x000C)  
};

/// Class /Script/Engine.MaterialExpressionSaturate
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionSaturate : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSceneColor
/// Size: 0x0048 (72 bytes) (0x000048 - 0x000090) align 8 pad: 0x0000
class UMaterialExpressionSceneColor : public UMaterialExpression
{ 
public:
	TEnumAsByte<EMaterialSceneAttributeInputMode>      InputMode;                                                  // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	FExpressionInput                                   Input;                                                      // 0x004C   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x005C   (0x000C)  MISSED
	FExpressionInput                                   OffsetFraction;                                             // 0x0068   (0x0010)  
	unsigned char                                      UnknownData02_6[0xC];                                       // 0x0078   (0x000C)  MISSED
	FVector2D                                          ConstInput;                                                 // 0x0084   (0x0008)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x008C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSceneColorWithoutWater
/// Size: 0x0028 (40 bytes) (0x000048 - 0x000070) align 8 pad: 0x0000
class UMaterialExpressionSceneColorWithoutWater : public UMaterialExpression
{ 
public:
	TEnumAsByte<EMaterialSceneAttributeInputMode>      InputMode;                                                  // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	FExpressionInput                                   Input;                                                      // 0x004C   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x005C   (0x000C)  MISSED
	FVector2D                                          ConstInput;                                                 // 0x0068   (0x0008)  
};

/// Class /Script/Engine.MaterialExpressionSceneDepth
/// Size: 0x0048 (72 bytes) (0x000048 - 0x000090) align 8 pad: 0x0000
class UMaterialExpressionSceneDepth : public UMaterialExpression
{ 
public:
	TEnumAsByte<EMaterialSceneAttributeInputMode>      InputMode;                                                  // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	FExpressionInput                                   Input;                                                      // 0x004C   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x005C   (0x000C)  MISSED
	FExpressionInput                                   Coordinates;                                                // 0x0068   (0x0010)  
	unsigned char                                      UnknownData02_6[0xC];                                       // 0x0078   (0x000C)  MISSED
	FVector2D                                          ConstInput;                                                 // 0x0084   (0x0008)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x008C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSceneDepthWithoutWater
/// Size: 0x0030 (48 bytes) (0x000048 - 0x000078) align 8 pad: 0x0000
class UMaterialExpressionSceneDepthWithoutWater : public UMaterialExpression
{ 
public:
	TEnumAsByte<EMaterialSceneAttributeInputMode>      InputMode;                                                  // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	FExpressionInput                                   Input;                                                      // 0x004C   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x005C   (0x000C)  MISSED
	FVector2D                                          ConstInput;                                                 // 0x0068   (0x0008)  
	float                                              FallbackDepth;                                              // 0x0070   (0x0004)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x0074   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSceneTexelSize
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionSceneTexelSize : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionSceneTexture
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionSceneTexture : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Coordinates;                                                // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	TEnumAsByte<ESceneTextureId>                       SceneTextureId;                                             // 0x0064   (0x0001)  
	bool                                               bFiltered;                                                  // 0x0065   (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x0066   (0x0002)  MISSED
};

/// Class /Script/Engine.MaterialExpressionScreenPosition
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionScreenPosition : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionForceFullPrecision
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionForceFullPrecision : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionNoForceFullPrecision
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionNoForceFullPrecision : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSetMaterialAttributes
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression
{ 
public:
	TArray<FExpressionInput>                           Inputs;                                                     // 0x0048   (0x0010)  
	TArray<FGuid>                                      AttributeSetTypes;                                          // 0x0058   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionShaderStageSwitch
/// Size: 0x0038 (56 bytes) (0x000048 - 0x000080) align 8 pad: 0x0000
class UMaterialExpressionShaderStageSwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   PixelShader;                                                // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   VertexShader;                                               // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0074   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionShadingModel
/// Size: 0x0008 (8 bytes) (0x000048 - 0x000050) align 8 pad: 0x0000
class UMaterialExpressionShadingModel : public UMaterialExpression
{ 
public:
	TEnumAsByte<EMaterialShadingModel>                 ShadingModel;                                               // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0049   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionShadingPathSwitch
/// Size: 0x0070 (112 bytes) (0x000048 - 0x0000B8) align 8 pad: 0x0000
class UMaterialExpressionShadingPathSwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Default;                                                    // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   Inputs[3];                                                  // 0x0064   (0x0030)  
	unsigned char                                      UnknownData01_7[0x24];                                      // 0x0094   (0x0024)  MISSED
};

/// Class /Script/Engine.MaterialExpressionShadowReplace
/// Size: 0x0038 (56 bytes) (0x000048 - 0x000080) align 8 pad: 0x0000
class UMaterialExpressionShadowReplace : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Default;                                                    // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   Shadow;                                                     // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0074   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSign
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionSign : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSine
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionSine : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	float                                              Period;                                                     // 0x0064   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionSingleLayerWaterMaterialOutput
/// Size: 0x0118 (280 bytes) (0x000048 - 0x000160) align 8 pad: 0x0000
class UMaterialExpressionSingleLayerWaterMaterialOutput : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   ScatteringCoefficients;                                     // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   AbsorptionCoefficients;                                     // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	FExpressionInput                                   PhaseG;                                                     // 0x0080   (0x0010)  
	unsigned char                                      UnknownData02_6[0xC];                                       // 0x0090   (0x000C)  MISSED
	FExpressionInput                                   ColorScaleBehindWater;                                      // 0x009C   (0x0010)  
	unsigned char                                      UnknownData03_6[0xC];                                       // 0x00AC   (0x000C)  MISSED
	FExpressionInput                                   WaterColorTint;                                             // 0x00B8   (0x0010)  
	unsigned char                                      UnknownData04_6[0xC];                                       // 0x00C8   (0x000C)  MISSED
	FExpressionInput                                   SpecularLighting;                                           // 0x00D4   (0x0010)  
	unsigned char                                      UnknownData05_6[0xC];                                       // 0x00E4   (0x000C)  MISSED
	FExpressionInput                                   OverlayCoverage;                                            // 0x00F0   (0x0010)  
	unsigned char                                      UnknownData06_6[0xC];                                       // 0x0100   (0x000C)  MISSED
	FExpressionInput                                   CustomIBLColor;                                             // 0x010C   (0x0010)  
	unsigned char                                      UnknownData07_6[0xC];                                       // 0x011C   (0x000C)  MISSED
	FExpressionInput                                   OverlayDirectLighting;                                      // 0x0128   (0x0010)  
	unsigned char                                      UnknownData08_6[0xC];                                       // 0x0138   (0x000C)  MISSED
	FExpressionInput                                   OverlayIndirectLighting;                                    // 0x0144   (0x0010)  
	unsigned char                                      UnknownData09_7[0xC];                                       // 0x0154   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSkinningVertexOffsets
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionSkinningVertexOffsets : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereLightDirection
/// Size: 0x0008 (8 bytes) (0x000048 - 0x000050) align 8 pad: 0x0000
class UMaterialExpressionSkyAtmosphereLightDirection : public UMaterialExpression
{ 
public:
	int32_t                                            LightIndex;                                                 // 0x0048   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereLightIlluminance
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionSkyAtmosphereLightIlluminance : public UMaterialExpression
{ 
public:
	int32_t                                            LightIndex;                                                 // 0x0048   (0x0004)  
	FExpressionInput                                   WorldPosition;                                              // 0x004C   (0x0010)  
	unsigned char                                      UnknownData00_7[0xC];                                       // 0x005C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance
/// Size: 0x0008 (8 bytes) (0x000048 - 0x000050) align 8 pad: 0x0000
class UMaterialExpressionSkyAtmosphereLightDiskLuminance : public UMaterialExpression
{ 
public:
	int32_t                                            LightIndex;                                                 // 0x0048   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereAerialPerspective
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionSkyAtmosphereAerialPerspective : public UMaterialExpression
{ 
public:
	FExpressionInput                                   WorldPosition;                                              // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereViewLuminance
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionSkyAtmosphereViewLuminance : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionSmoothStep
/// Size: 0x0060 (96 bytes) (0x000048 - 0x0000A8) align 8 pad: 0x0000
class UMaterialExpressionSmoothStep : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Min;                                                        // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   Max;                                                        // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	FExpressionInput                                   Value;                                                      // 0x0080   (0x0010)  
	unsigned char                                      UnknownData02_6[0xC];                                       // 0x0090   (0x000C)  MISSED
	float                                              ConstMin;                                                   // 0x009C   (0x0004)  
	float                                              ConstMax;                                                   // 0x00A0   (0x0004)  
	float                                              ConstValue;                                                 // 0x00A4   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionSobol
/// Size: 0x0060 (96 bytes) (0x000048 - 0x0000A8) align 8 pad: 0x0000
class UMaterialExpressionSobol : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Cell;                                                       // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   Index;                                                      // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	FExpressionInput                                   Seed;                                                       // 0x0080   (0x0010)  
	unsigned char                                      UnknownData02_6[0xC];                                       // 0x0090   (0x000C)  MISSED
	uint32_t                                           ConstIndex;                                                 // 0x009C   (0x0004)  
	FVector2D                                          ConstSeed;                                                  // 0x00A0   (0x0008)  
};

/// Class /Script/Engine.MaterialExpressionSpeedTree
/// Size: 0x0080 (128 bytes) (0x000048 - 0x0000C8) align 8 pad: 0x0000
class UMaterialExpressionSpeedTree : public UMaterialExpression
{ 
public:
	FExpressionInput                                   GeometryInput;                                              // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   WindInput;                                                  // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	FExpressionInput                                   LODInput;                                                   // 0x0080   (0x0010)  
	unsigned char                                      UnknownData02_6[0xC];                                       // 0x0090   (0x000C)  MISSED
	FExpressionInput                                   ExtraBendWS;                                                // 0x009C   (0x0010)  
	unsigned char                                      UnknownData03_6[0xC];                                       // 0x00AC   (0x000C)  MISSED
	TEnumAsByte<ESpeedTreeGeometryType>                GeometryType;                                               // 0x00B8   (0x0001)  
	TEnumAsByte<ESpeedTreeWindType>                    WindType;                                                   // 0x00B9   (0x0001)  
	TEnumAsByte<ESpeedTreeLODType>                     LODType;                                                    // 0x00BA   (0x0001)  
	unsigned char                                      UnknownData04_6[0x1];                                       // 0x00BB   (0x0001)  MISSED
	float                                              BillboardThreshold;                                         // 0x00BC   (0x0004)  
	bool                                               bAccurateWindVelocities;                                    // 0x00C0   (0x0001)  
	unsigned char                                      UnknownData05_7[0x7];                                       // 0x00C1   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSphereMask
/// Size: 0x0078 (120 bytes) (0x000048 - 0x0000C0) align 8 pad: 0x0000
class UMaterialExpressionSphereMask : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   B;                                                          // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	FExpressionInput                                   Radius;                                                     // 0x0080   (0x0010)  
	unsigned char                                      UnknownData02_6[0xC];                                       // 0x0090   (0x000C)  MISSED
	FExpressionInput                                   Hardness;                                                   // 0x009C   (0x0010)  
	unsigned char                                      UnknownData03_6[0xC];                                       // 0x00AC   (0x000C)  MISSED
	float                                              AttenuationRadius;                                          // 0x00B8   (0x0004)  
	float                                              HardnessPercent;                                            // 0x00BC   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionSphericalParticleOpacity
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Density;                                                    // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	float                                              ConstantDensity;                                            // 0x0064   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionSquareRoot
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionSquareRoot : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionStaticBool
/// Size: 0x0008 (8 bytes) (0x000048 - 0x000050) align 8 pad: 0x0000
class UMaterialExpressionStaticBool : public UMaterialExpression
{ 
public:
	bool                                               Value : 1;                                                  // 0x0048:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0049   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionStaticBoolParameter
/// Size: 0x0018 (24 bytes) (0x000068 - 0x000080) align 8 pad: 0x0000
class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
{ 
public:
	bool                                               DefaultValue : 1;                                           // 0x0068:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0069   (0x0007)  MISSED
	SDK_UNDEFINED(16,174) /* TArray<TEnumAsByte<ERHIFeatureLevelStrip>> */ __um(StripFeatureLevels);               // 0x0070   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionStaticComponentMaskParameter
/// Size: 0x0008 (8 bytes) (0x000068 - 0x000070) align 8 pad: 0x0000
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
{ 
public:
	bool                                               DefaultR : 1;                                               // 0x0068:0 (0x0001)  
	bool                                               DefaultG : 1;                                               // 0x0068:1 (0x0001)  
	bool                                               DefaultB : 1;                                               // 0x0068:2 (0x0001)  
	bool                                               DefaultA : 1;                                               // 0x0068:3 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionStaticSwitch
/// Size: 0x0058 (88 bytes) (0x000048 - 0x0000A0) align 8 pad: 0x0000
class UMaterialExpressionStaticSwitch : public UMaterialExpression
{ 
public:
	bool                                               DefaultValue : 1;                                           // 0x0048:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0049   (0x0003)  MISSED
	FExpressionInput                                   A;                                                          // 0x004C   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x005C   (0x000C)  MISSED
	FExpressionInput                                   B;                                                          // 0x0068   (0x0010)  
	unsigned char                                      UnknownData02_6[0xC];                                       // 0x0078   (0x000C)  MISSED
	FExpressionInput                                   Value;                                                      // 0x0084   (0x0010)  
	unsigned char                                      UnknownData03_7[0xC];                                       // 0x0094   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionStaticSwitchParameter
/// Size: 0x0000 (0 bytes) (0x000080 - 0x000080) align 8 pad: 0x0000
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionStep
/// Size: 0x0040 (64 bytes) (0x000048 - 0x000088) align 8 pad: 0x0000
class UMaterialExpressionStep : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Y;                                                          // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   X;                                                          // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	float                                              ConstY;                                                     // 0x0080   (0x0004)  
	float                                              ConstX;                                                     // 0x0084   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionSubtract
/// Size: 0x0040 (64 bytes) (0x000048 - 0x000088) align 8 pad: 0x0000
class UMaterialExpressionSubtract : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   B;                                                          // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	float                                              ConstA;                                                     // 0x0080   (0x0004)  
	float                                              ConstB;                                                     // 0x0084   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionTangent
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionTangent : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	float                                              Period;                                                     // 0x0064   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionTangentOutput
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTemporalSobol
/// Size: 0x0048 (72 bytes) (0x000048 - 0x000090) align 8 pad: 0x0000
class UMaterialExpressionTemporalSobol : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Index;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   Seed;                                                       // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	uint32_t                                           ConstIndex;                                                 // 0x0080   (0x0004)  
	FVector2D                                          ConstSeed;                                                  // 0x0084   (0x0008)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x008C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTextureCoordinate
/// Size: 0x0010 (16 bytes) (0x000048 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{ 
public:
	int32_t                                            CoordinateIndex;                                            // 0x0048   (0x0004)  
	float                                              UTiling;                                                    // 0x004C   (0x0004)  
	float                                              VTiling;                                                    // 0x0050   (0x0004)  
	bool                                               UnMirrorU : 1;                                              // 0x0054:0 (0x0001)  
	bool                                               UnMirrorV : 1;                                              // 0x0054:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0055   (0x0003)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTextureObject
/// Size: 0x0000 (0 bytes) (0x000050 - 0x000050) align 8 pad: 0x0000
class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionTextureObjectParameter
/// Size: 0x0000 (0 bytes) (0x000098 - 0x000098) align 8 pad: 0x0000
class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionTextureProperty
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionTextureProperty : public UMaterialExpression
{ 
public:
	FExpressionInput                                   TextureObject;                                              // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	TEnumAsByte<EMaterialExposedTextureProperty>       Property;                                                   // 0x0064   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0065   (0x0003)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameter2DArray
/// Size: 0x0000 (0 bytes) (0x000098 - 0x000098) align 8 pad: 0x0000
class UMaterialExpressionTextureSampleParameter2DArray : public UMaterialExpressionTextureSampleParameter
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameterCube
/// Size: 0x0000 (0 bytes) (0x000098 - 0x000098) align 8 pad: 0x0000
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameterSubUV
/// Size: 0x0008 (8 bytes) (0x000098 - 0x0000A0) align 8 pad: 0x0000
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
{ 
public:
	bool                                               bBlend : 1;                                                 // 0x0098:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0099   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameterVolume
/// Size: 0x0000 (0 bytes) (0x000098 - 0x000098) align 8 pad: 0x0000
class UMaterialExpressionTextureSampleParameterVolume : public UMaterialExpressionTextureSampleParameter
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionThinTranslucentMaterialOutput
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionThinTranslucentMaterialOutput : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   TransmittanceColor;                                         // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTime
/// Size: 0x0008 (8 bytes) (0x000048 - 0x000050) align 8 pad: 0x0000
class UMaterialExpressionTime : public UMaterialExpression
{ 
public:
	bool                                               bIgnorePause : 1;                                           // 0x0048:0 (0x0001)  
	bool                                               bOverride_Period : 1;                                       // 0x0048:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0049   (0x0003)  MISSED
	float                                              Period;                                                     // 0x004C   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionTransform
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionTransform : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	TEnumAsByte<EMaterialVectorCoordTransformSource>   TransformSourceType;                                        // 0x0064   (0x0001)  
	TEnumAsByte<EMaterialVectorCoordTransform>         TransformType;                                              // 0x0065   (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x0066   (0x0002)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTransformPosition
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionTransformPosition : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	TEnumAsByte<EMaterialPositionTransformSource>      TransformSourceType;                                        // 0x0064   (0x0001)  
	TEnumAsByte<EMaterialPositionTransformSource>      TransformType;                                              // 0x0065   (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x0066   (0x0002)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTruncate
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionTruncate : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0058   (0x0010)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTwoSidedSign
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionTwoSidedSign : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionVectorNoise
/// Size: 0x0030 (48 bytes) (0x000048 - 0x000078) align 8 pad: 0x0000
class UMaterialExpressionVectorNoise : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Position;                                                   // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	TEnumAsByte<EVectorNoiseFunction>                  NoiseFunction;                                              // 0x0064   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0065   (0x0003)  MISSED
	int32_t                                            Quality;                                                    // 0x0068   (0x0004)  
	bool                                               bTiling : 1;                                                // 0x006C:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x006D   (0x0003)  MISSED
	uint32_t                                           TileSize;                                                   // 0x0070   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x0074   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionVertexColor
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionVertexColor : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionVertexInterpolator
/// Size: 0x0028 (40 bytes) (0x000048 - 0x000070) align 8 pad: 0x0000
class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0058   (0x0018)  MISSED
};

/// Class /Script/Engine.MaterialExpressionVertexNormalWS
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionVertexNormalWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionVertexPositionLS
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionVertexPositionLS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionVertexTangentLS
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionVertexTangentLS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionVertexTangentWS
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionVertexTangentWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionViewProperty
/// Size: 0x0008 (8 bytes) (0x000048 - 0x000050) align 8 pad: 0x0000
class UMaterialExpressionViewProperty : public UMaterialExpression
{ 
public:
	TEnumAsByte<EMaterialExposedViewProperty>          Property;                                                   // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0049   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionViewSize
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionViewSize : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionVirtualTextureFeatureSwitch
/// Size: 0x0038 (56 bytes) (0x000048 - 0x000080) align 8 pad: 0x0000
class UMaterialExpressionVirtualTextureFeatureSwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   No;                                                         // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   Yes;                                                        // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0074   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionVolumetricAdvancedMaterialInput
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionVolumetricAdvancedMaterialInput : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionVolumetricAdvancedMaterialOutput
/// Size: 0x00E8 (232 bytes) (0x000048 - 0x000130) align 8 pad: 0x0000
class UMaterialExpressionVolumetricAdvancedMaterialOutput : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   PhaseG;                                                     // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0058   (0x000C)  MISSED
	FExpressionInput                                   PhaseG2;                                                    // 0x0064   (0x0010)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	FExpressionInput                                   PhaseBlend;                                                 // 0x0080   (0x0010)  
	unsigned char                                      UnknownData02_6[0xC];                                       // 0x0090   (0x000C)  MISSED
	FExpressionInput                                   MultiScatteringContribution;                                // 0x009C   (0x0010)  
	unsigned char                                      UnknownData03_6[0xC];                                       // 0x00AC   (0x000C)  MISSED
	FExpressionInput                                   MultiScatteringOcclusion;                                   // 0x00B8   (0x0010)  
	unsigned char                                      UnknownData04_6[0xC];                                       // 0x00C8   (0x000C)  MISSED
	FExpressionInput                                   MultiScatteringEccentricity;                                // 0x00D4   (0x0010)  
	unsigned char                                      UnknownData05_6[0xC];                                       // 0x00E4   (0x000C)  MISSED
	FExpressionInput                                   ConservativeDensity;                                        // 0x00F0   (0x0010)  
	unsigned char                                      UnknownData06_6[0xC];                                       // 0x0100   (0x000C)  MISSED
	float                                              ConstPhaseG;                                                // 0x010C   (0x0004)  
	float                                              ConstPhaseG2;                                               // 0x0110   (0x0004)  
	float                                              ConstPhaseBlend;                                            // 0x0114   (0x0004)  
	bool                                               PerSamplePhaseEvaluation;                                   // 0x0118   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0119   (0x0003)  MISSED
	uint32_t                                           MultiScatteringApproximationOctaveCount;                    // 0x011C   (0x0004)  
	float                                              ConstMultiScatteringContribution;                           // 0x0120   (0x0004)  
	float                                              ConstMultiScatteringOcclusion;                              // 0x0124   (0x0004)  
	float                                              ConstMultiScatteringEccentricity;                           // 0x0128   (0x0004)  
	bool                                               bGroundContribution;                                        // 0x012C   (0x0001)  
	bool                                               bGrayScaleMaterial;                                         // 0x012D   (0x0001)  
	bool                                               bRayMarchVolumeShadow;                                      // 0x012E   (0x0001)  
	unsigned char                                      UnknownData08_7[0x1];                                       // 0x012F   (0x0001)  MISSED
};

/// Class /Script/Engine.MaterialExpressionWorldPosition
/// Size: 0x0008 (8 bytes) (0x000048 - 0x000050) align 8 pad: 0x0000
class UMaterialExpressionWorldPosition : public UMaterialExpression
{ 
public:
	TEnumAsByte<EWorldPositionIncludedOffsets>         WorldPositionShaderOffset;                                  // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0049   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialFunctionInterface
/// Size: 0x0018 (24 bytes) (0x000030 - 0x000048) align 8 pad: 0x0000
class UMaterialFunctionInterface : public UObject
{ 
public:
	FGuid                                              StateId;                                                    // 0x0030   (0x0010)  
	EMaterialFunctionUsage                             MaterialFunctionUsage;                                      // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialFunction
/// Size: 0x0018 (24 bytes) (0x000048 - 0x000060) align 8 pad: 0x0000
class UMaterialFunction : public UMaterialFunctionInterface
{ 
public:
	FString                                            Description;                                                // 0x0048   (0x0010)  
	bool                                               bExposeToLibrary : 1;                                       // 0x0058:0 (0x0001)  
	bool                                               bPrefixParameterNames : 1;                                  // 0x0058:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0059   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialFunctionInstance
/// Size: 0x0080 (128 bytes) (0x000048 - 0x0000C8) align 8 pad: 0x0000
class UMaterialFunctionInstance : public UMaterialFunctionInterface
{ 
public:
	class UMaterialFunctionInterface*                  Parent;                                                     // 0x0048   (0x0008)  
	class UMaterialFunctionInterface*                  Base;                                                       // 0x0050   (0x0008)  
	TArray<FScalarParameterValue>                      ScalarParameterValues;                                      // 0x0058   (0x0010)  
	TArray<FVectorParameterValue>                      VectorParameterValues;                                      // 0x0068   (0x0010)  
	TArray<FTextureParameterValue>                     TextureParameterValues;                                     // 0x0078   (0x0010)  
	TArray<FFontParameterValue>                        FontParameterValues;                                        // 0x0088   (0x0010)  
	TArray<FStaticSwitchParameter>                     StaticSwitchParameterValues;                                // 0x0098   (0x0010)  
	TArray<FStaticComponentMaskParameter>              StaticComponentMaskParameterValues;                         // 0x00A8   (0x0010)  
	TArray<FRuntimeVirtualTextureParameterValue>       RuntimeVirtualTextureParameterValues;                       // 0x00B8   (0x0010)  
};

/// Class /Script/Engine.MaterialFunctionMaterialLayer
/// Size: 0x0000 (0 bytes) (0x000060 - 0x000060) align 8 pad: 0x0000
class UMaterialFunctionMaterialLayer : public UMaterialFunction
{ 
public:
};

/// Class /Script/Engine.MaterialFunctionMaterialLayerInstance
/// Size: 0x0000 (0 bytes) (0x0000C8 - 0x0000C8) align 8 pad: 0x0000
class UMaterialFunctionMaterialLayerInstance : public UMaterialFunctionInstance
{ 
public:
};

/// Class /Script/Engine.MaterialFunctionMaterialLayerBlend
/// Size: 0x0000 (0 bytes) (0x000060 - 0x000060) align 8 pad: 0x0000
class UMaterialFunctionMaterialLayerBlend : public UMaterialFunction
{ 
public:
};

/// Class /Script/Engine.MaterialFunctionMaterialLayerBlendInstance
/// Size: 0x0000 (0 bytes) (0x0000C8 - 0x0000C8) align 8 pad: 0x0000
class UMaterialFunctionMaterialLayerBlendInstance : public UMaterialFunctionInstance
{ 
public:
};

/// Class /Script/Engine.MaterialInstanceActor
/// Size: 0x0010 (16 bytes) (0x0002A8 - 0x0002B8) align 8 pad: 0x0000
class AMaterialInstanceActor : public AActor
{ 
public:
	TArray<class AActor*>                              TargetActors;                                               // 0x02A8   (0x0010)  
};

/// Class /Script/Engine.MaterialInstanceDynamic
/// Size: 0x0050 (80 bytes) (0x0003C8 - 0x000418) align 8 pad: 0x0000
class UMaterialInstanceDynamic : public UMaterialInstance
{ 
public:
	unsigned char                                      UnknownData00_1[0x50];                                      // 0x03C8   (0x0050)  MISSED
	// void SetVectorParameterValueByInfo(FMaterialParameterInfo& ParameterInfo, FLinearColor Value);                           // [0x46da9b0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetVectorParameterValue(FName ParameterName, FLinearColor Value);                                                   // [0x46da8c0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetTextureParameterValueByInfo(FMaterialParameterInfo& ParameterInfo, class UTexture* Value);                       // [0x46da7d0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetTextureParameterValue(FName ParameterName, class UTexture* Value);                                               // [0x46da6e0] Final|Native|Public|BlueprintCallable 
	// void SetScalarParameterValueByInfo(FMaterialParameterInfo& ParameterInfo, float Value);                                  // [0x46da5e0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetScalarParameterValue(FName ParameterName, float Value);                                                          // [0x46da4f0] Final|Native|Public|BlueprintCallable 
	// void K2_InterpolateMaterialInstanceParams(class UMaterialInstance* SourceA, class UMaterialInstance* SourceB, float ALPHA); // [0x46da210] Final|Native|Public|BlueprintCallable 
	// FLinearColor K2_GetVectorParameterValueByInfo(FMaterialParameterInfo& ParameterInfo);                                    // [0x46da150] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// FLinearColor K2_GetVectorParameterValue(FName ParameterName);                                                            // [0x46da090] Final|Native|Public|HasDefaults|BlueprintCallable 
	// class UTexture* K2_GetTextureParameterValueByInfo(FMaterialParameterInfo& ParameterInfo);                                // [0x46d9f20] Final|Native|Public|HasOutParms|BlueprintCallable 
	// class UTexture* K2_GetTextureParameterValue(FName ParameterName);                                                        // [0x46d9e70] Final|Native|Public|BlueprintCallable 
	// float K2_GetScalarParameterValueByInfo(FMaterialParameterInfo& ParameterInfo);                                           // [0x46d9d10] Final|Native|Public|HasOutParms|BlueprintCallable 
	// float K2_GetScalarParameterValue(FName ParameterName);                                                                   // [0x46d9c60] Final|Native|Public|BlueprintCallable 
	// void K2_CopyMaterialInstanceParameters(class UMaterialInterface* Source, bool bQuickParametersOnly);                     // [0x46d9ae0] Final|Native|Public|BlueprintCallable 
	// void CopyParameterOverrides(class UMaterialInstance* MaterialInstance);                                                  // [0x46d97f0] Final|Native|Public|BlueprintCallable 
	// void CopyInterpParameters(class UMaterialInstance* Source);                                                              // [0x46d9760] Final|Native|Public  
};

/// Struct /Script/Engine.CollectionParameterBase
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FCollectionParameterBase
{ 
	FName                                              ParameterName;                                              // 0x0000   (0x000C)  
	FGuid                                              ID;                                                         // 0x000C   (0x0010)  
};

/// Struct /Script/Engine.CollectionScalarParameter
/// Size: 0x0004 (4 bytes) (0x00001C - 0x000020) align 4 pad: 0x0000
struct FCollectionScalarParameter : FCollectionParameterBase
{ 
	float                                              DefaultValue;                                               // 0x001C   (0x0004)  
};

/// Struct /Script/Engine.CollectionVectorParameter
/// Size: 0x0010 (16 bytes) (0x00001C - 0x00002C) align 4 pad: 0x0000
struct FCollectionVectorParameter : FCollectionParameterBase
{ 
	FLinearColor                                       DefaultValue;                                               // 0x001C   (0x0010)  
};

/// Class /Script/Engine.MaterialParameterCollection
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000078) align 8 pad: 0x0000
class UMaterialParameterCollection : public UObject
{ 
public:
	FGuid                                              StateId;                                                    // 0x0030   (0x0010)  
	TArray<FCollectionScalarParameter>                 ScalarParameters;                                           // 0x0040   (0x0010)  
	TArray<FCollectionVectorParameter>                 VectorParameters;                                           // 0x0050   (0x0010)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0060   (0x0018)  MISSED
};

/// Class /Script/Engine.MaterialParameterCollectionInstance
/// Size: 0x00E0 (224 bytes) (0x000030 - 0x000110) align 8 pad: 0x0000
class UMaterialParameterCollectionInstance : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0030   (0x0008)  MISSED
	class UMaterialParameterCollection*                Collection;                                                 // 0x0038   (0x0008)  
	unsigned char                                      UnknownData01_7[0xD0];                                      // 0x0040   (0x00D0)  MISSED
};

/// Struct /Script/Engine.InterpGroupActorInfo
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FInterpGroupActorInfo
{ 
	FName                                              ObjectName;                                                 // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	TArray<class AActor*>                              Actors;                                                     // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.CameraCutInfo
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FCameraCutInfo
{ 
	FVector                                            Location;                                                   // 0x0000   (0x000C)  
	float                                              Timestamp;                                                  // 0x000C   (0x0004)  
};

/// Class /Script/Engine.MatineeActor
/// Size: 0x00B0 (176 bytes) (0x0002A8 - 0x000358) align 8 pad: 0x0000
class AMatineeActor : public AActor
{ 
public:
	class UInterpData*                                 MatineeData;                                                // 0x02A8   (0x0008)  
	FName                                              MatineeControllerName;                                      // 0x02B0   (0x000C)  
	float                                              PlayRate;                                                   // 0x02BC   (0x0004)  
	bool                                               bPlayOnLevelLoad : 1;                                       // 0x02C0:0 (0x0001)  
	bool                                               bForceStartPos : 1;                                         // 0x02C0:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x02C1   (0x0003)  MISSED
	float                                              ForceStartPosition;                                         // 0x02C4   (0x0004)  
	bool                                               bLooping : 1;                                               // 0x02C8:0 (0x0001)  
	bool                                               bRewindOnPlay : 1;                                          // 0x02C8:1 (0x0001)  
	bool                                               bNoResetOnRewind : 1;                                       // 0x02C8:2 (0x0001)  
	bool                                               bRewindIfAlreadyPlaying : 1;                                // 0x02C8:3 (0x0001)  
	bool                                               bDisableRadioFilter : 1;                                    // 0x02C8:4 (0x0001)  
	bool                                               bClientSideOnly : 1;                                        // 0x02C8:5 (0x0001)  
	bool                                               bSkipUpdateIfNotVisible : 1;                                // 0x02C8:6 (0x0001)  
	bool                                               bIsSkippable : 1;                                           // 0x02C8:7 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x02C9   (0x0003)  MISSED
	int32_t                                            PreferredSplitScreenNum;                                    // 0x02CC   (0x0004)  
	bool                                               bDisableMovementInput : 1;                                  // 0x02D0:0 (0x0001)  
	bool                                               bDisableLookAtInput : 1;                                    // 0x02D0:1 (0x0001)  
	bool                                               bHidePlayer : 1;                                            // 0x02D0:2 (0x0001)  
	bool                                               bHideHud : 1;                                               // 0x02D0:3 (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x02D1   (0x0007)  MISSED
	TArray<FInterpGroupActorInfo>                      GroupActorInfos;                                            // 0x02D8   (0x0010)  
	bool                                               bShouldShowGore : 1;                                        // 0x02E8:0 (0x0001)  
	unsigned char                                      UnknownData03_5[0x7];                                       // 0x02E9   (0x0007)  MISSED
	TArray<class UInterpGroupInst*>                    GroupInst;                                                  // 0x02F0   (0x0010)  
	TArray<FCameraCutInfo>                             CameraCuts;                                                 // 0x0300   (0x0010)  
	bool                                               bIsPlaying : 1;                                             // 0x0310:0 (0x0001)  
	bool                                               bReversePlayback : 1;                                       // 0x0310:1 (0x0001)  
	bool                                               bPaused : 1;                                                // 0x0310:2 (0x0001)  
	bool                                               bPendingStop : 1;                                           // 0x0310:3 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0311   (0x0003)  MISSED
	float                                              InterpPosition;                                             // 0x0314   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x0318   (0x0004)  MISSED
	char                                               ReplicationForceIsPlaying;                                  // 0x031C   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x031D   (0x0003)  MISSED
	SDK_UNDEFINED(16,175) /* FMulticastInlineDelegate */ __um(OnPlay);                                             // 0x0320   (0x0010)  
	SDK_UNDEFINED(16,176) /* FMulticastInlineDelegate */ __um(OnStop);                                             // 0x0330   (0x0010)  
	SDK_UNDEFINED(16,177) /* FMulticastInlineDelegate */ __um(OnPause);                                            // 0x0340   (0x0010)  
	unsigned char                                      UnknownData07_7[0x8];                                       // 0x0350   (0x0008)  MISSED
	// void Stop();                                                                                                             // [0x46de5f0] Native|Public|BlueprintCallable 
	// void SetPosition(float NewPosition, bool bJump);                                                                         // [0x46de330] Final|Native|Public|BlueprintCallable 
	// void SetLoopingState(bool bNewLooping);                                                                                  // [0x1f80870] Native|Public|BlueprintCallable 
	// void Reverse();                                                                                                          // [0x972ed0] Native|Public|BlueprintCallable 
	// void Play();                                                                                                             // [0x461bf00] Native|Public|BlueprintCallable 
	// void Pause();                                                                                                            // [0x972eb0] Native|Public|BlueprintCallable 
	// void EnableGroupByName(FString GroupName, bool bEnable);                                                                 // [0x46dde60] Final|Native|Public|BlueprintCallable 
	// void ChangePlaybackDirection();                                                                                          // [0x952d90] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.MatineeActorCameraAnim
/// Size: 0x0008 (8 bytes) (0x000358 - 0x000360) align 8 pad: 0x0000
class AMatineeActorCameraAnim : public AMatineeActor
{ 
public:
	class UCameraAnim*                                 CameraAnim;                                                 // 0x0358   (0x0008)  
};

/// Class /Script/Engine.MatineeAnimInterface
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UMatineeAnimInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.MatineeInterface
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UMatineeInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.MeshMergeCullingVolume
/// Size: 0x0000 (0 bytes) (0x0002E0 - 0x0002E0) align 8 pad: 0x0000
class AMeshMergeCullingVolume : public AVolume
{ 
public:
};

/// Class /Script/Engine.MeshSimplificationSettings
/// Size: 0x0010 (16 bytes) (0x000048 - 0x000058) align 8 pad: 0x0000
class UMeshSimplificationSettings : public UDeveloperSettings
{ 
public:
	FName                                              MeshReductionModuleName;                                    // 0x0048   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MeshVertexPainterKismetLibrary
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary
{ 
public:
	// void RemovePaintedVertices(class UStaticMeshComponent* StaticMeshComponent);                                             // [0x46e2030] Final|Native|Static|Public|BlueprintCallable 
	// void PaintVerticesSingleColor(class UStaticMeshComponent* StaticMeshComponent, FLinearColor& FillColor, bool bConvertToSRGB); // [0x46e1e80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void PaintVerticesLerpAlongAxis(class UStaticMeshComponent* StaticMeshComponent, FLinearColor& StartColor, FLinearColor& EndColor, EVertexPaintAxis Axis, bool bConvertToSRGB); // [0x46e1cc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Struct /Script/Engine.PurchaseInfo
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 pad: 0x0000
struct FPurchaseInfo
{ 
	FString                                            Identifier;                                                 // 0x0000   (0x0010)  
	FString                                            DisplayName;                                                // 0x0010   (0x0010)  
	FString                                            DisplayDescription;                                         // 0x0020   (0x0010)  
	FString                                            DisplayPrice;                                               // 0x0030   (0x0010)  
};

/// Class /Script/Engine.MicroTransactionBase
/// Size: 0x0030 (48 bytes) (0x000040 - 0x000070) align 8 pad: 0x0000
class UMicroTransactionBase : public UPlatformInterfaceBase
{ 
public:
	TArray<FPurchaseInfo>                              AvailableProducts;                                          // 0x0040   (0x0010)  
	FString                                            LastError;                                                  // 0x0050   (0x0010)  
	FString                                            LastErrorSolution;                                          // 0x0060   (0x0010)  
};

/// Class /Script/Engine.ModelComponent
/// Size: 0x0040 (64 bytes) (0x0004E0 - 0x000520) align 16 pad: 0x0000
class UModelComponent : public UPrimitiveComponent
{ 
public:
	unsigned char                                      UnknownData00_3[0x18];                                      // 0x04E0   (0x0018)  MISSED
	class UBodySetup*                                  ModelBodySetup;                                             // 0x04F8   (0x0008)  
	unsigned char                                      UnknownData01_7[0x20];                                      // 0x0500   (0x0020)  MISSED
};

/// Class /Script/Engine.MorphTarget
/// Size: 0x0018 (24 bytes) (0x000030 - 0x000048) align 8 pad: 0x0000
class UMorphTarget : public UObject
{ 
public:
	class USkeletalMesh*                               BaseSkelMesh;                                               // 0x0030   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0038   (0x0010)  MISSED
};

/// Class /Script/Engine.MorphTargetModifier
/// Size: 0x0018 (24 bytes) (0x000030 - 0x000048) align 8 pad: 0x0000
class UMorphTargetModifier : public UObject
{ 
public:
	class UWorld*                                      WorldContext;                                               // 0x0030   (0x0008)  
	FVector                                            CameraLocation;                                             // 0x0038   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/Engine.MorphTargetModWeightCurve
/// Size: 0x0098 (152 bytes) (0x000000 - 0x000098) align 8 pad: 0x0000
struct FMorphTargetModWeightCurve
{ 
	FName                                              MorphTargetName;                                            // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FRuntimeFloatCurve                                 WeightCurve;                                                // 0x0010   (0x0088)  
};

/// Class /Script/Engine.MorphTargetModifierSettings
/// Size: 0x0020 (32 bytes) (0x000030 - 0x000050) align 8 pad: 0x0000
class UMorphTargetModifierSettings : public UObject
{ 
public:
	class UMorphTargetModifier*                        Modifier;                                                   // 0x0030   (0x0008)  
	FPerPlatformInt                                    MinModifyLOD;                                               // 0x0038   (0x0004)  
	FPerPlatformInt                                    MaxModifyLOD;                                               // 0x003C   (0x0004)  
	TArray<FMorphTargetModWeightCurve>                 ModWeightCurves;                                            // 0x0040   (0x0010)  
};

/// Class /Script/Engine.MorphTargetModifier_CameraAdapter
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMorphTargetModifier_CameraAdapter : public UMorphTargetModifier
{ 
public:
};

/// Class /Script/Engine.NavAgentInterface
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UNavAgentInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.NavAreaBase
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UNavAreaBase : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0030   (0x0008)  MISSED
};

/// Class /Script/Engine.NavCollisionBase
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000078) align 8 pad: 0x0000
class UNavCollisionBase : public UObject
{ 
public:
	bool                                               bIsDynamicObstacle : 1;                                     // 0x0030:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x47];                                      // 0x0031   (0x0047)  MISSED
};

/// Class /Script/Engine.NavEdgeProviderInterface
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UNavEdgeProviderInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.NavigationDataChunk
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UNavigationDataChunk : public UObject
{ 
public:
	FName                                              NavigationDataName;                                         // 0x0030   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/Engine.NavigationDataChunkActor
/// Size: 0x0030 (48 bytes) (0x0002A8 - 0x0002D8) align 8 pad: 0x0000
class ANavigationDataChunkActor : public AActor
{ 
public:
	TArray<class UNavigationDataChunk*>                NavDataChunks;                                              // 0x02A8   (0x0010)  
	FBox                                               DataChunkActorBounds;                                       // 0x02B8   (0x001C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x02D4   (0x0004)  MISSED
};

/// Class /Script/Engine.NavigationDataInterface
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UNavigationDataInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.NavigationObjectBase
/// Size: 0x0028 (40 bytes) (0x0002A8 - 0x0002D0) align 8 pad: 0x0000
class ANavigationObjectBase : public AActor
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x02A8   (0x0008)  MISSED
	class UCapsuleComponent*                           CapsuleComponent;                                           // 0x02B0   (0x0008)  
	class UBillboardComponent*                         GoodSprite;                                                 // 0x02B8   (0x0008)  
	class UBillboardComponent*                         BadSprite;                                                  // 0x02C0   (0x0008)  
	bool                                               bIsPIEPlayerStart : 1;                                      // 0x02C8:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x02C9   (0x0007)  MISSED
};

/// Class /Script/Engine.NavigationSystemBase
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UNavigationSystemBase : public UObject
{ 
public:
};

/// Struct /Script/Engine.NavAgentSelector
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FNavAgentSelector
{ 
	bool                                               bSupportsAgent0 : 1;                                        // 0x0000:0 (0x0001)  
	bool                                               bSupportsAgent1 : 1;                                        // 0x0000:1 (0x0001)  
	bool                                               bSupportsAgent2 : 1;                                        // 0x0000:2 (0x0001)  
	bool                                               bSupportsAgent3 : 1;                                        // 0x0000:3 (0x0001)  
	bool                                               bSupportsAgent4 : 1;                                        // 0x0000:4 (0x0001)  
	bool                                               bSupportsAgent5 : 1;                                        // 0x0000:5 (0x0001)  
	bool                                               bSupportsAgent6 : 1;                                        // 0x0000:6 (0x0001)  
	bool                                               bSupportsAgent7 : 1;                                        // 0x0000:7 (0x0001)  
	bool                                               bSupportsAgent8 : 1;                                        // 0x0001:0 (0x0001)  
	bool                                               bSupportsAgent9 : 1;                                        // 0x0001:1 (0x0001)  
	bool                                               bSupportsAgent10 : 1;                                       // 0x0001:2 (0x0001)  
	bool                                               bSupportsAgent11 : 1;                                       // 0x0001:3 (0x0001)  
	bool                                               bSupportsAgent12 : 1;                                       // 0x0001:4 (0x0001)  
	bool                                               bSupportsAgent13 : 1;                                       // 0x0001:5 (0x0001)  
	bool                                               bSupportsAgent14 : 1;                                       // 0x0001:6 (0x0001)  
	bool                                               bSupportsAgent15 : 1;                                       // 0x0001:7 (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x0002   (0x0002)  MISSED
};

/// Class /Script/Engine.NavigationSystemConfig
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000068) align 8 pad: 0x0000
class UNavigationSystemConfig : public UObject
{ 
public:
	FSoftClassPath                                     NavigationSystemClass;                                      // 0x0030   (0x0020)  
	FNavAgentSelector                                  SupportedAgentsMask;                                        // 0x0050   (0x0004)  
	FName                                              DefaultAgentName;                                           // 0x0054   (0x000C)  
	bool                                               bIsOverriden : 1;                                           // 0x0060:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0061   (0x0007)  MISSED
};

/// Class /Script/Engine.NullNavSysConfig
/// Size: 0x0000 (0 bytes) (0x000068 - 0x000068) align 8 pad: 0x0000
class UNullNavSysConfig : public UNavigationSystemConfig
{ 
public:
};

/// Struct /Script/Engine.NavigationLinkBase
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FNavigationLinkBase
{ 
	float                                              LeftProjectHeight;                                          // 0x0000   (0x0004)  
	float                                              MaxFallDownLength;                                          // 0x0004   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0008   (0x0004)  MISSED
	float                                              SnapRadius;                                                 // 0x000C   (0x0004)  
	float                                              SnapHeight;                                                 // 0x0010   (0x0004)  
	FNavAgentSelector                                  SupportedAgents;                                            // 0x0014   (0x0004)  
	bool                                               bSupportsAgent0 : 1;                                        // 0x0018:0 (0x0001)  
	bool                                               bSupportsAgent1 : 1;                                        // 0x0018:1 (0x0001)  
	bool                                               bSupportsAgent2 : 1;                                        // 0x0018:2 (0x0001)  
	bool                                               bSupportsAgent3 : 1;                                        // 0x0018:3 (0x0001)  
	bool                                               bSupportsAgent4 : 1;                                        // 0x0018:4 (0x0001)  
	bool                                               bSupportsAgent5 : 1;                                        // 0x0018:5 (0x0001)  
	bool                                               bSupportsAgent6 : 1;                                        // 0x0018:6 (0x0001)  
	bool                                               bSupportsAgent7 : 1;                                        // 0x0018:7 (0x0001)  
	bool                                               bSupportsAgent8 : 1;                                        // 0x0019:0 (0x0001)  
	bool                                               bSupportsAgent9 : 1;                                        // 0x0019:1 (0x0001)  
	bool                                               bSupportsAgent10 : 1;                                       // 0x0019:2 (0x0001)  
	bool                                               bSupportsAgent11 : 1;                                       // 0x0019:3 (0x0001)  
	bool                                               bSupportsAgent12 : 1;                                       // 0x0019:4 (0x0001)  
	bool                                               bSupportsAgent13 : 1;                                       // 0x0019:5 (0x0001)  
	bool                                               bSupportsAgent14 : 1;                                       // 0x0019:6 (0x0001)  
	bool                                               bSupportsAgent15 : 1;                                       // 0x0019:7 (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x001A   (0x0002)  MISSED
	TEnumAsByte<ENavLinkDirection>                     Direction;                                                  // 0x001C   (0x0001)  
	bool                                               bUseSnapHeight : 1;                                         // 0x001D:0 (0x0001)  
	bool                                               bSnapToCheapestArea : 1;                                    // 0x001D:1 (0x0001)  
	bool                                               bCustomFlag0 : 1;                                           // 0x001D:2 (0x0001)  
	bool                                               bCustomFlag1 : 1;                                           // 0x001D:3 (0x0001)  
	bool                                               bCustomFlag2 : 1;                                           // 0x001D:4 (0x0001)  
	bool                                               bCustomFlag3 : 1;                                           // 0x001D:5 (0x0001)  
	bool                                               bCustomFlag4 : 1;                                           // 0x001D:6 (0x0001)  
	bool                                               bCustomFlag5 : 1;                                           // 0x001D:7 (0x0001)  
	bool                                               bCustomFlag6 : 1;                                           // 0x001E:0 (0x0001)  
	bool                                               bCustomFlag7 : 1;                                           // 0x001E:1 (0x0001)  
	unsigned char                                      UnknownData02_5[0x1];                                       // 0x001F   (0x0001)  MISSED
	class UClass*                                      AreaClass;                                                  // 0x0020   (0x0008)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.NavigationLink
/// Size: 0x0018 (24 bytes) (0x000030 - 0x000048) align 8 pad: 0x0000
struct FNavigationLink : FNavigationLinkBase
{ 
	FVector                                            Left;                                                       // 0x0030   (0x000C)  
	FVector                                            Right;                                                      // 0x003C   (0x000C)  
};

/// Struct /Script/Engine.NavigationSegmentLink
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000060) align 8 pad: 0x0000
struct FNavigationSegmentLink : FNavigationLinkBase
{ 
	FVector                                            LeftStart;                                                  // 0x0030   (0x000C)  
	FVector                                            LeftEnd;                                                    // 0x003C   (0x000C)  
	FVector                                            RightStart;                                                 // 0x0048   (0x000C)  
	FVector                                            RightEnd;                                                   // 0x0054   (0x000C)  
};

/// Class /Script/Engine.NavLinkDefinition
/// Size: 0x0028 (40 bytes) (0x000030 - 0x000058) align 8 pad: 0x0000
class UNavLinkDefinition : public UObject
{ 
public:
	TArray<FNavigationLink>                            Links;                                                      // 0x0030   (0x0010)  
	TArray<FNavigationSegmentLink>                     SegmentLinks;                                               // 0x0040   (0x0010)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0050   (0x0008)  MISSED
};

/// Class /Script/Engine.NavPathObserverInterface
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UNavPathObserverInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.NavRelevantInterface
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UNavRelevantInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.SimulatedClientNetConnection
/// Size: 0x0000 (0 bytes) (0x001B08 - 0x001B08) align 8 pad: 0x0000
class USimulatedClientNetConnection : public UNetConnection
{ 
public:
};

/// Class /Script/Engine.NetPushModelHelpers
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UNetPushModelHelpers : public UBlueprintFunctionLibrary
{ 
public:
	// void MarkPropertyDirtyFromRepIndex(class UObject* Object, int32_t RepIndex, FName PropertyName);                         // [0x46e5a50] Final|Native|Static|Public|BlueprintCallable 
	// void MarkPropertyDirty(class UObject* Object, FName PropertyName);                                                       // [0x46e5970] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.NetworkPredictionInterface
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UNetworkPredictionInterface : public UInterface
{ 
public:
};

/// Struct /Script/Engine.NetworkEmulationProfileDescription
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FNetworkEmulationProfileDescription
{ 
	FString                                            ProfileName;                                                // 0x0000   (0x0010)  
	FString                                            ToolTip;                                                    // 0x0010   (0x0010)  
};

/// Class /Script/Engine.NetworkSettings
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UNetworkSettings : public UDeveloperSettings
{ 
public:
	bool                                               bVerifyPeer : 1;                                            // 0x0048:0 (0x0001)  
	bool                                               bEnableMultiplayerWorldOriginRebasing : 1;                  // 0x0048:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0049   (0x0003)  MISSED
	int32_t                                            MaxRepArraySize;                                            // 0x004C   (0x0004)  
	int32_t                                            MaxRepArrayMemory;                                          // 0x0050   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0054   (0x0004)  MISSED
	TArray<FNetworkEmulationProfileDescription>        NetworkEmulationProfiles;                                   // 0x0058   (0x0010)  
};

/// Class /Script/Engine.NodeMappingContainer
/// Size: 0x0150 (336 bytes) (0x000030 - 0x000180) align 8 pad: 0x0000
class UNodeMappingContainer : public UObject
{ 
public:
	SDK_UNDEFINED(80,178) /* TMap<FName, FNodeItem> */ __um(SourceItems);                                          // 0x0030   (0x0050)  
	SDK_UNDEFINED(80,179) /* TMap<FName, FNodeItem> */ __um(TargetItems);                                          // 0x0080   (0x0050)  
	SDK_UNDEFINED(80,180) /* TMap<FName, FName> */     __um(SourceToTarget);                                       // 0x00D0   (0x0050)  
	SDK_UNDEFINED(48,181) /* TWeakObjectPtr<UObject*> */ __um(SourceAsset);                                        // 0x0120   (0x0030)  
	SDK_UNDEFINED(48,182) /* TWeakObjectPtr<UObject*> */ __um(TargetAsset);                                        // 0x0150   (0x0030)  
};

/// Class /Script/Engine.NodeMappingProviderInterface
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UNodeMappingProviderInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.Note
/// Size: 0x0000 (0 bytes) (0x0002A8 - 0x0002A8) align 8 pad: 0x0000
class ANote : public AActor
{ 
public:
};

/// Class /Script/Engine.ObjectLibrary
/// Size: 0x0080 (128 bytes) (0x000030 - 0x0000B0) align 8 pad: 0x0000
class UObjectLibrary : public UObject
{ 
public:
	class UClass*                                      ObjectBaseClass;                                            // 0x0030   (0x0008)  
	bool                                               bHasBlueprintClasses;                                       // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0039   (0x0007)  MISSED
	TArray<class UObject*>                             Objects;                                                    // 0x0040   (0x0010)  
	SDK_UNDEFINED(16,183) /* TArray<TWeakObjectPtr<UObject*>> */ __um(WeakObjects);                                // 0x0050   (0x0010)  
	bool                                               bUseWeakReferences;                                         // 0x0060   (0x0001)  
	bool                                               bIsFullyLoaded;                                             // 0x0061   (0x0001)  
	unsigned char                                      UnknownData01_7[0x4E];                                      // 0x0062   (0x004E)  MISSED
};

/// Class /Script/Engine.ObjectReferencer
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UObjectReferencer : public UObject
{ 
public:
	TArray<class UObject*>                             ReferencedObjects;                                          // 0x0030   (0x0010)  
};

/// Class /Script/Engine.ObjectTraceWorldSubsystem
/// Size: 0x0008 (8 bytes) (0x000038 - 0x000040) align 8 pad: 0x0000
class UObjectTraceWorldSubsystem : public UWorldSubsystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0038   (0x0008)  MISSED
};

/// Class /Script/Engine.OnlineBlueprintCallProxyBase
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UOnlineBlueprintCallProxyBase : public UBlueprintAsyncActionBase
{ 
public:
};

/// Class /Script/Engine.OnlineEngineInterface
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UOnlineEngineInterface : public UObject
{ 
public:
};

/// Class /Script/Engine.OnlineSession
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UOnlineSession : public UObject
{ 
public:
};

/// Class /Script/Engine.PackageMapClient
/// Size: 0x0318 (792 bytes) (0x0000E8 - 0x000400) align 8 pad: 0x0000
class UPackageMapClient : public UPackageMap
{ 
public:
	unsigned char                                      UnknownData00_1[0x318];                                     // 0x00E8   (0x0318)  MISSED
};

/// Class /Script/Engine.PackedLevelInstance
/// Size: 0x0000 (0 bytes) (0x0002F0 - 0x0002F0) align 8 pad: 0x0000
class APackedLevelInstance : public ALevelInstance
{ 
public:
};

/// Class /Script/Engine.PainCausingVolume
/// Size: 0x0028 (40 bytes) (0x0002F0 - 0x000318) align 8 pad: 0x0000
class APainCausingVolume : public APhysicsVolume
{ 
public:
	bool                                               bPainCausing : 1;                                           // 0x02F0:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x02F1   (0x0003)  MISSED
	float                                              DamagePerSec;                                               // 0x02F4   (0x0004)  
	class UClass*                                      DamageType;                                                 // 0x02F8   (0x0008)  
	float                                              PainInterval;                                               // 0x0300   (0x0004)  
	bool                                               bEntryPain : 1;                                             // 0x0304:0 (0x0001)  
	bool                                               BACKUP_bPainCausing : 1;                                    // 0x0304:1 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0305   (0x0003)  MISSED
	class AController*                                 DamageInstigator;                                           // 0x0308   (0x0008)  
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x0310   (0x0008)  MISSED
};

/// Class /Script/Engine.ParticleEmitter
/// Size: 0x0190 (400 bytes) (0x000030 - 0x0001C0) align 8 pad: 0x0000
class UParticleEmitter : public UObject
{ 
public:
	FName                                              EmitterName;                                                // 0x0030   (0x000C)  
	int32_t                                            SubUVDataOffset;                                            // 0x003C   (0x0004)  
	TEnumAsByte<EEmitterRenderMode>                    EmitterRenderMode;                                          // 0x0040   (0x0001)  
	EParticleSignificanceLevel                         SignificanceLevel;                                          // 0x0041   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0042   (0x0001)  MISSED
	bool                                               bUseLegacySpawningBehavior : 1;                             // 0x0043:0 (0x0001)  
	unsigned char                                      UnknownBit01 : 1;                                           // 0x0043:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit02 : 1;                                           // 0x0043:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit03 : 1;                                           // 0x0043:3 (0x0001)  MISSED
	bool                                               ConvertedModules : 1;                                       // 0x0043:4 (0x0001)  
	bool                                               bIsSoloing : 1;                                             // 0x0043:5 (0x0001)  
	bool                                               bCookedOut : 1;                                             // 0x0043:6 (0x0001)  
	bool                                               bDisabledLODsKeepEmitterAlive : 1;                          // 0x0043:7 (0x0001)  
	bool                                               bDisableWhenInsignficant : 1;                               // 0x0044:0 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0045   (0x0003)  MISSED
	TArray<class UParticleLODLevel*>                   LODLevels;                                                  // 0x0048   (0x0010)  
	int32_t                                            PeakActiveParticles;                                        // 0x0058   (0x0004)  
	int32_t                                            InitialAllocationCount;                                     // 0x005C   (0x0004)  
	float                                              QualityLevelSpawnRateScale;                                 // 0x0060   (0x0004)  
	uint32_t                                           DetailModeBitmask;                                          // 0x0064   (0x0004)  
	unsigned char                                      UnknownData05_7[0x158];                                     // 0x0068   (0x0158)  MISSED
};

/// Class /Script/Engine.ParticleEventManager
/// Size: 0x0000 (0 bytes) (0x0002A8 - 0x0002A8) align 8 pad: 0x0000
class AParticleEventManager : public AActor
{ 
public:
};

/// Class /Script/Engine.ParticleLODLevel
/// Size: 0x0090 (144 bytes) (0x000030 - 0x0000C0) align 8 pad: 0x0000
class UParticleLODLevel : public UObject
{ 
public:
	int32_t                                            Level;                                                      // 0x0030   (0x0004)  
	bool                                               bEnabled : 1;                                               // 0x0034:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0035   (0x0003)  MISSED
	class UParticleModuleRequired*                     RequiredModule;                                             // 0x0038   (0x0008)  
	TArray<class UParticleModule*>                     Modules;                                                    // 0x0040   (0x0010)  
	class UParticleModuleTypeDataBase*                 TypeDataModule;                                             // 0x0050   (0x0008)  
	class UParticleModuleSpawn*                        SpawnModule;                                                // 0x0058   (0x0008)  
	class UParticleModuleEventGenerator*               EventGenerator;                                             // 0x0060   (0x0008)  
	TArray<class UParticleModuleSpawnBase*>            SpawningModules;                                            // 0x0068   (0x0010)  
	TArray<class UParticleModule*>                     SpawnModules;                                               // 0x0078   (0x0010)  
	TArray<class UParticleModule*>                     UpdateModules;                                              // 0x0088   (0x0010)  
	TArray<class UParticleModuleOrbit*>                OrbitModules;                                               // 0x0098   (0x0010)  
	TArray<class UParticleModuleEventReceiverBase*>    EventReceiverModules;                                       // 0x00A8   (0x0010)  
	bool                                               ConvertedModules : 1;                                       // 0x00B8:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x00B9   (0x0003)  MISSED
	int32_t                                            PeakActiveParticles;                                        // 0x00BC   (0x0004)  
};

/// Class /Script/Engine.ParticleModule
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UParticleModule : public UObject
{ 
public:
	bool                                               bSpawnModule : 1;                                           // 0x0030:0 (0x0001)  
	bool                                               bUpdateModule : 1;                                          // 0x0030:1 (0x0001)  
	bool                                               bFinalUpdateModule : 1;                                     // 0x0030:2 (0x0001)  
	bool                                               bUpdateForGPUEmitter : 1;                                   // 0x0030:3 (0x0001)  
	bool                                               bCurvesAsColor : 1;                                         // 0x0030:4 (0x0001)  
	bool                                               b3DDrawMode : 1;                                            // 0x0030:5 (0x0001)  
	bool                                               bSupported3DDrawMode : 1;                                   // 0x0030:6 (0x0001)  
	bool                                               bEnabled : 1;                                               // 0x0030:7 (0x0001)  
	bool                                               bEditable : 1;                                              // 0x0031:0 (0x0001)  
	bool                                               LODDuplicate : 1;                                           // 0x0031:1 (0x0001)  
	bool                                               bSupportsRandomSeed : 1;                                    // 0x0031:2 (0x0001)  
	bool                                               bRequiresLoopingNotification : 1;                           // 0x0031:3 (0x0001)  
	char                                               LODValidity;                                                // 0x0032   (0x0001)  
	unsigned char                                      UnknownData00_7[0x5];                                       // 0x0033   (0x0005)  MISSED
};

/// Class /Script/Engine.ParticleModuleAccelerationBase
/// Size: 0x0008 (8 bytes) (0x000038 - 0x000040) align 8 pad: 0x0000
class UParticleModuleAccelerationBase : public UParticleModule
{ 
public:
	bool                                               bAlwaysInWorldSpace : 1;                                    // 0x0038:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Struct /Script/Engine.DistributionLookupTable
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FDistributionLookupTable
{ 
	float                                              TimeScale;                                                  // 0x0000   (0x0004)  
	float                                              TimeBias;                                                   // 0x0004   (0x0004)  
	TArray<float>                                      Values;                                                     // 0x0008   (0x0010)  
	char                                               Op;                                                         // 0x0018   (0x0001)  
	char                                               EntryCount;                                                 // 0x0019   (0x0001)  
	char                                               EntryStride;                                                // 0x001A   (0x0001)  
	char                                               SubEntryStride;                                             // 0x001B   (0x0001)  
	char                                               LockFlag;                                                   // 0x001C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x001D   (0x0003)  MISSED
};

/// Struct /Script/Engine.RawDistribution
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FRawDistribution
{ 
	FDistributionLookupTable                           Table;                                                      // 0x0000   (0x0020)  
};

/// Struct /Script/Engine.RawDistributionVector
/// Size: 0x0028 (40 bytes) (0x000020 - 0x000048) align 8 pad: 0x0000
struct FRawDistributionVector : FRawDistribution
{ 
	float                                              MinValue;                                                   // 0x0020   (0x0004)  
	float                                              MaxValue;                                                   // 0x0024   (0x0004)  
	FVector                                            MinValueVec;                                                // 0x0028   (0x000C)  
	FVector                                            MaxValueVec;                                                // 0x0034   (0x000C)  
	class UDistributionVector*                         Distribution;                                               // 0x0040   (0x0008)  
};

/// Class /Script/Engine.ParticleModuleAcceleration
/// Size: 0x0050 (80 bytes) (0x000040 - 0x000090) align 8 pad: 0x0000
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
{ 
public:
	FRawDistributionVector                             Acceleration;                                               // 0x0040   (0x0048)  
	bool                                               bApplyOwnerScale : 1;                                       // 0x0088:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0089   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleAccelerationConstant
/// Size: 0x0010 (16 bytes) (0x000040 - 0x000050) align 8 pad: 0x0000
class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
{ 
public:
	FVector                                            Acceleration;                                               // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Struct /Script/Engine.RawDistributionFloat
/// Size: 0x0010 (16 bytes) (0x000020 - 0x000030) align 8 pad: 0x0000
struct FRawDistributionFloat : FRawDistribution
{ 
	float                                              MinValue;                                                   // 0x0020   (0x0004)  
	float                                              MaxValue;                                                   // 0x0024   (0x0004)  
	class UDistributionFloat*                          Distribution;                                               // 0x0028   (0x0008)  
};

/// Class /Script/Engine.ParticleModuleAccelerationDrag
/// Size: 0x0038 (56 bytes) (0x000040 - 0x000078) align 8 pad: 0x0000
class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
{ 
public:
	class UDistributionFloat*                          DragCoefficient;                                            // 0x0040   (0x0008)  
	FRawDistributionFloat                              DragCoefficientRaw;                                         // 0x0048   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleAccelerationDragScaleOverLife
/// Size: 0x0038 (56 bytes) (0x000040 - 0x000078) align 8 pad: 0x0000
class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
{ 
public:
	class UDistributionFloat*                          DragScale;                                                  // 0x0040   (0x0008)  
	FRawDistributionFloat                              DragScaleRaw;                                               // 0x0048   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleAccelerationOverLifetime
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000088) align 8 pad: 0x0000
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
{ 
public:
	FRawDistributionVector                             AccelOverLife;                                              // 0x0040   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleAttractorBase
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UParticleModuleAttractorBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleAttractorLine
/// Size: 0x0078 (120 bytes) (0x000038 - 0x0000B0) align 8 pad: 0x0000
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
{ 
public:
	FVector                                            EndPoint0;                                                  // 0x0038   (0x000C)  
	FVector                                            EndPoint1;                                                  // 0x0044   (0x000C)  
	FRawDistributionFloat                              Range;                                                      // 0x0050   (0x0030)  
	FRawDistributionFloat                              Strength;                                                   // 0x0080   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleAttractorParticle
/// Size: 0x0088 (136 bytes) (0x000038 - 0x0000C0) align 8 pad: 0x0000
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
{ 
public:
	FName                                              EmitterName;                                                // 0x0038   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0044   (0x0004)  MISSED
	FRawDistributionFloat                              Range;                                                      // 0x0048   (0x0030)  
	bool                                               bStrengthByDistance : 1;                                    // 0x0078:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0079   (0x0007)  MISSED
	FRawDistributionFloat                              Strength;                                                   // 0x0080   (0x0030)  
	bool                                               bAffectBaseVelocity : 1;                                    // 0x00B0:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x00B1   (0x0003)  MISSED
	TEnumAsByte<EAttractorParticleSelectionMethod>     SelectionMethod;                                            // 0x00B4   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x00B5   (0x0003)  MISSED
	bool                                               bRenewSource : 1;                                           // 0x00B8:0 (0x0001)  
	bool                                               bInheritSourceVel : 1;                                      // 0x00B8:1 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x00B9   (0x0003)  MISSED
	int32_t                                            LastSelIndex;                                               // 0x00BC   (0x0004)  
};

/// Class /Script/Engine.ParticleModuleAttractorPoint
/// Size: 0x00B0 (176 bytes) (0x000038 - 0x0000E8) align 8 pad: 0x0000
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
{ 
public:
	FRawDistributionVector                             Position;                                                   // 0x0038   (0x0048)  
	FRawDistributionFloat                              Range;                                                      // 0x0080   (0x0030)  
	FRawDistributionFloat                              Strength;                                                   // 0x00B0   (0x0030)  
	bool                                               StrengthByDistance : 1;                                     // 0x00E0:0 (0x0001)  
	bool                                               bAffectBaseVelocity : 1;                                    // 0x00E0:1 (0x0001)  
	bool                                               bOverrideVelocity : 1;                                      // 0x00E0:2 (0x0001)  
	bool                                               bUseWorldSpacePosition : 1;                                 // 0x00E0:3 (0x0001)  
	bool                                               Positive_X : 1;                                             // 0x00E0:4 (0x0001)  
	bool                                               Positive_Y : 1;                                             // 0x00E0:5 (0x0001)  
	bool                                               Positive_Z : 1;                                             // 0x00E0:6 (0x0001)  
	bool                                               Negative_X : 1;                                             // 0x00E0:7 (0x0001)  
	bool                                               Negative_Y : 1;                                             // 0x00E1:0 (0x0001)  
	bool                                               Negative_Z : 1;                                             // 0x00E1:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x00E2   (0x0006)  MISSED
};

/// Class /Script/Engine.ParticleModuleAttractorPointGravity
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000080) align 8 pad: 0x0000
class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
{ 
public:
	FVector                                            Position;                                                   // 0x0038   (0x000C)  
	float                                              Radius;                                                     // 0x0044   (0x0004)  
	class UDistributionFloat*                          Strength;                                                   // 0x0048   (0x0008)  
	FRawDistributionFloat                              StrengthRaw;                                                // 0x0050   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleBeamBase
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UParticleModuleBeamBase : public UParticleModule
{ 
public:
};

/// Struct /Script/Engine.BeamModifierOptions
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FBeamModifierOptions
{ 
	bool                                               bModify : 1;                                                // 0x0000:0 (0x0001)  
	bool                                               bScale : 1;                                                 // 0x0000:1 (0x0001)  
	bool                                               bLock : 1;                                                  // 0x0000:2 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0001   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleBeamModifier
/// Size: 0x00D8 (216 bytes) (0x000038 - 0x000110) align 8 pad: 0x0000
class UParticleModuleBeamModifier : public UParticleModuleBeamBase
{ 
public:
	TEnumAsByte<BeamModifierType>                      ModifierType;                                               // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	FBeamModifierOptions                               PositionOptions;                                            // 0x003C   (0x0004)  
	FRawDistributionVector                             Position;                                                   // 0x0040   (0x0048)  
	FBeamModifierOptions                               TangentOptions;                                             // 0x0088   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x008C   (0x0004)  MISSED
	FRawDistributionVector                             Tangent;                                                    // 0x0090   (0x0048)  
	bool                                               bAbsoluteTangent : 1;                                       // 0x00D8:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x00D9   (0x0003)  MISSED
	FBeamModifierOptions                               StrengthOptions;                                            // 0x00DC   (0x0004)  
	FRawDistributionFloat                              Strength;                                                   // 0x00E0   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleBeamNoise
/// Size: 0x0160 (352 bytes) (0x000038 - 0x000198) align 8 pad: 0x0000
class UParticleModuleBeamNoise : public UParticleModuleBeamBase
{ 
public:
	bool                                               bLowFreq_Enabled : 1;                                       // 0x0038:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0039   (0x0003)  MISSED
	int32_t                                            Frequency;                                                  // 0x003C   (0x0004)  
	int32_t                                            Frequency_LowRange;                                         // 0x0040   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0044   (0x0004)  MISSED
	FRawDistributionVector                             NoiseRange;                                                 // 0x0048   (0x0048)  
	FRawDistributionFloat                              NoiseRangeScale;                                            // 0x0090   (0x0030)  
	bool                                               bNRScaleEmitterTime : 1;                                    // 0x00C0:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x00C1   (0x0007)  MISSED
	FRawDistributionVector                             NoiseSpeed;                                                 // 0x00C8   (0x0048)  
	bool                                               bSmooth : 1;                                                // 0x0110:0 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0111   (0x0003)  MISSED
	float                                              NoiseLockRadius;                                            // 0x0114   (0x0004)  
	bool                                               bNoiseLock : 1;                                             // 0x0118:0 (0x0001)  
	bool                                               bOscillate : 1;                                             // 0x0118:1 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0119   (0x0003)  MISSED
	float                                              NoiseLockTime;                                              // 0x011C   (0x0004)  
	float                                              NoiseTension;                                               // 0x0120   (0x0004)  
	bool                                               bUseNoiseTangents : 1;                                      // 0x0124:0 (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x0125   (0x0003)  MISSED
	FRawDistributionFloat                              NoiseTangentStrength;                                       // 0x0128   (0x0030)  
	int32_t                                            NoiseTessellation;                                          // 0x0158   (0x0004)  
	bool                                               bTargetNoise : 1;                                           // 0x015C:0 (0x0001)  
	unsigned char                                      UnknownData06_5[0x3];                                       // 0x015D   (0x0003)  MISSED
	float                                              FrequencyDistance;                                          // 0x0160   (0x0004)  
	bool                                               bApplyNoiseScale : 1;                                       // 0x0164:0 (0x0001)  
	unsigned char                                      UnknownData07_5[0x3];                                       // 0x0165   (0x0003)  MISSED
	FRawDistributionFloat                              NoiseScale;                                                 // 0x0168   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleBeamSource
/// Size: 0x00F0 (240 bytes) (0x000038 - 0x000128) align 8 pad: 0x0000
class UParticleModuleBeamSource : public UParticleModuleBeamBase
{ 
public:
	TEnumAsByte<Beam2SourceTargetMethod>               SourceMethod;                                               // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	FName                                              SourceName;                                                 // 0x003C   (0x000C)  
	bool                                               bSourceAbsolute : 1;                                        // 0x0048:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0049   (0x0007)  MISSED
	FRawDistributionVector                             Source;                                                     // 0x0050   (0x0048)  
	bool                                               bLockSource : 1;                                            // 0x0098:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0099   (0x0003)  MISSED
	TEnumAsByte<Beam2SourceTargetTangentMethod>        SourceTangentMethod;                                        // 0x009C   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x009D   (0x0003)  MISSED
	FRawDistributionVector                             SourceTangent;                                              // 0x00A0   (0x0048)  
	bool                                               bLockSourceTangent : 1;                                     // 0x00E8:0 (0x0001)  
	unsigned char                                      UnknownData04_5[0x7];                                       // 0x00E9   (0x0007)  MISSED
	FRawDistributionFloat                              SourceStrength;                                             // 0x00F0   (0x0030)  
	bool                                               bLockSourceStength : 1;                                     // 0x0120:0 (0x0001)  
	unsigned char                                      UnknownData05_7[0x7];                                       // 0x0121   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleBeamTarget
/// Size: 0x00F0 (240 bytes) (0x000038 - 0x000128) align 8 pad: 0x0000
class UParticleModuleBeamTarget : public UParticleModuleBeamBase
{ 
public:
	TEnumAsByte<Beam2SourceTargetMethod>               TargetMethod;                                               // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	FName                                              TargetName;                                                 // 0x003C   (0x000C)  
	FRawDistributionVector                             Target;                                                     // 0x0048   (0x0048)  
	bool                                               bTargetAbsolute : 1;                                        // 0x0090:0 (0x0001)  
	bool                                               bLockTarget : 1;                                            // 0x0090:1 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0091   (0x0003)  MISSED
	TEnumAsByte<Beam2SourceTargetTangentMethod>        TargetTangentMethod;                                        // 0x0094   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0095   (0x0003)  MISSED
	FRawDistributionVector                             TargetTangent;                                              // 0x0098   (0x0048)  
	bool                                               bLockTargetTangent : 1;                                     // 0x00E0:0 (0x0001)  
	unsigned char                                      UnknownData03_5[0x7];                                       // 0x00E1   (0x0007)  MISSED
	FRawDistributionFloat                              TargetStrength;                                             // 0x00E8   (0x0030)  
	bool                                               bLockTargetStength : 1;                                     // 0x0118:0 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0119   (0x0003)  MISSED
	float                                              LockRadius;                                                 // 0x011C   (0x0004)  
	unsigned char                                      UnknownData05_7[0x8];                                       // 0x0120   (0x0008)  MISSED
};

/// Class /Script/Engine.ParticleModuleCameraBase
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UParticleModuleCameraBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleCameraOffset
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000070) align 8 pad: 0x0000
class UParticleModuleCameraOffset : public UParticleModuleCameraBase
{ 
public:
	FRawDistributionFloat                              CameraOffset;                                               // 0x0038   (0x0030)  
	bool                                               bSpawnTimeOnly : 1;                                         // 0x0068:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0069   (0x0003)  MISSED
	TEnumAsByte<EParticleCameraOffsetUpdateMethod>     UpdateMethod;                                               // 0x006C   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x006D   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleCollisionBase
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UParticleModuleCollisionBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleCollision
/// Size: 0x0160 (352 bytes) (0x000038 - 0x000198) align 8 pad: 0x0000
class UParticleModuleCollision : public UParticleModuleCollisionBase
{ 
public:
	FRawDistributionVector                             DampingFactor;                                              // 0x0038   (0x0048)  
	FRawDistributionVector                             DampingFactorRotation;                                      // 0x0080   (0x0048)  
	FRawDistributionFloat                              MaxCollisions;                                              // 0x00C8   (0x0030)  
	TEnumAsByte<EParticleCollisionComplete>            CollisionCompletionOption;                                  // 0x00F8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x00F9   (0x0007)  MISSED
	SDK_UNDEFINED(16,184) /* TArray<TEnumAsByte<EObjectTypeQuery>> */ __um(CollisionTypes);                        // 0x0100   (0x0010)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0110   (0x0008)  MISSED
	bool                                               bApplyPhysics : 1;                                          // 0x0118:0 (0x0001)  
	bool                                               bIgnoreTriggerVolumes : 1;                                  // 0x0118:1 (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x0119   (0x0007)  MISSED
	FRawDistributionFloat                              ParticleMass;                                               // 0x0120   (0x0030)  
	float                                              DirScalar;                                                  // 0x0150   (0x0004)  
	bool                                               bPawnsDoNotDecrementCount : 1;                              // 0x0154:0 (0x0001)  
	bool                                               bOnlyVerticalNormalsDecrementCount : 1;                     // 0x0154:1 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0155   (0x0003)  MISSED
	float                                              VerticalFudgeFactor;                                        // 0x0158   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x015C   (0x0004)  MISSED
	FRawDistributionFloat                              DelayAmount;                                                // 0x0160   (0x0030)  
	bool                                               bDropDetail : 1;                                            // 0x0190:0 (0x0001)  
	bool                                               bCollideOnlyIfVisible : 1;                                  // 0x0190:1 (0x0001)  
	bool                                               bIgnoreSourceActor : 1;                                     // 0x0190:2 (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x0191   (0x0003)  MISSED
	float                                              MaxCollisionDistance;                                       // 0x0194   (0x0004)  
};

/// Class /Script/Engine.ParticleModuleCollisionGPU
/// Size: 0x0078 (120 bytes) (0x000038 - 0x0000B0) align 8 pad: 0x0000
class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
{ 
public:
	FRawDistributionFloat                              Resilience;                                                 // 0x0038   (0x0030)  
	FRawDistributionFloat                              ResilienceScaleOverLife;                                    // 0x0068   (0x0030)  
	float                                              Friction;                                                   // 0x0098   (0x0004)  
	float                                              RandomSpread;                                               // 0x009C   (0x0004)  
	float                                              RandomDistribution;                                         // 0x00A0   (0x0004)  
	float                                              RadiusScale;                                                // 0x00A4   (0x0004)  
	float                                              RadiusBias;                                                 // 0x00A8   (0x0004)  
	TEnumAsByte<EParticleCollisionResponse>            Response;                                                   // 0x00AC   (0x0001)  
	TEnumAsByte<EParticleCollisionMode>                CollisionMode;                                              // 0x00AD   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x00AE   (0x0002)  MISSED
};

/// Class /Script/Engine.ParticleModuleColorBase
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UParticleModuleColorBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleColor
/// Size: 0x0080 (128 bytes) (0x000038 - 0x0000B8) align 8 pad: 0x0000
class UParticleModuleColor : public UParticleModuleColorBase
{ 
public:
	FRawDistributionVector                             StartColor;                                                 // 0x0038   (0x0048)  
	FRawDistributionFloat                              StartAlpha;                                                 // 0x0080   (0x0030)  
	bool                                               bClampAlpha : 1;                                            // 0x00B0:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x00B1   (0x0007)  MISSED
};

/// Struct /Script/Engine.ParticleRandomSeedInfo
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FParticleRandomSeedInfo
{ 
	FName                                              ParameterName;                                              // 0x0000   (0x000C)  
	bool                                               bGetSeedFromInstance : 1;                                   // 0x000C:0 (0x0001)  
	bool                                               bInstanceSeedIsIndex : 1;                                   // 0x000C:1 (0x0001)  
	bool                                               bResetSeedOnEmitterLooping : 1;                             // 0x000C:2 (0x0001)  
	bool                                               bRandomlySelectSeedArray : 1;                               // 0x000C:3 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x000D   (0x0003)  MISSED
	TArray<int32_t>                                    RandomSeeds;                                                // 0x0010   (0x0010)  
};

/// Class /Script/Engine.ParticleModuleColor_Seeded
/// Size: 0x0020 (32 bytes) (0x0000B8 - 0x0000D8) align 8 pad: 0x0000
class UParticleModuleColor_Seeded : public UParticleModuleColor
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x00B8   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleColorOverLife
/// Size: 0x0080 (128 bytes) (0x000038 - 0x0000B8) align 8 pad: 0x0000
class UParticleModuleColorOverLife : public UParticleModuleColorBase
{ 
public:
	FRawDistributionVector                             ColorOverLife;                                              // 0x0038   (0x0048)  
	FRawDistributionFloat                              AlphaOverLife;                                              // 0x0080   (0x0030)  
	bool                                               bClampAlpha : 1;                                            // 0x00B0:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x00B1   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleColorScaleOverLife
/// Size: 0x0080 (128 bytes) (0x000038 - 0x0000B8) align 8 pad: 0x0000
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
{ 
public:
	FRawDistributionVector                             ColorScaleOverLife;                                         // 0x0038   (0x0048)  
	FRawDistributionFloat                              AlphaScaleOverLife;                                         // 0x0080   (0x0030)  
	bool                                               bEmitterTime : 1;                                           // 0x00B0:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x00B1   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleEventBase
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UParticleModuleEventBase : public UParticleModule
{ 
public:
};

/// Struct /Script/Engine.ParticleEvent_GenerateInfo
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FParticleEvent_GenerateInfo
{ 
	TEnumAsByte<EParticleEventType>                    Type;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            Frequency;                                                  // 0x0004   (0x0004)  
	int32_t                                            ParticleFrequency;                                          // 0x0008   (0x0004)  
	bool                                               FirstTimeOnly : 1;                                          // 0x000C:0 (0x0001)  
	bool                                               LastTimeOnly : 1;                                           // 0x000C:1 (0x0001)  
	bool                                               UseReflectedImpactVector : 1;                               // 0x000C:2 (0x0001)  
	bool                                               bUseOrbitOffset : 1;                                        // 0x000C:3 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x000D   (0x0003)  MISSED
	FName                                              CustomName;                                                 // 0x0010   (0x000C)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	TArray<class UParticleModuleEventSendToGame*>      ParticleModuleEventsToSendToGame;                           // 0x0020   (0x0010)  
};

/// Class /Script/Engine.ParticleModuleEventGenerator
/// Size: 0x0010 (16 bytes) (0x000038 - 0x000048) align 8 pad: 0x0000
class UParticleModuleEventGenerator : public UParticleModuleEventBase
{ 
public:
	TArray<FParticleEvent_GenerateInfo>                Events;                                                     // 0x0038   (0x0010)  
};

/// Class /Script/Engine.ParticleModuleEventReceiverBase
/// Size: 0x0010 (16 bytes) (0x000038 - 0x000048) align 8 pad: 0x0000
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
{ 
public:
	TEnumAsByte<EParticleEventType>                    EventGeneratorType;                                         // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	FName                                              EventName;                                                  // 0x003C   (0x000C)  
};

/// Class /Script/Engine.ParticleModuleEventReceiverKillParticles
/// Size: 0x0008 (8 bytes) (0x000048 - 0x000050) align 8 pad: 0x0000
class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
{ 
public:
	bool                                               bStopSpawning : 1;                                          // 0x0048:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0049   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleEventReceiverSpawn
/// Size: 0x0098 (152 bytes) (0x000048 - 0x0000E0) align 8 pad: 0x0000
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
{ 
public:
	FRawDistributionFloat                              SpawnCount;                                                 // 0x0048   (0x0030)  
	bool                                               bUseParticleTime : 1;                                       // 0x0078:0 (0x0001)  
	bool                                               bUsePSysLocation : 1;                                       // 0x0078:1 (0x0001)  
	bool                                               bInheritVelocity : 1;                                       // 0x0078:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0079   (0x0007)  MISSED
	FRawDistributionVector                             InheritVelocityScale;                                       // 0x0080   (0x0048)  
	TArray<class UPhysicalMaterial*>                   PhysicalMaterials;                                          // 0x00C8   (0x0010)  
	bool                                               bBanPhysicalMaterials : 1;                                  // 0x00D8:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x00D9   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleEventSendToGame
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UParticleModuleEventSendToGame : public UObject
{ 
public:
};

/// Class /Script/Engine.ParticleModuleKillBase
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UParticleModuleKillBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleKillBox
/// Size: 0x0098 (152 bytes) (0x000038 - 0x0000D0) align 8 pad: 0x0000
class UParticleModuleKillBox : public UParticleModuleKillBase
{ 
public:
	FRawDistributionVector                             LowerLeftCorner;                                            // 0x0038   (0x0048)  
	FRawDistributionVector                             UpperRightCorner;                                           // 0x0080   (0x0048)  
	bool                                               bAbsolute : 1;                                              // 0x00C8:0 (0x0001)  
	bool                                               bKillInside : 1;                                            // 0x00C8:1 (0x0001)  
	bool                                               bAxisAlignedAndFixedSize : 1;                               // 0x00C8:2 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x00C9   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleKillHeight
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000070) align 8 pad: 0x0000
class UParticleModuleKillHeight : public UParticleModuleKillBase
{ 
public:
	FRawDistributionFloat                              Height;                                                     // 0x0038   (0x0030)  
	bool                                               bAbsolute : 1;                                              // 0x0068:0 (0x0001)  
	bool                                               bFloor : 1;                                                 // 0x0068:1 (0x0001)  
	bool                                               bApplyPSysScale : 1;                                        // 0x0068:2 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleLifetimeBase
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UParticleModuleLifetimeBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleLifetime
/// Size: 0x0030 (48 bytes) (0x000038 - 0x000068) align 8 pad: 0x0000
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{ 
public:
	FRawDistributionFloat                              LifeTime;                                                   // 0x0038   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleLifetime_Seeded
/// Size: 0x0020 (32 bytes) (0x000068 - 0x000088) align 8 pad: 0x0000
class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0068   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleLightBase
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UParticleModuleLightBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleLight
/// Size: 0x00F0 (240 bytes) (0x000038 - 0x000128) align 8 pad: 0x0000
class UParticleModuleLight : public UParticleModuleLightBase
{ 
public:
	bool                                               bUseInverseSquaredFalloff;                                  // 0x0038   (0x0001)  
	bool                                               bAffectsTranslucency;                                       // 0x0039   (0x0001)  
	bool                                               bPreviewLightRadius;                                        // 0x003A   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x003B   (0x0001)  MISSED
	float                                              SpawnFraction;                                              // 0x003C   (0x0004)  
	FRawDistributionVector                             ColorScaleOverLife;                                         // 0x0040   (0x0048)  
	FRawDistributionFloat                              BrightnessOverLife;                                         // 0x0088   (0x0030)  
	FRawDistributionFloat                              RadiusScale;                                                // 0x00B8   (0x0030)  
	FRawDistributionFloat                              LightExponent;                                              // 0x00E8   (0x0030)  
	FLightingChannels                                  LightingChannels;                                           // 0x0118   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0119   (0x0003)  MISSED
	float                                              VolumetricScatteringIntensity;                              // 0x011C   (0x0004)  
	bool                                               bHighQualityLights;                                         // 0x0120   (0x0001)  
	bool                                               bShadowCastingLights;                                       // 0x0121   (0x0001)  
	unsigned char                                      UnknownData02_7[0x6];                                       // 0x0122   (0x0006)  MISSED
};

/// Class /Script/Engine.ParticleModuleLight_Seeded
/// Size: 0x0020 (32 bytes) (0x000128 - 0x000148) align 8 pad: 0x0000
class UParticleModuleLight_Seeded : public UParticleModuleLight
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0128   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleLocationBase
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UParticleModuleLocationBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleLocation
/// Size: 0x0050 (80 bytes) (0x000038 - 0x000088) align 8 pad: 0x0000
class UParticleModuleLocation : public UParticleModuleLocationBase
{ 
public:
	FRawDistributionVector                             StartLocation;                                              // 0x0038   (0x0048)  
	float                                              DistributeOverNPoints;                                      // 0x0080   (0x0004)  
	float                                              DistributeThreshold;                                        // 0x0084   (0x0004)  
};

/// Class /Script/Engine.ParticleModuleLocation_Seeded
/// Size: 0x0020 (32 bytes) (0x000088 - 0x0000A8) align 8 pad: 0x0000
class UParticleModuleLocation_Seeded : public UParticleModuleLocation
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0088   (0x0020)  
};

/// Struct /Script/Engine.LocationBoneSocketInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FLocationBoneSocketInfo
{ 
	FName                                              BoneSocketName;                                             // 0x0000   (0x000C)  
	FVector                                            Offset;                                                     // 0x000C   (0x000C)  
};

/// Class /Script/Engine.ParticleModuleLocationBoneSocket
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000078) align 8 pad: 0x0000
class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
{ 
public:
	TEnumAsByte<ELocationBoneSocketSource>             SourceType;                                                 // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	FVector                                            UniversalOffset;                                            // 0x003C   (0x000C)  
	TArray<FLocationBoneSocketInfo>                    SourceLocations;                                            // 0x0048   (0x0010)  
	TEnumAsByte<ELocationBoneSocketSelectionMethod>    SelectionMethod;                                            // 0x0058   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0059   (0x0003)  MISSED
	bool                                               bUpdatePositionEachFrame : 1;                               // 0x005C:0 (0x0001)  
	bool                                               bOrientMeshEmitters : 1;                                    // 0x005C:1 (0x0001)  
	bool                                               bInheritBoneVelocity : 1;                                   // 0x005C:2 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x005D   (0x0003)  MISSED
	float                                              InheritVelocityScale;                                       // 0x0060   (0x0004)  
	FName                                              SkelMeshActorParamName;                                     // 0x0064   (0x000C)  
	int32_t                                            NumPreSelectedIndices;                                      // 0x0070   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x0074   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleLocationDirect
/// Size: 0x0120 (288 bytes) (0x000038 - 0x000158) align 8 pad: 0x0000
class UParticleModuleLocationDirect : public UParticleModuleLocationBase
{ 
public:
	FRawDistributionVector                             Location;                                                   // 0x0038   (0x0048)  
	FRawDistributionVector                             LocationOffset;                                             // 0x0080   (0x0048)  
	FRawDistributionVector                             ScaleFactor;                                                // 0x00C8   (0x0048)  
	FRawDistributionVector                             Direction;                                                  // 0x0110   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleLocationEmitter
/// Size: 0x0020 (32 bytes) (0x000038 - 0x000058) align 8 pad: 0x0000
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
{ 
public:
	FName                                              EmitterName;                                                // 0x0038   (0x000C)  
	TEnumAsByte<ELocationEmitterSelectionMethod>       SelectionMethod;                                            // 0x0044   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0045   (0x0003)  MISSED
	bool                                               InheritSourceVelocity : 1;                                  // 0x0048:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0049   (0x0003)  MISSED
	float                                              InheritSourceVelocityScale;                                 // 0x004C   (0x0004)  
	bool                                               bInheritSourceRotation : 1;                                 // 0x0050:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0051   (0x0003)  MISSED
	float                                              InheritSourceRotationScale;                                 // 0x0054   (0x0004)  
};

/// Class /Script/Engine.ParticleModuleLocationEmitterDirect
/// Size: 0x0010 (16 bytes) (0x000038 - 0x000048) align 8 pad: 0x0000
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
{ 
public:
	FName                                              EmitterName;                                                // 0x0038   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveBase
/// Size: 0x0080 (128 bytes) (0x000038 - 0x0000B8) align 8 pad: 0x0000
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{ 
public:
	bool                                               Positive_X : 1;                                             // 0x0038:0 (0x0001)  
	bool                                               Positive_Y : 1;                                             // 0x0038:1 (0x0001)  
	bool                                               Positive_Z : 1;                                             // 0x0038:2 (0x0001)  
	bool                                               Negative_X : 1;                                             // 0x0038:3 (0x0001)  
	bool                                               Negative_Y : 1;                                             // 0x0038:4 (0x0001)  
	bool                                               Negative_Z : 1;                                             // 0x0038:5 (0x0001)  
	bool                                               SurfaceOnly : 1;                                            // 0x0038:6 (0x0001)  
	bool                                               Velocity : 1;                                               // 0x0038:7 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0039   (0x0007)  MISSED
	FRawDistributionFloat                              VelocityScale;                                              // 0x0040   (0x0030)  
	FRawDistributionVector                             StartLocation;                                              // 0x0070   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveCylinder
/// Size: 0x0070 (112 bytes) (0x0000B8 - 0x000128) align 8 pad: 0x0000
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{ 
public:
	bool                                               RadialVelocity : 1;                                         // 0x00B8:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x00B9   (0x0007)  MISSED
	FRawDistributionFloat                              StartRadius;                                                // 0x00C0   (0x0030)  
	FRawDistributionFloat                              StartHeight;                                                // 0x00F0   (0x0030)  
	TEnumAsByte<CylinderHeightAxis>                    HeightAxis;                                                 // 0x0120   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0121   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
/// Size: 0x0020 (32 bytes) (0x000128 - 0x000148) align 8 pad: 0x0000
class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0128   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveSphere
/// Size: 0x0030 (48 bytes) (0x0000B8 - 0x0000E8) align 8 pad: 0x0000
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{ 
public:
	FRawDistributionFloat                              StartRadius;                                                // 0x00B8   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveSphere_Seeded
/// Size: 0x0020 (32 bytes) (0x0000E8 - 0x000108) align 8 pad: 0x0000
class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x00E8   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveTriangle
/// Size: 0x00D8 (216 bytes) (0x000038 - 0x000110) align 8 pad: 0x0000
class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
{ 
public:
	FRawDistributionVector                             StartOffset;                                                // 0x0038   (0x0048)  
	FRawDistributionFloat                              Height;                                                     // 0x0080   (0x0030)  
	FRawDistributionFloat                              Angle;                                                      // 0x00B0   (0x0030)  
	FRawDistributionFloat                              Thickness;                                                  // 0x00E0   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleLocationSkelVertSurface
/// Size: 0x0068 (104 bytes) (0x000038 - 0x0000A0) align 8 pad: 0x0000
class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
{ 
public:
	TEnumAsByte<ELocationSkelVertSurfaceSource>        SourceType;                                                 // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	FVector                                            UniversalOffset;                                            // 0x003C   (0x000C)  
	bool                                               bUpdatePositionEachFrame : 1;                               // 0x0048:0 (0x0001)  
	bool                                               bOrientMeshEmitters : 1;                                    // 0x0048:1 (0x0001)  
	bool                                               bInheritBoneVelocity : 1;                                   // 0x0048:2 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0049   (0x0003)  MISSED
	float                                              InheritVelocityScale;                                       // 0x004C   (0x0004)  
	FName                                              SkelMeshActorParamName;                                     // 0x0050   (0x000C)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x005C   (0x0004)  MISSED
	TArray<FName>                                      ValidAssociatedBones;                                       // 0x0060   (0x0010)  
	bool                                               bEnforceNormalCheck : 1;                                    // 0x0070:0 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0071   (0x0003)  MISSED
	FVector                                            NormalToCompare;                                            // 0x0074   (0x000C)  
	float                                              NormalCheckToleranceDegrees;                                // 0x0080   (0x0004)  
	float                                              NormalCheckTolerance;                                       // 0x0084   (0x0004)  
	TArray<int32_t>                                    ValidMaterialIndices;                                       // 0x0088   (0x0010)  
	bool                                               bInheritVertexColor : 1;                                    // 0x0098:0 (0x0001)  
	bool                                               bInheritUV : 1;                                             // 0x0098:1 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0099   (0x0003)  MISSED
	uint32_t                                           InheritUVChannel;                                           // 0x009C   (0x0004)  
};

/// Class /Script/Engine.ParticleModuleLocationWorldOffset
/// Size: 0x0000 (0 bytes) (0x000088 - 0x000088) align 8 pad: 0x0000
class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
{ 
public:
};

/// Class /Script/Engine.ParticleModuleLocationWorldOffset_Seeded
/// Size: 0x0020 (32 bytes) (0x000088 - 0x0000A8) align 8 pad: 0x0000
class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0088   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleMaterialBase
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UParticleModuleMaterialBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleMeshMaterial
/// Size: 0x0010 (16 bytes) (0x000038 - 0x000048) align 8 pad: 0x0000
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
{ 
public:
	TArray<class UMaterialInterface*>                  MeshMaterials;                                              // 0x0038   (0x0010)  
};

/// Class /Script/Engine.ParticleModuleRotationBase
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UParticleModuleRotationBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleMeshRotation
/// Size: 0x0050 (80 bytes) (0x000038 - 0x000088) align 8 pad: 0x0000
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{ 
public:
	FRawDistributionVector                             StartRotation;                                              // 0x0038   (0x0048)  
	bool                                               bInheritParent : 1;                                         // 0x0080:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleMeshRotation_Seeded
/// Size: 0x0020 (32 bytes) (0x000088 - 0x0000A8) align 8 pad: 0x0000
class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0088   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleRotationRateBase
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UParticleModuleRotationRateBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleMeshRotationRate
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000080) align 8 pad: 0x0000
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{ 
public:
	FRawDistributionVector                             StartRotationRate;                                          // 0x0038   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleMeshRotationRate_Seeded
/// Size: 0x0020 (32 bytes) (0x000080 - 0x0000A0) align 8 pad: 0x0000
class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0080   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleMeshRotationRateMultiplyLife
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000080) align 8 pad: 0x0000
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{ 
public:
	FRawDistributionVector                             LifeMultiplier;                                             // 0x0038   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleMeshRotationRateOverLife
/// Size: 0x0050 (80 bytes) (0x000038 - 0x000088) align 8 pad: 0x0000
class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
{ 
public:
	FRawDistributionVector                             RotRate;                                                    // 0x0038   (0x0048)  
	bool                                               bScaleRotRate : 1;                                          // 0x0080:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleOrbitBase
/// Size: 0x0008 (8 bytes) (0x000038 - 0x000040) align 8 pad: 0x0000
class UParticleModuleOrbitBase : public UParticleModule
{ 
public:
	bool                                               bUseEmitterTime : 1;                                        // 0x0038:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Struct /Script/Engine.OrbitOptions
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FOrbitOptions
{ 
	bool                                               bProcessDuringSpawn : 1;                                    // 0x0000:0 (0x0001)  
	bool                                               bProcessDuringUpdate : 1;                                   // 0x0000:1 (0x0001)  
	bool                                               bUseEmitterTime : 1;                                        // 0x0000:2 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0001   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleOrbit
/// Size: 0x00F8 (248 bytes) (0x000040 - 0x000138) align 8 pad: 0x0000
class UParticleModuleOrbit : public UParticleModuleOrbitBase
{ 
public:
	TEnumAsByte<EOrbitChainMode>                       ChainMode;                                                  // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0041   (0x0007)  MISSED
	FRawDistributionVector                             OffsetAmount;                                               // 0x0048   (0x0048)  
	FOrbitOptions                                      OffsetOptions;                                              // 0x0090   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0094   (0x0004)  MISSED
	FRawDistributionVector                             RotationAmount;                                             // 0x0098   (0x0048)  
	FOrbitOptions                                      RotationOptions;                                            // 0x00E0   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x00E4   (0x0004)  MISSED
	FRawDistributionVector                             RotationRateAmount;                                         // 0x00E8   (0x0048)  
	FOrbitOptions                                      RotationRateOptions;                                        // 0x0130   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x0134   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleOrientationBase
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UParticleModuleOrientationBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleOrientationAxisLock
/// Size: 0x0008 (8 bytes) (0x000038 - 0x000040) align 8 pad: 0x0000
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
{ 
public:
	TEnumAsByte<EParticleAxisLock>                     LockAxisFlags;                                              // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleParameterBase
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UParticleModuleParameterBase : public UParticleModule
{ 
public:
};

/// Struct /Script/Engine.EmitterDynamicParameter
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align 8 pad: 0x0000
struct FEmitterDynamicParameter
{ 
	FName                                              ParamName;                                                  // 0x0000   (0x000C)  
	bool                                               bUseEmitterTime : 1;                                        // 0x000C:0 (0x0001)  
	bool                                               bSpawnTimeOnly : 1;                                         // 0x000C:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x000D   (0x0003)  MISSED
	TEnumAsByte<EEmitterDynamicParameterValue>         ValueMethod;                                                // 0x0010   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0011   (0x0003)  MISSED
	bool                                               bScaleVelocityByParamValue : 1;                             // 0x0014:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0015   (0x0003)  MISSED
	FRawDistributionFloat                              ParamValue;                                                 // 0x0018   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleParameterDynamic
/// Size: 0x0018 (24 bytes) (0x000038 - 0x000050) align 8 pad: 0x0000
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
{ 
public:
	TArray<FEmitterDynamicParameter>                   DynamicParams;                                              // 0x0038   (0x0010)  
	int32_t                                            UpdateFlags;                                                // 0x0048   (0x0004)  
	bool                                               bUsesVelocity : 1;                                          // 0x004C:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x004D   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleParameterDynamic_Seeded
/// Size: 0x0020 (32 bytes) (0x000050 - 0x000070) align 8 pad: 0x0000
class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0050   (0x0020)  
};

/// Class /Script/Engine.ParticleModulePivotOffset
/// Size: 0x0008 (8 bytes) (0x000038 - 0x000040) align 8 pad: 0x0000
class UParticleModulePivotOffset : public UParticleModuleLocationBase
{ 
public:
	FVector2D                                          PivotOffset;                                                // 0x0038   (0x0008)  
};

/// Struct /Script/Engine.ParticleBurst
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FParticleBurst
{ 
	int32_t                                            Count;                                                      // 0x0000   (0x0004)  
	int32_t                                            CountLow;                                                   // 0x0004   (0x0004)  
	float                                              Time;                                                       // 0x0008   (0x0004)  
};

/// Class /Script/Engine.ParticleModuleRequired
/// Size: 0x0110 (272 bytes) (0x000038 - 0x000148) align 8 pad: 0x0000
class UParticleModuleRequired : public UParticleModule
{ 
public:
	class UMaterialInterface*                          Material;                                                   // 0x0038   (0x0008)  
	float                                              MinFacingCameraBlendDistance;                               // 0x0040   (0x0004)  
	float                                              MaxFacingCameraBlendDistance;                               // 0x0044   (0x0004)  
	FVector                                            EmitterOrigin;                                              // 0x0048   (0x000C)  
	FRotator                                           EmitterRotation;                                            // 0x0054   (0x000C)  
	TEnumAsByte<EParticleScreenAlignment>              ScreenAlignment;                                            // 0x0060   (0x0001)  
	bool                                               bUseLocalSpace : 1;                                         // 0x0061:0 (0x0001)  
	bool                                               bKillOnDeactivate : 1;                                      // 0x0061:1 (0x0001)  
	bool                                               bKillOnCompleted : 1;                                       // 0x0061:2 (0x0001)  
	TEnumAsByte<EParticleSortMode>                     SortMode;                                                   // 0x0062   (0x0001)  
	bool                                               bUseLegacyEmitterTime : 1;                                  // 0x0063:0 (0x0001)  
	bool                                               bRemoveHMDRoll : 1;                                         // 0x0063:1 (0x0001)  
	bool                                               bEmitterDurationUseRange : 1;                               // 0x0063:2 (0x0001)  
	float                                              EmitterDuration;                                            // 0x0064   (0x0004)  
	FRawDistributionFloat                              SpawnRate;                                                  // 0x0068   (0x0030)  
	TArray<FParticleBurst>                             BurstList;                                                  // 0x0098   (0x0010)  
	float                                              EmitterDelay;                                               // 0x00A8   (0x0004)  
	float                                              EmitterDelayLow;                                            // 0x00AC   (0x0004)  
	bool                                               bDelayFirstLoopOnly : 1;                                    // 0x00B0:0 (0x0001)  
	TEnumAsByte<EParticleSubUVInterpMethod>            InterpolationMethod;                                        // 0x00B1   (0x0001)  
	bool                                               bScaleUV : 1;                                               // 0x00B2:0 (0x0001)  
	bool                                               bEmitterDelayUseRange : 1;                                  // 0x00B2:1 (0x0001)  
	TEnumAsByte<EParticleBurstMethod>                  ParticleBurstMethod;                                        // 0x00B3   (0x0001)  
	bool                                               bOverrideSystemMacroUV : 1;                                 // 0x00B4:0 (0x0001)  
	bool                                               bUseMaxDrawCount : 1;                                       // 0x00B4:1 (0x0001)  
	TEnumAsByte<EOpacitySourceMode>                    OpacitySourceMode;                                          // 0x00B5   (0x0001)  
	TEnumAsByte<EEmitterNormalsMode>                   EmitterNormalsMode;                                         // 0x00B6   (0x0001)  
	bool                                               bOrbitModuleAffectsVelocityAlignment : 1;                   // 0x00B7:0 (0x0001)  
	int32_t                                            SubImages_Horizontal;                                       // 0x00B8   (0x0004)  
	int32_t                                            SubImages_Vertical;                                         // 0x00BC   (0x0004)  
	float                                              RandomImageTime;                                            // 0x00C0   (0x0004)  
	int32_t                                            RandomImageChanges;                                         // 0x00C4   (0x0004)  
	FVector                                            MacroUVPosition;                                            // 0x00C8   (0x000C)  
	float                                              MacroUVRadius;                                              // 0x00D4   (0x0004)  
	EParticleUVFlipMode                                UVFlippingMode;                                             // 0x00D8   (0x0001)  
	TEnumAsByte<ESubUVBoundingVertexCount>             BoundingMode;                                               // 0x00D9   (0x0001)  
	bool                                               bDurationRecalcEachLoop : 1;                                // 0x00DA:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x00DB   (0x0001)  MISSED
	FVector                                            NormalsSphereCenter;                                        // 0x00DC   (0x000C)  
	float                                              AlphaThreshold;                                             // 0x00E8   (0x0004)  
	int32_t                                            EmitterLoops;                                               // 0x00EC   (0x0004)  
	class UTexture2D*                                  CutoutTexture;                                              // 0x00F0   (0x0008)  
	int32_t                                            MaxDrawCount;                                               // 0x00F8   (0x0004)  
	float                                              EmitterDurationLow;                                         // 0x00FC   (0x0004)  
	FVector                                            NormalsCylinderDirection;                                   // 0x0100   (0x000C)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x010C   (0x0004)  MISSED
	TArray<FName>                                      NamedMaterialOverrides;                                     // 0x0110   (0x0010)  
	unsigned char                                      UnknownData02_7[0x28];                                      // 0x0120   (0x0028)  MISSED
};

/// Class /Script/Engine.ParticleModuleRotation
/// Size: 0x0030 (48 bytes) (0x000038 - 0x000068) align 8 pad: 0x0000
class UParticleModuleRotation : public UParticleModuleRotationBase
{ 
public:
	FRawDistributionFloat                              StartRotation;                                              // 0x0038   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleRotation_Seeded
/// Size: 0x0020 (32 bytes) (0x000068 - 0x000088) align 8 pad: 0x0000
class UParticleModuleRotation_Seeded : public UParticleModuleRotation
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0068   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleRotationOverLifetime
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000070) align 8 pad: 0x0000
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
{ 
public:
	FRawDistributionFloat                              RotationOverLife;                                           // 0x0038   (0x0030)  
	bool                                               Scale : 1;                                                  // 0x0068:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleRotationRate
/// Size: 0x0030 (48 bytes) (0x000038 - 0x000068) align 8 pad: 0x0000
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{ 
public:
	FRawDistributionFloat                              StartRotationRate;                                          // 0x0038   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleRotationRate_Seeded
/// Size: 0x0020 (32 bytes) (0x000068 - 0x000088) align 8 pad: 0x0000
class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0068   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleRotationRateMultiplyLife
/// Size: 0x0030 (48 bytes) (0x000038 - 0x000068) align 8 pad: 0x0000
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{ 
public:
	FRawDistributionFloat                              LifeMultiplier;                                             // 0x0038   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleSizeBase
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UParticleModuleSizeBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleSize
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000080) align 8 pad: 0x0000
class UParticleModuleSize : public UParticleModuleSizeBase
{ 
public:
	FRawDistributionVector                             StartSize;                                                  // 0x0038   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleSize_Seeded
/// Size: 0x0020 (32 bytes) (0x000080 - 0x0000A0) align 8 pad: 0x0000
class UParticleModuleSize_Seeded : public UParticleModuleSize
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0080   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleSizeMultiplyLife
/// Size: 0x0050 (80 bytes) (0x000038 - 0x000088) align 8 pad: 0x0000
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
{ 
public:
	FRawDistributionVector                             LifeMultiplier;                                             // 0x0038   (0x0048)  
	bool                                               MultiplyX : 1;                                              // 0x0080:0 (0x0001)  
	bool                                               MultiplyY : 1;                                              // 0x0080:1 (0x0001)  
	bool                                               MultiplyZ : 1;                                              // 0x0080:2 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleSizeScale
/// Size: 0x0050 (80 bytes) (0x000038 - 0x000088) align 8 pad: 0x0000
class UParticleModuleSizeScale : public UParticleModuleSizeBase
{ 
public:
	FRawDistributionVector                             SizeScale;                                                  // 0x0038   (0x0048)  
	bool                                               EnableX : 1;                                                // 0x0080:0 (0x0001)  
	bool                                               EnableY : 1;                                                // 0x0080:1 (0x0001)  
	bool                                               EnableZ : 1;                                                // 0x0080:2 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleSizeScaleBySpeed
/// Size: 0x0010 (16 bytes) (0x000038 - 0x000048) align 8 pad: 0x0000
class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
{ 
public:
	FVector2D                                          SpeedScale;                                                 // 0x0038   (0x0008)  
	FVector2D                                          MaxScale;                                                   // 0x0040   (0x0008)  
};

/// Class /Script/Engine.ParticleModuleSourceMovement
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000080) align 8 pad: 0x0000
class UParticleModuleSourceMovement : public UParticleModuleLocationBase
{ 
public:
	FRawDistributionVector                             SourceMovementScale;                                        // 0x0038   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleSpawnBase
/// Size: 0x0008 (8 bytes) (0x000038 - 0x000040) align 8 pad: 0x0000
class UParticleModuleSpawnBase : public UParticleModule
{ 
public:
	bool                                               bProcessSpawnRate : 1;                                      // 0x0038:0 (0x0001)  
	bool                                               bProcessBurstList : 1;                                      // 0x0038:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleSpawn
/// Size: 0x00B0 (176 bytes) (0x000040 - 0x0000F0) align 8 pad: 0x0000
class UParticleModuleSpawn : public UParticleModuleSpawnBase
{ 
public:
	FRawDistributionFloat                              Rate;                                                       // 0x0040   (0x0030)  
	FRawDistributionFloat                              RateScale;                                                  // 0x0070   (0x0030)  
	TEnumAsByte<EParticleBurstMethod>                  ParticleBurstMethod;                                        // 0x00A0   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x00A1   (0x0007)  MISSED
	TArray<FParticleBurst>                             BurstList;                                                  // 0x00A8   (0x0010)  
	FRawDistributionFloat                              BurstScale;                                                 // 0x00B8   (0x0030)  
	bool                                               bApplyGlobalSpawnRateScale : 1;                             // 0x00E8:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x00E9   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleSpawnPerUnit
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000080) align 8 pad: 0x0000
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
{ 
public:
	float                                              UnitScalar;                                                 // 0x0040   (0x0004)  
	float                                              MovementTolerance;                                          // 0x0044   (0x0004)  
	FRawDistributionFloat                              SpawnPerUnit;                                               // 0x0048   (0x0030)  
	float                                              MaxFrameDistance;                                           // 0x0078   (0x0004)  
	bool                                               bIgnoreSpawnRateWhenMoving : 1;                             // 0x007C:0 (0x0001)  
	bool                                               bIgnoreMovementAlongX : 1;                                  // 0x007C:1 (0x0001)  
	bool                                               bIgnoreMovementAlongY : 1;                                  // 0x007C:2 (0x0001)  
	bool                                               bIgnoreMovementAlongZ : 1;                                  // 0x007C:3 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x007D   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleSubUVBase
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UParticleModuleSubUVBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleSubUV
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000078) align 8 pad: 0x0000
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{ 
public:
	class USubUVAnimation*                             Animation;                                                  // 0x0038   (0x0008)  
	FRawDistributionFloat                              SubImageIndex;                                              // 0x0040   (0x0030)  
	bool                                               bUseRealTime : 1;                                           // 0x0070:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0071   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleSubUVMovie
/// Size: 0x0040 (64 bytes) (0x000078 - 0x0000B8) align 8 pad: 0x0000
class UParticleModuleSubUVMovie : public UParticleModuleSubUV
{ 
public:
	bool                                               bUseEmitterTime : 1;                                        // 0x0078:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0079   (0x0007)  MISSED
	FRawDistributionFloat                              FrameRate;                                                  // 0x0080   (0x0030)  
	int32_t                                            StartingFrame;                                              // 0x00B0   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x00B4   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleTrailBase
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UParticleModuleTrailBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleTrailSource
/// Size: 0x0060 (96 bytes) (0x000038 - 0x000098) align 8 pad: 0x0000
class UParticleModuleTrailSource : public UParticleModuleTrailBase
{ 
public:
	TEnumAsByte<ETrail2SourceMethod>                   SourceMethod;                                               // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	FName                                              SourceName;                                                 // 0x003C   (0x000C)  
	FRawDistributionFloat                              SourceStrength;                                             // 0x0048   (0x0030)  
	bool                                               bLockSourceStength : 1;                                     // 0x0078:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0079   (0x0003)  MISSED
	int32_t                                            SourceOffsetCount;                                          // 0x007C   (0x0004)  
	TArray<FVector>                                    SourceOffsetDefaults;                                       // 0x0080   (0x0010)  
	TEnumAsByte<EParticleSourceSelectionMethod>        SelectionMethod;                                            // 0x0090   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0091   (0x0003)  MISSED
	bool                                               bInheritRotation : 1;                                       // 0x0094:0 (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x0095   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleTypeDataBase
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UParticleModuleTypeDataBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleTypeDataAnimTrail
/// Size: 0x0018 (24 bytes) (0x000038 - 0x000050) align 8 pad: 0x0000
class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
{ 
public:
	bool                                               bDeadTrailsOnDeactivate : 1;                                // 0x0038:0 (0x0001)  
	bool                                               bEnablePreviousTangentRecalculation : 1;                    // 0x0038:1 (0x0001)  
	bool                                               bTangentRecalculationEveryFrame : 1;                        // 0x0038:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0039   (0x0003)  MISSED
	float                                              TilingDistance;                                             // 0x003C   (0x0004)  
	float                                              DistanceTessellationStepSize;                               // 0x0040   (0x0004)  
	float                                              TangentTessellationStepSize;                                // 0x0044   (0x0004)  
	float                                              WidthTessellationStepSize;                                  // 0x0048   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleTypeDataBeam2
/// Size: 0x0120 (288 bytes) (0x000038 - 0x000158) align 8 pad: 0x0000
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
{ 
public:
	TEnumAsByte<EBeam2Method>                          BeamMethod;                                                 // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	int32_t                                            TextureTile;                                                // 0x003C   (0x0004)  
	float                                              TextureTileDistance;                                        // 0x0040   (0x0004)  
	int32_t                                            Sheets;                                                     // 0x0044   (0x0004)  
	int32_t                                            MaxBeamCount;                                               // 0x0048   (0x0004)  
	float                                              Speed;                                                      // 0x004C   (0x0004)  
	int32_t                                            InterpolationPoints;                                        // 0x0050   (0x0004)  
	bool                                               bAlwaysOn : 1;                                              // 0x0054:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0055   (0x0003)  MISSED
	int32_t                                            UpVectorStepSize;                                           // 0x0058   (0x0004)  
	FName                                              BranchParentName;                                           // 0x005C   (0x000C)  
	FRawDistributionFloat                              Distance;                                                   // 0x0068   (0x0030)  
	TEnumAsByte<EBeamTaperMethod>                      TaperMethod;                                                // 0x0098   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0099   (0x0007)  MISSED
	FRawDistributionFloat                              TaperFactor;                                                // 0x00A0   (0x0030)  
	FRawDistributionFloat                              TaperScale;                                                 // 0x00D0   (0x0030)  
	bool                                               RenderGeometry : 1;                                         // 0x0100:0 (0x0001)  
	bool                                               RenderDirectLine : 1;                                       // 0x0100:1 (0x0001)  
	bool                                               RenderLines : 1;                                            // 0x0100:2 (0x0001)  
	bool                                               RenderTessellation : 1;                                     // 0x0100:3 (0x0001)  
	unsigned char                                      UnknownData03_7[0x57];                                      // 0x0101   (0x0057)  MISSED
};

/// Struct /Script/Engine.GPUSpriteLocalVectorFieldInfo
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align 16 pad: 0x0000
struct FGPUSpriteLocalVectorFieldInfo
{ 
	class UVectorField*                                Field;                                                      // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0008   (0x0008)  MISSED
	FTransform                                         Transform;                                                  // 0x0010   (0x0030)  
	FRotator                                           MinInitialRotation;                                         // 0x0040   (0x000C)  
	FRotator                                           MaxInitialRotation;                                         // 0x004C   (0x000C)  
	FRotator                                           RotationRate;                                               // 0x0058   (0x000C)  
	float                                              Intensity;                                                  // 0x0064   (0x0004)  
	float                                              Tightness;                                                  // 0x0068   (0x0004)  
	bool                                               bIgnoreComponentTransform : 1;                              // 0x006C:0 (0x0001)  
	bool                                               bTileX : 1;                                                 // 0x006C:1 (0x0001)  
	bool                                               bTileY : 1;                                                 // 0x006C:2 (0x0001)  
	bool                                               bTileZ : 1;                                                 // 0x006C:3 (0x0001)  
	bool                                               bUseFixDT : 1;                                              // 0x006C:4 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x006D   (0x0003)  MISSED
};

/// Struct /Script/Engine.FloatDistribution
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FFloatDistribution
{ 
	FDistributionLookupTable                           Table;                                                      // 0x0000   (0x0020)  
};

/// Struct /Script/Engine.GPUSpriteEmitterInfo
/// Size: 0x0280 (640 bytes) (0x000000 - 0x000280) align 16 pad: 0x0000
struct FGPUSpriteEmitterInfo
{ 
	class UParticleModuleRequired*                     RequiredModule;                                             // 0x0000   (0x0008)  
	class UParticleModuleSpawn*                        SpawnModule;                                                // 0x0008   (0x0008)  
	class UParticleModuleSpawnPerUnit*                 SpawnPerUnitModule;                                         // 0x0010   (0x0008)  
	TArray<class UParticleModule*>                     SpawnModules;                                               // 0x0018   (0x0010)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0028   (0x0008)  MISSED
	FGPUSpriteLocalVectorFieldInfo                     LocalVectorField;                                           // 0x0030   (0x0070)  
	FFloatDistribution                                 VectorFieldScale;                                           // 0x00A0   (0x0020)  
	FFloatDistribution                                 DragCoefficient;                                            // 0x00C0   (0x0020)  
	FFloatDistribution                                 PointAttractorStrength;                                     // 0x00E0   (0x0020)  
	FFloatDistribution                                 Resilience;                                                 // 0x0100   (0x0020)  
	FVector                                            ConstantAcceleration;                                       // 0x0120   (0x000C)  
	FVector                                            PointAttractorPosition;                                     // 0x012C   (0x000C)  
	float                                              PointAttractorRadiusSq;                                     // 0x0138   (0x0004)  
	FVector                                            OrbitOffsetBase;                                            // 0x013C   (0x000C)  
	FVector                                            OrbitOffsetRange;                                           // 0x0148   (0x000C)  
	FVector2D                                          InvMaxSize;                                                 // 0x0154   (0x0008)  
	float                                              InvRotationRateScale;                                       // 0x015C   (0x0004)  
	float                                              MaxLifetime;                                                // 0x0160   (0x0004)  
	int32_t                                            MaxParticleCount;                                           // 0x0164   (0x0004)  
	TEnumAsByte<EParticleScreenAlignment>              ScreenAlignment;                                            // 0x0168   (0x0001)  
	TEnumAsByte<EParticleAxisLock>                     LockAxisFlag;                                               // 0x0169   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x016A   (0x0002)  MISSED
	bool                                               bEnableCollision : 1;                                       // 0x016C:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x016D   (0x0003)  MISSED
	TEnumAsByte<EParticleCollisionMode>                CollisionMode;                                              // 0x0170   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0171   (0x0003)  MISSED
	bool                                               bRemoveHMDRoll : 1;                                         // 0x0174:0 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0175   (0x0003)  MISSED
	float                                              MinFacingCameraBlendDistance;                               // 0x0178   (0x0004)  
	float                                              MaxFacingCameraBlendDistance;                               // 0x017C   (0x0004)  
	FRawDistributionVector                             DynamicColor;                                               // 0x0180   (0x0048)  
	FRawDistributionFloat                              DynamicAlpha;                                               // 0x01C8   (0x0030)  
	FRawDistributionVector                             DynamicColorScale;                                          // 0x01F8   (0x0048)  
	FRawDistributionFloat                              DynamicAlphaScale;                                          // 0x0240   (0x0030)  
	unsigned char                                      UnknownData05_7[0x10];                                      // 0x0270   (0x0010)  MISSED
};

/// Struct /Script/Engine.GPUSpriteResourceData
/// Size: 0x0160 (352 bytes) (0x000000 - 0x000160) align 16 pad: 0x0000
struct FGPUSpriteResourceData
{ 
	TArray<FColor>                                     QuantizedColorSamples;                                      // 0x0000   (0x0010)  
	TArray<FColor>                                     QuantizedMiscSamples;                                       // 0x0010   (0x0010)  
	TArray<FColor>                                     QuantizedSimulationAttrSamples;                             // 0x0020   (0x0010)  
	FVector4                                           ColorScale;                                                 // 0x0030   (0x0010)  
	FVector4                                           ColorBias;                                                  // 0x0040   (0x0010)  
	FVector4                                           MiscScale;                                                  // 0x0050   (0x0010)  
	FVector4                                           MiscBias;                                                   // 0x0060   (0x0010)  
	FVector4                                           SimulationAttrCurveScale;                                   // 0x0070   (0x0010)  
	FVector4                                           SimulationAttrCurveBias;                                    // 0x0080   (0x0010)  
	FVector4                                           SubImageSize;                                               // 0x0090   (0x0010)  
	FVector4                                           SizeBySpeed;                                                // 0x00A0   (0x0010)  
	FVector                                            ConstantAcceleration;                                       // 0x00B0   (0x000C)  
	FVector                                            OrbitOffsetBase;                                            // 0x00BC   (0x000C)  
	FVector                                            OrbitOffsetRange;                                           // 0x00C8   (0x000C)  
	FVector                                            OrbitFrequencyBase;                                         // 0x00D4   (0x000C)  
	FVector                                            OrbitFrequencyRange;                                        // 0x00E0   (0x000C)  
	FVector                                            OrbitPhaseBase;                                             // 0x00EC   (0x000C)  
	FVector                                            OrbitPhaseRange;                                            // 0x00F8   (0x000C)  
	float                                              GlobalVectorFieldScale;                                     // 0x0104   (0x0004)  
	float                                              GlobalVectorFieldTightness;                                 // 0x0108   (0x0004)  
	float                                              PerParticleVectorFieldScale;                                // 0x010C   (0x0004)  
	float                                              PerParticleVectorFieldBias;                                 // 0x0110   (0x0004)  
	float                                              DragCoefficientScale;                                       // 0x0114   (0x0004)  
	float                                              DragCoefficientBias;                                        // 0x0118   (0x0004)  
	float                                              ResilienceScale;                                            // 0x011C   (0x0004)  
	float                                              ResilienceBias;                                             // 0x0120   (0x0004)  
	float                                              CollisionRadiusScale;                                       // 0x0124   (0x0004)  
	float                                              CollisionRadiusBias;                                        // 0x0128   (0x0004)  
	float                                              CollisionTimeBias;                                          // 0x012C   (0x0004)  
	float                                              CollisionRandomSpread;                                      // 0x0130   (0x0004)  
	float                                              CollisionRandomDistribution;                                // 0x0134   (0x0004)  
	float                                              OneMinusFriction;                                           // 0x0138   (0x0004)  
	float                                              RotationRateScale;                                          // 0x013C   (0x0004)  
	float                                              CameraMotionBlurAmount;                                     // 0x0140   (0x0004)  
	TEnumAsByte<EParticleScreenAlignment>              ScreenAlignment;                                            // 0x0144   (0x0001)  
	TEnumAsByte<EParticleAxisLock>                     LockAxisFlag;                                               // 0x0145   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0146   (0x0002)  MISSED
	FVector2D                                          PivotOffset;                                                // 0x0148   (0x0008)  
	bool                                               bRemoveHMDRoll : 1;                                         // 0x0150:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0151   (0x0003)  MISSED
	float                                              MinFacingCameraBlendDistance;                               // 0x0154   (0x0004)  
	float                                              MaxFacingCameraBlendDistance;                               // 0x0158   (0x0004)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x015C   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleTypeDataGpu
/// Size: 0x03F8 (1016 bytes) (0x000038 - 0x000430) align 16 pad: 0x0000
class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0038   (0x0008)  MISSED
	FGPUSpriteEmitterInfo                              EmitterInfo;                                                // 0x0040   (0x0280)  
	FGPUSpriteResourceData                             ResourceData;                                               // 0x02C0   (0x0160)  
	float                                              CameraMotionBlurAmount;                                     // 0x0420   (0x0004)  
	bool                                               bClearExistingParticlesOnInit : 1;                          // 0x0424:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0xB];                                       // 0x0425   (0x000B)  MISSED
};

/// Class /Script/Engine.ParticleModuleTypeDataMesh
/// Size: 0x0068 (104 bytes) (0x000038 - 0x0000A0) align 8 pad: 0x0000
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
{ 
public:
	class UStaticMesh*                                 Mesh;                                                       // 0x0038   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0040   (0x0008)  MISSED
	float                                              LODSizeScale;                                               // 0x0048   (0x0004)  
	bool                                               bUseStaticMeshLODs : 1;                                     // 0x004C:0 (0x0001)  
	bool                                               CastShadows : 1;                                            // 0x004C:1 (0x0001)  
	bool                                               DoCollisions : 1;                                           // 0x004C:2 (0x0001)  
	TEnumAsByte<EMeshScreenAlignment>                  MeshAlignment;                                              // 0x004D   (0x0001)  
	bool                                               bOverrideMaterial : 1;                                      // 0x004E:0 (0x0001)  
	bool                                               bOverrideDefaultMotionBlurSettings : 1;                     // 0x004E:1 (0x0001)  
	bool                                               bEnableMotionBlur : 1;                                      // 0x004E:2 (0x0001)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x004F   (0x0001)  MISSED
	FRawDistributionVector                             RollPitchYawRange;                                          // 0x0050   (0x0048)  
	TEnumAsByte<EParticleAxisLock>                     AxisLockOption;                                             // 0x0098   (0x0001)  
	bool                                               bCameraFacing : 1;                                          // 0x0099:0 (0x0001)  
	TEnumAsByte<EMeshCameraFacingUpAxis>               CameraFacingUpAxisOption;                                   // 0x009A   (0x0001)  
	TEnumAsByte<EMeshCameraFacingOptions>              CameraFacingOption;                                         // 0x009B   (0x0001)  
	bool                                               bApplyParticleRotationAsSpin : 1;                           // 0x009C:0 (0x0001)  
	bool                                               bFaceCameraDirectionRatherThanPosition : 1;                 // 0x009C:1 (0x0001)  
	bool                                               bCollisionsConsiderPartilceSize : 1;                        // 0x009C:2 (0x0001)  
	unsigned char                                      UnknownData02_7[0x3];                                       // 0x009D   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleTypeDataRibbon
/// Size: 0x0030 (48 bytes) (0x000038 - 0x000068) align 8 pad: 0x0000
class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
{ 
public:
	int32_t                                            MaxTessellationBetweenParticles;                            // 0x0038   (0x0004)  
	int32_t                                            SheetsPerTrail;                                             // 0x003C   (0x0004)  
	int32_t                                            MaxTrailCount;                                              // 0x0040   (0x0004)  
	int32_t                                            MaxParticleInTrailCount;                                    // 0x0044   (0x0004)  
	bool                                               bDeadTrailsOnDeactivate : 1;                                // 0x0048:0 (0x0001)  
	bool                                               bDeadTrailsOnSourceLoss : 1;                                // 0x0048:1 (0x0001)  
	bool                                               bClipSourceSegement : 1;                                    // 0x0048:2 (0x0001)  
	bool                                               bEnablePreviousTangentRecalculation : 1;                    // 0x0048:3 (0x0001)  
	bool                                               bTangentRecalculationEveryFrame : 1;                        // 0x0048:4 (0x0001)  
	bool                                               bSpawnInitialParticle : 1;                                  // 0x0048:5 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0049   (0x0003)  MISSED
	TEnumAsByte<ETrailsRenderAxisOption>               RenderAxis;                                                 // 0x004C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x004D   (0x0003)  MISSED
	float                                              TangentSpawningScalar;                                      // 0x0050   (0x0004)  
	bool                                               bRenderGeometry : 1;                                        // 0x0054:0 (0x0001)  
	bool                                               bRenderSpawnPoints : 1;                                     // 0x0054:1 (0x0001)  
	bool                                               bRenderTangents : 1;                                        // 0x0054:2 (0x0001)  
	bool                                               bRenderTessellation : 1;                                    // 0x0054:3 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0055   (0x0003)  MISSED
	float                                              TilingDistance;                                             // 0x0058   (0x0004)  
	float                                              DistanceTessellationStepSize;                               // 0x005C   (0x0004)  
	bool                                               bEnableTangentDiffInterpScale : 1;                          // 0x0060:0 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0061   (0x0003)  MISSED
	float                                              TangentTessellationScalar;                                  // 0x0064   (0x0004)  
};

/// Class /Script/Engine.ParticleModuleVectorFieldBase
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UParticleModuleVectorFieldBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleVectorFieldGlobal
/// Size: 0x0010 (16 bytes) (0x000038 - 0x000048) align 8 pad: 0x0000
class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
{ 
public:
	bool                                               bOverrideGlobalVectorFieldTightness : 1;                    // 0x0038:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0039   (0x0003)  MISSED
	float                                              GlobalVectorFieldScale;                                     // 0x003C   (0x0004)  
	float                                              GlobalVectorFieldTightness;                                 // 0x0040   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleVectorFieldLocal
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000070) align 8 pad: 0x0000
class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
{ 
public:
	class UVectorField*                                VectorField;                                                // 0x0038   (0x0008)  
	FVector                                            RelativeTranslation;                                        // 0x0040   (0x000C)  
	FRotator                                           RelativeRotation;                                           // 0x004C   (0x000C)  
	FVector                                            RelativeScale3D;                                            // 0x0058   (0x000C)  
	float                                              Intensity;                                                  // 0x0064   (0x0004)  
	float                                              Tightness;                                                  // 0x0068   (0x0004)  
	bool                                               bIgnoreComponentTransform : 1;                              // 0x006C:0 (0x0001)  
	bool                                               bTileX : 1;                                                 // 0x006C:1 (0x0001)  
	bool                                               bTileY : 1;                                                 // 0x006C:2 (0x0001)  
	bool                                               bTileZ : 1;                                                 // 0x006C:3 (0x0001)  
	bool                                               bUseFixDT : 1;                                              // 0x006C:4 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x006D   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleVectorFieldRotation
/// Size: 0x0018 (24 bytes) (0x000038 - 0x000050) align 8 pad: 0x0000
class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
{ 
public:
	FVector                                            MinInitialRotation;                                         // 0x0038   (0x000C)  
	FVector                                            MaxInitialRotation;                                         // 0x0044   (0x000C)  
};

/// Class /Script/Engine.ParticleModuleVectorFieldRotationRate
/// Size: 0x0010 (16 bytes) (0x000038 - 0x000048) align 8 pad: 0x0000
class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
{ 
public:
	FVector                                            RotationRate;                                               // 0x0038   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleVectorFieldScale
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000070) align 8 pad: 0x0000
class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
{ 
public:
	class UDistributionFloat*                          VectorFieldScale;                                           // 0x0038   (0x0008)  
	FRawDistributionFloat                              VectorFieldScaleRaw;                                        // 0x0040   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleVectorFieldScaleOverLife
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000070) align 8 pad: 0x0000
class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
{ 
public:
	class UDistributionFloat*                          VectorFieldScaleOverLife;                                   // 0x0038   (0x0008)  
	FRawDistributionFloat                              VectorFieldScaleOverLifeRaw;                                // 0x0040   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleVelocityBase
/// Size: 0x0008 (8 bytes) (0x000038 - 0x000040) align 8 pad: 0x0000
class UParticleModuleVelocityBase : public UParticleModule
{ 
public:
	bool                                               bInWorldSpace : 1;                                          // 0x0038:0 (0x0001)  
	bool                                               bApplyOwnerScale : 1;                                       // 0x0038:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleVelocity
/// Size: 0x0078 (120 bytes) (0x000040 - 0x0000B8) align 8 pad: 0x0000
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{ 
public:
	FRawDistributionVector                             StartVelocity;                                              // 0x0040   (0x0048)  
	FRawDistributionFloat                              StartVelocityRadial;                                        // 0x0088   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleVelocity_Seeded
/// Size: 0x0020 (32 bytes) (0x0000B8 - 0x0000D8) align 8 pad: 0x0000
class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x00B8   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleVelocityCone
/// Size: 0x0070 (112 bytes) (0x000040 - 0x0000B0) align 8 pad: 0x0000
class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
{ 
public:
	FRawDistributionFloat                              Angle;                                                      // 0x0040   (0x0030)  
	FRawDistributionFloat                              Velocity;                                                   // 0x0070   (0x0030)  
	FVector                                            Direction;                                                  // 0x00A0   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x00AC   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleVelocityInheritParent
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000088) align 8 pad: 0x0000
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
{ 
public:
	FRawDistributionVector                             Scale;                                                      // 0x0040   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleVelocityOverLifetime
/// Size: 0x0050 (80 bytes) (0x000040 - 0x000090) align 8 pad: 0x0000
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
{ 
public:
	FRawDistributionVector                             VelOverLife;                                                // 0x0040   (0x0048)  
	bool                                               Absolute : 1;                                               // 0x0088:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0089   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleSpriteEmitter
/// Size: 0x0000 (0 bytes) (0x0001C0 - 0x0001C0) align 8 pad: 0x0000
class UParticleSpriteEmitter : public UParticleEmitter
{ 
public:
};

/// Struct /Script/Engine.ParticleSystemLOD
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FParticleSystemLOD
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.LODSoloTrack
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FLODSoloTrack
{ 
	TArray<char>                                       SoloEnableSetting;                                          // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.NamedEmitterMaterial
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FNamedEmitterMaterial
{ 
	FName                                              Name;                                                       // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	class UMaterialInterface*                          Material;                                                   // 0x0010   (0x0008)  
};

/// Class /Script/Engine.ParticleSystem
/// Size: 0x00E0 (224 bytes) (0x000038 - 0x000118) align 8 pad: 0x0000
class UParticleSystem : public UFXSystemAsset
{ 
public:
	float                                              UpdateTime_FPS;                                             // 0x0038   (0x0004)  
	float                                              UpdateTime_Delta;                                           // 0x003C   (0x0004)  
	float                                              WarmupTime;                                                 // 0x0040   (0x0004)  
	float                                              WarmupTickRate;                                             // 0x0044   (0x0004)  
	TArray<class UParticleEmitter*>                    Emitters;                                                   // 0x0048   (0x0010)  
	class UParticleSystemComponent*                    PreviewComponent;                                           // 0x0058   (0x0008)  
	class UInterpCurveEdSetup*                         CurveEdSetup;                                               // 0x0060   (0x0008)  
	float                                              LODDistanceCheckTime;                                       // 0x0068   (0x0004)  
	float                                              MacroUVRadius;                                              // 0x006C   (0x0004)  
	TArray<float>                                      LODDistances;                                               // 0x0070   (0x0010)  
	TArray<FParticleSystemLOD>                         LODSettings;                                                // 0x0080   (0x0010)  
	FBox                                               FixedRelativeBoundingBox;                                   // 0x0090   (0x001C)  
	float                                              SecondsBeforeInactive;                                      // 0x00AC   (0x0004)  
	float                                              delay;                                                      // 0x00B0   (0x0004)  
	float                                              DelayLow;                                                   // 0x00B4   (0x0004)  
	bool                                               bOrientZAxisTowardCamera : 1;                               // 0x00B8:0 (0x0001)  
	bool                                               bUseFixedRelativeBoundingBox : 1;                           // 0x00B8:1 (0x0001)  
	bool                                               bShouldResetPeakCounts : 1;                                 // 0x00B8:2 (0x0001)  
	bool                                               bHasPhysics : 1;                                            // 0x00B8:3 (0x0001)  
	bool                                               bUseRealtimeThumbnail : 1;                                  // 0x00B8:4 (0x0001)  
	bool                                               ThumbnailImageOutOfDate : 1;                                // 0x00B8:5 (0x0001)  
	unsigned char                                      UnknownBit00 : 1;                                           // 0x00B8:6 (0x0001)  MISSED
	unsigned char                                      UnknownBit01 : 1;                                           // 0x00B8:7 (0x0001)  MISSED
	bool                                               bUseDelayRange : 1;                                         // 0x00B9:0 (0x0001)  
	bool                                               bAllowManagedTicking : 1;                                   // 0x00B9:1 (0x0001)  
	bool                                               bAutoDeactivate : 1;                                        // 0x00B9:2 (0x0001)  
	bool                                               bRegenerateLODDuplicate : 1;                                // 0x00B9:3 (0x0001)  
	TEnumAsByte<EParticleSystemUpdateMode>             SystemUpdateMode;                                           // 0x00BA   (0x0001)  
	TEnumAsByte<ParticleSystemLODMethod>               LODMethod;                                                  // 0x00BB   (0x0001)  
	EParticleSystemInsignificanceReaction              InsignificantReaction;                                      // 0x00BC   (0x0001)  
	TEnumAsByte<EParticleSystemOcclusionBoundsMethod>  OcclusionBoundsMethod;                                      // 0x00BD   (0x0001)  
	unsigned char                                      UnknownData02_6[0x1];                                       // 0x00BE   (0x0001)  MISSED
	EParticleSignificanceLevel                         MaxSignificanceLevel;                                       // 0x00BF   (0x0001)  
	uint32_t                                           MinTimeBetweenTicks;                                        // 0x00C0   (0x0004)  
	float                                              InsignificanceDelay;                                        // 0x00C4   (0x0004)  
	FVector                                            MacroUVPosition;                                            // 0x00C8   (0x000C)  
	FBox                                               CustomOcclusionBounds;                                      // 0x00D4   (0x001C)  
	TArray<FLODSoloTrack>                              SoloTracking;                                               // 0x00F0   (0x0010)  
	TArray<FNamedEmitterMaterial>                      NamedMaterialSlots;                                         // 0x0100   (0x0010)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0110   (0x0008)  MISSED
	// bool ContainsEmitterType(class UClass* TypeData);                                                                        // [0x46f2360] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.ParticleSysParam
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align 16 pad: 0x0000
struct FParticleSysParam
{ 
	FName                                              Name;                                                       // 0x0000   (0x000C)  
	TEnumAsByte<EParticleSysParamType>                 ParamType;                                                  // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	float                                              Scalar;                                                     // 0x0010   (0x0004)  
	float                                              Scalar_Low;                                                 // 0x0014   (0x0004)  
	FVector                                            Vector;                                                     // 0x0018   (0x000C)  
	FVector                                            Vector_Low;                                                 // 0x0024   (0x000C)  
	FColor                                             Color;                                                      // 0x0030   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0034   (0x0004)  MISSED
	class AActor*                                      Actor;                                                      // 0x0038   (0x0008)  
	class UMaterialInterface*                          Material;                                                   // 0x0040   (0x0008)  
	unsigned char                                      UnknownData02_7[0x48];                                      // 0x0048   (0x0048)  MISSED
};

/// Class /Script/Engine.ParticleSystemComponent
/// Size: 0x0270 (624 bytes) (0x0004E0 - 0x000750) align 16 pad: 0x0000
class UParticleSystemComponent : public UFXSystemComponent
{ 
public:
	class UParticleSystem*                             Template;                                                   // 0x04E0   (0x0008)  
	TArray<class UMaterialInterface*>                  EmitterMaterials;                                           // 0x04E8   (0x0010)  
	TArray<class USkeletalMeshComponent*>              SkelMeshComponents;                                         // 0x04F8   (0x0010)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0508   (0x0001)  MISSED
	bool                                               bResetOnDetach : 1;                                         // 0x0509:0 (0x0001)  
	bool                                               bUpdateOnDedicatedServer : 1;                               // 0x0509:1 (0x0001)  
	unsigned char                                      UnknownBit01 : 1;                                           // 0x0509:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit02 : 1;                                           // 0x0509:3 (0x0001)  MISSED
	bool                                               bAllowRecycling : 1;                                        // 0x0509:4 (0x0001)  
	bool                                               bAutoManageAttachment : 1;                                  // 0x0509:5 (0x0001)  
	bool                                               bAutoAttachWeldSimulatedBodies : 1;                         // 0x0509:6 (0x0001)  
	unsigned char                                      UnknownBit03 : 1;                                           // 0x0509:7 (0x0001)  MISSED
	unsigned char                                      UnknownBit04 : 1;                                           // 0x050A:0 (0x0001)  MISSED
	bool                                               bWarmingUp : 1;                                             // 0x050A:1 (0x0001)  
	bool                                               bOverrideLODMethod : 1;                                     // 0x050A:2 (0x0001)  
	bool                                               bSkipUpdateDynamicDataDuringTick : 1;                       // 0x050A:3 (0x0001)  
	unsigned char                                      UnknownData05_5[0xA];                                       // 0x050B   (0x000A)  MISSED
	TEnumAsByte<ParticleSystemLODMethod>               LODMethod;                                                  // 0x0515   (0x0001)  
	EParticleSignificanceLevel                         RequiredSignificance;                                       // 0x0516   (0x0001)  
	unsigned char                                      UnknownData06_6[0x1];                                       // 0x0517   (0x0001)  MISSED
	TArray<FParticleSysParam>                          InstanceParameters;                                         // 0x0518   (0x0010)  
	SDK_UNDEFINED(16,185) /* FMulticastInlineDelegate */ __um(OnParticleSpawn);                                    // 0x0528   (0x0010)  
	SDK_UNDEFINED(16,186) /* FMulticastInlineDelegate */ __um(OnParticleBurst);                                    // 0x0538   (0x0010)  
	SDK_UNDEFINED(16,187) /* FMulticastInlineDelegate */ __um(OnParticleDeath);                                    // 0x0548   (0x0010)  
	SDK_UNDEFINED(16,188) /* FMulticastInlineDelegate */ __um(OnParticleCollide);                                  // 0x0558   (0x0010)  
	bool                                               bOldPositionValid;                                          // 0x0568   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0569   (0x0003)  MISSED
	FVector                                            OldPosition;                                                // 0x056C   (0x000C)  
	FVector                                            PartSysVelocity;                                            // 0x0578   (0x000C)  
	float                                              WarmupTime;                                                 // 0x0584   (0x0004)  
	float                                              WarmupTickRate;                                             // 0x0588   (0x0004)  
	unsigned char                                      UnknownData08_6[0x4];                                       // 0x058C   (0x0004)  MISSED
	float                                              SecondsBeforeInactive;                                      // 0x0590   (0x0004)  
	unsigned char                                      UnknownData09_6[0x4];                                       // 0x0594   (0x0004)  MISSED
	float                                              MaxTimeBeforeForceUpdateTransform;                          // 0x0598   (0x0004)  
	unsigned char                                      UnknownData10_6[0x1C];                                      // 0x059C   (0x001C)  MISSED
	TArray<class UParticleSystemReplay*>               ReplayClips;                                                // 0x05B8   (0x0010)  
	unsigned char                                      UnknownData11_6[0x8];                                       // 0x05C8   (0x0008)  MISSED
	float                                              CustomTimeDilation;                                         // 0x05D0   (0x0004)  
	unsigned char                                      UnknownData12_6[0x54];                                      // 0x05D4   (0x0054)  MISSED
	SDK_UNDEFINED(8,189) /* TWeakObjectPtr<USceneComponent*> */ __um(AutoAttachParent);                            // 0x0628   (0x0008)  
	FName                                              AutoAttachSocketName;                                       // 0x0630   (0x000C)  
	EAttachmentRule                                    AutoAttachLocationRule;                                     // 0x063C   (0x0001)  
	EAttachmentRule                                    AutoAttachRotationRule;                                     // 0x063D   (0x0001)  
	EAttachmentRule                                    AutoAttachScaleRule;                                        // 0x063E   (0x0001)  
	unsigned char                                      UnknownData13_6[0x31];                                      // 0x063F   (0x0031)  MISSED
	SDK_UNDEFINED(16,190) /* FMulticastInlineDelegate */ __um(OnSystemFinished);                                   // 0x0670   (0x0010)  
	unsigned char                                      UnknownData14_7[0xD0];                                      // 0x0680   (0x00D0)  MISSED
	// void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth); // [0x46f4190] Final|Native|Public|BlueprintCallable 
	// void SetTemplate(class UParticleSystem* NewTemplate);                                                                    // [0x46f4100] Final|Native|Public|BlueprintCallable 
	// void SetMaterialParameter(FName ParameterName, class UMaterialInterface* Param);                                         // [0x46f4010] Final|Native|Public|BlueprintCallable 
	// void SetBeamTargetTangent(int32_t EmitterIndex, FVector NewTangentPoint, int32_t TargetIndex);                           // [0x46f3a40] Native|Public|HasDefaults|BlueprintCallable 
	// void SetBeamTargetStrength(int32_t EmitterIndex, float NewTargetStrength, int32_t TargetIndex);                          // [0x46f3930] Native|Public|BlueprintCallable 
	// void SetBeamTargetPoint(int32_t EmitterIndex, FVector NewTargetPoint, int32_t TargetIndex);                              // [0x46f3810] Native|Public|HasDefaults|BlueprintCallable 
	// void SetBeamSourceTangent(int32_t EmitterIndex, FVector NewTangentPoint, int32_t SourceIndex);                           // [0x46f36f0] Native|Public|HasDefaults|BlueprintCallable 
	// void SetBeamSourceStrength(int32_t EmitterIndex, float NewSourceStrength, int32_t SourceIndex);                          // [0x46f35e0] Native|Public|BlueprintCallable 
	// void SetBeamSourcePoint(int32_t EmitterIndex, FVector NewSourcePoint, int32_t SourceIndex);                              // [0x46f34c0] Native|Public|HasDefaults|BlueprintCallable 
	// void SetBeamEndPoint(int32_t EmitterIndex, FVector NewEndPoint);                                                         // [0x46f33e0] Native|Public|HasDefaults|BlueprintCallable 
	// void SetAutoAttachParams(class USceneComponent* Parent, FName SocketName, TEnumAsByte<EAttachLocation> LocationType);    // [0x46f30e0] Final|Native|Public|BlueprintCallable 
	// int32_t GetNumActiveParticles();                                                                                         // [0x46f2fa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UMaterialInterface* GetNamedMaterial(FName InName);                                                                // [0x46f2ee0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool GetBeamTargetTangent(int32_t EmitterIndex, int32_t TargetIndex, FVector& OutTangentPoint);                          // [0x46f2d90] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// bool GetBeamTargetStrength(int32_t EmitterIndex, int32_t TargetIndex, float& OutTargetStrength);                         // [0x46f2c70] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// bool GetBeamTargetPoint(int32_t EmitterIndex, int32_t TargetIndex, FVector& OutTargetPoint);                             // [0x46f2b50] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// bool GetBeamSourceTangent(int32_t EmitterIndex, int32_t SourceIndex, FVector& OutTangentPoint);                          // [0x46f2a30] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// bool GetBeamSourceStrength(int32_t EmitterIndex, int32_t SourceIndex, float& OutSourceStrength);                         // [0x46f2910] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// bool GetBeamSourcePoint(int32_t EmitterIndex, int32_t SourceIndex, FVector& OutSourcePoint);                             // [0x46f27f0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// bool GetBeamEndPoint(int32_t EmitterIndex, FVector& OutEndPoint);                                                        // [0x46f2700] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// void GenerateParticleEvent(FName InEventName, float InEmitterTime, FVector InLocation, FVector InDirection, FVector InVelocity); // [0x46f2520] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void EndTrails();                                                                                                        // [0x46f2500] Final|Native|Public|BlueprintCallable 
	// class UMaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, class UMaterialInterface* SourceMaterial); // [0x46f2400] Native|Public|BlueprintCallable 
	// void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth); // [0x46f21e0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.ParticleSystemReplay
/// Size: 0x0018 (24 bytes) (0x000030 - 0x000048) align 8 pad: 0x0000
class UParticleSystemReplay : public UObject
{ 
public:
	int32_t                                            ClipIDNumber;                                               // 0x0030   (0x0004)  
	unsigned char                                      UnknownData00_7[0x14];                                      // 0x0034   (0x0014)  MISSED
};

/// Class /Script/Engine.PathFollowingAgentInterface
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UPathFollowingAgentInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.PawnNoiseEmitterComponent
/// Size: 0x0028 (40 bytes) (0x0000C0 - 0x0000E8) align 8 pad: 0x0000
class UPawnNoiseEmitterComponent : public UActorComponent
{ 
public:
	bool                                               bAIPerceptionSystemCompatibilityMode : 1;                   // 0x00C0:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x00C1   (0x0003)  MISSED
	FVector                                            LastRemoteNoisePosition;                                    // 0x00C4   (0x000C)  
	float                                              NoiseLifetime;                                              // 0x00D0   (0x0004)  
	float                                              LastRemoteNoiseVolume;                                      // 0x00D4   (0x0004)  
	float                                              LastRemoteNoiseTime;                                        // 0x00D8   (0x0004)  
	float                                              LastLocalNoiseVolume;                                       // 0x00DC   (0x0004)  
	float                                              LastLocalNoiseTime;                                         // 0x00E0   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x00E4   (0x0004)  MISSED
	// void MakeNoise(class AActor* NoiseMaker, float Loudness, FVector& NoiseLocation);                                        // [0x46f82c0] BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.PhysicalAnimationComponent
/// Size: 0x0040 (64 bytes) (0x0000C0 - 0x000100) align 8 pad: 0x0000
class UPhysicalAnimationComponent : public UActorComponent
{ 
public:
	float                                              StrengthMultiplyer;                                         // 0x00C0   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00C4   (0x0004)  MISSED
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                                      // 0x00C8   (0x0008)  
	unsigned char                                      UnknownData01_7[0x30];                                      // 0x00D0   (0x0030)  MISSED
	// void SetStrengthMultiplyer(float InStrengthMultiplyer);                                                                  // [0x46f9e50] Final|Native|Public|BlueprintCallable 
	// void SetSkeletalMeshComponent(class USkeletalMeshComponent* InSkeletalMeshComponent);                                    // [0x46f9dc0] Final|Native|Public|BlueprintCallable 
	// FTransform GetBodyTargetTransform(FName BodyName);                                                                       // [0x46f7bc0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// void ApplyPhysicalAnimationSettingsBelow(FName BodyName, FPhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf); // [0x46f7970] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void ApplyPhysicalAnimationSettings(FName BodyName, FPhysicalAnimationData& PhysicalAnimationData);                      // [0x46f7860] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void ApplyPhysicalAnimationProfileBelow(FName BodyName, FName ProfileName, bool bIncludeSelf, bool bClearNotFound);      // [0x46f76e0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PhysicalMaterialMask
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UPhysicalMaterialMask : public UObject
{ 
public:
	int32_t                                            UVChannelIndex;                                             // 0x0030   (0x0004)  
	TEnumAsByte<TextureAddress>                        AddressX;                                                   // 0x0034   (0x0001)  
	TEnumAsByte<TextureAddress>                        AddressY;                                                   // 0x0035   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x0036   (0x0002)  MISSED
};

/// Struct /Script/Engine.SolverIterations
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FSolverIterations
{ 
	float                                              FixedTimeStep;                                              // 0x0000   (0x0004)  
	int32_t                                            SolverIterations;                                           // 0x0004   (0x0004)  
	int32_t                                            JointIterations;                                            // 0x0008   (0x0004)  
	int32_t                                            CollisionIterations;                                        // 0x000C   (0x0004)  
	int32_t                                            SolverPushOutIterations;                                    // 0x0010   (0x0004)  
	int32_t                                            JointPushOutIterations;                                     // 0x0014   (0x0004)  
	int32_t                                            CollisionPushOutIterations;                                 // 0x0018   (0x0004)  
};

/// Class /Script/Engine.PhysicsAsset
/// Size: 0x0110 (272 bytes) (0x000030 - 0x000140) align 8 pad: 0x0000
class UPhysicsAsset : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0030   (0x0008)  MISSED
	TArray<int32_t>                                    BoundsBodies;                                               // 0x0038   (0x0010)  
	TArray<class USkeletalBodySetup*>                  SkeletalBodySetups;                                         // 0x0048   (0x0010)  
	TArray<class UPhysicsConstraintTemplate*>          ConstraintSetup;                                            // 0x0058   (0x0010)  
	FSolverIterations                                  SolverIterations;                                           // 0x0068   (0x001C)  
	bool                                               bNotForDedicatedServer : 1;                                 // 0x0084:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0xA3];                                      // 0x0085   (0x00A3)  MISSED
	class UThumbnailInfo*                              ThumbnailInfo;                                              // 0x0128   (0x0008)  
	TArray<class UBodySetup*>                          BodySetup;                                                  // 0x0130   (0x0010)  
};

/// Struct /Script/Engine.PhysicalAnimationData
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 4 pad: 0x0000
struct FPhysicalAnimationData
{ 
	FName                                              BodyName;                                                   // 0x0000   (0x000C)  
	bool                                               bIsLocalSimulation : 1;                                     // 0x000C:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x000D   (0x0003)  MISSED
	float                                              OrientationStrength;                                        // 0x0010   (0x0004)  
	float                                              AngularVelocityStrength;                                    // 0x0014   (0x0004)  
	float                                              PositionStrength;                                           // 0x0018   (0x0004)  
	float                                              VelocityStrength;                                           // 0x001C   (0x0004)  
	float                                              MaxLinearForce;                                             // 0x0020   (0x0004)  
	float                                              MaxAngularForce;                                            // 0x0024   (0x0004)  
};

/// Struct /Script/Engine.PhysicalAnimationProfile
/// Size: 0x0034 (52 bytes) (0x000000 - 0x000034) align 4 pad: 0x0000
struct FPhysicalAnimationProfile
{ 
	FName                                              ProfileName;                                                // 0x0000   (0x000C)  
	FPhysicalAnimationData                             PhysicalAnimationData;                                      // 0x000C   (0x0028)  
};

/// Class /Script/Engine.SkeletalBodySetup
/// Size: 0x0018 (24 bytes) (0x0002B0 - 0x0002C8) align 8 pad: 0x0000
class USkeletalBodySetup : public UBodySetup
{ 
public:
	bool                                               bSkipScaleFromAnimation;                                    // 0x02B0   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x02B1   (0x0007)  MISSED
	TArray<FPhysicalAnimationProfile>                  PhysicalAnimationData;                                      // 0x02B8   (0x0010)  
};

/// Class /Script/Engine.PhysicsCollisionHandler
/// Size: 0x0018 (24 bytes) (0x000030 - 0x000048) align 8 pad: 0x0000
class UPhysicsCollisionHandler : public UObject
{ 
public:
	float                                              ImpactThreshold;                                            // 0x0030   (0x0004)  
	float                                              ImpactReFireDelay;                                          // 0x0034   (0x0004)  
	class USoundBase*                                  DefaultImpactSound;                                         // 0x0038   (0x0008)  
	float                                              LastImpactSoundTime;                                        // 0x0040   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Engine.RigidBodyBase
/// Size: 0x0000 (0 bytes) (0x0002A8 - 0x0002A8) align 8 pad: 0x0000
class ARigidBodyBase : public AActor
{ 
public:
};

/// Class /Script/Engine.PhysicsConstraintActor
/// Size: 0x0020 (32 bytes) (0x0002A8 - 0x0002C8) align 8 pad: 0x0000
class APhysicsConstraintActor : public ARigidBodyBase
{ 
public:
	class UPhysicsConstraintComponent*                 ConstraintComp;                                             // 0x02A8   (0x0008)  
	class AActor*                                      ConstraintActor1;                                           // 0x02B0   (0x0008)  
	class AActor*                                      ConstraintActor2;                                           // 0x02B8   (0x0008)  
	bool                                               bDisableCollision : 1;                                      // 0x02C0:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x02C1   (0x0007)  MISSED
};

/// Struct /Script/Engine.ConstrainComponentPropName
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FConstrainComponentPropName
{ 
	FName                                              ComponentName;                                              // 0x0000   (0x000C)  
};

/// Struct /Script/Engine.ConstraintInstanceBase
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FConstraintInstanceBase
{ 
	unsigned char                                      UnknownData00_2[0x18];                                      // 0x0000   (0x0018)  MISSED
};

/// Struct /Script/Engine.ConstraintBaseParams
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FConstraintBaseParams
{ 
	float                                              Stiffness;                                                  // 0x0000   (0x0004)  
	float                                              Damping;                                                    // 0x0004   (0x0004)  
	float                                              Restitution;                                                // 0x0008   (0x0004)  
	float                                              ContactDistance;                                            // 0x000C   (0x0004)  
	bool                                               bSoftConstraint : 1;                                        // 0x0010:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0011   (0x0003)  MISSED
};

/// Struct /Script/Engine.LinearConstraint
/// Size: 0x0008 (8 bytes) (0x000014 - 0x00001C) align 4 pad: 0x0000
struct FLinearConstraint : FConstraintBaseParams
{ 
	float                                              Limit;                                                      // 0x0014   (0x0004)  
	TEnumAsByte<ELinearConstraintMotion>               XMotion;                                                    // 0x0018   (0x0001)  
	TEnumAsByte<ELinearConstraintMotion>               YMotion;                                                    // 0x0019   (0x0001)  
	TEnumAsByte<ELinearConstraintMotion>               ZMotion;                                                    // 0x001A   (0x0001)  
	unsigned char                                      UnknownData00_7[0x1];                                       // 0x001B   (0x0001)  MISSED
};

/// Struct /Script/Engine.ConeConstraint
/// Size: 0x000C (12 bytes) (0x000014 - 0x000020) align 4 pad: 0x0000
struct FConeConstraint : FConstraintBaseParams
{ 
	float                                              Swing1LimitDegrees;                                         // 0x0014   (0x0004)  
	float                                              Swing2LimitDegrees;                                         // 0x0018   (0x0004)  
	TEnumAsByte<EAngularConstraintMotion>              Swing1Motion;                                               // 0x001C   (0x0001)  
	TEnumAsByte<EAngularConstraintMotion>              Swing2Motion;                                               // 0x001D   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x001E   (0x0002)  MISSED
};

/// Struct /Script/Engine.TwistConstraint
/// Size: 0x0008 (8 bytes) (0x000014 - 0x00001C) align 4 pad: 0x0000
struct FTwistConstraint : FConstraintBaseParams
{ 
	float                                              TwistLimitDegrees;                                          // 0x0014   (0x0004)  
	TEnumAsByte<EAngularConstraintMotion>              TwistMotion;                                                // 0x0018   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0019   (0x0003)  MISSED
};

/// Struct /Script/Engine.ConstraintDrive
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FConstraintDrive
{ 
	float                                              Stiffness;                                                  // 0x0000   (0x0004)  
	float                                              Damping;                                                    // 0x0004   (0x0004)  
	float                                              MaxForce;                                                   // 0x0008   (0x0004)  
	bool                                               bEnablePositionDrive : 1;                                   // 0x000C:0 (0x0001)  
	bool                                               bEnableVelocityDrive : 1;                                   // 0x000C:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Struct /Script/Engine.LinearDriveConstraint
/// Size: 0x004C (76 bytes) (0x000000 - 0x00004C) align 4 pad: 0x0000
struct FLinearDriveConstraint
{ 
	FVector                                            PositionTarget;                                             // 0x0000   (0x000C)  
	FVector                                            VelocityTarget;                                             // 0x000C   (0x000C)  
	FConstraintDrive                                   XDrive;                                                     // 0x0018   (0x0010)  
	FConstraintDrive                                   YDrive;                                                     // 0x0028   (0x0010)  
	FConstraintDrive                                   ZDrive;                                                     // 0x0038   (0x0010)  
	bool                                               bEnablePositionDrive : 1;                                   // 0x0048:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0049   (0x0003)  MISSED
};

/// Struct /Script/Engine.AngularDriveConstraint
/// Size: 0x004C (76 bytes) (0x000000 - 0x00004C) align 4 pad: 0x0000
struct FAngularDriveConstraint
{ 
	FConstraintDrive                                   TwistDrive;                                                 // 0x0000   (0x0010)  
	FConstraintDrive                                   SwingDrive;                                                 // 0x0010   (0x0010)  
	FConstraintDrive                                   SlerpDrive;                                                 // 0x0020   (0x0010)  
	FRotator                                           OrientationTarget;                                          // 0x0030   (0x000C)  
	FVector                                            AngularVelocityTarget;                                      // 0x003C   (0x000C)  
	TEnumAsByte<EAngularDriveMode>                     AngularDriveMode;                                           // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0049   (0x0003)  MISSED
};

/// Struct /Script/Engine.ConstraintProfileProperties
/// Size: 0x010C (268 bytes) (0x000000 - 0x00010C) align 4 pad: 0x0000
struct FConstraintProfileProperties
{ 
	float                                              ProjectionLinearTolerance;                                  // 0x0000   (0x0004)  
	float                                              ProjectionAngularTolerance;                                 // 0x0004   (0x0004)  
	float                                              ProjectionLinearAlpha;                                      // 0x0008   (0x0004)  
	float                                              ProjectionAngularAlpha;                                     // 0x000C   (0x0004)  
	float                                              LinearBreakThreshold;                                       // 0x0010   (0x0004)  
	float                                              AngularBreakThreshold;                                      // 0x0014   (0x0004)  
	FLinearConstraint                                  LinearLimit;                                                // 0x0018   (0x001C)  
	FConeConstraint                                    ConeLimit;                                                  // 0x0034   (0x0020)  
	FTwistConstraint                                   TwistLimit;                                                 // 0x0054   (0x001C)  
	FLinearDriveConstraint                             LinearDrive;                                                // 0x0070   (0x004C)  
	FAngularDriveConstraint                            AngularDrive;                                               // 0x00BC   (0x004C)  
	bool                                               bDisableCollision : 1;                                      // 0x0108:0 (0x0001)  
	bool                                               bParentDominates : 1;                                       // 0x0108:1 (0x0001)  
	bool                                               bEnableProjection : 1;                                      // 0x0108:2 (0x0001)  
	bool                                               bEnableSoftProjection : 1;                                  // 0x0108:3 (0x0001)  
	bool                                               bAngularBreakable : 1;                                      // 0x0108:4 (0x0001)  
	bool                                               bLinearBreakable : 1;                                       // 0x0108:5 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0109   (0x0003)  MISSED
};

/// Struct /Script/Engine.ConstraintInstance
/// Size: 0x01B8 (440 bytes) (0x000018 - 0x0001D0) align 8 pad: 0x0000
struct FConstraintInstance : FConstraintInstanceBase
{ 
	FName                                              JointName;                                                  // 0x0018   (0x000C)  
	FName                                              ConstraintBone1;                                            // 0x0024   (0x000C)  
	FName                                              ConstraintBone2;                                            // 0x0030   (0x000C)  
	FVector                                            Pos1;                                                       // 0x003C   (0x000C)  
	FVector                                            PriAxis1;                                                   // 0x0048   (0x000C)  
	FVector                                            SecAxis1;                                                   // 0x0054   (0x000C)  
	FVector                                            Pos2;                                                       // 0x0060   (0x000C)  
	FVector                                            PriAxis2;                                                   // 0x006C   (0x000C)  
	FVector                                            SecAxis2;                                                   // 0x0078   (0x000C)  
	FRotator                                           AngularRotationOffset;                                      // 0x0084   (0x000C)  
	bool                                               bScaleLinearLimits : 1;                                     // 0x0090:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0091   (0x0007)  MISSED
	FConstraintProfileProperties                       ProfileInstance;                                            // 0x0098   (0x010C)  
	unsigned char                                      UnknownData01_7[0x2C];                                      // 0x01A4   (0x002C)  MISSED
};

/// Class /Script/Engine.PhysicsConstraintComponent
/// Size: 0x0228 (552 bytes) (0x000218 - 0x000440) align 16 pad: 0x0000
class UPhysicsConstraintComponent : public USceneComponent
{ 
public:
	class AActor*                                      ConstraintActor1;                                           // 0x0218   (0x0008)  
	FConstrainComponentPropName                        ComponentName1;                                             // 0x0220   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x022C   (0x0004)  MISSED
	class AActor*                                      ConstraintActor2;                                           // 0x0230   (0x0008)  
	FConstrainComponentPropName                        ComponentName2;                                             // 0x0238   (0x000C)  
	unsigned char                                      UnknownData01_6[0x14];                                      // 0x0244   (0x0014)  MISSED
	class UPhysicsConstraintTemplate*                  ConstraintSetup;                                            // 0x0258   (0x0008)  
	SDK_UNDEFINED(16,191) /* FMulticastInlineDelegate */ __um(OnConstraintBroken);                                 // 0x0260   (0x0010)  
	FConstraintInstance                                ConstraintInstance;                                         // 0x0270   (0x01D0)  
	// void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);                                   // [0x46f9cf0] Final|Native|Public|BlueprintCallable 
	// void SetOrientationDriveSLERP(bool bEnableSLERP);                                                                        // [0x46f9c60] Final|Native|Public|BlueprintCallable 
	// void SetLinearZLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize);                              // [0x46f9b90] Final|Native|Public|BlueprintCallable 
	// void SetLinearYLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize);                              // [0x46f9ac0] Final|Native|Public|BlueprintCallable 
	// void SetLinearXLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize);                              // [0x46f99f0] Final|Native|Public|BlueprintCallable 
	// void SetLinearVelocityTarget(FVector& InVelTarget);                                                                      // [0x46f9960] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);                                 // [0x46f9830] Final|Native|Public|BlueprintCallable 
	// void SetLinearPositionTarget(FVector& InPosTarget);                                                                      // [0x46f97a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);                                 // [0x46f9670] Final|Native|Public|BlueprintCallable 
	// void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);                           // [0x46f9550] Final|Native|Public|BlueprintCallable 
	// void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);                                              // [0x46f9480] Final|Native|Public|BlueprintCallable 
	// void SetDisableCollision(bool bDisableCollision);                                                                        // [0x46f93f0] Final|Native|Public|BlueprintCallable 
	// void SetConstraintReferencePosition(TEnumAsByte<EConstraintFrame> Frame, FVector& RefPosition);                          // [0x46f9320] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetConstraintReferenceOrientation(TEnumAsByte<EConstraintFrame> Frame, FVector& PriAxis, FVector& SecAxis);         // [0x46f91f0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetConstraintReferenceFrame(TEnumAsByte<EConstraintFrame> Frame, FTransform& RefFrame);                             // [0x46f90d0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetConstrainedComponents(class UPrimitiveComponent* Component1, FName BoneName1, class UPrimitiveComponent* Component2, FName BoneName2); // [0x46f8f60] Final|Native|Public|BlueprintCallable 
	// void SetAngularVelocityTarget(FVector& InVelTarget);                                                                     // [0x46f8e00] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);                               // [0x46f8d30] Final|Native|Public|BlueprintCallable 
	// void SetAngularVelocityDriveSLERP(bool bEnableSLERP);                                                                    // [0x46f8ca0] Final|Native|Public|BlueprintCallable 
	// void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);                                            // [0x46f8bd0] Final|Native|Public|BlueprintCallable 
	// void SetAngularTwistLimit(TEnumAsByte<EAngularConstraintMotion> ConstraintType, float TwistLimitAngle);                  // [0x46f8b00] Final|Native|Public|BlueprintCallable 
	// void SetAngularSwing2Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing2LimitAngle);                    // [0x46f8a30] Final|Native|Public|BlueprintCallable 
	// void SetAngularSwing1Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing1LimitAngle);                    // [0x46f8960] Final|Native|Public|BlueprintCallable 
	// void SetAngularOrientationTarget(FRotator& InPosTarget);                                                                 // [0x46f88d0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);                                         // [0x46f8800] Final|Native|Public|BlueprintCallable 
	// void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);                          // [0x46f86e0] Final|Native|Public|BlueprintCallable 
	// void SetAngularDriveMode(TEnumAsByte<EAngularDriveMode> DriveMode);                                                      // [0x46f8660] Final|Native|Public|BlueprintCallable 
	// void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);                                           // [0x46f8590] Final|Native|Public|BlueprintCallable 
	// bool IsBroken();                                                                                                         // [0x46f8080] Final|Native|Public|BlueprintCallable 
	// float GetCurrentTwist();                                                                                                 // [0x46f7e40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetCurrentSwing2();                                                                                                // [0x46f7e10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetCurrentSwing1();                                                                                                // [0x46f7de0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void GetConstraintForce(FVector& OutLinearForce, FVector& OutAngularForce);                                              // [0x46f7ca0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void BreakConstraint();                                                                                                  // [0x46f7ac0] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.PhysicsConstraintProfileHandle
/// Size: 0x0118 (280 bytes) (0x000000 - 0x000118) align 4 pad: 0x0000
struct FPhysicsConstraintProfileHandle
{ 
	FConstraintProfileProperties                       ProfileProperties;                                          // 0x0000   (0x010C)  
	FName                                              ProfileName;                                                // 0x010C   (0x000C)  
};

/// Class /Script/Engine.PhysicsConstraintTemplate
/// Size: 0x02F0 (752 bytes) (0x000030 - 0x000320) align 8 pad: 0x0000
class UPhysicsConstraintTemplate : public UObject
{ 
public:
	FConstraintInstance                                DefaultInstance;                                            // 0x0030   (0x01D0)  
	TArray<FPhysicsConstraintProfileHandle>            ProfileHandles;                                             // 0x0200   (0x0010)  
	FConstraintProfileProperties                       DefaultProfile;                                             // 0x0210   (0x010C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x031C   (0x0004)  MISSED
};

/// Class /Script/Engine.PhysicsHandleComponent
/// Size: 0x00B0 (176 bytes) (0x0000C0 - 0x000170) align 16 pad: 0x0000
class UPhysicsHandleComponent : public UActorComponent
{ 
public:
	class UPrimitiveComponent*                         GrabbedComponent;                                           // 0x00C0   (0x0008)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x00C8   (0x000C)  MISSED
	unsigned char                                      UnknownBit01 : 1;                                           // 0x00D4:0 (0x0001)  MISSED
	bool                                               bSoftAngularConstraint : 1;                                 // 0x00D4:1 (0x0001)  
	bool                                               bSoftLinearConstraint : 1;                                  // 0x00D4:2 (0x0001)  
	bool                                               bInterpolateTarget : 1;                                     // 0x00D4:3 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x00D5   (0x0003)  MISSED
	float                                              LinearDamping;                                              // 0x00D8   (0x0004)  
	float                                              LinearStiffness;                                            // 0x00DC   (0x0004)  
	float                                              AngularDamping;                                             // 0x00E0   (0x0004)  
	float                                              AngularStiffness;                                           // 0x00E4   (0x0004)  
	unsigned char                                      UnknownData03_6[0x68];                                      // 0x00E8   (0x0068)  MISSED
	float                                              InterpolationSpeed;                                         // 0x0150   (0x0004)  
	unsigned char                                      UnknownData04_7[0x1C];                                      // 0x0154   (0x001C)  MISSED
	// void SetTargetRotation(FRotator NewRotation);                                                                            // [0x46ff180] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetTargetLocationAndRotation(FVector NewLocation, FRotator NewRotation);                                            // [0x46ff0a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetTargetLocation(FVector NewLocation);                                                                             // [0x46ff010] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetLinearStiffness(float NewLinearStiffness);                                                                       // [0x46fef90] Final|Native|Public|BlueprintCallable 
	// void SetLinearDamping(float NewLinearDamping);                                                                           // [0x46fef10] Final|Native|Public|BlueprintCallable 
	// void SetInterpolationSpeed(float NewInterpolationSpeed);                                                                 // [0x46fee90] Final|Native|Public|BlueprintCallable 
	// void SetAngularStiffness(float NewAngularStiffness);                                                                     // [0x46fee10] Final|Native|Public|BlueprintCallable 
	// void SetAngularDamping(float NewAngularDamping);                                                                         // [0x46fed90] Final|Native|Public|BlueprintCallable 
	// void ReleaseComponent();                                                                                                 // [0xbe0a80] Native|Public|BlueprintCallable 
	// void GrabComponentAtLocationWithRotation(class UPrimitiveComponent* Component, FName InBoneName, FVector Location, FRotator Rotation); // [0x46fec00] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void GrabComponentAtLocation(class UPrimitiveComponent* Component, FName InBoneName, FVector GrabLocation);              // [0x46feac0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void GrabComponent(class UPrimitiveComponent* Component, FName InBoneName, FVector GrabLocation, bool bConstrainRotation); // [0x46fe950] Native|Public|HasDefaults|BlueprintCallable 
	// void GetTargetLocationAndRotation(FVector& TargetLocation, FRotator& TargetRotation);                                    // [0x46fe870] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// class UPrimitiveComponent* GetGrabbedComponent();                                                                        // [0x3d17b00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.RigidBodyErrorCorrection
/// Size: 0x0034 (52 bytes) (0x000000 - 0x000034) align 4 pad: 0x0000
struct FRigidBodyErrorCorrection
{ 
	float                                              PingExtrapolation;                                          // 0x0000   (0x0004)  
	float                                              PingLimit;                                                  // 0x0004   (0x0004)  
	float                                              ErrorPerLinearDifference;                                   // 0x0008   (0x0004)  
	float                                              ErrorPerAngularDifference;                                  // 0x000C   (0x0004)  
	float                                              MaxRestoredStateError;                                      // 0x0010   (0x0004)  
	float                                              MaxLinearHardSnapDistance;                                  // 0x0014   (0x0004)  
	float                                              PositionLerp;                                               // 0x0018   (0x0004)  
	float                                              AngleLerp;                                                  // 0x001C   (0x0004)  
	float                                              LinearVelocityCoefficient;                                  // 0x0020   (0x0004)  
	float                                              AngularVelocityCoefficient;                                 // 0x0024   (0x0004)  
	float                                              ErrorAccumulationSeconds;                                   // 0x0028   (0x0004)  
	float                                              ErrorAccumulationDistanceSq;                                // 0x002C   (0x0004)  
	float                                              ErrorAccumulationSimilarity;                                // 0x0030   (0x0004)  
};

/// Struct /Script/Engine.PhysicalSurfaceName
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FPhysicalSurfaceName
{ 
	TEnumAsByte<EPhysicalSurface>                      Type;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FName                                              Name;                                                       // 0x0004   (0x000C)  
};

/// Struct /Script/Engine.BroadphaseSettings
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 4 pad: 0x0000
struct FBroadphaseSettings
{ 
	bool                                               bUseMBPOnClient;                                            // 0x0000   (0x0001)  
	bool                                               bUseMBPOnServer;                                            // 0x0001   (0x0001)  
	bool                                               bUseMBPOuterBounds;                                         // 0x0002   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0003   (0x0001)  MISSED
	FBox                                               MBPBounds;                                                  // 0x0004   (0x001C)  
	FBox                                               MBPOuterBounds;                                             // 0x0020   (0x001C)  
	uint32_t                                           MBPNumSubdivs;                                              // 0x003C   (0x0004)  
};

/// Struct /Script/Engine.ChaosPhysicsSettings
/// Size: 0x0003 (3 bytes) (0x000000 - 0x000003) align 1 pad: 0x0000
struct FChaosPhysicsSettings
{ 
	EChaosThreadingMode                                DefaultThreadingModel;                                      // 0x0000   (0x0001)  
	EChaosSolverTickMode                               DedicatedThreadTickMode;                                    // 0x0001   (0x0001)  
	EChaosBufferMode                                   DedicatedThreadBufferMode;                                  // 0x0002   (0x0001)  
};

/// Class /Script/Engine.PhysicsSettings
/// Size: 0x00C0 (192 bytes) (0x0000F0 - 0x0001B0) align 8 pad: 0x0000
class UPhysicsSettings : public UPhysicsSettingsCore
{ 
public:
	FRigidBodyErrorCorrection                          PhysicErrorCorrection;                                      // 0x00F0   (0x0034)  
	TEnumAsByte<ESettingsLockedAxis>                   LockedAxis;                                                 // 0x0124   (0x0001)  
	TEnumAsByte<ESettingsDOF>                          DefaultDegreesOfFreedom;                                    // 0x0125   (0x0001)  
	bool                                               bSuppressFaceRemapTable;                                    // 0x0126   (0x0001)  
	bool                                               bSupportUVFromHitResults;                                   // 0x0127   (0x0001)  
	bool                                               bDisableActiveActors;                                       // 0x0128   (0x0001)  
	bool                                               bDisableKinematicStaticPairs;                               // 0x0129   (0x0001)  
	bool                                               bDisableKinematicKinematicPairs;                            // 0x012A   (0x0001)  
	bool                                               bDisableCCD;                                                // 0x012B   (0x0001)  
	bool                                               bEnableEnhancedDeterminism;                                 // 0x012C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x012D   (0x0003)  MISSED
	float                                              AnimPhysicsMinDeltaTime;                                    // 0x0130   (0x0004)  
	bool                                               bSimulateAnimPhysicsAfterReset;                             // 0x0134   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0135   (0x0003)  MISSED
	float                                              MaxPhysicsDeltaTime;                                        // 0x0138   (0x0004)  
	bool                                               bSubstepping;                                               // 0x013C   (0x0001)  
	bool                                               bSubsteppingAsync;                                          // 0x013D   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x013E   (0x0002)  MISSED
	float                                              MaxSubstepDeltaTime;                                        // 0x0140   (0x0004)  
	int32_t                                            MaxSubsteps;                                                // 0x0144   (0x0004)  
	float                                              SyncSceneSmoothingFactor;                                   // 0x0148   (0x0004)  
	float                                              InitialAverageFrameRate;                                    // 0x014C   (0x0004)  
	int32_t                                            PhysXTreeRebuildRate;                                       // 0x0150   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0154   (0x0004)  MISSED
	TArray<FPhysicalSurfaceName>                       PhysicalSurfaces;                                           // 0x0158   (0x0010)  
	FBroadphaseSettings                                DefaultBroadphaseSettings;                                  // 0x0168   (0x0040)  
	float                                              MinDeltaVelocityForHitEvents;                               // 0x01A8   (0x0004)  
	FChaosPhysicsSettings                              ChaosSettings;                                              // 0x01AC   (0x0003)  
	unsigned char                                      UnknownData04_7[0x1];                                       // 0x01AF   (0x0001)  MISSED
};

/// Class /Script/Engine.PhysicsSpringComponent
/// Size: 0x0028 (40 bytes) (0x000218 - 0x000240) align 16 pad: 0x0000
class UPhysicsSpringComponent : public USceneComponent
{ 
public:
	float                                              SpringStiffness;                                            // 0x0218   (0x0004)  
	float                                              SpringDamping;                                              // 0x021C   (0x0004)  
	float                                              SpringLengthAtRest;                                         // 0x0220   (0x0004)  
	float                                              SpringRadius;                                               // 0x0224   (0x0004)  
	TEnumAsByte<ECollisionChannel>                     SpringChannel;                                              // 0x0228   (0x0001)  
	bool                                               bIgnoreSelf;                                                // 0x0229   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x022A   (0x0002)  MISSED
	float                                              SpringCompression;                                          // 0x022C   (0x0004)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0230   (0x0010)  MISSED
	// FVector GetSpringRestingPoint();                                                                                         // [0x46fe830] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetSpringDirection();                                                                                            // [0x46fe7f0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetSpringCurrentEndPoint();                                                                                      // [0x46fe7b0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// float GetNormalizedCompressionScalar();                                                                                  // [0x46fe780] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.PhysicsThruster
/// Size: 0x0008 (8 bytes) (0x0002A8 - 0x0002B0) align 8 pad: 0x0000
class APhysicsThruster : public ARigidBodyBase
{ 
public:
	class UPhysicsThrusterComponent*                   ThrusterComponent;                                          // 0x02A8   (0x0008)  
};

/// Class /Script/Engine.PhysicsThrusterComponent
/// Size: 0x0008 (8 bytes) (0x000218 - 0x000220) align 16 pad: 0x0000
class UPhysicsThrusterComponent : public USceneComponent
{ 
public:
	float                                              ThrustStrength;                                             // 0x0218   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x021C   (0x0004)  MISSED
};

/// Struct /Script/Engine.PSOConverterConfigShaderPermutation
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FPSOConverterConfigShaderPermutation
{ 
	FString                                            PermutationName;                                            // 0x0000   (0x0010)  
	FString                                            PermutationVariableName;                                    // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.PSOConverterConfigShader
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FPSOConverterConfigShader
{ 
	FString                                            NameRegex;                                                  // 0x0000   (0x0010)  
	TArray<FPSOConverterConfigShaderPermutation>       Permutations;                                               // 0x0010   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0020   (0x0010)  MISSED
};

/// Struct /Script/Engine.PSOConverterConfigVariable
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FPSOConverterConfigVariable
{ 
	FString                                            Name;                                                       // 0x0000   (0x0010)  
	TArray<FString>                                    Values;                                                     // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.PSOConverterConfigFilter
/// Size: 0x0078 (120 bytes) (0x000000 - 0x000078) align 8 pad: 0x0000
struct FPSOConverterConfigFilter
{ 
	FString                                            Name;                                                       // 0x0000   (0x0010)  
	bool                                               bEnable;                                                    // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0011   (0x0007)  MISSED
	TArray<FString>                                    MaterialPathRegex;                                          // 0x0018   (0x0010)  
	TArray<FString>                                    ShaderTypesRegex;                                           // 0x0028   (0x0010)  
	TArray<FString>                                    VertexFactoriesRegex;                                       // 0x0038   (0x0010)  
	unsigned char                                      UnknownData01_7[0x30];                                      // 0x0048   (0x0030)  MISSED
};

/// Struct /Script/Engine.PSOGeneratorConfigUsageMaskSingle
/// Size: 0x0078 (120 bytes) (0x000000 - 0x000078) align 8 pad: 0x0000
struct FPSOGeneratorConfigUsageMaskSingle
{ 
	FString                                            MaskName;                                                   // 0x0000   (0x0010)  
	FString                                            VariableName;                                               // 0x0010   (0x0010)  
	uint64_t                                           DefaultMask;                                                // 0x0020   (0x0008)  
	SDK_UNDEFINED(80,192) /* TMap<FString, uint64_t> */ __um(Switches);                                            // 0x0028   (0x0050)  
};

/// Struct /Script/Engine.PSOGeneratorConfigUsageMask
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FPSOGeneratorConfigUsageMask
{ 
	TArray<FPSOGeneratorConfigUsageMaskSingle>         UsageMasks;                                                 // 0x0000   (0x0010)  
};

/// Class /Script/Engine.PipelineCacheConverterConfig
/// Size: 0x00E8 (232 bytes) (0x000030 - 0x000118) align 8 pad: 0x0000
class UPipelineCacheConverterConfig : public UObject
{ 
public:
	TArray<FPSOConverterConfigShader>                  ShaderTemplates;                                            // 0x0030   (0x0010)  
	TArray<FPSOConverterConfigVariable>                VariablesValueOverride;                                     // 0x0040   (0x0010)  
	TArray<FPSOConverterConfigFilter>                  Filters;                                                    // 0x0050   (0x0010)  
	FPSOGeneratorConfigUsageMask                       UsageMask;                                                  // 0x0060   (0x0010)  
	SDK_UNDEFINED(80,193) /* TMap<FString, FString> */ __um(AdditionalBaseMaterialMap);                            // 0x0070   (0x0050)  
	bool                                               bStripPipelineStates;                                       // 0x00C0   (0x0001)  
	unsigned char                                      UnknownData00_7[0x57];                                      // 0x00C1   (0x0057)  MISSED
};

/// Class /Script/Engine.PipelineCacheGeneratorConfig
/// Size: 0x0420 (1056 bytes) (0x000030 - 0x000450) align 8 pad: 0x0000
class UPipelineCacheGeneratorConfig : public UObject
{ 
public:
	SDK_UNDEFINED(80,194) /* TMap<FString, FPSOGeneratorConfigShader> */ __um(Shaders);                            // 0x0030   (0x0050)  
	SDK_UNDEFINED(80,195) /* TMap<FString, FPSOGeneratorConfigVertexInput> */ __um(VertexInputs);                  // 0x0080   (0x0050)  
	SDK_UNDEFINED(80,196) /* TMap<FString, FPSOGeneratorConfigBlendState> */ __um(BlendStates);                    // 0x00D0   (0x0050)  
	SDK_UNDEFINED(80,197) /* TMap<FString, FPSOGeneratorConfigRasterizerState> */ __um(RasterizerStates);          // 0x0120   (0x0050)  
	SDK_UNDEFINED(80,198) /* TMap<FString, FPSOGeneratorConfigDepthStencilState> */ __um(DepthStencilStates);      // 0x0170   (0x0050)  
	SDK_UNDEFINED(80,199) /* TMap<FString, FPSOGeneratorConfigRenderTarget> */ __um(RenderTargets);                // 0x01C0   (0x0050)  
	SDK_UNDEFINED(80,200) /* TMap<FString, FPSOGeneratorConfigPipeline> */ __um(Pipelines);                        // 0x0210   (0x0050)  
	SDK_UNDEFINED(80,201) /* TMap<FString, FPSOGeneratorConfigCollector> */ __um(Collectors);                      // 0x0260   (0x0050)  
	FPSOGeneratorConfigUsageMask                       UsageMasks;                                                 // 0x02B0   (0x0010)  
	SDK_UNDEFINED(80,202) /* TMap<FString, FString> */ __um(AdditionalBaseMaterialMap);                            // 0x02C0   (0x0050)  
	unsigned char                                      UnknownData00_7[0x140];                                     // 0x0310   (0x0140)  MISSED
};

/// Class /Script/Engine.SceneCapture
/// Size: 0x0010 (16 bytes) (0x0002A8 - 0x0002B8) align 8 pad: 0x0000
class ASceneCapture : public AActor
{ 
public:
	class UStaticMeshComponent*                        MeshComp;                                                   // 0x02A8   (0x0008)  
	class USceneComponent*                             SceneComponent;                                             // 0x02B0   (0x0008)  
};

/// Class /Script/Engine.PlanarReflection
/// Size: 0x0010 (16 bytes) (0x0002B8 - 0x0002C8) align 8 pad: 0x0000
class APlanarReflection : public ASceneCapture
{ 
public:
	class UPlanarReflectionComponent*                  PlanarReflectionComponent;                                  // 0x02B8   (0x0008)  
	bool                                               bShowPreviewPlane;                                          // 0x02C0   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x02C1   (0x0007)  MISSED
	// void OnInterpToggle(bool bEnable);                                                                                       // [0x4701ce0] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.EngineShowFlagsSetting
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FEngineShowFlagsSetting
{ 
	FString                                            ShowFlagName;                                               // 0x0000   (0x0010)  
	bool                                               Enabled;                                                    // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0011   (0x0007)  MISSED
};

/// Class /Script/Engine.SceneCaptureComponent
/// Size: 0x00C8 (200 bytes) (0x000218 - 0x0002E0) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class USceneCaptureComponent : public USceneComponent
{ 
public:
	ESceneCapturePrimitiveRenderMode                   PrimitiveRenderMode;                                        // 0x0218   (0x0001)  
	TEnumAsByte<ESceneCaptureSource>                   CaptureSource;                                              // 0x0219   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x021A   (0x0002)  MISSED
	float                                              CaptureDepthScale;                                          // 0x021C   (0x0004)  
	bool                                               bCaptureEveryFrame : 1;                                     // 0x0220:0 (0x0001)  
	bool                                               bCaptureOnMovement : 1;                                     // 0x0220:1 (0x0001)  
	bool                                               bCaptureUI : 1;                                             // 0x0220:2 (0x0001)  
	bool                                               bAlwaysPersistRenderingState;                               // 0x0221   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x0222   (0x0006)  MISSED
	SDK_UNDEFINED(16,203) /* TArray<TWeakObjectPtr<UPrimitiveComponent*>> */ __um(HiddenComponents);               // 0x0228   (0x0010)  
	TArray<class AActor*>                              HiddenActors;                                               // 0x0238   (0x0010)  
	SDK_UNDEFINED(16,204) /* TArray<TWeakObjectPtr<UPrimitiveComponent*>> */ __um(ShowOnlyComponents);             // 0x0248   (0x0010)  
	TArray<class AActor*>                              ShowOnlyActors;                                             // 0x0258   (0x0010)  
	float                                              LODDistanceFactor;                                          // 0x0268   (0x0004)  
	float                                              MaxViewDistanceOverride;                                    // 0x026C   (0x0004)  
	int32_t                                            CaptureSortPriority;                                        // 0x0270   (0x0004)  
	bool                                               bUseRayTracingIfEnabled;                                    // 0x0274   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0275   (0x0003)  MISSED
	TArray<FEngineShowFlagsSetting>                    ShowFlagSettings;                                           // 0x0278   (0x0010)  
	unsigned char                                      UnknownData03_6[0x30];                                      // 0x0288   (0x0030)  MISSED
	FString                                            ProfilingEventName;                                         // 0x02B8   (0x0010)  
	unsigned char                                      UnknownData04_7[0x10];                                      // 0x02C8   (0x0010)  MISSED
	// void ShowOnlyComponent(class UPrimitiveComponent* InComponent);                                                          // [0x472d0f0] Final|Native|Public|BlueprintCallable 
	// void ShowOnlyActorComponents(class AActor* InActor, bool bIncludeFromChildActors);                                       // [0x472d020] Final|Native|Public|BlueprintCallable 
	// void SetCaptureSortPriority(int32_t NewCaptureSortPriority);                                                             // [0x472cbc0] Final|Native|Public|BlueprintCallable 
	// void RemoveShowOnlyComponent(class UPrimitiveComponent* InComponent);                                                    // [0x472c9e0] Final|Native|Public|BlueprintCallable 
	// void RemoveShowOnlyActorComponents(class AActor* InActor, bool bIncludeFromChildActors);                                 // [0x472c910] Final|Native|Public|BlueprintCallable 
	// void HideComponent(class UPrimitiveComponent* InComponent);                                                              // [0x472a020] Final|Native|Public|BlueprintCallable 
	// void HideActorComponents(class AActor* InActor, bool bIncludeFromChildActors);                                           // [0x4729f50] Final|Native|Public|BlueprintCallable 
	// void ClearShowOnlyComponents();                                                                                          // [0x4729550] Final|Native|Public|BlueprintCallable 
	// void ClearHiddenComponents();                                                                                            // [0x4729530] Final|Native|Public|BlueprintCallable 
};
#pragma pack(pop)

/// Class /Script/Engine.PlanarReflectionComponent
/// Size: 0x00E8 (232 bytes) (0x0002D8 - 0x0003C0) align 16 pad: 0x0000
class UPlanarReflectionComponent : public USceneCaptureComponent
{ 
public:
	class UBoxComponent*                               PreviewBox;                                                 // 0x02D8   (0x0008)  
	float                                              NormalDistortionStrength;                                   // 0x02E0   (0x0004)  
	float                                              PrefilterRoughness;                                         // 0x02E4   (0x0004)  
	float                                              PrefilterRoughnessDistance;                                 // 0x02E8   (0x0004)  
	int32_t                                            ScreenPercentage;                                           // 0x02EC   (0x0004)  
	float                                              ExtraFOV;                                                   // 0x02F0   (0x0004)  
	float                                              DistanceFromPlaneFadeStart;                                 // 0x02F4   (0x0004)  
	float                                              DistanceFromPlaneFadeEnd;                                   // 0x02F8   (0x0004)  
	float                                              DistanceFromPlaneFadeoutStart;                              // 0x02FC   (0x0004)  
	float                                              DistanceFromPlaneFadeoutEnd;                                // 0x0300   (0x0004)  
	float                                              AngleFromPlaneFadeStart;                                    // 0x0304   (0x0004)  
	float                                              AngleFromPlaneFadeEnd;                                      // 0x0308   (0x0004)  
	bool                                               bShowPreviewPlane;                                          // 0x030C   (0x0001)  
	bool                                               bCustomComposite;                                           // 0x030D   (0x0001)  
	bool                                               bRenderSceneTwoSided;                                       // 0x030E   (0x0001)  
	unsigned char                                      UnknownData00_7[0xB1];                                      // 0x030F   (0x00B1)  MISSED
};

/// Class /Script/Engine.PlaneReflectionCapture
/// Size: 0x0000 (0 bytes) (0x0002B0 - 0x0002B0) align 8 pad: 0x0000
class APlaneReflectionCapture : public AReflectionCapture
{ 
public:
};

/// Class /Script/Engine.PlaneReflectionCaptureComponent
/// Size: 0x0018 (24 bytes) (0x0002D8 - 0x0002F0) align 16 pad: 0x0000
class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
{ 
public:
	float                                              InfluenceRadiusScale;                                       // 0x02D8   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x02DC   (0x0004)  MISSED
	class UDrawSphereComponent*                        PreviewInfluenceRadius;                                     // 0x02E0   (0x0008)  
	class UBoxComponent*                               PreviewCaptureBox;                                          // 0x02E8   (0x0008)  
};

/// Class /Script/Engine.PlatformEventsComponent
/// Size: 0x0020 (32 bytes) (0x0000C0 - 0x0000E0) align 8 pad: 0x0000
class UPlatformEventsComponent : public UActorComponent
{ 
public:
	SDK_UNDEFINED(16,205) /* FMulticastInlineDelegate */ __um(PlatformChangedToLaptopModeDelegate);                // 0x00C0   (0x0010)  
	SDK_UNDEFINED(16,206) /* FMulticastInlineDelegate */ __um(PlatformChangedToTabletModeDelegate);                // 0x00D0   (0x0010)  
	// bool SupportsConvertibleLaptops();                                                                                       // [0x4703420] Final|Native|Public|BlueprintCallable 
	// void PlatformEventDelegate__DelegateSignature();                                                                         // [0x25a7960] MulticastDelegate|Public|Delegate 
	// bool IsInTabletMode();                                                                                                   // [0x4701cb0] Final|Native|Public|BlueprintCallable 
	// bool IsInLaptopMode();                                                                                                   // [0x4701c80] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PlatformInterfaceWebResponse
/// Size: 0x0088 (136 bytes) (0x000030 - 0x0000B8) align 8 pad: 0x0000
class UPlatformInterfaceWebResponse : public UObject
{ 
public:
	FString                                            OriginalURL;                                                // 0x0030   (0x0010)  
	int32_t                                            ResponseCode;                                               // 0x0040   (0x0004)  
	int32_t                                            Tag;                                                        // 0x0044   (0x0004)  
	FString                                            StringResponse;                                             // 0x0048   (0x0010)  
	TArray<char>                                       BinaryResponse;                                             // 0x0058   (0x0010)  
	unsigned char                                      UnknownData00_7[0x50];                                      // 0x0068   (0x0050)  MISSED
	// int32_t GetNumHeaders();                                                                                                 // [0xea1e10] Native|Public        
	// FString GetHeaderValue(FString HeaderName);                                                                              // [0x4701b60] Native|Public        
	// void GetHeader(int32_t HeaderIndex, FString& Header, FString& Value);                                                    // [0x4701a00] Native|Public|HasOutParms 
};

/// Struct /Script/Engine.MinimalViewInfo
/// Size: 0x0690 (1680 bytes) (0x000000 - 0x000690) align 16 pad: 0x0000
struct FMinimalViewInfo
{ 
	FVector                                            Location;                                                   // 0x0000   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x000C   (0x000C)  
	float                                              FOV;                                                        // 0x0018   (0x0004)  
	float                                              DesiredFOV;                                                 // 0x001C   (0x0004)  
	float                                              OrthoWidth;                                                 // 0x0020   (0x0004)  
	float                                              OrthoNearClipPlane;                                         // 0x0024   (0x0004)  
	float                                              OrthoFarClipPlane;                                          // 0x0028   (0x0004)  
	float                                              AspectRatio;                                                // 0x002C   (0x0004)  
	bool                                               bConstrainAspectRatio : 1;                                  // 0x0030:0 (0x0001)  
	bool                                               bUseFieldOfViewForLOD : 1;                                  // 0x0030:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0031   (0x0003)  MISSED
	TEnumAsByte<ECameraProjectionMode>                 ProjectionMode;                                             // 0x0034   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0035   (0x0003)  MISSED
	float                                              PostProcessBlendWeight;                                     // 0x0038   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x003C   (0x0004)  MISSED
	FPostProcessSettings                               PostProcessSettings;                                        // 0x0040   (0x0600)  
	FVector2D                                          OffCenterProjectionOffset;                                  // 0x0640   (0x0008)  
	unsigned char                                      UnknownData03_7[0x48];                                      // 0x0648   (0x0048)  MISSED
};

/// Struct /Script/Engine.CameraCacheEntry
/// Size: 0x06A0 (1696 bytes) (0x000000 - 0x0006A0) align 16 pad: 0x0000
struct FCameraCacheEntry
{ 
	float                                              Timestamp;                                                  // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0004   (0x000C)  MISSED
	FMinimalViewInfo                                   POV;                                                        // 0x0010   (0x0690)  
};

/// Struct /Script/Engine.TViewTarget
/// Size: 0x06B0 (1712 bytes) (0x000000 - 0x0006B0) align 16 pad: 0x0000
struct FTViewTarget
{ 
	class AActor*                                      Target;                                                     // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0008   (0x0008)  MISSED
	FMinimalViewInfo                                   POV;                                                        // 0x0010   (0x0690)  
	class APlayerState*                                PlayerState;                                                // 0x06A0   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x06A8   (0x0008)  MISSED
};

/// Class /Script/Engine.PlayerCameraManager
/// Size: 0x29E8 (10728 bytes) (0x0002A8 - 0x002C90) align 16 pad: 0x0000
class APlayerCameraManager : public AActor
{ 
public:
	class APlayerController*                           PCOwner;                                                    // 0x02A8   (0x0008)  
	class USceneComponent*                             TransformComponent;                                         // 0x02B0   (0x0008)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x02B8   (0x000C)  MISSED
	float                                              DefaultFOV;                                                 // 0x02C4   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x02C8   (0x0004)  MISSED
	float                                              DefaultOrthoWidth;                                          // 0x02CC   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x02D0   (0x0004)  MISSED
	float                                              DefaultAspectRatio;                                         // 0x02D4   (0x0004)  
	FLinearColor                                       FadeColor;                                                  // 0x02D8   (0x0010)  
	float                                              FadeAmount;                                                 // 0x02E8   (0x0004)  
	unsigned char                                      UnknownData03_6[0x34];                                      // 0x02EC   (0x0034)  MISSED
	FCameraCacheEntry                                  CameraCache;                                                // 0x0320   (0x06A0)  
	FCameraCacheEntry                                  LastFrameCameraCache;                                       // 0x09C0   (0x06A0)  
	FTViewTarget                                       ViewTarget;                                                 // 0x1060   (0x06B0)  
	FTViewTarget                                       PendingViewTarget;                                          // 0x1710   (0x06B0)  
	unsigned char                                      UnknownData04_6[0x50];                                      // 0x1DC0   (0x0050)  MISSED
	FCameraCacheEntry                                  CameraCachePrivate;                                         // 0x1E10   (0x06A0)  
	FCameraCacheEntry                                  LastFrameCameraCachePrivate;                                // 0x24B0   (0x06A0)  
	TArray<class UCameraModifier*>                     ModifierList;                                               // 0x2B50   (0x0010)  
	TArray<class UClass*>                              DefaultModifiers;                                           // 0x2B60   (0x0010)  
	float                                              FreeCamDistance;                                            // 0x2B70   (0x0004)  
	FVector                                            FreeCamOffset;                                              // 0x2B74   (0x000C)  
	FVector                                            ViewTargetOffset;                                           // 0x2B80   (0x000C)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x2B8C   (0x0004)  MISSED
	SDK_UNDEFINED(16,207) /* FMulticastInlineDelegate */ __um(OnAudioFadeChangeEvent);                             // 0x2B90   (0x0010)  
	unsigned char                                      UnknownData06_6[0x10];                                      // 0x2BA0   (0x0010)  MISSED
	TArray<class AEmitterCameraLensEffectBase*>        CameraLensEffects;                                          // 0x2BB0   (0x0010)  
	class UCameraModifier_CameraShake*                 CachedCameraShakeMod;                                       // 0x2BC0   (0x0008)  
	bool                                               bOpenCameraShake;                                           // 0x2BC8   (0x0001)  
	unsigned char                                      UnknownData07_6[0x7];                                       // 0x2BC9   (0x0007)  MISSED
	class UCameraAnimInst*                             AnimInstPool[8];                                            // 0x2BD0   (0x0040)  
	TArray<FPostProcessSettings>                       PostProcessBlendCache;                                      // 0x2C10   (0x0010)  
	unsigned char                                      UnknownData08_6[0x10];                                      // 0x2C20   (0x0010)  MISSED
	TArray<class UCameraAnimInst*>                     ActiveAnims;                                                // 0x2C30   (0x0010)  
	TArray<class UCameraAnimInst*>                     FreeAnims;                                                  // 0x2C40   (0x0010)  
	class ACameraActor*                                AnimCameraActor;                                            // 0x2C50   (0x0008)  
	bool                                               bIsOrthographic : 1;                                        // 0x2C58:0 (0x0001)  
	bool                                               bDefaultConstrainAspectRatio : 1;                           // 0x2C58:1 (0x0001)  
	bool                                               bEnableFading : 1;                                          // 0x2C58:2 (0x0001)  
	unsigned char                                      UnknownBit09 : 1;                                           // 0x2C58:3 (0x0001)  MISSED
	unsigned char                                      UnknownBit10 : 1;                                           // 0x2C58:4 (0x0001)  MISSED
	unsigned char                                      UnknownBit11 : 1;                                           // 0x2C58:5 (0x0001)  MISSED
	bool                                               bClientSimulatingViewTarget : 1;                            // 0x2C58:6 (0x0001)  
	bool                                               bUseClientSideCameraUpdates : 1;                            // 0x2C58:7 (0x0001)  
	unsigned char                                      UnknownBit12 : 1;                                           // 0x2C59:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit13 : 1;                                           // 0x2C59:1 (0x0001)  MISSED
	bool                                               bGameCameraCutThisFrame : 1;                                // 0x2C59:2 (0x0001)  
	unsigned char                                      UnknownData14_5[0x2];                                       // 0x2C5A   (0x0002)  MISSED
	float                                              ViewPitchMin;                                               // 0x2C5C   (0x0004)  
	float                                              ViewPitchMax;                                               // 0x2C60   (0x0004)  
	float                                              ViewYawMin;                                                 // 0x2C64   (0x0004)  
	float                                              ViewYawMax;                                                 // 0x2C68   (0x0004)  
	float                                              ViewRollMin;                                                // 0x2C6C   (0x0004)  
	float                                              ViewRollMax;                                                // 0x2C70   (0x0004)  
	unsigned char                                      UnknownData15_6[0x4];                                       // 0x2C74   (0x0004)  MISSED
	float                                              ServerUpdateCameraTimeout;                                  // 0x2C78   (0x0004)  
	unsigned char                                      UnknownData16_7[0x14];                                      // 0x2C7C   (0x0014)  MISSED
	// void SwapPendingViewTargetWhenUsingClientSideCameraUpdates();                                                            // [0x4703450] Final|Native|Protected 
	// void StopCameraShake(class UCameraShakeBase* ShakeInstance, bool bImmediately);                                          // [0x4703350] Native|Public|BlueprintCallable 
	// void StopCameraFade();                                                                                                   // [0x4703330] Native|Public|BlueprintCallable 
	// void StopCameraAnimInst(class UCameraAnimInst* AnimInst, bool bImmediate);                                               // [0x4703260] Native|Public|BlueprintCallable 
	// void StopAllInstancesOfCameraShakeFromSource(class UClass* Shake, class UCameraShakeSourceComponent* SourceComponent, bool bImmediately); // [0x4703150] Native|Public|BlueprintCallable 
	// void StopAllInstancesOfCameraShake(class UClass* Shake, bool bImmediately);                                              // [0x4703080] Native|Public|BlueprintCallable 
	// void StopAllInstancesOfCameraAnim(class UCameraAnim* Anim, bool bImmediate);                                             // [0x4702fb0] Native|Public|BlueprintCallable 
	// void StopAllCameraShakesFromSource(class UCameraShakeSourceComponent* SourceComponent, bool bImmediately);               // [0x4702ee0] Native|Public|BlueprintCallable 
	// void StopAllCameraShakes(bool bImmediately);                                                                             // [0x4702e50] Native|Public|BlueprintCallable 
	// void StopAllCameraAnims(bool bImmediate);                                                                                // [0x4702dc0] Native|Public|BlueprintCallable 
	// class UMatineeCameraShake* StartMatineeCameraShakeFromSource(class UClass* ShakeClass, class UCameraShakeSourceComponent* SourceComponent, float Scale, ECameraShakePlaySpace PlaySpace, FRotator UserPlaySpaceRot); // [0x4702be0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// class UMatineeCameraShake* StartMatineeCameraShake(class UClass* ShakeClass, float Scale, ECameraShakePlaySpace PlaySpace, FRotator UserPlaySpaceRot); // [0x4702a50] Final|Native|Public|HasDefaults|BlueprintCallable 
	// class UCameraShakeBase* StartCameraShakeFromSource(class UClass* ShakeClass, class UCameraShakeSourceComponent* SourceComponent, float Scale, ECameraShakePlaySpace PlaySpace, FRotator UserPlaySpaceRot); // [0x4702860] Native|Public|HasDefaults|BlueprintCallable 
	// class UCameraShakeBase* StartCameraShake(class UClass* ShakeClass, float Scale, ECameraShakePlaySpace PlaySpace, FRotator UserPlaySpaceRot); // [0x47026d0] Native|Public|HasDefaults|BlueprintCallable 
	// void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, FLinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished, TEnumAsByte<ECameraFadeMode> FadeMode); // [0x4702490] Native|Public|HasDefaults|BlueprintCallable 
	// void SetManualCameraFade(float InFadeAmount, FLinearColor Color, bool bInFadeAudio);                                     // [0x4702360] Native|Public|HasDefaults|BlueprintCallable 
	// void SetGameCameraCutThisFrame();                                                                                        // [0x4702340] Final|Native|Public|BlueprintCallable 
	// bool RemoveCameraModifier(class UCameraModifier* ModifierToRemove);                                                      // [0x47022a0] Native|Public|BlueprintCallable 
	// void RemoveCameraLensEffect(class AEmitterCameraLensEffectBase* Emitter);                                                // [0x4702210] Native|Public|BlueprintCallable 
	// class UCameraAnimInst* PlayCameraAnim(class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, ECameraShakePlaySpace PlaySpace, FRotator UserPlaySpaceRot); // [0x4701f00] Native|Public|HasDefaults|BlueprintCallable 
	// void PhotographyCameraModify(FVector NewCameraLocation, FVector PreviousCameraLocation, FVector OriginalCameraLocation, FVector& ResultCameraLocation); // [0x4701d70] BlueprintCosmetic|Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// void OnPhotographySessionStart();                                                                                        // [0x972ed0] BlueprintCosmetic|Native|Event|Public|BlueprintEvent 
	// void OnPhotographySessionEnd();                                                                                          // [0x46de5f0] BlueprintCosmetic|Native|Event|Public|BlueprintEvent 
	// void OnPhotographyMultiPartCaptureStart();                                                                               // [0x461bf00] BlueprintCosmetic|Native|Event|Public|BlueprintEvent 
	// void OnPhotographyMultiPartCaptureEnd();                                                                                 // [0x46255d0] BlueprintCosmetic|Native|Event|Public|BlueprintEvent 
	// class APlayerController* GetOwningPlayerController();                                                                    // [0x4701c50] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetFovAngle();                                                                                                     // [0x47019c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FRotator GetCameraRotation();                                                                                            // [0x4701980] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetCameraLocation();                                                                                             // [0x4701940] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// class UCameraModifier* FindCameraModifierByClass(class UClass* ModifierClass);                                           // [0x47018a0] Native|Public|BlueprintCallable 
	// void ClearCameraLensEffects();                                                                                           // [0x4701880] Native|Public|BlueprintCallable 
	// bool BlueprintUpdateCamera(class AActor* CameraTarget, FVector& NewCameraLocation, FRotator& NewCameraRotation, float& NewCameraFOV); // [0x25a7960] BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// class UCameraModifier* AddNewCameraModifier(class UClass* ModifierClass);                                                // [0x47017e0] Native|Public|BlueprintCallable 
	// class AEmitterCameraLensEffectBase* AddCameraLensEffect(class UClass* LensEffectEmitterClass);                           // [0x4701740] Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.KeyBind
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FKeyBind
{ 
	FKey                                               Key;                                                        // 0x0000   (0x0020)  
	FString                                            Command;                                                    // 0x0020   (0x0010)  
	bool                                               Control : 1;                                                // 0x0030:0 (0x0001)  
	bool                                               Shift : 1;                                                  // 0x0030:1 (0x0001)  
	bool                                               Alt : 1;                                                    // 0x0030:2 (0x0001)  
	bool                                               Cmd : 1;                                                    // 0x0030:3 (0x0001)  
	bool                                               bIgnoreCtrl : 1;                                            // 0x0030:4 (0x0001)  
	bool                                               bIgnoreShift : 1;                                           // 0x0030:5 (0x0001)  
	bool                                               bIgnoreAlt : 1;                                             // 0x0030:6 (0x0001)  
	bool                                               bIgnoreCmd : 1;                                             // 0x0030:7 (0x0001)  
	bool                                               bDisabled : 1;                                              // 0x0031:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x0032   (0x0006)  MISSED
};

/// Class /Script/Engine.PlayerInput
/// Size: 0x0380 (896 bytes) (0x000030 - 0x0003B0) align 8 pad: 0x0000
class UPlayerInput : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0xF8];                                      // 0x0030   (0x00F8)  MISSED
	TArray<FKeyBind>                                   DebugExecBindings;                                          // 0x0128   (0x0010)  
	unsigned char                                      UnknownData01_6[0x30];                                      // 0x0138   (0x0030)  MISSED
	TArray<FName>                                      InvertedAxis;                                               // 0x0168   (0x0010)  
	unsigned char                                      UnknownData02_7[0x238];                                     // 0x0178   (0x0238)  MISSED
	// void SetMouseSensitivity(float Sensitivity);                                                                             // [0x4712f90] Final|Exec|Native|Public 
	// void SetBind(FName BindName, FString Command);                                                                           // [0x4712850] Final|Exec|Native|Public 
	// void InvertAxisKey(FKey AxisKey);                                                                                        // [0x47126b0] Final|Exec|Native|Public 
	// void InvertAxis(FName AxisName);                                                                                         // [0x4712610] Final|Exec|Native|Public 
	// void ClearSmoothing();                                                                                                   // [0x4712080] Final|Exec|Native|Public 
};

/// Class /Script/Engine.PlayerStart
/// Size: 0x0010 (16 bytes) (0x0002D0 - 0x0002E0) align 8 pad: 0x0000
class APlayerStart : public ANavigationObjectBase
{ 
public:
	FName                                              PlayerStartTag;                                             // 0x02D0   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x02DC   (0x0004)  MISSED
};

/// Class /Script/Engine.PlayerStartPIE
/// Size: 0x0000 (0 bytes) (0x0002E0 - 0x0002E0) align 8 pad: 0x0000
class APlayerStartPIE : public APlayerStart
{ 
public:
};

/// Class /Script/Engine.PlayerState
/// Size: 0x0108 (264 bytes) (0x0002A8 - 0x0003B0) align 8 pad: 0x0000
class APlayerState : public AInfo
{ 
public:
	float                                              Score;                                                      // 0x02A8   (0x0004)  
	int32_t                                            PlayerId;                                                   // 0x02AC   (0x0004)  
	char                                               Ping;                                                       // 0x02B0   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x02B1   (0x0001)  MISSED
	bool                                               bShouldUpdateReplicatedPing : 1;                            // 0x02B2:0 (0x0001)  
	bool                                               bIsSpectator : 1;                                           // 0x02B2:1 (0x0001)  
	bool                                               bOnlySpectator : 1;                                         // 0x02B2:2 (0x0001)  
	bool                                               bIsABot : 1;                                                // 0x02B2:3 (0x0001)  
	unsigned char                                      UnknownBit01 : 1;                                           // 0x02B2:4 (0x0001)  MISSED
	bool                                               bIsInactive : 1;                                            // 0x02B2:5 (0x0001)  
	bool                                               bFromPreviousLevel : 1;                                     // 0x02B2:6 (0x0001)  
	unsigned char                                      UnknownData02_5[0x1];                                       // 0x02B3   (0x0001)  MISSED
	int32_t                                            StartTime;                                                  // 0x02B4   (0x0004)  
	class UClass*                                      EngineMessageClass;                                         // 0x02B8   (0x0008)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x02C0   (0x0008)  MISSED
	FString                                            SavedNetworkAddress;                                        // 0x02C8   (0x0010)  
	FUniqueNetIdRepl                                   UniqueId;                                                   // 0x02D8   (0x0028)  
	unsigned char                                      UnknownData04_6[0x10];                                      // 0x0300   (0x0010)  MISSED
	class APawn*                                       PawnPrivate;                                                // 0x0310   (0x0008)  
	unsigned char                                      UnknownData05_6[0x78];                                      // 0x0318   (0x0078)  MISSED
	FString                                            PlayerNamePrivate;                                          // 0x0390   (0x0010)  
	unsigned char                                      UnknownData06_7[0x10];                                      // 0x03A0   (0x0010)  MISSED
	// void ReceiveOverrideWith(class APlayerState* OldPlayerState);                                                            // [0x25a7960] Event|Protected|BlueprintEvent 
	// void ReceiveCopyProperties(class APlayerState* NewPlayerState);                                                          // [0x25a7960] Event|Protected|BlueprintEvent 
	// void OnRep_UniqueId();                                                                                                   // [0x972eb0] Native|Public        
	// void OnRep_Score();                                                                                                      // [0x46255d0] Native|Public        
	// void OnRep_PlayerName();                                                                                                 // [0x461bf00] Native|Public        
	// void OnRep_PlayerId();                                                                                                   // [0x972ed0] Native|Public        
	// void OnRep_bIsInactive();                                                                                                // [0x46de5f0] Native|Public        
	// FString GetPlayerName();                                                                                                 // [0x4712590] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.PluginCommandlet
/// Size: 0x0020 (32 bytes) (0x000088 - 0x0000A8) align 8 pad: 0x0000
class UPluginCommandlet : public UCommandlet
{ 
public:
	unsigned char                                      UnknownData00_1[0x20];                                      // 0x0088   (0x0020)  MISSED
};

/// Class /Script/Engine.PointLight
/// Size: 0x0008 (8 bytes) (0x0002B8 - 0x0002C0) align 8 pad: 0x0000
class APointLight : public ALight
{ 
public:
	class UPointLightComponent*                        PointLightComponent;                                        // 0x02B8   (0x0008)  
	// void SetRadius(float NewRadius);                                                                                         // [0x47130a0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetLightFalloffExponent(float NewLightFalloffExponent);                                                             // [0x4712e90] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void HaloPointParaUpdate();                                                                                              // [0x25a7960] Event|Public|BlueprintEvent 
};

/// Class /Script/Engine.PointLightComponent
/// Size: 0x0020 (32 bytes) (0x0003D0 - 0x0003F0) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class UPointLightComponent : public ULocalLightComponent
{ 
public:
	bool                                               bUseInverseSquaredFalloff : 1;                              // 0x03D0:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x03D1   (0x0003)  MISSED
	float                                              LightFalloffExponent;                                       // 0x03D4   (0x0004)  
	float                                              SourceRadius;                                               // 0x03D8   (0x0004)  
	float                                              SoftSourceRadius;                                           // 0x03DC   (0x0004)  
	float                                              SourceLength;                                               // 0x03E0   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x03E4   (0x0004)  MISSED
	// void SetSourceRadius(float bNewValue);                                                                                   // [0x4713220] Final|Native|Public|BlueprintCallable 
	// void SetSourceLength(float NewValue);                                                                                    // [0x47131a0] Final|Native|Public|BlueprintCallable 
	// void SetSoftSourceRadius(float bNewValue);                                                                               // [0x4713120] Final|Native|Public|BlueprintCallable 
	// void SetLightFalloffExponent(float NewLightFalloffExponent);                                                             // [0x4712f10] Final|Native|Public|BlueprintCallable 
};
#pragma pack(pop)

/// Class /Script/Engine.Polys
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UPolys : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0030   (0x0010)  MISSED
};

/// Class /Script/Engine.PoseableMeshComponent
/// Size: 0x01C0 (448 bytes) (0x0007D0 - 0x000990) align 16 pad: 0x0000
class UPoseableMeshComponent : public USkinnedMeshComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x1C0];                                     // 0x07D0   (0x01C0)  MISSED
	// void SetBoneTransformByName(FName BoneName, FTransform& InTransform, TEnumAsByte<EBoneSpaces> BoneSpace);                // [0x4712d10] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetBoneScaleByName(FName BoneName, FVector InScale3D, TEnumAsByte<EBoneSpaces> BoneSpace);                          // [0x4712bd0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetBoneRotationByName(FName BoneName, FRotator InRotation, TEnumAsByte<EBoneSpaces> BoneSpace);                     // [0x4712a90] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetBoneLocationByName(FName BoneName, FVector InLocation, TEnumAsByte<EBoneSpaces> BoneSpace);                      // [0x4712950] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void ResetBoneTransformByName(FName BoneName);                                                                           // [0x47127b0] Final|Native|Public|BlueprintCallable 
	// FTransform GetBoneTransformByName(FName BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);                                   // [0x4712460] Final|Native|Public|HasDefaults|BlueprintCallable 
	// FVector GetBoneScaleByName(FName BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);                                          // [0x4712350] Final|Native|Public|HasDefaults|BlueprintCallable 
	// FRotator GetBoneRotationByName(FName BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);                                      // [0x4712240] Final|Native|Public|HasDefaults|BlueprintCallable 
	// FVector GetBoneLocationByName(FName BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);                                       // [0x4712130] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void CopyPoseFromSkeletalComponent(class USkeletalMeshComponent* InComponentToCopy);                                     // [0x47120a0] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.PoseData
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align 8 pad: 0x0000
struct FPoseData
{ 
	TArray<FTransform>                                 LocalSpacePose;                                             // 0x0000   (0x0010)  
	SDK_UNDEFINED(80,208) /* TMap<int32_t, int32_t> */ __um(TrackToBufferIndex);                                   // 0x0010   (0x0050)  
	TArray<float>                                      CurveData;                                                  // 0x0060   (0x0010)  
};

/// Struct /Script/Engine.PoseDataContainer
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align 8 pad: 0x0000
struct FPoseDataContainer
{ 
	TArray<FSmartName>                                 PoseNames;                                                  // 0x0000   (0x0010)  
	TArray<FName>                                      Tracks;                                                     // 0x0010   (0x0010)  
	SDK_UNDEFINED(80,209) /* TMap<FName, int32_t> */   __um(TrackMap);                                             // 0x0020   (0x0050)  
	TArray<FPoseData>                                  Poses;                                                      // 0x0070   (0x0010)  
	TArray<FAnimCurveBase>                             Curves;                                                     // 0x0080   (0x0010)  
};

/// Class /Script/Engine.PoseAsset
/// Size: 0x00A8 (168 bytes) (0x000088 - 0x000130) align 8 pad: 0x0000
class UPoseAsset : public UAnimationAsset
{ 
public:
	FPoseDataContainer                                 PoseContainer;                                              // 0x0088   (0x0090)  
	bool                                               bAdditivePose;                                              // 0x0118   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0119   (0x0003)  MISSED
	int32_t                                            BasePoseIndex;                                              // 0x011C   (0x0004)  
	FName                                              RetargetSource;                                             // 0x0120   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x012C   (0x0004)  MISSED
};

/// Class /Script/Engine.PoseWatch
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UPoseWatch : public UObject
{ 
public:
	class UEdGraphNode*                                Node;                                                       // 0x0030   (0x0008)  
	FColor                                             PoseWatchColour;                                            // 0x0038   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/Engine.PrecomputedVisibilityOverrideVolume
/// Size: 0x0030 (48 bytes) (0x0002E0 - 0x000310) align 8 pad: 0x0000
class APrecomputedVisibilityOverrideVolume : public AVolume
{ 
public:
	TArray<class AActor*>                              OverrideVisibleActors;                                      // 0x02E0   (0x0010)  
	TArray<class AActor*>                              OverrideInvisibleActors;                                    // 0x02F0   (0x0010)  
	TArray<FName>                                      OverrideInvisibleLevels;                                    // 0x0300   (0x0010)  
};

/// Class /Script/Engine.PrecomputedVisibilityVolume
/// Size: 0x0000 (0 bytes) (0x0002E0 - 0x0002E0) align 8 pad: 0x0000
class APrecomputedVisibilityVolume : public AVolume
{ 
public:
};

/// Class /Script/Engine.PreviewCollectionInterface
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UPreviewCollectionInterface : public UInterface
{ 
public:
};

/// Struct /Script/Engine.PreviewMeshCollectionEntry
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FPreviewMeshCollectionEntry
{ 
	SDK_UNDEFINED(48,210) /* TWeakObjectPtr<USkeletalMesh*> */ __um(SkeletalMesh);                                 // 0x0000   (0x0030)  
};

/// Class /Script/Engine.PreviewMeshCollection
/// Size: 0x0020 (32 bytes) (0x000038 - 0x000058) align 8 pad: 0x0000
class UPreviewMeshCollection : public UDataAsset
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0038   (0x0008)  MISSED
	class USkeleton*                                   Skeleton;                                                   // 0x0040   (0x0008)  
	TArray<FPreviewMeshCollectionEntry>                SkeletalMeshes;                                             // 0x0048   (0x0010)  
};

/// Struct /Script/Engine.CollectionReference
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FCollectionReference
{ 
	FName                                              CollectionName;                                             // 0x0000   (0x000C)  
};

/// Class /Script/Engine.PrimaryAssetLabel
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000078) align 8 pad: 0x0000
class UPrimaryAssetLabel : public UPrimaryDataAsset
{ 
public:
	FPrimaryAssetRules                                 Rules;                                                      // 0x0038   (0x000C)  
	bool                                               bLabelAssetsInMyDirectory : 1;                              // 0x0044:0 (0x0001)  
	bool                                               bIsRuntimeLabel : 1;                                        // 0x0044:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0045   (0x0003)  MISSED
	SDK_UNDEFINED(16,211) /* TArray<TWeakObjectPtr<UObject*>> */ __um(ExplicitAssets);                             // 0x0048   (0x0010)  
	SDK_UNDEFINED(16,212) /* TArray<TWeakObjectPtr<UClass*>> */ __um(ExplicitBlueprints);                          // 0x0058   (0x0010)  
	FCollectionReference                               AssetCollection;                                            // 0x0068   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0074   (0x0004)  MISSED
};

/// Class /Script/Engine.RenderSwitchSettings
/// Size: 0x0050 (80 bytes) (0x000048 - 0x000098) align 8 pad: 0x0000
class URenderSwitchSettings : public UDeveloperSettings
{ 
public:
	TArray<FString>                                    SceneMaterials;                                             // 0x0048   (0x0010)  
	TArray<FString>                                    HLODMaterials;                                              // 0x0058   (0x0010)  
	TArray<FString>                                    TerrainHLODMaterials;                                       // 0x0068   (0x0010)  
	TArray<FString>                                    DecalMaterials;                                             // 0x0078   (0x0010)  
	TArray<FString>                                    OtherMaterials;                                             // 0x0088   (0x0010)  
};

/// Class /Script/Engine.ProjectileMovementComponent
/// Size: 0x00E0 (224 bytes) (0x000100 - 0x0001E0) align 16 pad: 0x0000
class UProjectileMovementComponent : public UMovementComponent
{ 
public:
	float                                              InitialSpeed;                                               // 0x0100   (0x0004)  
	float                                              MaxSpeed;                                                   // 0x0104   (0x0004)  
	bool                                               bRotationFollowsVelocity : 1;                               // 0x0108:0 (0x0001)  
	bool                                               bRotationRemainsVertical : 1;                               // 0x0108:1 (0x0001)  
	bool                                               bShouldBounce : 1;                                          // 0x0108:2 (0x0001)  
	bool                                               bInitialVelocityInLocalSpace : 1;                           // 0x0108:3 (0x0001)  
	bool                                               bForceSubStepping : 1;                                      // 0x0108:4 (0x0001)  
	bool                                               bSimulationEnabled : 1;                                     // 0x0108:5 (0x0001)  
	bool                                               bSweepCollision : 1;                                        // 0x0108:6 (0x0001)  
	bool                                               bIsHomingProjectile : 1;                                    // 0x0108:7 (0x0001)  
	bool                                               bBounceAngleAffectsFriction : 1;                            // 0x0109:0 (0x0001)  
	bool                                               bIsSliding : 1;                                             // 0x0109:1 (0x0001)  
	bool                                               bInterpMovement : 1;                                        // 0x0109:2 (0x0001)  
	bool                                               bInterpRotation : 1;                                        // 0x0109:3 (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x010A   (0x0002)  MISSED
	float                                              PreviousHitTime;                                            // 0x010C   (0x0004)  
	FVector                                            PreviousHitNormal;                                          // 0x0110   (0x000C)  
	float                                              ProjectileGravityScale;                                     // 0x011C   (0x0004)  
	float                                              Buoyancy;                                                   // 0x0120   (0x0004)  
	float                                              Bounciness;                                                 // 0x0124   (0x0004)  
	float                                              Friction;                                                   // 0x0128   (0x0004)  
	float                                              BounceVelocityStopSimulatingThreshold;                      // 0x012C   (0x0004)  
	float                                              MinFrictionFraction;                                        // 0x0130   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0134   (0x0004)  MISSED
	SDK_UNDEFINED(16,213) /* FMulticastInlineDelegate */ __um(OnProjectileBounce);                                 // 0x0138   (0x0010)  
	SDK_UNDEFINED(16,214) /* FMulticastInlineDelegate */ __um(OnProjectileStop);                                   // 0x0148   (0x0010)  
	float                                              HomingAccelerationMagnitude;                                // 0x0158   (0x0004)  
	SDK_UNDEFINED(8,215) /* TWeakObjectPtr<USceneComponent*> */ __um(HomingTargetComponent);                       // 0x015C   (0x0008)  
	float                                              MaxSimulationTimeStep;                                      // 0x0164   (0x0004)  
	int32_t                                            MaxSimulationIterations;                                    // 0x0168   (0x0004)  
	int32_t                                            BounceAdditionalIterations;                                 // 0x016C   (0x0004)  
	float                                              InterpLocationTime;                                         // 0x0170   (0x0004)  
	float                                              InterpRotationTime;                                         // 0x0174   (0x0004)  
	float                                              InterpLocationMaxLagDistance;                               // 0x0178   (0x0004)  
	float                                              InterpLocationSnapToTargetDistance;                         // 0x017C   (0x0004)  
	unsigned char                                      UnknownData02_7[0x60];                                      // 0x0180   (0x0060)  MISSED
	// void StopSimulating(FHitResult& HitResult);                                                                              // [0x47201b0] Native|Public|HasOutParms|BlueprintCallable 
	// void SetVelocityInLocalSpace(FVector NewVelocity);                                                                       // [0x4720120] Native|Public|HasDefaults|BlueprintCallable 
	// void SetInterpolatedComponent(class USceneComponent* Component);                                                         // [0x4720000] Native|Public|BlueprintCallable 
	// void ResetInterpolation();                                                                                               // [0x45e4240] Native|Public|BlueprintCallable 
	// void OnProjectileStopDelegate__DelegateSignature(FHitResult& ImpactResult);                                              // [0x25a7960] MulticastDelegate|Public|Delegate|HasOutParms 
	// void OnProjectileBounceDelegate__DelegateSignature(FHitResult& ImpactResult, FVector& ImpactVelocity);                   // [0x25a7960] MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults 
	// void MoveInterpolationTarget(FVector& NewLocation, FRotator& NewRotation);                                               // [0x471fd90] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// FVector LimitVelocity(FVector NewVelocity);                                                                              // [0x471fce0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// bool IsVelocityUnderSimulationThreshold();                                                                               // [0x471fc80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsInterpolationComplete();                                                                                          // [0x471fc50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.ProxyLODMeshSimplificationSettings
/// Size: 0x0010 (16 bytes) (0x000048 - 0x000058) align 8 pad: 0x0000
class UProxyLODMeshSimplificationSettings : public UDeveloperSettings
{ 
public:
	FName                                              ProxyLODMeshReductionModuleName;                            // 0x0048   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.RadialForceActor
/// Size: 0x0008 (8 bytes) (0x0002A8 - 0x0002B0) align 8 pad: 0x0000
class ARadialForceActor : public ARigidBodyBase
{ 
public:
	class URadialForceComponent*                       ForceComponent;                                             // 0x02A8   (0x0008)  
	// void ToggleForce();                                                                                                      // [0x972ed0] Native|Public|BlueprintCallable 
	// void FireImpulse();                                                                                                      // [0x46255d0] Native|Public|BlueprintCallable 
	// void EnableForce();                                                                                                      // [0x461bf00] Native|Public|BlueprintCallable 
	// void DisableForce();                                                                                                     // [0x46de5f0] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.RadialForceComponent
/// Size: 0x0038 (56 bytes) (0x000218 - 0x000250) align 16 pad: 0x0000
class URadialForceComponent : public USceneComponent
{ 
public:
	float                                              Radius;                                                     // 0x0218   (0x0004)  
	TEnumAsByte<ERadialImpulseFalloff>                 Falloff;                                                    // 0x021C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x021D   (0x0003)  MISSED
	float                                              ImpulseStrength;                                            // 0x0220   (0x0004)  
	bool                                               bImpulseVelChange : 1;                                      // 0x0224:0 (0x0001)  
	bool                                               bIgnoreOwningActor : 1;                                     // 0x0224:1 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0225   (0x0003)  MISSED
	float                                              ForceStrength;                                              // 0x0228   (0x0004)  
	float                                              DestructibleDamage;                                         // 0x022C   (0x0004)  
	SDK_UNDEFINED(16,216) /* TArray<TEnumAsByte<EObjectTypeQuery>> */ __um(ObjectTypesToAffect);                   // 0x0230   (0x0010)  
	unsigned char                                      UnknownData02_7[0x10];                                      // 0x0240   (0x0010)  MISSED
	// void RemoveObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType);                                                 // [0x471fe80] Native|Public|BlueprintCallable 
	// void FireImpulse();                                                                                                      // [0x3657aa0] Native|Public|BlueprintCallable 
	// void AddObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType);                                                    // [0x471fbd0] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.RBFCurveSettings
/// Size: 0x0010 (16 bytes) (0x000048 - 0x000058) align 8 pad: 0x0000
class URBFCurveSettings : public UDeveloperSettings
{ 
public:
	TArray<FString>                                    RBFCurveNames;                                              // 0x0048   (0x0010)  
};

/// Struct /Script/Engine.RBFWeightModifier
/// Size: 0x00A8 (168 bytes) (0x000000 - 0x0000A8) align 8 pad: 0x0000
struct FRBFWeightModifier
{ 
	FName                                              SrcWeight;                                                  // 0x0000   (0x000C)  
	int32_t                                            DstDriverIndex;                                             // 0x000C   (0x0004)  
	FName                                              DstWeight;                                                  // 0x0010   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	FRuntimeFloatCurve                                 FactorCurve;                                                // 0x0020   (0x0088)  
};

/// Struct /Script/Engine.RBFDriverPose
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FRBFDriverPose
{ 
	ERBFDriverAttribute                                Attribute;                                                  // 0x0000   (0x0004)  
	float                                              Value;                                                      // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.RBFDrivenWeight
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FRBFDrivenWeight
{ 
	FName                                              Name;                                                       // 0x0000   (0x000C)  
	float                                              Value;                                                      // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.RBFDriveSetting
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FRBFDriveSetting
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	TArray<FRBFDriverPose>                             DriverPoses;                                                // 0x0008   (0x0010)  
	TArray<FRBFDrivenWeight>                           DrivenWeights;                                              // 0x0018   (0x0010)  
};

/// Class /Script/Engine.RBFDriver
/// Size: 0x0110 (272 bytes) (0x000030 - 0x000140) align 8 pad: 0x0000
class URBFDriver : public UObject
{ 
public:
	FName                                              DriverName;                                                 // 0x0030   (0x000C)  
	FName                                              DriverBoneName;                                             // 0x003C   (0x000C)  
	FName                                              BaseBoneName;                                               // 0x0048   (0x000C)  
	ERBFDistanceType                                   DistanceType;                                               // 0x0054   (0x0004)  
	ERBFKernalType                                     KernalType;                                                 // 0x0058   (0x0004)  
	ERBFSolveInterpMode                                SolveInterpMode;                                            // 0x005C   (0x0004)  
	TEnumAsByte<ERichCurveInterpMode>                  BakingCurveInterpMode;                                      // 0x0060   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0061   (0x0003)  MISSED
	int32_t                                            BakingCurvePrecisionFactor;                                 // 0x0064   (0x0004)  
	FRBFWeightModifier                                 WeightModifier;                                             // 0x0068   (0x00A8)  
	TArray<ERBFDriverAttribute>                        DriverAttributes;                                           // 0x0110   (0x0010)  
	TArray<FName>                                      DrivenMorphTargets;                                         // 0x0120   (0x0010)  
	TArray<FRBFDriveSetting>                           DriveSettings;                                              // 0x0130   (0x0010)  
};

/// Class /Script/Engine.RBFPrecomputations
/// Size: 0x0060 (96 bytes) (0x000030 - 0x000090) align 8 pad: 0x0000
class URBFPrecomputations : public UObject
{ 
public:
	FString                                            LastSkeletonPath;                                           // 0x0030   (0x0010)  
	SDK_UNDEFINED(80,217) /* TMap<FName, FRBFPrecomputation> */ __um(Precomputations);                             // 0x0040   (0x0050)  
};

/// Class /Script/Engine.RectLight
/// Size: 0x0008 (8 bytes) (0x0002B8 - 0x0002C0) align 8 pad: 0x0000
class ARectLight : public ALight
{ 
public:
	class URectLightComponent*                         RectLightComponent;                                         // 0x02B8   (0x0008)  
};

/// Class /Script/Engine.RectLightComponent
/// Size: 0x0020 (32 bytes) (0x0003D0 - 0x0003F0) align 16 pad: 0x0000
class URectLightComponent : public ULocalLightComponent
{ 
public:
	float                                              SourceWidth;                                                // 0x03D0   (0x0004)  
	float                                              SourceHeight;                                               // 0x03D4   (0x0004)  
	float                                              BarnDoorAngle;                                              // 0x03D8   (0x0004)  
	float                                              BarnDoorLength;                                             // 0x03DC   (0x0004)  
	class UTexture*                                    SourceTexture;                                              // 0x03E0   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x03E8   (0x0008)  MISSED
	// void SetSourceWidth(float bNewValue);                                                                                    // [0x4616230] Final|Native|Public|BlueprintCallable 
	// void SetSourceTexture(class UTexture* bNewValue);                                                                        // [0x4720090] Final|Native|Public|BlueprintCallable 
	// void SetSourceHeight(float NewValue);                                                                                    // [0x4712f10] Final|Native|Public|BlueprintCallable 
	// void SetBarnDoorLength(float NewValue);                                                                                  // [0x471ff80] Final|Native|Public|BlueprintCallable 
	// void SetBarnDoorAngle(float NewValue);                                                                                   // [0x471ff00] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.RendererSettings
/// Size: 0x02D8 (728 bytes) (0x000048 - 0x000320) align 16 pad: 0x0000
class URendererSettings : public UDeveloperSettings
{ 
public:
	bool                                               bMobileDisableVertexFog : 1;                                // 0x0048:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0049   (0x0003)  MISSED
	int32_t                                            MaxMobileCascades;                                          // 0x004C   (0x0004)  
	TEnumAsByte<EMobileMSAASampleCount>                MobileMSAASampleCount;                                      // 0x0050   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0051   (0x0003)  MISSED
	bool                                               bMobileAllowDitheredLODTransition : 1;                      // 0x0054:0 (0x0001)  
	bool                                               bAllowSoftwareOcclusionCulling : 1;                         // 0x0054:1 (0x0001)  
	bool                                               bMobileVirtualTextures : 1;                                 // 0x0054:2 (0x0001)  
	bool                                               bDiscardUnusedQualityLevels : 1;                            // 0x0054:3 (0x0001)  
	bool                                               bOcclusionCulling : 1;                                      // 0x0054:4 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0055   (0x0003)  MISSED
	float                                              MinScreenRadiusForLights;                                   // 0x0058   (0x0004)  
	float                                              MinScreenRadiusForEarlyZPass;                               // 0x005C   (0x0004)  
	float                                              MinScreenRadiusForCSMdepth;                                 // 0x0060   (0x0004)  
	bool                                               bPrecomputedVisibilityWarning : 1;                          // 0x0064:0 (0x0001)  
	bool                                               bTextureStreaming : 1;                                      // 0x0064:1 (0x0001)  
	bool                                               bUseDXT5NormalMaps : 1;                                     // 0x0064:2 (0x0001)  
	bool                                               bVirtualTextures : 1;                                       // 0x0064:3 (0x0001)  
	bool                                               bVirtualTexturedLightmaps : 1;                              // 0x0064:4 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0065   (0x0003)  MISSED
	uint32_t                                           VirtualTextureTileSize;                                     // 0x0068   (0x0004)  
	uint32_t                                           VirtualTextureTileBorderSize;                               // 0x006C   (0x0004)  
	uint32_t                                           VirtualTextureFeedbackFactor;                               // 0x0070   (0x0004)  
	bool                                               bVirtualTextureEnableCompressZlib : 1;                      // 0x0074:0 (0x0001)  
	bool                                               bVirtualTextureEnableCompressCrunch : 1;                    // 0x0074:1 (0x0001)  
	bool                                               bClearCoatEnableSecondNormal : 1;                           // 0x0074:2 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0075   (0x0003)  MISSED
	int32_t                                            ReflectionCaptureResolution;                                // 0x0078   (0x0004)  
	bool                                               bReflectionCaptureCompression : 1;                          // 0x007C:0 (0x0001)  
	bool                                               ReflectionEnvironmentLightmapMixBasedOnRoughness : 1;       // 0x007C:1 (0x0001)  
	bool                                               bForwardShading : 1;                                        // 0x007C:2 (0x0001)  
	bool                                               bVertexFoggingForOpaque : 1;                                // 0x007C:3 (0x0001)  
	bool                                               bAllowStaticLighting : 1;                                   // 0x007C:4 (0x0001)  
	bool                                               bUseNormalMapsForStaticLighting : 1;                        // 0x007C:5 (0x0001)  
	bool                                               bGenerateMeshDistanceFields : 1;                            // 0x007C:6 (0x0001)  
	bool                                               bEightBitMeshDistanceFields : 1;                            // 0x007C:7 (0x0001)  
	bool                                               bGenerateLandscapeGIData : 1;                               // 0x007D:0 (0x0001)  
	bool                                               bCompressMeshDistanceFields : 1;                            // 0x007D:1 (0x0001)  
	unsigned char                                      UnknownData05_5[0x2];                                       // 0x007E   (0x0002)  MISSED
	float                                              TessellationAdaptivePixelsPerTriangle;                      // 0x0080   (0x0004)  
	bool                                               bSeparateTranslucency : 1;                                  // 0x0084:0 (0x0001)  
	unsigned char                                      UnknownData06_5[0x3];                                       // 0x0085   (0x0003)  MISSED
	TEnumAsByte<ETranslucentSortPolicy>                TranslucentSortPolicy;                                      // 0x0088   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0089   (0x0003)  MISSED
	FVector                                            TranslucentSortAxis;                                        // 0x008C   (0x000C)  
	TEnumAsByte<EFixedFoveationLevels>                 HMDFixedFoveationLevel;                                     // 0x0098   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x0099   (0x0003)  MISSED
	bool                                               bHMDFixedFoveationDynamic : 1;                              // 0x009C:0 (0x0001)  
	unsigned char                                      UnknownData09_5[0x3];                                       // 0x009D   (0x0003)  MISSED
	TEnumAsByte<ECustomDepthStencil>                   CustomDepthStencil;                                         // 0x00A0   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x00A1   (0x0003)  MISSED
	bool                                               bCustomDepthTaaJitter : 1;                                  // 0x00A4:0 (0x0001)  
	unsigned char                                      UnknownData11_5[0x3];                                       // 0x00A5   (0x0003)  MISSED
	TEnumAsByte<EAlphaChannelMode>                     bEnableAlphaChannelInPostProcessing;                        // 0x00A8   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x00A9   (0x0003)  MISSED
	bool                                               bDefaultFeatureBloom : 1;                                   // 0x00AC:0 (0x0001)  
	bool                                               bDefaultFeatureAmbientOcclusion : 1;                        // 0x00AC:1 (0x0001)  
	bool                                               bDefaultFeatureAmbientOcclusionStaticFraction : 1;          // 0x00AC:2 (0x0001)  
	bool                                               bDefaultFeatureAutoExposure : 1;                            // 0x00AC:3 (0x0001)  
	unsigned char                                      UnknownData13_5[0x3];                                       // 0x00AD   (0x0003)  MISSED
	TEnumAsByte<EAutoExposureMethodUI>                 DefaultFeatureAutoExposure;                                 // 0x00B0   (0x0001)  
	unsigned char                                      UnknownData14_6[0x3];                                       // 0x00B1   (0x0003)  MISSED
	float                                              DefaultFeatureAutoExposureBias;                             // 0x00B4   (0x0004)  
	bool                                               bExtendDefaultLuminanceRangeInAutoExposureSettings : 1;     // 0x00B8:0 (0x0001)  
	bool                                               bUsePreExposure : 1;                                        // 0x00B8:1 (0x0001)  
	bool                                               bEnablePreExposureOnlyInTheEditor : 1;                      // 0x00B8:2 (0x0001)  
	bool                                               bDefaultFeatureMotionBlur : 1;                              // 0x00B8:3 (0x0001)  
	bool                                               bDefaultFeatureLensFlare : 1;                               // 0x00B8:4 (0x0001)  
	bool                                               bTemporalUpsampling : 1;                                    // 0x00B8:5 (0x0001)  
	bool                                               bSSGI : 1;                                                  // 0x00B8:6 (0x0001)  
	unsigned char                                      UnknownData15_5[0x3];                                       // 0x00B9   (0x0003)  MISSED
	TEnumAsByte<EAntiAliasingMethod>                   DefaultFeatureAntiAliasing;                                 // 0x00BC   (0x0001)  
	unsigned char                                      UnknownData16_6[0x3];                                       // 0x00BD   (0x0003)  MISSED
	bool                                               bEnableKuroFogRendering : 1;                                // 0x00C0:0 (0x0001)  
	bool                                               bEnableKuroMobileGGX : 1;                                   // 0x00C0:1 (0x0001)  
	unsigned char                                      UnknownData17_5[0x3];                                       // 0x00C1   (0x0003)  MISSED
	TEnumAsByte<EKuroSMAAInsertPosition>               KuroSMAAInsertPosition;                                     // 0x00C4   (0x0001)  
	unsigned char                                      UnknownData18_6[0x3];                                       // 0x00C5   (0x0003)  MISSED
	bool                                               KuroRenderSwitch : 1;                                       // 0x00C8:0 (0x0001)  
	unsigned char                                      UnknownData19_5[0x7];                                       // 0x00C9   (0x0007)  MISSED
	FVector4                                           KuroLightCullDistanceType1;                                 // 0x00D0   (0x0010)  
	FVector4                                           KuroLightCullDistanceType2;                                 // 0x00E0   (0x0010)  
	FVector4                                           KuroLightCullDistanceType3;                                 // 0x00F0   (0x0010)  
	FVector4                                           KuroLightCullDistanceType4;                                 // 0x0100   (0x0010)  
	FVector4                                           KuroLightCullDistanceType5;                                 // 0x0110   (0x0010)  
	FVector4                                           KuroMobileLightCullDistanceType1;                           // 0x0120   (0x0010)  
	FVector4                                           KuroMobileLightCullDistanceType2;                           // 0x0130   (0x0010)  
	FVector4                                           KuroMobileLightCullDistanceType3;                           // 0x0140   (0x0010)  
	FVector4                                           KuroMobileLightCullDistanceType4;                           // 0x0150   (0x0010)  
	FVector4                                           KuroMobileLightCullDistanceType5;                           // 0x0160   (0x0010)  
	FVector4                                           KuroCGModeLightCullDistanceType1;                           // 0x0170   (0x0010)  
	FVector4                                           KuroCGModeLightCullDistanceType2;                           // 0x0180   (0x0010)  
	FVector4                                           KuroCGModeLightCullDistanceType3;                           // 0x0190   (0x0010)  
	FVector4                                           KuroCGModeLightCullDistanceType4;                           // 0x01A0   (0x0010)  
	FVector4                                           KuroCGModeLightCullDistanceType5;                           // 0x01B0   (0x0010)  
	float                                              EnableKuroFoliageCulling;                                   // 0x01C0   (0x0004)  
	float                                              KuroFoliageNearCullDistanceMin;                             // 0x01C4   (0x0004)  
	float                                              KuroFoliageNearCullDistanceMax;                             // 0x01C8   (0x0004)  
	float                                              KuroFoliageMobileNearCullDistanceMin;                       // 0x01CC   (0x0004)  
	float                                              KuroFoliageMobileNearCullDistanceMax;                       // 0x01D0   (0x0004)  
	float                                              KuroFoliageMiddleCullDistanceMin;                           // 0x01D4   (0x0004)  
	float                                              KuroFoliageMiddleCullDistanceMax;                           // 0x01D8   (0x0004)  
	float                                              KuroFoliageMobileMiddleCullDistanceMin;                     // 0x01DC   (0x0004)  
	float                                              KuroFoliageMobileMiddleCullDistanceMax;                     // 0x01E0   (0x0004)  
	float                                              KuroFoliageFarCullDistanceMin;                              // 0x01E4   (0x0004)  
	float                                              KuroFoliageFarCullDistanceMax;                              // 0x01E8   (0x0004)  
	float                                              KuroFoliageMobileFarCullDistanceMin;                        // 0x01EC   (0x0004)  
	float                                              KuroFoliageMobileFarCullDistanceMax;                        // 0x01F0   (0x0004)  
	float                                              KuroFoliageSuperFarCullDistanceMin;                         // 0x01F4   (0x0004)  
	float                                              KuroFoliageSuperFarCullDistanceMax;                         // 0x01F8   (0x0004)  
	float                                              KuroFoliageMobileSuperFarCullDistanceMin;                   // 0x01FC   (0x0004)  
	float                                              KuroFoliageMobileSuperFarCullDistanceMax;                   // 0x0200   (0x0004)  
	float                                              KuroImpostorFoliageCullDistanceMin;                         // 0x0204   (0x0004)  
	float                                              KuroImpostorFoliageCullDistanceMax;                         // 0x0208   (0x0004)  
	float                                              KuroImpostorMobileFoliageCullDistanceMin;                   // 0x020C   (0x0004)  
	float                                              KuroImpostorMobileFoliageCullDistanceMax;                   // 0x0210   (0x0004)  
	float                                              KuroGrassFoliageCullDistanceMin;                            // 0x0214   (0x0004)  
	float                                              KuroGrassFoliageCullDistanceMax;                            // 0x0218   (0x0004)  
	float                                              KuroGrassMobileFoliageCullDistanceMin;                      // 0x021C   (0x0004)  
	float                                              KuroGrassMobileFoliageCullDistanceMax;                      // 0x0220   (0x0004)  
	float                                              KuroPcgCullDistanceMin;                                     // 0x0224   (0x0004)  
	float                                              KuroPcgCullDistanceMax;                                     // 0x0228   (0x0004)  
	float                                              KuroPcgMobileCullDistanceMin;                               // 0x022C   (0x0004)  
	float                                              KuroPcgMobileCullDistanceMax;                               // 0x0230   (0x0004)  
	unsigned char                                      UnknownData20_6[0x4];                                       // 0x0234   (0x0004)  MISSED
	FSoftObjectPath                                    VolumeNoisePath;                                            // 0x0238   (0x0020)  
	float                                              WaveLengthHigh;                                             // 0x0258   (0x0004)  
	float                                              WaveLengthMedium;                                           // 0x025C   (0x0004)  
	float                                              WaveLengthLow;                                              // 0x0260   (0x0004)  
	float                                              KuroVolumetricCloudPhaseG;                                  // 0x0264   (0x0004)  
	ELightUnits                                        DefaultLightUnits;                                          // 0x0268   (0x0001)  
	TEnumAsByte<EDefaultBackBufferPixelFormat>         DefaultBackBufferPixelFormat;                               // 0x0269   (0x0001)  
	unsigned char                                      UnknownData21_6[0x2];                                       // 0x026A   (0x0002)  MISSED
	bool                                               bRenderUnbuiltPreviewShadowsInGame : 1;                     // 0x026C:0 (0x0001)  
	bool                                               bStencilForLODDither : 1;                                   // 0x026C:1 (0x0001)  
	unsigned char                                      UnknownData22_5[0x3];                                       // 0x026D   (0x0003)  MISSED
	TEnumAsByte<EEarlyZPass>                           EarlyZPass;                                                 // 0x0270   (0x0001)  
	unsigned char                                      UnknownData23_6[0x3];                                       // 0x0271   (0x0003)  MISSED
	bool                                               bEarlyZPassOnlyMaterialMasking : 1;                         // 0x0274:0 (0x0001)  
	bool                                               bDBuffer : 1;                                               // 0x0274:1 (0x0001)  
	unsigned char                                      UnknownData24_5[0x3];                                       // 0x0275   (0x0003)  MISSED
	TEnumAsByte<EClearSceneOptions>                    ClearSceneMethod;                                           // 0x0278   (0x0001)  
	unsigned char                                      UnknownData25_6[0x3];                                       // 0x0279   (0x0003)  MISSED
	bool                                               bBasePassOutputsVelocity : 1;                               // 0x027C:0 (0x0001)  
	bool                                               bVertexDeformationOutputsVelocity : 1;                      // 0x027C:1 (0x0001)  
	bool                                               bSelectiveBasePassOutputs : 1;                              // 0x027C:2 (0x0001)  
	bool                                               bDefaultParticleCutouts : 1;                                // 0x027C:3 (0x0001)  
	unsigned char                                      UnknownData26_5[0x3];                                       // 0x027D   (0x0003)  MISSED
	int32_t                                            GPUSimulationTextureSizeX;                                  // 0x0280   (0x0004)  
	int32_t                                            GPUSimulationTextureSizeY;                                  // 0x0284   (0x0004)  
	bool                                               bGlobalClipPlane : 1;                                       // 0x0288:0 (0x0001)  
	unsigned char                                      UnknownData27_5[0x3];                                       // 0x0289   (0x0003)  MISSED
	TEnumAsByte<EGBufferFormat>                        GBufferFormat;                                              // 0x028C   (0x0001)  
	unsigned char                                      UnknownData28_6[0x3];                                       // 0x028D   (0x0003)  MISSED
	bool                                               bUseGPUMorphTargets : 1;                                    // 0x0290:0 (0x0001)  
	bool                                               bNvidiaAftermathEnabled : 1;                                // 0x0290:1 (0x0001)  
	bool                                               bMultiView : 1;                                             // 0x0290:2 (0x0001)  
	bool                                               bMobilePostProcessing : 1;                                  // 0x0290:3 (0x0001)  
	bool                                               bMobileMultiView : 1;                                       // 0x0290:4 (0x0001)  
	bool                                               bMobileUseHWsRGBEncoding : 1;                               // 0x0290:5 (0x0001)  
	bool                                               bRoundRobinOcclusion : 1;                                   // 0x0290:6 (0x0001)  
	bool                                               bODSCapture : 1;                                            // 0x0290:7 (0x0001)  
	bool                                               bMeshStreaming : 1;                                         // 0x0291:0 (0x0001)  
	unsigned char                                      UnknownData29_5[0x2];                                       // 0x0292   (0x0002)  MISSED
	float                                              WireframeCullThreshold;                                     // 0x0294   (0x0004)  
	bool                                               bEnableRayTracing : 1;                                      // 0x0298:0 (0x0001)  
	bool                                               bEnableRayTracingTextureLOD : 1;                            // 0x0298:1 (0x0001)  
	bool                                               bSupportStationarySkylight : 1;                             // 0x0298:2 (0x0001)  
	bool                                               bSupportLowQualityLightmaps : 1;                            // 0x0298:3 (0x0001)  
	bool                                               bSupportPointLightWholeSceneShadows : 1;                    // 0x0298:4 (0x0001)  
	bool                                               bSupportAtmosphericFog : 1;                                 // 0x0298:5 (0x0001)  
	bool                                               bSupportSkyAtmosphere : 1;                                  // 0x0298:6 (0x0001)  
	bool                                               bSupportSkyAtmosphereAffectsHeightFog : 1;                  // 0x0298:7 (0x0001)  
	bool                                               bSupportSkinCacheShaders : 1;                               // 0x0299:0 (0x0001)  
	unsigned char                                      UnknownData30_5[0x2];                                       // 0x029A   (0x0002)  MISSED
	ESkinCacheDefaultBehavior                          DefaultSkinCacheBehavior;                                   // 0x029C   (0x0001)  
	unsigned char                                      UnknownData31_6[0x3];                                       // 0x029D   (0x0003)  MISSED
	float                                              SkinCacheSceneMemoryLimitInMB;                              // 0x02A0   (0x0004)  
	bool                                               bMobileEnableStaticAndCSMShadowReceivers : 1;               // 0x02A4:0 (0x0001)  
	bool                                               bMobileEnableMovableLightCSMShaderCulling : 1;              // 0x02A4:1 (0x0001)  
	bool                                               bMobileAllowDistanceFieldShadows : 1;                       // 0x02A4:2 (0x0001)  
	bool                                               bMobileAllowMovableDirectionalLights : 1;                   // 0x02A4:3 (0x0001)  
	unsigned char                                      UnknownData32_5[0x3];                                       // 0x02A5   (0x0003)  MISSED
	uint32_t                                           MobileNumDynamicPointLights;                                // 0x02A8   (0x0004)  
	bool                                               bMobileDynamicPointLightsUseStaticBranch : 1;               // 0x02AC:0 (0x0001)  
	bool                                               bMobileAllowMovableSpotlights : 1;                          // 0x02AC:1 (0x0001)  
	bool                                               bMobileAllowMovableSpotlightShadows : 1;                    // 0x02AC:2 (0x0001)  
	bool                                               bSupport16BitBoneIndex : 1;                                 // 0x02AC:3 (0x0001)  
	bool                                               bGPUSkinLimit2BoneInfluences : 1;                           // 0x02AC:4 (0x0001)  
	bool                                               bSupportDepthOnlyIndexBuffers : 1;                          // 0x02AC:5 (0x0001)  
	bool                                               bSupportReversedIndexBuffers : 1;                           // 0x02AC:6 (0x0001)  
	bool                                               bLPV : 1;                                                   // 0x02AC:7 (0x0001)  
	bool                                               bMobileAmbientOcclusion : 1;                                // 0x02AD:0 (0x0001)  
	bool                                               bUseUnlimitedBoneInfluences : 1;                            // 0x02AD:1 (0x0001)  
	unsigned char                                      UnknownData33_5[0x2];                                       // 0x02AE   (0x0002)  MISSED
	int32_t                                            UnlimitedBonInfluencesThreshold;                            // 0x02B0   (0x0004)  
	TEnumAsByte<EMobilePlanarReflectionMode>           MobilePlanarReflectionMode;                                 // 0x02B4   (0x0001)  
	FPerPlatformBool                                   bStreamSkeletalMeshLODs;                                    // 0x02B5   (0x0001)  
	FPerPlatformBool                                   bDiscardSkeletalMeshOptionalLODs;                           // 0x02B6   (0x0001)  
	unsigned char                                      UnknownData34_6[0x1];                                       // 0x02B7   (0x0001)  MISSED
	FSoftObjectPath                                    VisualizeCalibrationColorMaterialPath;                      // 0x02B8   (0x0020)  
	FSoftObjectPath                                    VisualizeCalibrationCustomMaterialPath;                     // 0x02D8   (0x0020)  
	FSoftObjectPath                                    VisualizeCalibrationGrayscaleMaterialPath;                  // 0x02F8   (0x0020)  
	unsigned char                                      UnknownData35_7[0x8];                                       // 0x0318   (0x0008)  MISSED
};

/// Class /Script/Engine.RendererOverrideSettings
/// Size: 0x0008 (8 bytes) (0x000048 - 0x000050) align 8 pad: 0x0000
class URendererOverrideSettings : public UDeveloperSettings
{ 
public:
	bool                                               bSupportAllShaderPermutations : 1;                          // 0x0048:0 (0x0001)  
	bool                                               bForceRecomputeTangents : 1;                                // 0x0048:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0049   (0x0007)  MISSED
};

/// Class /Script/Engine.ReplayNetConnection
/// Size: 0x0800 (2048 bytes) (0x001B08 - 0x002308) align 8 pad: 0x0000
class UReplayNetConnection : public UNetConnection
{ 
public:
	unsigned char                                      UnknownData00_1[0x800];                                     // 0x1B08   (0x0800)  MISSED
};

/// Class /Script/Engine.ReplaySubsystem
/// Size: 0x0008 (8 bytes) (0x000038 - 0x000040) align 8 pad: 0x0000
class UReplaySubsystem : public UGameInstanceSubsystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0038   (0x0008)  MISSED
};

/// Class /Script/Engine.ReplicationDriver
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UReplicationDriver : public UObject
{ 
public:
};

/// Class /Script/Engine.ReplicationConnectionDriver
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UReplicationConnectionDriver : public UObject
{ 
public:
};

/// Class /Script/Engine.ReporterBase
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UReporterBase : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0030   (0x0008)  MISSED
};

/// Class /Script/Engine.ReporterGraph
/// Size: 0x0078 (120 bytes) (0x000038 - 0x0000B0) align 8 pad: 0x0000
class UReporterGraph : public UReporterBase
{ 
public:
	unsigned char                                      UnknownData00_1[0x78];                                      // 0x0038   (0x0078)  MISSED
};

/// Class /Script/Engine.ReverbEffect
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000068) align 8 pad: 0x0000
class UReverbEffect : public UObject
{ 
public:
	bool                                               bBypassEarlyReflections;                                    // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	float                                              ReflectionsDelay;                                           // 0x0034   (0x0004)  
	float                                              GainHF;                                                     // 0x0038   (0x0004)  
	float                                              ReflectionsGain;                                            // 0x003C   (0x0004)  
	bool                                               bBypassLateReflections;                                     // 0x0040   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	float                                              LateDelay;                                                  // 0x0044   (0x0004)  
	float                                              DecayTime;                                                  // 0x0048   (0x0004)  
	float                                              Density;                                                    // 0x004C   (0x0004)  
	float                                              Diffusion;                                                  // 0x0050   (0x0004)  
	float                                              AirAbsorptionGainHF;                                        // 0x0054   (0x0004)  
	float                                              DecayHFRatio;                                               // 0x0058   (0x0004)  
	float                                              LateGain;                                                   // 0x005C   (0x0004)  
	float                                              Gain;                                                       // 0x0060   (0x0004)  
	float                                              RoomRolloffFactor;                                          // 0x0064   (0x0004)  
};

/// Struct /Script/Engine.RigTransformConstraint
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FRigTransformConstraint
{ 
	TEnumAsByte<EConstraintTransform>                  TranformType;                                               // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FName                                              ParentSpace;                                                // 0x0004   (0x000C)  
	float                                              Weight;                                                     // 0x0010   (0x0004)  
};

/// Struct /Script/Engine.TransformBaseConstraint
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FTransformBaseConstraint
{ 
	TArray<FRigTransformConstraint>                    TransformConstraints;                                       // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.TransformBase
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FTransformBase
{ 
	FName                                              Node;                                                       // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FTransformBaseConstraint                           Constraints[2];                                             // 0x0010   (0x0020)  
};

/// Struct /Script/Engine.Node
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align 16 pad: 0x0000
struct FNode
{ 
	FName                                              Name;                                                       // 0x0000   (0x000C)  
	FName                                              ParentName;                                                 // 0x000C   (0x000C)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0018   (0x0008)  MISSED
	FTransform                                         Transform;                                                  // 0x0020   (0x0030)  
	FString                                            DisplayName;                                                // 0x0050   (0x0010)  
	bool                                               bAdvanced;                                                  // 0x0060   (0x0001)  
	unsigned char                                      UnknownData01_7[0xF];                                       // 0x0061   (0x000F)  MISSED
};

/// Class /Script/Engine.Rig
/// Size: 0x0028 (40 bytes) (0x000030 - 0x000058) align 8 pad: 0x0000
class URig : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0030   (0x0008)  MISSED
	TArray<FTransformBase>                             TransformBases;                                             // 0x0038   (0x0010)  
	TArray<FNode>                                      Nodes;                                                      // 0x0048   (0x0010)  
};

/// Class /Script/Engine.RotatingMovementComponent
/// Size: 0x0020 (32 bytes) (0x000100 - 0x000120) align 8 pad: 0x0000
class URotatingMovementComponent : public UMovementComponent
{ 
public:
	FRotator                                           RotationRate;                                               // 0x0100   (0x000C)  
	FVector                                            PivotTranslation;                                           // 0x010C   (0x000C)  
	bool                                               bRotationInLocalSpace : 1;                                  // 0x0118:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0119   (0x0007)  MISSED
};

/// Class /Script/Engine.RuntimeOptionsBase
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class URuntimeOptionsBase : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0030   (0x0010)  MISSED
};

/// Class /Script/Engine.RuntimeVirtualTexture
/// Size: 0x0070 (112 bytes) (0x000030 - 0x0000A0) align 16 pad: 0x0000
class URuntimeVirtualTexture : public UObject
{ 
public:
	int32_t                                            TileCount;                                                  // 0x0030   (0x0004)  
	int32_t                                            TileSize;                                                   // 0x0034   (0x0004)  
	int32_t                                            TileBorderSize;                                             // 0x0038   (0x0004)  
	ERuntimeVirtualTextureMaterialType                 MaterialType;                                               // 0x003C   (0x0001)  
	bool                                               bCompressTextures;                                          // 0x003D   (0x0001)  
	bool                                               bClearTextures;                                             // 0x003E   (0x0001)  
	bool                                               bSinglePhysicalSpace;                                       // 0x003F   (0x0001)  
	bool                                               bPrivateSpace;                                              // 0x0040   (0x0001)  
	bool                                               bAdaptive;                                                  // 0x0041   (0x0001)  
	bool                                               bContinuousUpdate;                                          // 0x0042   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0043   (0x0001)  MISSED
	int32_t                                            RemoveLowMips;                                              // 0x0044   (0x0004)  
	TEnumAsByte<TextureGroup>                          LODGroup;                                                   // 0x0048   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	int32_t                                            Size;                                                       // 0x004C   (0x0004)  
	class URuntimeVirtualTextureStreamingProxy*        StreamingTexture;                                           // 0x0050   (0x0008)  
	unsigned char                                      UnknownData02_7[0x48];                                      // 0x0058   (0x0048)  MISSED
	// int32_t GetTileSize();                                                                                                   // [0x4726f70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetTileCount();                                                                                                  // [0x4726f10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetTileBorderSize();                                                                                             // [0x4726ed0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetSize();                                                                                                       // [0x4726e40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetPageTableSize();                                                                                              // [0x4726e10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.RuntimeVirtualTextureComponent
/// Size: 0x0088 (136 bytes) (0x000218 - 0x0002A0) align 16 pad: 0x0000
class URuntimeVirtualTextureComponent : public USceneComponent
{ 
public:
	SDK_UNDEFINED(48,218) /* TWeakObjectPtr<AActor*> */ __um(BoundsAlignActor);                                    // 0x0218   (0x0030)  
	bool                                               bSetBoundsButton;                                           // 0x0248   (0x0001)  
	bool                                               bSnapBoundsToLandscape;                                     // 0x0249   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x024A   (0x0006)  MISSED
	class URuntimeVirtualTexture*                      VirtualTexture;                                             // 0x0250   (0x0008)  
	bool                                               bEnableScalability;                                         // 0x0258   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0259   (0x0003)  MISSED
	uint32_t                                           ScalabilityGroup;                                           // 0x025C   (0x0004)  
	bool                                               bHidePrimitives;                                            // 0x0260   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0261   (0x0007)  MISSED
	class UVirtualTextureBuilder*                      StreamingTexture;                                           // 0x0268   (0x0008)  
	int32_t                                            StreamLowMips;                                              // 0x0270   (0x0004)  
	bool                                               bBuildStreamingMipsButton;                                  // 0x0274   (0x0001)  
	bool                                               bEnableCompressCrunch;                                      // 0x0275   (0x0001)  
	bool                                               bUseStreamingLowMipsInEditor;                               // 0x0276   (0x0001)  
	bool                                               bBuildDebugStreamingMips;                                   // 0x0277   (0x0001)  
	unsigned char                                      UnknownData03_7[0x28];                                      // 0x0278   (0x0028)  MISSED
	// void Invalidate(FBoxSphereBounds& WorldBounds);                                                                          // [0x4726fc0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.RuntimeVirtualTextureVolume
/// Size: 0x0008 (8 bytes) (0x0002A8 - 0x0002B0) align 8 pad: 0x0000
class ARuntimeVirtualTextureVolume : public AActor
{ 
public:
	class URuntimeVirtualTextureComponent*             VirtualTextureComponent;                                    // 0x02A8   (0x0008)  
};

/// Class /Script/Engine.RVOAvoidanceInterface
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class URVOAvoidanceInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.Scene
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UScene : public UObject
{ 
public:
};

/// Class /Script/Engine.SceneCapture2D
/// Size: 0x0008 (8 bytes) (0x0002B8 - 0x0002C0) align 8 pad: 0x0000
class ASceneCapture2D : public ASceneCapture
{ 
public:
	class USceneCaptureComponent2D*                    CaptureComponent2D;                                         // 0x02B8   (0x0008)  
	// void OnInterpToggle(bool bEnable);                                                                                       // [0x4701ce0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SceneCaptureComponent2D
/// Size: 0x06C8 (1736 bytes) (0x0002D8 - 0x0009A0) align 16 pad: 0x0000
class USceneCaptureComponent2D : public USceneCaptureComponent
{ 
public:
	bool                                               bForceCaptureOnce : 1;                                      // 0x02D8:0 (0x0001)  
	TEnumAsByte<ECameraProjectionMode>                 ProjectionType;                                             // 0x02D9   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x02DA   (0x0002)  MISSED
	float                                              FOVAngle;                                                   // 0x02DC   (0x0004)  
	float                                              OrthoWidth;                                                 // 0x02E0   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x02E4   (0x0004)  MISSED
	class UTextureRenderTarget2D*                      TextureTarget;                                              // 0x02E8   (0x0008)  
	TEnumAsByte<ESceneCaptureCompositeMode>            CompositeMode;                                              // 0x02F0   (0x0001)  
	unsigned char                                      UnknownData02_6[0xF];                                       // 0x02F1   (0x000F)  MISSED
	FPostProcessSettings                               PostProcessSettings;                                        // 0x0300   (0x0600)  
	float                                              PostProcessBlendWeight;                                     // 0x0900   (0x0004)  
	bool                                               bOverride_CustomNearClippingPlane : 1;                      // 0x0904:0 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0905   (0x0003)  MISSED
	float                                              CustomNearClippingPlane;                                    // 0x0908   (0x0004)  
	bool                                               bUseCustomAspectRatio : 1;                                  // 0x090C:0 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x090D   (0x0003)  MISSED
	float                                              CustomAspectRatio;                                          // 0x0910   (0x0004)  
	bool                                               bUseCustomProjectionMatrix;                                 // 0x0914   (0x0001)  
	unsigned char                                      UnknownData05_6[0xB];                                       // 0x0915   (0x000B)  MISSED
	FMatrix                                            CustomProjectionMatrix;                                     // 0x0920   (0x0040)  
	bool                                               bEnableClipPlane;                                           // 0x0960   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0961   (0x0003)  MISSED
	FVector                                            ClipPlaneBase;                                              // 0x0964   (0x000C)  
	FVector                                            ClipPlaneNormal;                                            // 0x0970   (0x000C)  
	bool                                               bCameraCutThisFrame : 1;                                    // 0x097C:0 (0x0001)  
	bool                                               bConsiderUnrenderedOpaquePixelAsFullyTranslucent : 1;       // 0x097C:1 (0x0001)  
	unsigned char                                      UnknownData07_5[0x3];                                       // 0x097D   (0x0003)  MISSED
	bool                                               bDisableFlipCopyGLES;                                       // 0x0980   (0x0001)  
	unsigned char                                      UnknownData08_7[0x1F];                                      // 0x0981   (0x001F)  MISSED
	// void CaptureScene();                                                                                                     // [0x4729510] Final|Native|Public|BlueprintCallable 
	// void AddOrUpdateBlendable(TScriptInterface<Class> InBlendableObject, float InWeight);                                    // [0x47293c0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SceneCaptureComponentCube
/// Size: 0x0038 (56 bytes) (0x0002D8 - 0x000310) align 16 pad: 0x0000
class USceneCaptureComponentCube : public USceneCaptureComponent
{ 
public:
	class UTextureRenderTargetCube*                    TextureTarget;                                              // 0x02D8   (0x0008)  
	bool                                               bCaptureRotation;                                           // 0x02E0   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x02E1   (0x0007)  MISSED
	class UTextureRenderTargetCube*                    TextureTargetLeft;                                          // 0x02E8   (0x0008)  
	class UTextureRenderTargetCube*                    TextureTargetRight;                                         // 0x02F0   (0x0008)  
	class UTextureRenderTarget2D*                      TextureTargetODS;                                           // 0x02F8   (0x0008)  
	float                                              IPD;                                                        // 0x0300   (0x0004)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0304   (0x000C)  MISSED
	// void CaptureScene();                                                                                                     // [0x4729510] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SceneCaptureCube
/// Size: 0x0008 (8 bytes) (0x0002B8 - 0x0002C0) align 8 pad: 0x0000
class ASceneCaptureCube : public ASceneCapture
{ 
public:
	class USceneCaptureComponentCube*                  CaptureComponentCube;                                       // 0x02B8   (0x0008)  
	// void OnInterpToggle(bool bEnable);                                                                                       // [0x4701ce0] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.BPVariableMetaDataEntry
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FBPVariableMetaDataEntry
{ 
	FName                                              DataKey;                                                    // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FString                                            DataValue;                                                  // 0x0010   (0x0010)  
};

/// Class /Script/Engine.SCS_Node
/// Size: 0x00C8 (200 bytes) (0x000030 - 0x0000F8) align 8 pad: 0x0000
class USCS_Node : public UObject
{ 
public:
	class UClass*                                      ComponentClass;                                             // 0x0030   (0x0008)  
	class UActorComponent*                             ComponentTemplate;                                          // 0x0038   (0x0008)  
	FBlueprintCookedComponentInstancingData            CookedComponentInstancingData;                              // 0x0040   (0x0050)  
	FName                                              AttachToName;                                               // 0x0090   (0x000C)  
	FName                                              ParentComponentOrVariableName;                              // 0x009C   (0x000C)  
	FName                                              ParentComponentOwnerClassName;                              // 0x00A8   (0x000C)  
	bool                                               bIsParentComponentNative;                                   // 0x00B4   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x00B5   (0x0003)  MISSED
	TArray<class USCS_Node*>                           ChildNodes;                                                 // 0x00B8   (0x0010)  
	TArray<FBPVariableMetaDataEntry>                   MetaDataArray;                                              // 0x00C8   (0x0010)  
	FGuid                                              VariableGuid;                                               // 0x00D8   (0x0010)  
	FName                                              InternalVariableName;                                       // 0x00E8   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x00F4   (0x0004)  MISSED
};

/// Class /Script/Engine.Selection
/// Size: 0x0078 (120 bytes) (0x000030 - 0x0000A8) align 8 pad: 0x0000
class USelection : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x78];                                      // 0x0030   (0x0078)  MISSED
};

/// Class /Script/Engine.ServerStatReplicator
/// Size: 0x00C8 (200 bytes) (0x0002A8 - 0x000370) align 8 pad: 0x0000
class AServerStatReplicator : public AInfo
{ 
public:
	bool                                               bUpdateStatNet;                                             // 0x02A8   (0x0001)  
	bool                                               bOverwriteClientStats;                                      // 0x02A9   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x02AA   (0x0002)  MISSED
	uint32_t                                           Channels;                                                   // 0x02AC   (0x0004)  
	uint32_t                                           InRate;                                                     // 0x02B0   (0x0004)  
	uint32_t                                           OutRate;                                                    // 0x02B4   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x02B8   (0x0004)  MISSED
	uint32_t                                           MaxPacketOverhead;                                          // 0x02BC   (0x0004)  
	uint32_t                                           InRateClientMax;                                            // 0x02C0   (0x0004)  
	uint32_t                                           InRateClientMin;                                            // 0x02C4   (0x0004)  
	uint32_t                                           InRateClientAvg;                                            // 0x02C8   (0x0004)  
	uint32_t                                           InPacketsClientMax;                                         // 0x02CC   (0x0004)  
	uint32_t                                           InPacketsClientMin;                                         // 0x02D0   (0x0004)  
	uint32_t                                           InPacketsClientAvg;                                         // 0x02D4   (0x0004)  
	uint32_t                                           OutRateClientMax;                                           // 0x02D8   (0x0004)  
	uint32_t                                           OutRateClientMin;                                           // 0x02DC   (0x0004)  
	uint32_t                                           OutRateClientAvg;                                           // 0x02E0   (0x0004)  
	uint32_t                                           OutPacketsClientMax;                                        // 0x02E4   (0x0004)  
	uint32_t                                           OutPacketsClientMin;                                        // 0x02E8   (0x0004)  
	uint32_t                                           OutPacketsClientAvg;                                        // 0x02EC   (0x0004)  
	uint32_t                                           NetNumClients;                                              // 0x02F0   (0x0004)  
	uint32_t                                           InPackets;                                                  // 0x02F4   (0x0004)  
	uint32_t                                           OutPackets;                                                 // 0x02F8   (0x0004)  
	uint32_t                                           InBunches;                                                  // 0x02FC   (0x0004)  
	uint32_t                                           OutBunches;                                                 // 0x0300   (0x0004)  
	uint32_t                                           OutLoss;                                                    // 0x0304   (0x0004)  
	uint32_t                                           InLoss;                                                     // 0x0308   (0x0004)  
	uint32_t                                           VoiceBytesSent;                                             // 0x030C   (0x0004)  
	uint32_t                                           VoiceBytesRecv;                                             // 0x0310   (0x0004)  
	uint32_t                                           VoicePacketsSent;                                           // 0x0314   (0x0004)  
	uint32_t                                           VoicePacketsRecv;                                           // 0x0318   (0x0004)  
	uint32_t                                           PercentInVoice;                                             // 0x031C   (0x0004)  
	uint32_t                                           PercentOutVoice;                                            // 0x0320   (0x0004)  
	uint32_t                                           NumActorChannels;                                           // 0x0324   (0x0004)  
	uint32_t                                           NumConsideredActors;                                        // 0x0328   (0x0004)  
	uint32_t                                           PrioritizedActors;                                          // 0x032C   (0x0004)  
	uint32_t                                           NumRelevantActors;                                          // 0x0330   (0x0004)  
	uint32_t                                           NumRelevantDeletedActors;                                   // 0x0334   (0x0004)  
	uint32_t                                           NumReplicatedActorAttempts;                                 // 0x0338   (0x0004)  
	uint32_t                                           NumReplicatedActors;                                        // 0x033C   (0x0004)  
	uint32_t                                           NumActors;                                                  // 0x0340   (0x0004)  
	uint32_t                                           NumNetActors;                                               // 0x0344   (0x0004)  
	uint32_t                                           NumDormantActors;                                           // 0x0348   (0x0004)  
	uint32_t                                           NumInitiallyDormantActors;                                  // 0x034C   (0x0004)  
	uint32_t                                           NumNetGUIDsAckd;                                            // 0x0350   (0x0004)  
	uint32_t                                           NumNetGUIDsPending;                                         // 0x0354   (0x0004)  
	uint32_t                                           NumNetGUIDsUnAckd;                                          // 0x0358   (0x0004)  
	uint32_t                                           ObjPathBytes;                                               // 0x035C   (0x0004)  
	uint32_t                                           NetGUIDOutRate;                                             // 0x0360   (0x0004)  
	uint32_t                                           NetGUIDInRate;                                              // 0x0364   (0x0004)  
	uint32_t                                           NetSaturated;                                               // 0x0368   (0x0004)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x036C   (0x0004)  MISSED
};

/// Class /Script/Engine.ShadowMapTexture2D
/// Size: 0x0008 (8 bytes) (0x000118 - 0x000120) align 8 pad: 0x0000
class UShadowMapTexture2D : public UTexture2D
{ 
public:
	TEnumAsByte<EShadowMapFlags>                       ShadowmapFlags;                                             // 0x0118   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0119   (0x0007)  MISSED
};

/// Class /Script/Engine.SimpleConstructionScript
/// Size: 0x0078 (120 bytes) (0x000030 - 0x0000A8) align 8 pad: 0x0000
class USimpleConstructionScript : public UObject
{ 
public:
	TArray<class USCS_Node*>                           RootNodes;                                                  // 0x0030   (0x0010)  
	TArray<class USCS_Node*>                           AllNodes;                                                   // 0x0040   (0x0010)  
	class USCS_Node*                                   DefaultSceneRootNode;                                       // 0x0050   (0x0008)  
	unsigned char                                      UnknownData00_7[0x50];                                      // 0x0058   (0x0050)  MISSED
};

/// Class /Script/Engine.SkeletalMeshActor
/// Size: 0x0098 (152 bytes) (0x0002A8 - 0x000340) align 8 pad: 0x0000
class ASkeletalMeshActor : public AActor
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x02A8   (0x0008)  MISSED
	bool                                               bShouldDoAnimNotifies : 1;                                  // 0x02B0:0 (0x0001)  
	bool                                               bWakeOnLevelStart : 1;                                      // 0x02B0:1 (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x02B1   (0x0007)  MISSED
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                                      // 0x02B8   (0x0008)  
	class UTextRenderComponent*                        MeshTextComponent;                                          // 0x02C0   (0x0008)  
	class USkeletalMesh*                               ReplicatedMesh;                                             // 0x02C8   (0x0008)  
	class UPhysicsAsset*                               ReplicatedPhysAsset;                                        // 0x02D0   (0x0008)  
	class UMaterialInterface*                          ReplicatedMaterial0;                                        // 0x02D8   (0x0008)  
	class UMaterialInterface*                          ReplicatedMaterial1;                                        // 0x02E0   (0x0008)  
	bool                                               bShowLODText;                                               // 0x02E8   (0x0001)  
	unsigned char                                      UnknownData02_7[0x57];                                      // 0x02E9   (0x0057)  MISSED
	// void OnRep_ReplicatedPhysAsset();                                                                                        // [0x461bf00] Native|Public        
	// void OnRep_ReplicatedMesh();                                                                                             // [0x46255d0] Native|Public        
	// void OnRep_ReplicatedMaterial1();                                                                                        // [0x972ed0] Native|Public        
	// void OnRep_ReplicatedMaterial0();                                                                                        // [0x46de5f0] Native|Public        
};

/// Class /Script/Engine.SkeletalMeshBounds
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000070) align 8 pad: 0x0000
class USkeletalMeshBounds : public UObject
{ 
public:
	FBoxSphereBounds                                   BoxSphere;                                                  // 0x0030   (0x001C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x004C   (0x0004)  MISSED
	TArray<class USkeletalMesh*>                       Owners;                                                     // 0x0050   (0x0010)  
	TArray<FSoftObjectPath>                            OwnerPaths;                                                 // 0x0060   (0x0010)  
};

/// Class /Script/Engine.SkeletalMeshEditorData
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class USkeletalMeshEditorData : public UObject
{ 
public:
};

/// Struct /Script/Engine.BoneFilter
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FBoneFilter
{ 
	bool                                               bExcludeSelf;                                               // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FName                                              BoneName;                                                   // 0x0004   (0x000C)  
};

/// Struct /Script/Engine.SkeletalMeshLODGroupSettings
/// Size: 0x0080 (128 bytes) (0x000000 - 0x000080) align 8 pad: 0x0000
struct FSkeletalMeshLODGroupSettings
{ 
	FPerPlatformFloat                                  ScreenSize;                                                 // 0x0000   (0x0004)  
	FPerPlatformFloat                                  KuroLODDistance;                                            // 0x0004   (0x0004)  
	float                                              LODHysteresis;                                              // 0x0008   (0x0004)  
	EBoneFilterActionOption                            BoneFilterActionOption;                                     // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	TArray<FBoneFilter>                                BoneList;                                                   // 0x0010   (0x0010)  
	TArray<FName>                                      BonesToPrioritize;                                          // 0x0020   (0x0010)  
	float                                              WeightOfPrioritization;                                     // 0x0030   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0034   (0x0004)  MISSED
	class UAnimSequence*                               BakePose;                                                   // 0x0038   (0x0008)  
	FSkeletalMeshOptimizationSettings                  ReductionSettings;                                          // 0x0040   (0x003C)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x007C   (0x0004)  MISSED
};

/// Class /Script/Engine.SkeletalMeshLODSettings
/// Size: 0x0028 (40 bytes) (0x000038 - 0x000060) align 8 pad: 0x0000
class USkeletalMeshLODSettings : public UDataAsset
{ 
public:
	FPerPlatformInt                                    MinLOD;                                                     // 0x0038   (0x0004)  
	FPerPlatformInt                                    MaxOutlineLod;                                              // 0x003C   (0x0004)  
	FPerPlatformBool                                   DisableBelowMinLodStripping;                                // 0x0040   (0x0001)  
	bool                                               bOverrideLODStreamingSettings;                              // 0x0041   (0x0001)  
	FPerPlatformBool                                   bSupportLODStreaming;                                       // 0x0042   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0043   (0x0001)  MISSED
	FPerPlatformInt                                    MaxNumStreamedLODs;                                         // 0x0044   (0x0004)  
	FPerPlatformInt                                    MaxNumOptionalLODs;                                         // 0x0048   (0x0004)  
	bool                                               bUseKuroLODDistance;                                        // 0x004C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x004D   (0x0003)  MISSED
	TArray<FSkeletalMeshLODGroupSettings>              LODGroups;                                                  // 0x0050   (0x0010)  
};

/// Class /Script/Engine.SkeletalMeshSimplificationSettings
/// Size: 0x0010 (16 bytes) (0x000048 - 0x000058) align 8 pad: 0x0000
class USkeletalMeshSimplificationSettings : public UDeveloperSettings
{ 
public:
	FName                                              SkeletalMeshReductionModuleName;                            // 0x0048   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.SkeletalMeshSocket
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000070) align 8 pad: 0x0000
class USkeletalMeshSocket : public UObject
{ 
public:
	FName                                              SocketName;                                                 // 0x0030   (0x000C)  
	FName                                              BoneName;                                                   // 0x003C   (0x000C)  
	FVector                                            RelativeLocation;                                           // 0x0048   (0x000C)  
	FRotator                                           RelativeRotation;                                           // 0x0054   (0x000C)  
	FVector                                            RelativeScale;                                              // 0x0060   (0x000C)  
	bool                                               bForceAlwaysAnimated;                                       // 0x006C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x006D   (0x0003)  MISSED
	// void InitializeSocketFromLocation(class USkeletalMeshComponent* SkelComp, FVector WorldLocation, FVector WorldNormal);   // [0x473cce0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// FVector GetSocketLocation(class USkeletalMeshComponent* SkelComp);                                                       // [0x473c950] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.TentDistribution
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FTentDistribution
{ 
	float                                              TipAltitude;                                                // 0x0000   (0x0004)  
	float                                              TipValue;                                                   // 0x0004   (0x0004)  
	float                                              Width;                                                      // 0x0008   (0x0004)  
};

/// Class /Script/Engine.SkyAtmosphereComponent
/// Size: 0x00D8 (216 bytes) (0x000218 - 0x0002F0) align 16 pad: 0x0000
class USkyAtmosphereComponent : public USceneComponent
{ 
public:
	ESkyAtmosphereTransformMode                        TransformMode;                                              // 0x0218   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0219   (0x0003)  MISSED
	float                                              BottomRadius;                                               // 0x021C   (0x0004)  
	FColor                                             GroundAlbedo;                                               // 0x0220   (0x0004)  
	float                                              AtmosphereHeight;                                           // 0x0224   (0x0004)  
	float                                              MultiScatteringFactor;                                      // 0x0228   (0x0004)  
	float                                              TraceSampleCountScale;                                      // 0x022C   (0x0004)  
	float                                              RayleighScatteringScale;                                    // 0x0230   (0x0004)  
	FLinearColor                                       RayleighScattering;                                         // 0x0234   (0x0010)  
	float                                              RayleighExponentialDistribution;                            // 0x0244   (0x0004)  
	float                                              MieScatteringScale;                                         // 0x0248   (0x0004)  
	FLinearColor                                       MieScattering;                                              // 0x024C   (0x0010)  
	float                                              MieAbsorptionScale;                                         // 0x025C   (0x0004)  
	FLinearColor                                       MieAbsorption;                                              // 0x0260   (0x0010)  
	float                                              MieAnisotropy;                                              // 0x0270   (0x0004)  
	float                                              MieExponentialDistribution;                                 // 0x0274   (0x0004)  
	float                                              OtherAbsorptionScale;                                       // 0x0278   (0x0004)  
	FLinearColor                                       OtherAbsorption;                                            // 0x027C   (0x0010)  
	FTentDistribution                                  OtherTentDistribution;                                      // 0x028C   (0x000C)  
	FLinearColor                                       SkyLuminanceFactor;                                         // 0x0298   (0x0010)  
	float                                              AerialPespectiveViewDistanceScale;                          // 0x02A8   (0x0004)  
	float                                              HeightFogContribution;                                      // 0x02AC   (0x0004)  
	float                                              TransmittanceMinLightElevationAngle;                        // 0x02B0   (0x0004)  
	float                                              AerialPerspectiveStartDepth;                                // 0x02B4   (0x0004)  
	unsigned char                                      UnknownData01_6[0x24];                                      // 0x02B8   (0x0024)  MISSED
	FGuid                                              bStaticLightingBuiltGUID;                                   // 0x02DC   (0x0010)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x02EC   (0x0004)  MISSED
	// void SetSkyLuminanceFactor(FLinearColor NewValue);                                                                       // [0x4741e60] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// void SetRayleighScatteringScale(float NewValue);                                                                         // [0x4741d60] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetRayleighScattering(FLinearColor NewValue);                                                                       // [0x4741cd0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// void SetRayleighExponentialDistribution(float NewValue);                                                                 // [0x4741c50] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetOtherAbsorptionScale(float NewValue);                                                                            // [0x4741bd0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetOtherAbsorption(FLinearColor NewValue);                                                                          // [0x4741b40] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// void SetMieScatteringScale(float NewValue);                                                                              // [0x47418b0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetMieScattering(FLinearColor NewValue);                                                                            // [0x4741820] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// void SetMieExponentialDistribution(float NewValue);                                                                      // [0x46c2170] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetMieAnisotropy(float NewValue);                                                                                   // [0x47417a0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetMieAbsorptionScale(float NewValue);                                                                              // [0x4741720] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetMieAbsorption(FLinearColor NewValue);                                                                            // [0x4741690] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// void SetHeightFogContribution(float NewValue);                                                                           // [0x47402f0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetGroundRadius(float NewValue);                                                                                    // [0x4740270] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetGroundAlbedo(FLinearColor NewValue, bool SRGB);                                                                  // [0x4740190] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// void SetAerialPespectiveViewDistanceScale(float NewValue);                                                               // [0x473ff60] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void OverrideAtmosphereLightDirection(int32_t AtmosphereLightIndex, FVector& LightDirection);                            // [0x473fe70] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.SkyAtmosphere
/// Size: 0x0008 (8 bytes) (0x0002A8 - 0x0002B0) align 8 pad: 0x0000
class ASkyAtmosphere : public AInfo
{ 
public:
	class USkyAtmosphereComponent*                     SkyAtmosphereComponent;                                     // 0x02A8   (0x0008)  
};

/// Class /Script/Engine.SkyLightComponent
/// Size: 0x03E8 (1000 bytes) (0x000248 - 0x000630) align 16 pad: 0x0000
class USkyLightComponent : public ULightComponentBase
{ 
public:
	bool                                               bRealTimeCapture;                                           // 0x0248   (0x0001)  
	TEnumAsByte<ESkyLightSourceType>                   SourceType;                                                 // 0x0249   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x024A   (0x0006)  MISSED
	class UTextureCube*                                Cubemap;                                                    // 0x0250   (0x0008)  
	float                                              SourceCubemapAngle;                                         // 0x0258   (0x0004)  
	int32_t                                            CubemapResolution;                                          // 0x025C   (0x0004)  
	float                                              SkyDistanceThreshold;                                       // 0x0260   (0x0004)  
	bool                                               bCaptureEmissiveOnly;                                       // 0x0264   (0x0001)  
	bool                                               bLowerHemisphereIsBlack;                                    // 0x0265   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0266   (0x0002)  MISSED
	FLinearColor                                       LowerHemisphereColor;                                       // 0x0268   (0x0010)  
	float                                              OcclusionMaxDistance;                                       // 0x0278   (0x0004)  
	float                                              Contrast;                                                   // 0x027C   (0x0004)  
	float                                              OcclusionExponent;                                          // 0x0280   (0x0004)  
	float                                              MinOcclusion;                                               // 0x0284   (0x0004)  
	FColor                                             OcclusionTint;                                              // 0x0288   (0x0004)  
	bool                                               bCloudAmbientOcclusion : 1;                                 // 0x028C:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x028D   (0x0003)  MISSED
	float                                              CloudAmbientOcclusionStrength;                              // 0x0290   (0x0004)  
	float                                              CloudAmbientOcclusionExtent;                                // 0x0294   (0x0004)  
	float                                              CloudAmbientOcclusionMapResolutionScale;                    // 0x0298   (0x0004)  
	float                                              CloudAmbientOcclusionApertureScale;                         // 0x029C   (0x0004)  
	TEnumAsByte<EOcclusionCombineMode>                 OcclusionCombineMode;                                       // 0x02A0   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x02A1   (0x0007)  MISSED
	class UTextureCube*                                DefaultKuroCubemap;                                         // 0x02A8   (0x0008)  
	FVector                                            KuroLightProbeSH1_Default;                                  // 0x02B0   (0x000C)  
	FVector                                            KuroLightProbeSH2_Default;                                  // 0x02BC   (0x000C)  
	FVector                                            KuroLightProbeSH3_Default;                                  // 0x02C8   (0x000C)  
	FVector                                            KuroLightProbeSH4_Default;                                  // 0x02D4   (0x000C)  
	FVector                                            KuroLightProbeSH5_Default;                                  // 0x02E0   (0x000C)  
	FVector                                            KuroLightProbeSH6_Default;                                  // 0x02EC   (0x000C)  
	bool                                               bUseKuroSkyLight;                                           // 0x02F8   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x02F9   (0x0003)  MISSED
	float                                              KuroSkyLightTranslucent;                                    // 0x02FC   (0x0004)  
	float                                              KuroSkyLightIntensity;                                      // 0x0300   (0x0004)  
	FLinearColor                                       KuroSkyLightColor;                                          // 0x0304   (0x0010)  
	FLinearColor                                       KuroAOColor;                                                // 0x0314   (0x0010)  
	float                                              KuroInteriorSkyLightIntensity;                              // 0x0324   (0x0004)  
	FLinearColor                                       KuroInteriorSkyLightColor;                                  // 0x0328   (0x0010)  
	float                                              KuroMainLightSpecularIntensity;                             // 0x0338   (0x0004)  
	float                                              KuroSkyLightSpecularIntensity;                              // 0x033C   (0x0004)  
	float                                              KuroSkyLightShadowIntSupplement;                            // 0x0340   (0x0004)  
	float                                              KuroSkyLightShadowIntSupplementDistance;                    // 0x0344   (0x0004)  
	float                                              KuroMetallicSpecularAddIntensity;                           // 0x0348   (0x0004)  
	float                                              KuroMetallicReflectionAddIntensity;                         // 0x034C   (0x0004)  
	float                                              KuroMetallicMaskStep;                                       // 0x0350   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x0354   (0x0004)  MISSED
	class UTextureCube*                                MaterialDynamicReflectionTexture;                           // 0x0358   (0x0008)  
	FVector                                            KuroLightProbeSH1;                                          // 0x0360   (0x000C)  
	FVector                                            KuroLightProbeSH2;                                          // 0x036C   (0x000C)  
	FVector                                            KuroLightProbeSH3;                                          // 0x0378   (0x000C)  
	FVector                                            KuroLightProbeSH4;                                          // 0x0384   (0x000C)  
	FVector                                            KuroLightProbeSH5;                                          // 0x0390   (0x000C)  
	FVector                                            KuroLightProbeSH6;                                          // 0x039C   (0x000C)  
	unsigned char                                      UnknownData06_6[0x48];                                      // 0x03A8   (0x0048)  MISSED
	float                                              KuroBlend12;                                                // 0x03F0   (0x0004)  
	float                                              KuroBlend23;                                                // 0x03F4   (0x0004)  
	class UTextureCube*                                KuroCubemap_Layer1;                                         // 0x03F8   (0x0008)  
	class UTextureCube*                                KuroCubemap_Layer2;                                         // 0x0400   (0x0008)  
	class UTextureCube*                                KuroCubemap_Layer3;                                         // 0x0408   (0x0008)  
	float                                              KuroCharacterSSSIntensity;                                  // 0x0410   (0x0004)  
	float                                              KuroCharacterGlobalShadowIntensity;                         // 0x0414   (0x0004)  
	float                                              KuroCharacterGlobalBossShadowIntensity;                     // 0x0418   (0x0004)  
	float                                              KuroUseNewCharacterRim;                                     // 0x041C   (0x0004)  
	FLinearColor                                       KuroCharacterAmbientColor;                                  // 0x0420   (0x0010)  
	FLinearColor                                       KuroCharacterMainLightColor;                                // 0x0430   (0x0010)  
	FLinearColor                                       KuroCharacterRimColor;                                      // 0x0440   (0x0010)  
	FVector4                                           KuroCharRimDir;                                             // 0x0450   (0x0010)  
	float                                              KuroTreeOutLineRadius;                                      // 0x0460   (0x0004)  
	float                                              KuroTreeOutLineDistanceRatio;                               // 0x0464   (0x0004)  
	float                                              KuroTreeOutLineFarScale;                                    // 0x0468   (0x0004)  
	FLinearColor                                       KuroTreeOutLineInnerColor;                                  // 0x046C   (0x0010)  
	FLinearColor                                       KuroTreeOutLineOuterColor;                                  // 0x047C   (0x0010)  
	float                                              KuroTreeOutLineOuterScale;                                  // 0x048C   (0x0004)  
	float                                              KuroTreeOutLineNearFarDistance;                             // 0x0490   (0x0004)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x0494   (0x0004)  MISSED
	class UTexture*                                    ShadowTintLut;                                              // 0x0498   (0x0008)  
	float                                              ShadowTintLutOffset;                                        // 0x04A0   (0x0004)  
	unsigned char                                      UnknownData08_6[0xB4];                                      // 0x04A4   (0x00B4)  MISSED
	class UTextureCube*                                BlendDestinationCubemap;                                    // 0x0558   (0x0008)  
	unsigned char                                      UnknownData09_7[0xD0];                                      // 0x0560   (0x00D0)  MISSED
	// void SetVolumetricScatteringIntensity(float NewIntensity);                                                               // [0x4741f70] Final|Native|Public|BlueprintCallable 
	// void SetTreeOutLineOuterScale(float InKuroTreeOutLineOuterScale);                                                        // [0x4741ef0] Final|Native|Public|BlueprintCallable 
	// void SetShadowTintLutOffset(float InShadowTintLutOffset);                                                                // [0x4741de0] Final|Native|Public|BlueprintCallable 
	// void SetOcclusionTint(FColor& InTint);                                                                                   // [0x4741ab0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetOcclusionExponent(float InOcclusionExponent);                                                                    // [0x4741a30] Final|Native|Public|BlueprintCallable 
	// void SetOcclusionContrast(float InOcclusionContrast);                                                                    // [0x47419b0] Final|Native|Public|BlueprintCallable 
	// void SetMinOcclusion(float InMinOcclusion);                                                                              // [0x4741930] Final|Native|Public|BlueprintCallable 
	// void SetMaterialDynamicReflectionTexture(class UTextureCube* InMaterialDynamicReflectionTexure);                         // [0x4741600] Final|Native|Public|BlueprintCallable 
	// void SetLowerHemisphereColor(FLinearColor& InLowerHemisphereColor);                                                      // [0x4741570] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetLightColor(FLinearColor NewLightColor);                                                                          // [0x47414e0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetKuroUseNewCharacterRim(float InUseNewCharacterRim);                                                              // [0x4741460] Final|Native|Public|BlueprintCallable 
	// void SetKuroTreeOutLineOuterColor(FLinearColor InKuroTreeOutLineOuterColor);                                             // [0x47413d0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetKuroTreeOutLineInnerColor(FLinearColor InKuroTreeOutLineInnerColor);                                             // [0x4741340] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetKuroTreeOutLineFarScale(float InKuroTreeOutLineFarScale);                                                        // [0x47412c0] Final|Native|Public|BlueprintCallable 
	// void SetKuroTreeNearFarDistance(float InKuroTreeOutLineNearFarDistance);                                                 // [0x4741240] Final|Native|Public|BlueprintCallable 
	// void SetKuroTreeLineRadius(float InKuroTreeOutLineRadius);                                                               // [0x47411c0] Final|Native|Public|BlueprintCallable 
	// void SetKuroTreeDistanceRatio(float InKuroTreeOutLineDistanceRatio);                                                     // [0x4741140] Final|Native|Public|BlueprintCallable 
	// void SetKuroSkyLightTranslucent(float InTranslucent);                                                                    // [0x47410c0] Final|Native|Public|BlueprintCallable 
	// void SetKuroSkyLightSpecularIntensity(float InSkyLightSpecularIntensity);                                                // [0x4741040] Final|Native|Public|BlueprintCallable 
	// void SetKuroSkyLightSH(FVector SH1, FVector SH2, FVector SH3, FVector SH4, FVector SH5, FVector SH6);                    // [0x4740e10] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetKuroSkyLightLayerCubemap3(class UTextureCube* Cubemap3);                                                         // [0x4740d80] Final|Native|Public|BlueprintCallable 
	// void SetKuroSkyLightLayerCubemap2(class UTextureCube* Cubemap2);                                                         // [0x4740cf0] Final|Native|Public|BlueprintCallable 
	// void SetKuroSkyLightLayerCubemap1(class UTextureCube* Cubemap1);                                                         // [0x4740c60] Final|Native|Public|BlueprintCallable 
	// void SetKuroSkyLightIntensity(float InIntensity);                                                                        // [0x4740be0] Final|Native|Public|BlueprintCallable 
	// void SetKuroSkyLightColorTint(FLinearColor InColorTint);                                                                 // [0x4740b50] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetKuroSkyLightBlend23(float Blend23);                                                                              // [0x4740ad0] Final|Native|Public|BlueprintCallable 
	// void SetKuroSkyLightBlend12(float Blend12);                                                                              // [0x4740a50] Final|Native|Public|BlueprintCallable 
	// void SetKuroMainLightSpecularIntensity(float InMainLightSpecularIntensity);                                              // [0x47409d0] Final|Native|Public|BlueprintCallable 
	// void SetKuroInteriorSkyLightIntensity(float InteriorSkyLightIntensity);                                                  // [0x4740950] Final|Native|Public|BlueprintCallable 
	// void SetKuroInteriorSkyLightColor(FLinearColor InteriorColorTint);                                                       // [0x47408c0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetKuroCharacterSSSIntensity(float InCharacterSSSIntensity);                                                        // [0x4740840] Final|Native|Public|BlueprintCallable 
	// void SetKuroCharacterRimDir(FVector4 InCharacterLightDir);                                                               // [0x47407b0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetKuroCharacterRimColor(FLinearColor InCharacterRimColor);                                                         // [0x4740720] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetKuroCharacterMainLightColor(FLinearColor InCharacterMainLightColor);                                             // [0x4740690] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetKuroCharacterGlobalShadowIntensity(float GlobalShadowIntensity);                                                 // [0x4740610] Final|Native|Public|BlueprintCallable 
	// void SetKuroCharacterGlobalBossShadowIntensity(float GlobalBossShadowIntensity);                                         // [0x4740590] Final|Native|Public|BlueprintCallable 
	// void SetKuroCharacterAmbientColor(FLinearColor InCharacterAmbientColor);                                                 // [0x4740500] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetKuroAOColorTint(FLinearColor InColorTint);                                                                       // [0x4740470] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetIntensity(float NewIntensity);                                                                                   // [0x47403f0] Final|Native|Public|BlueprintCallable 
	// void SetIndirectLightingIntensity(float NewIntensity);                                                                   // [0x4740370] Final|Native|Public|BlueprintCallable 
	// void SetCubemapBlend(class UTextureCube* SourceCubemap, class UTextureCube* DestinationCubemap, float InBlendFraction);  // [0x4740070] Final|Native|Public|BlueprintCallable 
	// void SetCubemap(class UTextureCube* NewCubemap);                                                                         // [0x473ffe0] Final|Native|Public|BlueprintCallable 
	// void RecaptureSky();                                                                                                     // [0x473ff40] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SlateBrushAsset
/// Size: 0x0090 (144 bytes) (0x000030 - 0x0000C0) align 8 pad: 0x0000
class USlateBrushAsset : public UObject
{ 
public:
	FSlateBrush                                        Brush;                                                      // 0x0030   (0x0090)  
};

/// Class /Script/Engine.SlateTextureAtlasInterface
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class USlateTextureAtlasInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.SmokeTestCommandlet
/// Size: 0x0000 (0 bytes) (0x000088 - 0x000088) align 8 pad: 0x0000
class USmokeTestCommandlet : public UCommandlet
{ 
public:
};

/// Class /Script/Engine.OccluderMeshComponent
/// Size: 0x0018 (24 bytes) (0x000218 - 0x000230) align 16 pad: 0x0000
class UOccluderMeshComponent : public USceneComponent
{ 
public:
	class UStaticMesh*                                 OccluderMesh;                                               // 0x0218   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0220   (0x0010)  MISSED
};

/// Class /Script/Engine.SoundAttenuation
/// Size: 0x03A0 (928 bytes) (0x000030 - 0x0003D0) align 8 pad: 0x0000
class USoundAttenuation : public UObject
{ 
public:
	FSoundAttenuationSettings                          Attenuation;                                                // 0x0030   (0x03A0)  
};

/// Struct /Script/Engine.SoundClassProperties
/// Size: 0x0080 (128 bytes) (0x000000 - 0x000080) align 8 pad: 0x0000
struct FSoundClassProperties
{ 
	float                                              Volume;                                                     // 0x0000   (0x0004)  
	float                                              Pitch;                                                      // 0x0004   (0x0004)  
	float                                              LowPassFilterFrequency;                                     // 0x0008   (0x0004)  
	float                                              AttenuationDistanceScale;                                   // 0x000C   (0x0004)  
	float                                              StereoBleed;                                                // 0x0010   (0x0004)  
	float                                              LFEBleed;                                                   // 0x0014   (0x0004)  
	float                                              VoiceCenterChannelVolume;                                   // 0x0018   (0x0004)  
	float                                              RadioFilterVolume;                                          // 0x001C   (0x0004)  
	float                                              RadioFilterVolumeThreshold;                                 // 0x0020   (0x0004)  
	bool                                               bApplyEffects : 1;                                          // 0x0024:0 (0x0001)  
	bool                                               bAlwaysPlay : 1;                                            // 0x0024:1 (0x0001)  
	bool                                               bIsUISound : 1;                                             // 0x0024:2 (0x0001)  
	bool                                               bIsMusic : 1;                                               // 0x0024:3 (0x0001)  
	bool                                               bCenterChannelOnly : 1;                                     // 0x0024:4 (0x0001)  
	bool                                               bApplyAmbientVolumes : 1;                                   // 0x0024:5 (0x0001)  
	bool                                               bReverb : 1;                                                // 0x0024:6 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0025   (0x0003)  MISSED
	float                                              Default2DReverbSendAmount;                                  // 0x0028   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x002C   (0x0004)  MISSED
	FSoundModulationDefaultSettings                    ModulationSettings;                                         // 0x0030   (0x0040)  
	TEnumAsByte<EAudioOutputTarget>                    OutputTarget;                                               // 0x0070   (0x0001)  
	ESoundWaveLoadingBehavior                          LoadingBehavior;                                            // 0x0071   (0x0001)  
	unsigned char                                      UnknownData02_6[0x6];                                       // 0x0072   (0x0006)  MISSED
	class USoundSubmix*                                DefaultSubmix;                                              // 0x0078   (0x0008)  
};

/// Struct /Script/Engine.PassiveSoundMixModifier
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FPassiveSoundMixModifier
{ 
	class USoundMix*                                   SoundMix;                                                   // 0x0000   (0x0008)  
	float                                              MinVolumeThreshold;                                         // 0x0008   (0x0004)  
	float                                              MaxVolumeThreshold;                                         // 0x000C   (0x0004)  
};

/// Class /Script/Engine.SoundClass
/// Size: 0x00A8 (168 bytes) (0x000030 - 0x0000D8) align 8 pad: 0x0000
class USoundClass : public UObject
{ 
public:
	FSoundClassProperties                              properties;                                                 // 0x0030   (0x0080)  
	TArray<class USoundClass*>                         ChildClasses;                                               // 0x00B0   (0x0010)  
	TArray<FPassiveSoundMixModifier>                   PassiveSoundMixModifiers;                                   // 0x00C0   (0x0010)  
	class USoundClass*                                 ParentClass;                                                // 0x00D0   (0x0008)  
};

/// Class /Script/Engine.SoundConcurrency
/// Size: 0x0028 (40 bytes) (0x000030 - 0x000058) align 8 pad: 0x0000
class USoundConcurrency : public UObject
{ 
public:
	FSoundConcurrencySettings                          Concurrency;                                                // 0x0030   (0x0028)  
};

/// Class /Script/Engine.SoundCue
/// Size: 0x03D8 (984 bytes) (0x0001C0 - 0x000598) align 8 pad: 0x0000
class USoundCue : public USoundBase
{ 
public:
	bool                                               bPrimeOnLoad : 1;                                           // 0x01C0:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x01C1   (0x0007)  MISSED
	class USoundNode*                                  FirstNode;                                                  // 0x01C8   (0x0008)  
	float                                              VolumeMultiplier;                                           // 0x01D0   (0x0004)  
	float                                              PitchMultiplier;                                            // 0x01D4   (0x0004)  
	FSoundAttenuationSettings                          AttenuationOverrides;                                       // 0x01D8   (0x03A0)  
	float                                              SubtitlePriority;                                           // 0x0578   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x057C   (0x0004)  MISSED
	bool                                               bOverrideAttenuation : 1;                                   // 0x0580:0 (0x0001)  
	bool                                               bExcludeFromRandomNodeBranchCulling : 1;                    // 0x0580:1 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0581   (0x0003)  MISSED
	int32_t                                            CookedQualityIndex;                                         // 0x0584   (0x0004)  
	bool                                               bHasPlayWhenSilent : 1;                                     // 0x0588:0 (0x0001)  
	unsigned char                                      UnknownData03_7[0xF];                                       // 0x0589   (0x000F)  MISSED
};

/// Struct /Script/Engine.SourceEffectChainEntry
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FSourceEffectChainEntry
{ 
	class USoundEffectSourcePreset*                    Preset;                                                     // 0x0000   (0x0008)  
	bool                                               bBypass : 1;                                                // 0x0008:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0009   (0x0007)  MISSED
};

/// Class /Script/Engine.SoundEffectSourcePresetChain
/// Size: 0x0018 (24 bytes) (0x000030 - 0x000048) align 8 pad: 0x0000
class USoundEffectSourcePresetChain : public UObject
{ 
public:
	TArray<FSourceEffectChainEntry>                    Chain;                                                      // 0x0030   (0x0010)  
	bool                                               bPlayEffectChainTails : 1;                                  // 0x0040:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Struct /Script/Engine.SoundGroup
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FSoundGroup
{ 
	TEnumAsByte<ESoundGroup>                           SoundGroup;                                                 // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FString                                            DisplayName;                                                // 0x0008   (0x0010)  
	bool                                               bAlwaysDecompressOnLoad : 1;                                // 0x0018:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0019   (0x0003)  MISSED
	float                                              DecompressedDuration;                                       // 0x001C   (0x0004)  
};

/// Class /Script/Engine.SoundGroups
/// Size: 0x0060 (96 bytes) (0x000030 - 0x000090) align 8 pad: 0x0000
class USoundGroups : public UObject
{ 
public:
	TArray<FSoundGroup>                                SoundGroupProfiles;                                         // 0x0030   (0x0010)  
	unsigned char                                      UnknownData00_7[0x50];                                      // 0x0040   (0x0050)  MISSED
};

/// Struct /Script/Engine.AudioEffectParameters
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 pad: 0x0000
struct FAudioEffectParameters
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Engine.AudioEQEffect
/// Size: 0x0038 (56 bytes) (0x000008 - 0x000040) align 8 pad: 0x0000
struct FAudioEQEffect : FAudioEffectParameters
{ 
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0008   (0x0008)  MISSED
	float                                              FrequencyCenter0;                                           // 0x0010   (0x0004)  
	float                                              Gain0;                                                      // 0x0014   (0x0004)  
	float                                              Bandwidth0;                                                 // 0x0018   (0x0004)  
	float                                              FrequencyCenter1;                                           // 0x001C   (0x0004)  
	float                                              Gain1;                                                      // 0x0020   (0x0004)  
	float                                              Bandwidth1;                                                 // 0x0024   (0x0004)  
	float                                              FrequencyCenter2;                                           // 0x0028   (0x0004)  
	float                                              Gain2;                                                      // 0x002C   (0x0004)  
	float                                              Bandwidth2;                                                 // 0x0030   (0x0004)  
	float                                              FrequencyCenter3;                                           // 0x0034   (0x0004)  
	float                                              Gain3;                                                      // 0x0038   (0x0004)  
	float                                              Bandwidth3;                                                 // 0x003C   (0x0004)  
};

/// Struct /Script/Engine.SoundClassAdjuster
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FSoundClassAdjuster
{ 
	class USoundClass*                                 SoundClassObject;                                           // 0x0000   (0x0008)  
	float                                              VolumeAdjuster;                                             // 0x0008   (0x0004)  
	float                                              PitchAdjuster;                                              // 0x000C   (0x0004)  
	float                                              LowPassFilterFrequency;                                     // 0x0010   (0x0004)  
	bool                                               bApplyToChildren : 1;                                       // 0x0014:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0015   (0x0003)  MISSED
	float                                              VoiceCenterChannelVolumeAdjuster;                           // 0x0018   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Class /Script/Engine.SoundMix
/// Size: 0x0068 (104 bytes) (0x000030 - 0x000098) align 8 pad: 0x0000
class USoundMix : public UObject
{ 
public:
	bool                                               bApplyEQ : 1;                                               // 0x0030:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0031   (0x0003)  MISSED
	float                                              EQPriority;                                                 // 0x0034   (0x0004)  
	FAudioEQEffect                                     EQSettings;                                                 // 0x0038   (0x0040)  
	TArray<FSoundClassAdjuster>                        SoundClassEffects;                                          // 0x0078   (0x0010)  
	float                                              InitialDelay;                                               // 0x0088   (0x0004)  
	float                                              FadeInTime;                                                 // 0x008C   (0x0004)  
	float                                              Duration;                                                   // 0x0090   (0x0004)  
	float                                              FadeOutTime;                                                // 0x0094   (0x0004)  
};

/// Class /Script/Engine.SoundNode
/// Size: 0x0020 (32 bytes) (0x000030 - 0x000050) align 8 pad: 0x0000
class USoundNode : public UObject
{ 
public:
	TArray<class USoundNode*>                          ChildNodes;                                                 // 0x0030   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0040   (0x0010)  MISSED
};

/// Class /Script/Engine.SoundNodeAssetReferencer
/// Size: 0x0000 (0 bytes) (0x000050 - 0x000050) align 8 pad: 0x0000
class USoundNodeAssetReferencer : public USoundNode
{ 
public:
};

/// Class /Script/Engine.SoundNodeAttenuation
/// Size: 0x03B0 (944 bytes) (0x000050 - 0x000400) align 8 pad: 0x0000
class USoundNodeAttenuation : public USoundNode
{ 
public:
	class USoundAttenuation*                           AttenuationSettings;                                        // 0x0050   (0x0008)  
	FSoundAttenuationSettings                          AttenuationOverrides;                                       // 0x0058   (0x03A0)  
	bool                                               bOverrideAttenuation : 1;                                   // 0x03F8:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x03F9   (0x0007)  MISSED
};

/// Class /Script/Engine.SoundNodeBranch
/// Size: 0x0010 (16 bytes) (0x000050 - 0x000060) align 8 pad: 0x0000
class USoundNodeBranch : public USoundNode
{ 
public:
	FName                                              BoolParameterName;                                          // 0x0050   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/Engine.SoundNodeConcatenator
/// Size: 0x0010 (16 bytes) (0x000050 - 0x000060) align 8 pad: 0x0000
class USoundNodeConcatenator : public USoundNode
{ 
public:
	TArray<float>                                      InputVolume;                                                // 0x0050   (0x0010)  
};

/// Class /Script/Engine.SoundNodeDelay
/// Size: 0x0008 (8 bytes) (0x000050 - 0x000058) align 8 pad: 0x0000
class USoundNodeDelay : public USoundNode
{ 
public:
	float                                              DelayMin;                                                   // 0x0050   (0x0004)  
	float                                              DelayMax;                                                   // 0x0054   (0x0004)  
};

/// Struct /Script/Engine.DialogueWaveParameter
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FDialogueWaveParameter
{ 
	class UDialogueWave*                               DialogueWave;                                               // 0x0000   (0x0008)  
	FDialogueContext                                   Context;                                                    // 0x0008   (0x0018)  
};

/// Class /Script/Engine.SoundNodeDialoguePlayer
/// Size: 0x0028 (40 bytes) (0x000050 - 0x000078) align 8 pad: 0x0000
class USoundNodeDialoguePlayer : public USoundNode
{ 
public:
	FDialogueWaveParameter                             DialogueWaveParameter;                                      // 0x0050   (0x0020)  
	bool                                               bLooping : 1;                                               // 0x0070:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0071   (0x0007)  MISSED
};

/// Struct /Script/Engine.DistanceDatum
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FDistanceDatum
{ 
	float                                              FadeInDistanceStart;                                        // 0x0000   (0x0004)  
	float                                              FadeInDistanceEnd;                                          // 0x0004   (0x0004)  
	float                                              FadeOutDistanceStart;                                       // 0x0008   (0x0004)  
	float                                              FadeOutDistanceEnd;                                         // 0x000C   (0x0004)  
	float                                              Volume;                                                     // 0x0010   (0x0004)  
};

/// Class /Script/Engine.SoundNodeDistanceCrossFade
/// Size: 0x0010 (16 bytes) (0x000050 - 0x000060) align 8 pad: 0x0000
class USoundNodeDistanceCrossFade : public USoundNode
{ 
public:
	TArray<FDistanceDatum>                             CrossFadeInput;                                             // 0x0050   (0x0010)  
};

/// Class /Script/Engine.SoundNodeDoppler
/// Size: 0x0010 (16 bytes) (0x000050 - 0x000060) align 8 pad: 0x0000
class USoundNodeDoppler : public USoundNode
{ 
public:
	float                                              DopplerIntensity;                                           // 0x0050   (0x0004)  
	bool                                               bUseSmoothing;                                              // 0x0054   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0055   (0x0003)  MISSED
	float                                              SmoothingInterpSpeed;                                       // 0x0058   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/Engine.SoundNodeEnveloper
/// Size: 0x0148 (328 bytes) (0x000050 - 0x000198) align 8 pad: 0x0000
class USoundNodeEnveloper : public USoundNode
{ 
public:
	float                                              LoopStart;                                                  // 0x0050   (0x0004)  
	float                                              LoopEnd;                                                    // 0x0054   (0x0004)  
	float                                              DurationAfterLoop;                                          // 0x0058   (0x0004)  
	int32_t                                            LoopCount;                                                  // 0x005C   (0x0004)  
	bool                                               bLoopIndefinitely : 1;                                      // 0x0060:0 (0x0001)  
	bool                                               bLoop : 1;                                                  // 0x0060:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0061   (0x0007)  MISSED
	class UDistributionFloatConstantCurve*             VolumeInterpCurve;                                          // 0x0068   (0x0008)  
	class UDistributionFloatConstantCurve*             PitchInterpCurve;                                           // 0x0070   (0x0008)  
	FRuntimeFloatCurve                                 VolumeCurve;                                                // 0x0078   (0x0088)  
	FRuntimeFloatCurve                                 PitchCurve;                                                 // 0x0100   (0x0088)  
	float                                              PitchMin;                                                   // 0x0188   (0x0004)  
	float                                              PitchMax;                                                   // 0x018C   (0x0004)  
	float                                              VolumeMin;                                                  // 0x0190   (0x0004)  
	float                                              VolumeMax;                                                  // 0x0194   (0x0004)  
};

/// Class /Script/Engine.SoundNodeGroupControl
/// Size: 0x0010 (16 bytes) (0x000050 - 0x000060) align 8 pad: 0x0000
class USoundNodeGroupControl : public USoundNode
{ 
public:
	TArray<int32_t>                                    GroupSizes;                                                 // 0x0050   (0x0010)  
};

/// Class /Script/Engine.SoundNodeLooping
/// Size: 0x0008 (8 bytes) (0x000050 - 0x000058) align 8 pad: 0x0000
class USoundNodeLooping : public USoundNode
{ 
public:
	int32_t                                            LoopCount;                                                  // 0x0050   (0x0004)  
	bool                                               bLoopIndefinitely : 1;                                      // 0x0054:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0055   (0x0003)  MISSED
};

/// Class /Script/Engine.SoundNodeMature
/// Size: 0x0000 (0 bytes) (0x000050 - 0x000050) align 8 pad: 0x0000
class USoundNodeMature : public USoundNode
{ 
public:
};

/// Class /Script/Engine.SoundNodeMixer
/// Size: 0x0010 (16 bytes) (0x000050 - 0x000060) align 8 pad: 0x0000
class USoundNodeMixer : public USoundNode
{ 
public:
	TArray<float>                                      InputVolume;                                                // 0x0050   (0x0010)  
};

/// Class /Script/Engine.SoundNodeModulator
/// Size: 0x0010 (16 bytes) (0x000050 - 0x000060) align 8 pad: 0x0000
class USoundNodeModulator : public USoundNode
{ 
public:
	float                                              PitchMin;                                                   // 0x0050   (0x0004)  
	float                                              PitchMax;                                                   // 0x0054   (0x0004)  
	float                                              VolumeMin;                                                  // 0x0058   (0x0004)  
	float                                              VolumeMax;                                                  // 0x005C   (0x0004)  
};

/// Struct /Script/Engine.ModulatorContinuousParams
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align 4 pad: 0x0000
struct FModulatorContinuousParams
{ 
	FName                                              ParameterName;                                              // 0x0000   (0x000C)  
	float                                              Default;                                                    // 0x000C   (0x0004)  
	float                                              MinInput;                                                   // 0x0010   (0x0004)  
	float                                              MaxInput;                                                   // 0x0014   (0x0004)  
	float                                              MinOutput;                                                  // 0x0018   (0x0004)  
	float                                              MaxOutput;                                                  // 0x001C   (0x0004)  
	TEnumAsByte<ModulationParamMode>                   ParamMode;                                                  // 0x0020   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0021   (0x0003)  MISSED
};

/// Class /Script/Engine.SoundNodeModulatorContinuous
/// Size: 0x0048 (72 bytes) (0x000050 - 0x000098) align 8 pad: 0x0000
class USoundNodeModulatorContinuous : public USoundNode
{ 
public:
	FModulatorContinuousParams                         PitchModulationParams;                                      // 0x0050   (0x0024)  
	FModulatorContinuousParams                         VolumeModulationParams;                                     // 0x0074   (0x0024)  
};

/// Class /Script/Engine.SoundNodeOscillator
/// Size: 0x0028 (40 bytes) (0x000050 - 0x000078) align 8 pad: 0x0000
class USoundNodeOscillator : public USoundNode
{ 
public:
	bool                                               bModulateVolume : 1;                                        // 0x0050:0 (0x0001)  
	bool                                               bModulatePitch : 1;                                         // 0x0050:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0051   (0x0003)  MISSED
	float                                              AmplitudeMin;                                               // 0x0054   (0x0004)  
	float                                              AmplitudeMax;                                               // 0x0058   (0x0004)  
	float                                              FrequencyMin;                                               // 0x005C   (0x0004)  
	float                                              FrequencyMax;                                               // 0x0060   (0x0004)  
	float                                              OffsetMin;                                                  // 0x0064   (0x0004)  
	float                                              OffsetMax;                                                  // 0x0068   (0x0004)  
	float                                              CenterMin;                                                  // 0x006C   (0x0004)  
	float                                              CenterMax;                                                  // 0x0070   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0074   (0x0004)  MISSED
};

/// Class /Script/Engine.SoundNodeParamCrossFade
/// Size: 0x0010 (16 bytes) (0x000060 - 0x000070) align 8 pad: 0x0000
class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
{ 
public:
	FName                                              ParamName;                                                  // 0x0060   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x006C   (0x0004)  MISSED
};

/// Class /Script/Engine.SoundNodeQualityLevel
/// Size: 0x0008 (8 bytes) (0x000050 - 0x000058) align 8 pad: 0x0000
class USoundNodeQualityLevel : public USoundNode
{ 
public:
	int32_t                                            CookedQualityLevelIndex;                                    // 0x0050   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.SoundNodeRandom
/// Size: 0x0030 (48 bytes) (0x000050 - 0x000080) align 8 pad: 0x0000
class USoundNodeRandom : public USoundNode
{ 
public:
	TArray<float>                                      Weights;                                                    // 0x0050   (0x0010)  
	TArray<bool>                                       HasBeenUsed;                                                // 0x0060   (0x0010)  
	int32_t                                            NumRandomUsed;                                              // 0x0070   (0x0004)  
	int32_t                                            PreselectAtLevelLoad;                                       // 0x0074   (0x0004)  
	bool                                               bShouldExcludeFromBranchCulling : 1;                        // 0x0078:0 (0x0001)  
	bool                                               bSoundCueExcludedFromBranchCulling : 1;                     // 0x0078:1 (0x0001)  
	bool                                               bRandomizeWithoutReplacement : 1;                           // 0x0078:2 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/Engine.SoundNodeSoundClass
/// Size: 0x0010 (16 bytes) (0x000050 - 0x000060) align 8 pad: 0x0000
class USoundNodeSoundClass : public USoundNode
{ 
public:
	class USoundClass*                                 SoundClassOverride;                                         // 0x0050   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0058   (0x0008)  MISSED
};

/// Class /Script/Engine.SoundNodeSwitch
/// Size: 0x0010 (16 bytes) (0x000050 - 0x000060) align 8 pad: 0x0000
class USoundNodeSwitch : public USoundNode
{ 
public:
	FName                                              IntParameterName;                                           // 0x0050   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/Engine.SoundNodeWaveParam
/// Size: 0x0010 (16 bytes) (0x000050 - 0x000060) align 8 pad: 0x0000
class USoundNodeWaveParam : public USoundNode
{ 
public:
	FName                                              WaveParameterName;                                          // 0x0050   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/Engine.SoundNodeWavePlayer
/// Size: 0x0048 (72 bytes) (0x000050 - 0x000098) align 8 pad: 0x0000
class USoundNodeWavePlayer : public USoundNodeAssetReferencer
{ 
public:
	SDK_UNDEFINED(48,219) /* TWeakObjectPtr<USoundWave*> */ __um(SoundWaveAssetPtr);                               // 0x0050   (0x0030)  
	class USoundWave*                                  SoundWave;                                                  // 0x0080   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0088   (0x0008)  MISSED
	bool                                               bLooping : 1;                                               // 0x0090:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0091   (0x0007)  MISSED
};

/// Class /Script/Engine.SoundSourceBus
/// Size: 0x0018 (24 bytes) (0x000378 - 0x000390) align 8 pad: 0x0000
class USoundSourceBus : public USoundWave
{ 
public:
	ESourceBusChannels                                 SourceBusChannels;                                          // 0x0378   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0379   (0x0003)  MISSED
	float                                              SourceBusDuration;                                          // 0x037C   (0x0004)  
	class UAudioBus*                                   AudioBus;                                                   // 0x0380   (0x0008)  
	bool                                               bAutoDeactivateWhenSilent : 1;                              // 0x0388:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0389   (0x0007)  MISSED
};

/// Class /Script/Engine.SoundSubmixBase
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class USoundSubmixBase : public UObject
{ 
public:
	TArray<class USoundSubmixBase*>                    ChildSubmixes;                                              // 0x0030   (0x0010)  
};

/// Class /Script/Engine.SoundSubmixWithParentBase
/// Size: 0x0008 (8 bytes) (0x000040 - 0x000048) align 8 pad: 0x0000
class USoundSubmixWithParentBase : public USoundSubmixBase
{ 
public:
	class USoundSubmixBase*                            ParentSubmix;                                               // 0x0040   (0x0008)  
};

/// Class /Script/Engine.SoundSubmix
/// Size: 0x0050 (80 bytes) (0x000048 - 0x000098) align 8 pad: 0x0000
class USoundSubmix : public USoundSubmixWithParentBase
{ 
public:
	bool                                               bMuteWhenBackgrounded : 1;                                  // 0x0048:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0049   (0x0007)  MISSED
	TArray<class USoundEffectSubmixPreset*>            SubmixEffectChain;                                          // 0x0050   (0x0010)  
	class USoundfieldEncodingSettingsBase*             AmbisonicsPluginSettings;                                   // 0x0060   (0x0008)  
	int32_t                                            EnvelopeFollowerAttackTime;                                 // 0x0068   (0x0004)  
	int32_t                                            EnvelopeFollowerReleaseTime;                                // 0x006C   (0x0004)  
	EGainParamMode                                     GainMode;                                                   // 0x0070   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0071   (0x0003)  MISSED
	float                                              OutputVolume;                                               // 0x0074   (0x0004)  
	float                                              WetLevel;                                                   // 0x0078   (0x0004)  
	float                                              DryLevel;                                                   // 0x007C   (0x0004)  
	SDK_UNDEFINED(16,220) /* FMulticastInlineDelegate */ __um(OnSubmixRecordedFileDone);                           // 0x0080   (0x0010)  
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x0090   (0x0008)  MISSED
	// void StopSpectralAnalysis(class UObject* WorldContextObject);                                                            // [0x47490c0] Final|Native|Public|BlueprintCallable 
	// void StopRecordingOutput(class UObject* WorldContextObject, EAudioRecordingExportType ExportType, FString Name, FString Path, class USoundWave* ExistingSoundWaveToOverwrite); // [0x4748ec0] Final|Native|Public|BlueprintCallable 
	// void StopEnvelopeFollowing(class UObject* WorldContextObject);                                                           // [0x4748e30] Final|Native|Public|BlueprintCallable 
	// void StartSpectralAnalysis(class UObject* WorldContextObject, EFFTSize FFTSize, EFFTPeakInterpolationMethod InterpolationMethod, EFFTWindowType WindowType, float HopSize, EAudioSpectrumType SpectrumType); // [0x4748c50] Final|Native|Public|BlueprintCallable 
	// void StartRecordingOutput(class UObject* WorldContextObject, float ExpectedDuration);                                    // [0x4748b80] Final|Native|Public|BlueprintCallable 
	// void StartEnvelopeFollowing(class UObject* WorldContextObject);                                                          // [0x4748af0] Final|Native|Public|BlueprintCallable 
	// void SetSubmixOutputVolume(class UObject* WorldContextObject, float InOutputVolume);                                     // [0x4748a20] Final|Native|Public|BlueprintCallable 
	// void RemoveSpectralAnalysisDelegate(class UObject* WorldContextObject, FDelegateProperty& OnSubmixSpectralAnalysisBP);   // [0x4748920] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void AddSpectralAnalysisDelegate(class UObject* WorldContextObject, TArray<FSoundSubmixSpectralAnalysisBandSettings>& InBandSettings, FDelegateProperty& OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime); // [0x4748610] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void AddEnvelopeFollowerDelegate(class UObject* WorldContextObject, FDelegateProperty& OnSubmixEnvelopeBP);              // [0x4748510] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.SoundfieldSubmix
/// Size: 0x0030 (48 bytes) (0x000048 - 0x000078) align 8 pad: 0x0000
class USoundfieldSubmix : public USoundSubmixWithParentBase
{ 
public:
	FName                                              SoundfieldEncodingFormat;                                   // 0x0048   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0054   (0x0004)  MISSED
	class USoundfieldEncodingSettingsBase*             EncodingSettings;                                           // 0x0058   (0x0008)  
	TArray<class USoundfieldEffectBase*>               SoundfieldEffectChain;                                      // 0x0060   (0x0010)  
	class UClass*                                      EncodingSettingsClass;                                      // 0x0070   (0x0008)  
};

/// Class /Script/Engine.EndpointSubmix
/// Size: 0x0020 (32 bytes) (0x000040 - 0x000060) align 8 pad: 0x0000
class UEndpointSubmix : public USoundSubmixBase
{ 
public:
	FName                                              EndpointType;                                               // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x004C   (0x0004)  MISSED
	class UClass*                                      EndpointSettingsClass;                                      // 0x0050   (0x0008)  
	class UAudioEndpointSettingsBase*                  EndpointSettings;                                           // 0x0058   (0x0008)  
};

/// Class /Script/Engine.SoundfieldEndpointSubmix
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000080) align 8 pad: 0x0000
class USoundfieldEndpointSubmix : public USoundSubmixBase
{ 
public:
	FName                                              SoundfieldEndpointType;                                     // 0x0040   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x004C   (0x0004)  MISSED
	class UClass*                                      EndpointSettingsClass;                                      // 0x0050   (0x0008)  
	class USoundfieldEndpointSettingsBase*             EndpointSettings;                                           // 0x0058   (0x0008)  
	class UClass*                                      EncodingSettingsClass;                                      // 0x0060   (0x0008)  
	class USoundfieldEncodingSettingsBase*             EncodingSettings;                                           // 0x0068   (0x0008)  
	TArray<class USoundfieldEffectBase*>               SoundfieldEffectChain;                                      // 0x0070   (0x0010)  
};

/// Class /Script/Engine.SpectatorPawn
/// Size: 0x0000 (0 bytes) (0x000330 - 0x000330) align 8 pad: 0x0000
class ASpectatorPawn : public ADefaultPawn
{ 
public:
};

/// Class /Script/Engine.SpectatorPawnMovement
/// Size: 0x0008 (8 bytes) (0x000168 - 0x000170) align 8 pad: 0x0000
class USpectatorPawnMovement : public UFloatingPawnMovement
{ 
public:
	bool                                               bIgnoreTimeDilation : 1;                                    // 0x0168:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0169   (0x0007)  MISSED
};

/// Class /Script/Engine.SphereReflectionCapture
/// Size: 0x0008 (8 bytes) (0x0002B0 - 0x0002B8) align 8 pad: 0x0000
class ASphereReflectionCapture : public AReflectionCapture
{ 
public:
	class UDrawSphereComponent*                        DrawCaptureRadius;                                          // 0x02B0   (0x0008)  
};

/// Class /Script/Engine.SphereReflectionCaptureComponent
/// Size: 0x0018 (24 bytes) (0x0002D8 - 0x0002F0) align 16 pad: 0x0000
class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
{ 
public:
	float                                              InfluenceRadius;                                            // 0x02D8   (0x0004)  
	float                                              CaptureDistanceScale;                                       // 0x02DC   (0x0004)  
	class UDrawSphereComponent*                        PreviewInfluenceRadius;                                     // 0x02E0   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x02E8   (0x0008)  MISSED
};

/// Class /Script/Engine.SplineMetadata
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class USplineMetadata : public UObject
{ 
public:
};

/// Class /Script/Engine.SplineMeshActor
/// Size: 0x0008 (8 bytes) (0x0002A8 - 0x0002B0) align 8 pad: 0x0000
class ASplineMeshActor : public AActor
{ 
public:
	class USplineMeshComponent*                        SplineMeshComponent;                                        // 0x02A8   (0x0008)  
};

/// Struct /Script/Engine.SplineMeshParams
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align 4 pad: 0x0000
struct FSplineMeshParams
{ 
	FVector                                            StartPos;                                                   // 0x0000   (0x000C)  
	FVector                                            StartTangent;                                               // 0x000C   (0x000C)  
	FVector2D                                          StartScale;                                                 // 0x0018   (0x0008)  
	float                                              StartRoll;                                                  // 0x0020   (0x0004)  
	FVector2D                                          StartOffset;                                                // 0x0024   (0x0008)  
	FVector                                            EndPos;                                                     // 0x002C   (0x000C)  
	FVector2D                                          EndScale;                                                   // 0x0038   (0x0008)  
	FVector                                            EndTangent;                                                 // 0x0040   (0x000C)  
	float                                              EndRoll;                                                    // 0x004C   (0x0004)  
	FVector2D                                          EndOffset;                                                  // 0x0050   (0x0008)  
};

/// Class /Script/Engine.SplineMeshComponent
/// Size: 0x0098 (152 bytes) (0x000588 - 0x000620) align 16 pad: 0x0000
class USplineMeshComponent : public UStaticMeshComponent
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0588   (0x0008)  MISSED
	FSplineMeshParams                                  SplineParams;                                               // 0x0590   (0x0058)  
	FVector                                            SplineUpDir;                                                // 0x05E8   (0x000C)  
	float                                              SplineBoundaryMin;                                          // 0x05F4   (0x0004)  
	FGuid                                              CachedMeshBodySetupGuid;                                    // 0x05F8   (0x0010)  
	class UBodySetup*                                  BodySetup;                                                  // 0x0608   (0x0008)  
	float                                              SplineBoundaryMax;                                          // 0x0610   (0x0004)  
	bool                                               bAllowSplineEditingPerInstance : 1;                         // 0x0614:0 (0x0001)  
	bool                                               bSmoothInterpRollScale : 1;                                 // 0x0614:1 (0x0001)  
	bool                                               bMeshDirty : 1;                                             // 0x0614:2 (0x0001)  
	TEnumAsByte<ESplineMeshAxis>                       ForwardAxis;                                                // 0x0615   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0616   (0x0002)  MISSED
	float                                              VirtualTextureMainPassMaxDrawDistance;                      // 0x0618   (0x0004)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x061C   (0x0004)  MISSED
	// void UpdateMesh();                                                                                                       // [0x4756350] Final|Native|Public|BlueprintCallable 
	// void SetStartTangent(FVector StartTangent, bool bUpdateMesh);                                                            // [0x4756270] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetStartScale(FVector2D StartScale, bool bUpdateMesh);                                                              // [0x47561a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetStartRoll(float StartRoll, bool bUpdateMesh);                                                                    // [0x47560c0] Final|Native|Public|BlueprintCallable 
	// void SetStartPosition(FVector StartPos, bool bUpdateMesh);                                                               // [0x4755fe0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetStartOffset(FVector2D StartOffset, bool bUpdateMesh);                                                            // [0x4755f10] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetStartAndEnd(FVector StartPos, FVector StartTangent, FVector EndPos, FVector EndTangent, bool bUpdateMesh);       // [0x4755d30] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetSplineUpDir(FVector& InSplineUpDir, bool bUpdateMesh);                                                           // [0x4755c50] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetForwardAxis(TEnumAsByte<ESplineMeshAxis> InForwardAxis, bool bUpdateMesh);                                       // [0x4755980] Final|Native|Public|BlueprintCallable 
	// void SetEndTangent(FVector EndTangent, bool bUpdateMesh);                                                                // [0x47558a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetEndScale(FVector2D EndScale, bool bUpdateMesh);                                                                  // [0x47557d0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetEndRoll(float EndRoll, bool bUpdateMesh);                                                                        // [0x47556f0] Final|Native|Public|BlueprintCallable 
	// void SetEndPosition(FVector EndPos, bool bUpdateMesh);                                                                   // [0x4755610] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetEndOffset(FVector2D EndOffset, bool bUpdateMesh);                                                                // [0x4755540] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);                                                              // [0x4755460] Final|Native|Public|BlueprintCallable 
	// void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);                                                              // [0x4755380] Final|Native|Public|BlueprintCallable 
	// FVector GetStartTangent();                                                                                               // [0x4755200] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector2D GetStartScale();                                                                                               // [0x47551c0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// float GetStartRoll();                                                                                                    // [0x4755190] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector GetStartPosition();                                                                                              // [0x4755150] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector2D GetStartOffset();                                                                                              // [0x4755110] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetSplineUpDir();                                                                                                // [0x47550d0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// TEnumAsByte<ESplineMeshAxis> GetForwardAxis();                                                                           // [0x4754cd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector GetEndTangent();                                                                                                 // [0x4754c90] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector2D GetEndScale();                                                                                                 // [0x4754c50] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// float GetEndRoll();                                                                                                      // [0xe8eb30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector GetEndPosition();                                                                                                // [0x4754c10] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector2D GetEndOffset();                                                                                                // [0x4754bd0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// float GetBoundaryMin();                                                                                                  // [0x4754b00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetBoundaryMax();                                                                                                  // [0x4754ad0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.SpotLightComponent
/// Size: 0x0018 (24 bytes) (0x0003E8 - 0x000400) align 16 pad: 0x0000
class USpotLightComponent : public UPointLightComponent
{ 
public:
	float                                              SpotLightShadowDistance;                                    // 0x03E8   (0x0004)  
	float                                              ShadowFadeDistancePercent;                                  // 0x03EC   (0x0004)  
	float                                              InnerConeAngle;                                             // 0x03F0   (0x0004)  
	float                                              OuterConeAngle;                                             // 0x03F4   (0x0004)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x03F8   (0x0008)  MISSED
	// void SetOuterConeAngle(float NewOuterConeAngle);                                                                         // [0x4755bd0] Final|Native|Public|BlueprintCallable 
	// void SetInnerConeAngle(float NewInnerConeAngle);                                                                         // [0x4755ad0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SpringArmComponent
/// Size: 0x0098 (152 bytes) (0x000218 - 0x0002B0) align 16 pad: 0x0000
class USpringArmComponent : public USceneComponent
{ 
public:
	float                                              TargetArmLength;                                            // 0x0218   (0x0004)  
	FVector                                            SocketOffset;                                               // 0x021C   (0x000C)  
	FVector                                            TargetOffset;                                               // 0x0228   (0x000C)  
	float                                              ProbeSize;                                                  // 0x0234   (0x0004)  
	TEnumAsByte<ECollisionChannel>                     ProbeChannel;                                               // 0x0238   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0239   (0x0003)  MISSED
	bool                                               bDoCollisionTest : 1;                                       // 0x023C:0 (0x0001)  
	bool                                               bUsePawnControlRotation : 1;                                // 0x023C:1 (0x0001)  
	bool                                               bInheritPitch : 1;                                          // 0x023C:2 (0x0001)  
	bool                                               bInheritYaw : 1;                                            // 0x023C:3 (0x0001)  
	bool                                               bInheritRoll : 1;                                           // 0x023C:4 (0x0001)  
	bool                                               bEnableCameraLag : 1;                                       // 0x023C:5 (0x0001)  
	bool                                               bEnableCameraRotationLag : 1;                               // 0x023C:6 (0x0001)  
	bool                                               bUseCameraLagSubstepping : 1;                               // 0x023C:7 (0x0001)  
	bool                                               bDrawDebugLagMarkers : 1;                                   // 0x023D:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x023E   (0x0002)  MISSED
	float                                              CameraLagSpeed;                                             // 0x0240   (0x0004)  
	float                                              CameraRotationLagSpeed;                                     // 0x0244   (0x0004)  
	float                                              CameraRotationLagSpeedPercent;                              // 0x0248   (0x0004)  
	float                                              CameraLagMaxTimeStep;                                       // 0x024C   (0x0004)  
	float                                              CameraLagMaxDistance;                                       // 0x0250   (0x0004)  
	unsigned char                                      UnknownData02_7[0x5C];                                      // 0x0254   (0x005C)  MISSED
	// bool IsCollisionFixApplied();                                                                                            // [0x47552c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector GetUnfixedCameraPosition();                                                                                      // [0x4755280] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FRotator GetTargetRotation();                                                                                            // [0x4755240] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.StaticMaterial
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FStaticMaterial
{ 
	class UMaterialInterface*                          MaterialInterface;                                          // 0x0000   (0x0008)  
	FName                                              MaterialSlotName;                                           // 0x0008   (0x000C)  
	FName                                              ImportedMaterialSlotName;                                   // 0x0014   (0x000C)  
	FMeshUVChannelInfo                                 UVChannelData;                                              // 0x0020   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Class /Script/Engine.StaticMesh
/// Size: 0x0140 (320 bytes) (0x000070 - 0x0001B0) align 8 pad: 0x0000
class UStaticMesh : public UStreamableRenderAsset
{ 
public:
	unsigned char                                      UnknownData00_3[0x20];                                      // 0x0070   (0x0020)  MISSED
	FPerPlatformInt                                    MinLOD;                                                     // 0x0090   (0x0004)  
	bool                                               bUseKuroLODDistance;                                        // 0x0094   (0x0001)  
	bool                                               bBakeImposter;                                              // 0x0095   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0096   (0x0002)  MISSED
	FPerPlatformFloat                                  KuroImposterScreenSizeScaleLod0;                            // 0x0098   (0x0004)  
	FPerPlatformFloat                                  KuroImposterScreenSizeScaleLod1;                            // 0x009C   (0x0004)  
	bool                                               bUseCustomDataForWorldMap;                                  // 0x00A0   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x00A1   (0x0003)  MISSED
	float                                              ScreenSizeCullRatio;                                        // 0x00A4   (0x0004)  
	TArray<FName>                                      Tags;                                                       // 0x00A8   (0x0010)  
	TArray<class UKuroMaterialVariationCollection*>    KuroMaterialVariationAssets;                                // 0x00B8   (0x0010)  
	class UKuroMaterialVariationData*                  KuroMaterialVariationData;                                  // 0x00C8   (0x0008)  
	float                                              LpvBiasMultiplier;                                          // 0x00D0   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x00D4   (0x0004)  MISSED
	TArray<FStaticMaterial>                            StaticMaterials;                                            // 0x00D8   (0x0010)  
	float                                              LightmapUVDensity;                                          // 0x00E8   (0x0004)  
	int32_t                                            LightMapResolution;                                         // 0x00EC   (0x0004)  
	int32_t                                            LightMapCoordinateIndex;                                    // 0x00F0   (0x0004)  
	float                                              DistanceFieldSelfShadowBias;                                // 0x00F4   (0x0004)  
	class UBodySetup*                                  BodySetup;                                                  // 0x00F8   (0x0008)  
	int32_t                                            LODForCollision;                                            // 0x0100   (0x0004)  
	bool                                               bGenerateMeshDistanceField : 1;                             // 0x0104:0 (0x0001)  
	bool                                               bStripComplexCollisionForConsole : 1;                       // 0x0104:1 (0x0001)  
	bool                                               bHasNavigationData : 1;                                     // 0x0104:2 (0x0001)  
	bool                                               bSupportUniformlyDistributedSampling : 1;                   // 0x0104:3 (0x0001)  
	bool                                               bSupportPhysicalMaterialMasks : 1;                          // 0x0104:4 (0x0001)  
	bool                                               bIsBuiltAtRuntime : 1;                                      // 0x0104:5 (0x0001)  
	unsigned char                                      UnknownBit04 : 1;                                           // 0x0104:6 (0x0001)  MISSED
	bool                                               bAllowCPUAccess : 1;                                        // 0x0104:7 (0x0001)  
	bool                                               bSupportGpuUniformlyDistributedSampling : 1;                // 0x0105:0 (0x0001)  
	bool                                               bAllowVertexCompress : 1;                                   // 0x0105:1 (0x0001)  
	bool                                               bBasePassVelocity : 1;                                      // 0x0105:2 (0x0001)  
	unsigned char                                      UnknownData05_5[0x22];                                      // 0x0106   (0x0022)  MISSED
	TArray<class UStaticMeshSocket*>                   Sockets;                                                    // 0x0128   (0x0010)  
	unsigned char                                      UnknownData06_6[0x10];                                      // 0x0138   (0x0010)  MISSED
	FVector                                            PositiveBoundsExtension;                                    // 0x0148   (0x000C)  
	FVector                                            NegativeBoundsExtension;                                    // 0x0154   (0x000C)  
	FBoxSphereBounds                                   ExtendedBounds;                                             // 0x0160   (0x001C)  
	int32_t                                            ElementToIgnoreForTexFactor;                                // 0x017C   (0x0004)  
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0180   (0x0010)  
	class UObject*                                     EditableMesh;                                               // 0x0190   (0x0008)  
	bool                                               bOnlyUseSimpleCollision;                                    // 0x0198   (0x0001)  
	unsigned char                                      UnknownData07_6[0x7];                                       // 0x0199   (0x0007)  MISSED
	class UNavCollisionBase*                           NavCollision;                                               // 0x01A0   (0x0008)  
	bool                                               bKuroAutoReduce;                                            // 0x01A8   (0x0001)  
	unsigned char                                      UnknownData08_7[0x7];                                       // 0x01A9   (0x0007)  MISSED
	// void RemoveSocket(class UStaticMeshSocket* Socket);                                                                      // [0x47552f0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// int32_t GetNumSections(int32_t InLOD);                                                                                   // [0x4755030] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetNumLODs();                                                                                                    // [0x4755000] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void GetMinimumLODForPlatforms(TMap<FName, int32_t>& PlatformMinimumLODs);                                               // [0x4754ed0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetMinimumLODForPlatform(FName& PlatformName);                                                                   // [0x4754e50] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetMaterialIndex(FName MaterialSlotName);                                                                        // [0x4754da0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UMaterialInterface* GetMaterial(int32_t MaterialIndex);                                                            // [0x4754d00] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FBoxSphereBounds GetBounds();                                                                                            // [0x4754b80] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FBox GetBoundingBox();                                                                                                   // [0x4754b30] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// class UStaticMeshSocket* FindSocket(FName InSocketName);                                                                 // [0x4754a20] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UStaticMeshDescription* CreateStaticMeshDescription(class UObject* Outer);                                         // [0x4754990] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// void BuildFromStaticMeshDescriptions(TArray<UStaticMeshDescription*>& StaticMeshDescriptions, bool bBuildSimpleCollision); // [0x4754890] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// void AddSocket(class UStaticMeshSocket* Socket);                                                                         // [0x4754800] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// FName AddMaterial(class UMaterialInterface* Material);                                                                   // [0x4754750] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.StaticMeshSocket
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000070) align 8 pad: 0x0000
class UStaticMeshSocket : public UObject
{ 
public:
	FName                                              SocketName;                                                 // 0x0030   (0x000C)  
	FVector                                            RelativeLocation;                                           // 0x003C   (0x000C)  
	FRotator                                           RelativeRotation;                                           // 0x0048   (0x000C)  
	FVector                                            RelativeScale;                                              // 0x0054   (0x000C)  
	FString                                            Tag;                                                        // 0x0060   (0x0010)  
};

/// Class /Script/Engine.StereoLayerShape
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UStereoLayerShape : public UObject
{ 
public:
};

/// Class /Script/Engine.StereoLayerShapeQuad
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UStereoLayerShapeQuad : public UStereoLayerShape
{ 
public:
};

/// Class /Script/Engine.StereoLayerShapeCylinder
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UStereoLayerShapeCylinder : public UStereoLayerShape
{ 
public:
	float                                              Radius;                                                     // 0x0030   (0x0004)  
	float                                              OverlayArc;                                                 // 0x0034   (0x0004)  
	int32_t                                            Height;                                                     // 0x0038   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x003C   (0x0004)  MISSED
	// void SetRadius(float InRadius);                                                                                          // [0x4759d20] Final|Native|Public|BlueprintCallable 
	// void SetOverlayArc(float InOverlayArc);                                                                                  // [0x4759b90] Final|Native|Public|BlueprintCallable 
	// void SetHeight(int32_t InHeight);                                                                                        // [0x4759950] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.StereoLayerShapeCubemap
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UStereoLayerShapeCubemap : public UStereoLayerShape
{ 
public:
};

/// Class /Script/Engine.StereoLayerShapeEquirect
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000078) align 8 pad: 0x0000
class UStereoLayerShapeEquirect : public UStereoLayerShape
{ 
public:
	FBox2D                                             LeftUVRect;                                                 // 0x0030   (0x0014)  
	FBox2D                                             RightUVRect;                                                // 0x0044   (0x0014)  
	FVector2D                                          LeftScale;                                                  // 0x0058   (0x0008)  
	FVector2D                                          RightScale;                                                 // 0x0060   (0x0008)  
	FVector2D                                          LeftBias;                                                   // 0x0068   (0x0008)  
	FVector2D                                          RightBias;                                                  // 0x0070   (0x0008)  
	// void SetEquirectProps(FEquirectProps InScaleBiases);                                                                     // [0x4759730] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.EquirectProps
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align 4 pad: 0x0000
struct FEquirectProps
{ 
	FBox2D                                             LeftUVRect;                                                 // 0x0000   (0x0014)  
	FBox2D                                             RightUVRect;                                                // 0x0014   (0x0014)  
	FVector2D                                          LeftScale;                                                  // 0x0028   (0x0008)  
	FVector2D                                          RightScale;                                                 // 0x0030   (0x0008)  
	FVector2D                                          LeftBias;                                                   // 0x0038   (0x0008)  
	FVector2D                                          RightBias;                                                  // 0x0040   (0x0008)  
};

/// Class /Script/Engine.StereoLayerComponent
/// Size: 0x00E8 (232 bytes) (0x000218 - 0x000300) align 16 pad: 0x0000
class UStereoLayerComponent : public USceneComponent
{ 
public:
	bool                                               bLiveTexture : 1;                                           // 0x0218:0 (0x0001)  
	bool                                               bSupportsDepth : 1;                                         // 0x0218:1 (0x0001)  
	bool                                               bNoAlphaChannel : 1;                                        // 0x0218:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0219   (0x0007)  MISSED
	class UTexture*                                    Texture;                                                    // 0x0220   (0x0008)  
	class UTexture*                                    LeftTexture;                                                // 0x0228   (0x0008)  
	bool                                               bQuadPreserveTextureRatio : 1;                              // 0x0230:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0231   (0x0003)  MISSED
	FVector2D                                          QuadSize;                                                   // 0x0234   (0x0008)  
	FBox2D                                             UVRect;                                                     // 0x023C   (0x0014)  
	float                                              CylinderRadius;                                             // 0x0250   (0x0004)  
	float                                              CylinderOverlayArc;                                         // 0x0254   (0x0004)  
	int32_t                                            CylinderHeight;                                             // 0x0258   (0x0004)  
	FEquirectProps                                     EquirectProps;                                              // 0x025C   (0x0048)  
	TEnumAsByte<EStereoLayerType>                      StereoLayerType;                                            // 0x02A4   (0x0001)  
	TEnumAsByte<EStereoLayerShape>                     StereoLayerShape;                                           // 0x02A5   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x02A6   (0x0002)  MISSED
	class UStereoLayerShape*                           Shape;                                                      // 0x02A8   (0x0008)  
	int32_t                                            Priority;                                                   // 0x02B0   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4C];                                      // 0x02B4   (0x004C)  MISSED
	// void SetUVRect(FBox2D InUVRect);                                                                                         // [0x475a120] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetTexture(class UTexture* InTexture);                                                                              // [0x475a090] Final|Native|Public|BlueprintCallable 
	// void SetQuadSize(FVector2D InQuadSize);                                                                                  // [0x4759ca0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetPriority(int32_t InPriority);                                                                                    // [0x4759c10] Final|Native|Public|BlueprintCallable 
	// void SetLeftTexture(class UTexture* InTexture);                                                                          // [0x47599e0] Final|Native|Public|BlueprintCallable 
	// void SetEquirectProps(FEquirectProps InScaleBiases);                                                                     // [0x4759630] Final|Native|Public|BlueprintCallable 
	// void MarkTextureForUpdate();                                                                                             // [0x4759500] Final|Native|Public|BlueprintCallable 
	// FBox2D GetUVRect();                                                                                                      // [0x47594d0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// class UTexture* GetTexture();                                                                                            // [0x47594b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector2D GetQuadSize();                                                                                                 // [0x4759480] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetPriority();                                                                                                   // [0x4759460] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UTexture* GetLeftTexture();                                                                                        // [0x4759360] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.StereoLayerFunctionLibrary
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UStereoLayerFunctionLibrary : public UBlueprintFunctionLibrary
{ 
public:
	// void ShowSplashScreen();                                                                                                 // [0x36736a0] Final|Native|Static|Public|BlueprintCallable 
	// void SetSplashScreen(class UTexture* Texture, FVector2D Scale, FVector Offset, bool bShowLoadingMovie, bool bShowOnSet); // [0x4759e30] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// void HideSplashScreen();                                                                                                 // [0x36724e0] Final|Native|Static|Public|BlueprintCallable 
	// void EnableAutoLoadingSplashScreen(bool InAutoShowEnabled);                                                              // [0x47592e0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.StringTable
/// Size: 0x0020 (32 bytes) (0x000030 - 0x000050) align 8 pad: 0x0000
class UStringTable : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x20];                                      // 0x0030   (0x0020)  MISSED
};

/// Struct /Script/Engine.SubsurfaceProfileStruct
/// Size: 0x008C (140 bytes) (0x000000 - 0x00008C) align 4 pad: 0x0000
struct FSubsurfaceProfileStruct
{ 
	FLinearColor                                       SurfaceAlbedo;                                              // 0x0000   (0x0010)  
	FLinearColor                                       MeanFreePathColor;                                          // 0x0010   (0x0010)  
	float                                              MeanFreePathDistance;                                       // 0x0020   (0x0004)  
	float                                              WorldUnitScale;                                             // 0x0024   (0x0004)  
	bool                                               bEnableBurley;                                              // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              ScatterRadius;                                              // 0x002C   (0x0004)  
	FLinearColor                                       SubsurfaceColor;                                            // 0x0030   (0x0010)  
	FLinearColor                                       FalloffColor;                                               // 0x0040   (0x0010)  
	FLinearColor                                       BoundaryColorBleed;                                         // 0x0050   (0x0010)  
	float                                              ExtinctionScale;                                            // 0x0060   (0x0004)  
	float                                              NormalScale;                                                // 0x0064   (0x0004)  
	float                                              ScatteringDistribution;                                     // 0x0068   (0x0004)  
	float                                              IOR;                                                        // 0x006C   (0x0004)  
	float                                              Roughness0;                                                 // 0x0070   (0x0004)  
	float                                              Roughness1;                                                 // 0x0074   (0x0004)  
	float                                              LobeMix;                                                    // 0x0078   (0x0004)  
	FLinearColor                                       TransmissionTintColor;                                      // 0x007C   (0x0010)  
};

/// Class /Script/Engine.SubsurfaceProfile
/// Size: 0x0090 (144 bytes) (0x000030 - 0x0000C0) align 8 pad: 0x0000
class USubsurfaceProfile : public UObject
{ 
public:
	FSubsurfaceProfileStruct                           Settings;                                                   // 0x0030   (0x008C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x00BC   (0x0004)  MISSED
};

/// Class /Script/Engine.SubsystemBlueprintLibrary
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class USubsystemBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
public:
	// class UWorldSubsystem* GetWorldSubsystem(class UObject* ContextObject, class UClass* Class);                             // [0x475c720] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// class ULocalPlayerSubsystem* GetLocalPlayerSubSystemFromPlayerController(class APlayerController* PlayerController, class UClass* Class); // [0x475c500] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// class ULocalPlayerSubsystem* GetLocalPlayerSubsystem(class UObject* ContextObject, class UClass* Class);                 // [0x475c5d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// class UGameInstanceSubsystem* GetGameInstanceSubsystem(class UObject* ContextObject, class UClass* Class);               // [0x475c430] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// class UEngineSubsystem* GetEngineSubsystem(class UClass* Class);                                                         // [0x475c3a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.SubUVAnimation
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000070) align 8 pad: 0x0000
class USubUVAnimation : public UObject
{ 
public:
	class UTexture2D*                                  SubUVTexture;                                               // 0x0030   (0x0008)  
	int32_t                                            SubImages_Horizontal;                                       // 0x0038   (0x0004)  
	int32_t                                            SubImages_Vertical;                                         // 0x003C   (0x0004)  
	TEnumAsByte<ESubUVBoundingVertexCount>             BoundingMode;                                               // 0x0040   (0x0001)  
	TEnumAsByte<EOpacitySourceMode>                    OpacitySourceMode;                                          // 0x0041   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0042   (0x0002)  MISSED
	float                                              AlphaThreshold;                                             // 0x0044   (0x0004)  
	unsigned char                                      UnknownData01_7[0x28];                                      // 0x0048   (0x0028)  MISSED
};

/// Class /Script/Engine.SystemTimeTimecodeProvider
/// Size: 0x0010 (16 bytes) (0x000038 - 0x000048) align 8 pad: 0x0000
class USystemTimeTimecodeProvider : public UTimecodeProvider
{ 
public:
	FFrameRate                                         FrameRate;                                                  // 0x0038   (0x0008)  
	bool                                               bGenerateFullFrame;                                         // 0x0040   (0x0001)  
	bool                                               bUseHighPerformanceClock;                                   // 0x0041   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x0042   (0x0006)  MISSED
};

/// Class /Script/Engine.TargetPoint
/// Size: 0x0000 (0 bytes) (0x0002A8 - 0x0002A8) align 8 pad: 0x0000
class ATargetPoint : public AActor
{ 
public:
};

/// Class /Script/Engine.TextPropertyTestObject
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000078) align 8 pad: 0x0000
class UTextPropertyTestObject : public UObject
{ 
public:
	FText                                              DefaultedText;                                              // 0x0030   (0x0018)  
	FText                                              UndefaultedText;                                            // 0x0048   (0x0018)  
	FText                                              TransientText;                                              // 0x0060   (0x0018)  
};

/// Class /Script/Engine.TextRenderActor
/// Size: 0x0008 (8 bytes) (0x0002A8 - 0x0002B0) align 8 pad: 0x0000
class ATextRenderActor : public AActor
{ 
public:
	class UTextRenderComponent*                        TextRender;                                                 // 0x02A8   (0x0008)  
};

/// Class /Script/Engine.TextRenderComponent
/// Size: 0x0050 (80 bytes) (0x0004E0 - 0x000530) align 16 pad: 0x0000
class UTextRenderComponent : public UPrimitiveComponent
{ 
public:
	FText                                              Text;                                                       // 0x04E0   (0x0018)  
	class UMaterialInterface*                          TextMaterial;                                               // 0x04F8   (0x0008)  
	class UFont*                                       Font;                                                       // 0x0500   (0x0008)  
	TEnumAsByte<EHorizTextAligment>                    HorizontalAlignment;                                        // 0x0508   (0x0001)  
	TEnumAsByte<EVerticalTextAligment>                 VerticalAlignment;                                          // 0x0509   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x050A   (0x0002)  MISSED
	FColor                                             TextRenderColor;                                            // 0x050C   (0x0004)  
	float                                              XScale;                                                     // 0x0510   (0x0004)  
	float                                              YScale;                                                     // 0x0514   (0x0004)  
	float                                              WorldSize;                                                  // 0x0518   (0x0004)  
	float                                              InvDefaultSize;                                             // 0x051C   (0x0004)  
	float                                              HorizSpacingAdjust;                                         // 0x0520   (0x0004)  
	float                                              VertSpacingAdjust;                                          // 0x0524   (0x0004)  
	bool                                               bAlwaysRenderAsText : 1;                                    // 0x0528:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0529   (0x0007)  MISSED
	// void SetYScale(float Value);                                                                                             // [0x475ce00] Final|Native|Public|BlueprintCallable 
	// void SetXScale(float Value);                                                                                             // [0x475cd80] Final|Native|Public|BlueprintCallable 
	// void SetWorldSize(float Value);                                                                                          // [0x475cd00] Final|Native|Public|BlueprintCallable 
	// void SetVertSpacingAdjust(float Value);                                                                                  // [0x475cc00] Final|Native|Public|BlueprintCallable 
	// void SetVerticalAlignment(TEnumAsByte<EVerticalTextAligment> Value);                                                     // [0x475cc80] Final|Native|Public|BlueprintCallable 
	// void SetTextRenderColor(FColor Value);                                                                                   // [0x475cb80] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetTextMaterial(class UMaterialInterface* Material);                                                                // [0x475caf0] Final|Native|Public|BlueprintCallable 
	// void SetText(FString Value);                                                                                             // [0x475ca50] Final|Native|Public|BlueprintCallable 
	// void SetHorizSpacingAdjust(float Value);                                                                                 // [0x475c950] Final|Native|Public|BlueprintCallable 
	// void SetHorizontalAlignment(TEnumAsByte<EHorizTextAligment> Value);                                                      // [0x475c9d0] Final|Native|Public|BlueprintCallable 
	// void SetFont(class UFont* Value);                                                                                        // [0x475c8c0] Final|Native|Public|BlueprintCallable 
	// void K2_SetText(FText& Value);                                                                                           // [0x475c7f0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// FVector GetTextWorldSize();                                                                                              // [0x475c6e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector GetTextLocalSize();                                                                                              // [0x475c6a0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.Texture2DArray
/// Size: 0x0060 (96 bytes) (0x0000F0 - 0x000150) align 8 pad: 0x0000
class UTexture2DArray : public UTexture
{ 
public:
	unsigned char                                      UnknownData00_3[0x58];                                      // 0x00F0   (0x0058)  MISSED
	TEnumAsByte<TextureAddress>                        AddressX;                                                   // 0x0148   (0x0001)  
	TEnumAsByte<TextureAddress>                        AddressY;                                                   // 0x0149   (0x0001)  
	TEnumAsByte<TextureAddress>                        AddressZ;                                                   // 0x014A   (0x0001)  
	unsigned char                                      UnknownData01_7[0x5];                                       // 0x014B   (0x0005)  MISSED
};

/// Class /Script/Engine.Texture2DDynamic
/// Size: 0x0018 (24 bytes) (0x0000F0 - 0x000108) align 8 pad: 0x0000
class UTexture2DDynamic : public UTexture
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00F0   (0x0008)  MISSED
	TEnumAsByte<EPixelFormat>                          Format;                                                     // 0x00F8   (0x0001)  
	unsigned char                                      UnknownData01_7[0xF];                                       // 0x00F9   (0x000F)  MISSED
};

/// Class /Script/Engine.TextureLightProfile
/// Size: 0x0008 (8 bytes) (0x000118 - 0x000120) align 8 pad: 0x0000
class UTextureLightProfile : public UTexture2D
{ 
public:
	float                                              Brightness;                                                 // 0x0118   (0x0004)  
	float                                              TextureMultiplier;                                          // 0x011C   (0x0004)  
};

/// Class /Script/Engine.TextureMipDataProviderFactory
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UTextureMipDataProviderFactory : public UAssetUserData
{ 
public:
};

/// Class /Script/Engine.TextureRenderTarget2DArray
/// Size: 0x0020 (32 bytes) (0x0000F8 - 0x000118) align 8 pad: 0x0000
class UTextureRenderTarget2DArray : public UTextureRenderTarget
{ 
public:
	int32_t                                            SizeX;                                                      // 0x00F8   (0x0004)  
	int32_t                                            SizeY;                                                      // 0x00FC   (0x0004)  
	int32_t                                            Slices;                                                     // 0x0100   (0x0004)  
	FLinearColor                                       ClearColor;                                                 // 0x0104   (0x0010)  
	TEnumAsByte<EPixelFormat>                          OverrideFormat;                                             // 0x0114   (0x0001)  
	bool                                               bHDR : 1;                                                   // 0x0115:0 (0x0001)  
	bool                                               bForceLinearGamma : 1;                                      // 0x0115:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x0116   (0x0002)  MISSED
};

/// Class /Script/Engine.TextureRenderTargetCube
/// Size: 0x0018 (24 bytes) (0x0000F8 - 0x000110) align 8 pad: 0x0000
class UTextureRenderTargetCube : public UTextureRenderTarget
{ 
public:
	int32_t                                            SizeX;                                                      // 0x00F8   (0x0004)  
	FLinearColor                                       ClearColor;                                                 // 0x00FC   (0x0010)  
	TEnumAsByte<EPixelFormat>                          OverrideFormat;                                             // 0x010C   (0x0001)  
	bool                                               bHDR : 1;                                                   // 0x010D:0 (0x0001)  
	bool                                               bForceLinearGamma : 1;                                      // 0x010D:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x010E   (0x0002)  MISSED
};

/// Class /Script/Engine.TextureRenderTargetVolume
/// Size: 0x0020 (32 bytes) (0x0000F8 - 0x000118) align 8 pad: 0x0000
class UTextureRenderTargetVolume : public UTextureRenderTarget
{ 
public:
	int32_t                                            SizeX;                                                      // 0x00F8   (0x0004)  
	int32_t                                            SizeY;                                                      // 0x00FC   (0x0004)  
	int32_t                                            SizeZ;                                                      // 0x0100   (0x0004)  
	FLinearColor                                       ClearColor;                                                 // 0x0104   (0x0010)  
	TEnumAsByte<EPixelFormat>                          OverrideFormat;                                             // 0x0114   (0x0001)  
	bool                                               bHDR : 1;                                                   // 0x0115:0 (0x0001)  
	bool                                               bForceLinearGamma : 1;                                      // 0x0115:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x0116   (0x0002)  MISSED
};

/// Class /Script/Engine.ThumbnailInfo
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UThumbnailInfo : public UObject
{ 
public:
};

/// Struct /Script/Engine.TimelineEventEntry
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FTimelineEventEntry
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	SDK_UNDEFINED(20,221) /* FDelegateProperty */      __um(EventFunc);                                            // 0x0004   (0x0014)  
};

/// Struct /Script/Engine.TimelineVectorTrack
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 pad: 0x0000
struct FTimelineVectorTrack
{ 
	class UCurveVector*                                VectorCurve;                                                // 0x0000   (0x0008)  
	SDK_UNDEFINED(20,222) /* FDelegateProperty */      __um(InterpFunc);                                           // 0x0008   (0x0014)  
	FName                                              TrackName;                                                  // 0x001C   (0x000C)  
	FName                                              VectorPropertyName;                                         // 0x0028   (0x000C)  
	unsigned char                                      UnknownData00_7[0x1C];                                      // 0x0034   (0x001C)  MISSED
};

/// Struct /Script/Engine.TimelineFloatTrack
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 pad: 0x0000
struct FTimelineFloatTrack
{ 
	class UCurveFloat*                                 FloatCurve;                                                 // 0x0000   (0x0008)  
	SDK_UNDEFINED(20,223) /* FDelegateProperty */      __um(InterpFunc);                                           // 0x0008   (0x0014)  
	FName                                              TrackName;                                                  // 0x001C   (0x000C)  
	FName                                              FloatPropertyName;                                          // 0x0028   (0x000C)  
	unsigned char                                      UnknownData00_7[0x1C];                                      // 0x0034   (0x001C)  MISSED
};

/// Struct /Script/Engine.TimelineLinearColorTrack
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 pad: 0x0000
struct FTimelineLinearColorTrack
{ 
	class UCurveLinearColor*                           LinearColorCurve;                                           // 0x0000   (0x0008)  
	SDK_UNDEFINED(20,224) /* FDelegateProperty */      __um(InterpFunc);                                           // 0x0008   (0x0014)  
	FName                                              TrackName;                                                  // 0x001C   (0x000C)  
	FName                                              LinearColorPropertyName;                                    // 0x0028   (0x000C)  
	unsigned char                                      UnknownData00_7[0x1C];                                      // 0x0034   (0x001C)  MISSED
};

/// Struct /Script/Engine.Timeline
/// Size: 0x00A8 (168 bytes) (0x000000 - 0x0000A8) align 8 pad: 0x0000
struct FTimeline
{ 
	TEnumAsByte<ETimelineLengthMode>                   LengthMode;                                                 // 0x0000   (0x0001)  
	bool                                               bLooping : 1;                                               // 0x0001:0 (0x0001)  
	bool                                               bReversePlayback : 1;                                       // 0x0001:1 (0x0001)  
	bool                                               bPlaying : 1;                                               // 0x0001:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0002   (0x0002)  MISSED
	float                                              Length;                                                     // 0x0004   (0x0004)  
	float                                              PlayRate;                                                   // 0x0008   (0x0004)  
	float                                              Position;                                                   // 0x000C   (0x0004)  
	TArray<FTimelineEventEntry>                        Events;                                                     // 0x0010   (0x0010)  
	TArray<FTimelineVectorTrack>                       InterpVectors;                                              // 0x0020   (0x0010)  
	TArray<FTimelineFloatTrack>                        InterpFloats;                                               // 0x0030   (0x0010)  
	TArray<FTimelineLinearColorTrack>                  InterpLinearColors;                                         // 0x0040   (0x0010)  
	SDK_UNDEFINED(20,225) /* FDelegateProperty */      __um(TimelinePostUpdateFunc);                               // 0x0050   (0x0014)  
	SDK_UNDEFINED(20,226) /* FDelegateProperty */      __um(TimelineFinishedFunc);                                 // 0x0064   (0x0014)  
	SDK_UNDEFINED(8,227) /* TWeakObjectPtr<UObject*> */ __um(PropertySetObject);                                   // 0x0078   (0x0008)  
	FName                                              DirectionPropertyName;                                      // 0x0080   (0x000C)  
	unsigned char                                      UnknownData01_7[0x1C];                                      // 0x008C   (0x001C)  MISSED
};

/// Class /Script/Engine.TimelineComponent
/// Size: 0x00B0 (176 bytes) (0x0000C0 - 0x000170) align 8 pad: 0x0000
class UTimelineComponent : public UActorComponent
{ 
public:
	FTimeline                                          TheTimeline;                                                // 0x00C0   (0x00A8)  
	bool                                               bIgnoreTimeDilation : 1;                                    // 0x0168:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0169   (0x0007)  MISSED
	// void Stop();                                                                                                             // [0x4760490] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetVectorCurve(class UCurveVector* NewVectorCurve, FName VectorTrackName);                                          // [0x47603a0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetTimelineLengthMode(TEnumAsByte<ETimelineLengthMode> NewLengthMode);                                              // [0x4760320] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetTimelineLength(float NewLength);                                                                                 // [0x47602a0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetPlayRate(float NewRate);                                                                                         // [0x4760100] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);                                         // [0x4760180] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetNewTime(float NewTime);                                                                                          // [0x4760080] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetLooping(bool bNewLooping);                                                                                       // [0x475fff0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetLinearColorCurve(class UCurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);                      // [0x475ff00] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);                                                                 // [0x475fe70] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetFloatCurve(class UCurveFloat* NewFloatCurve, FName FloatTrackName);                                              // [0x475fd80] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void ReverseFromEnd();                                                                                                   // [0x475fd60] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void Reverse();                                                                                                          // [0x475fd40] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void PlayFromStart();                                                                                                    // [0x475fd20] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void Play();                                                                                                             // [0x475fd00] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void OnRep_Timeline();                                                                                                   // [0x475fce0] Final|Native|Public  
	// bool IsReversing();                                                                                                      // [0x475fcb0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsPlaying();                                                                                                        // [0x475fc80] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsLooping();                                                                                                        // [0x475fc50] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetTimelineLength();                                                                                               // [0x475fc20] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetPlayRate();                                                                                                     // [0x3bad9c0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetPlaybackPosition();                                                                                             // [0x475fb40] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool GetIgnoreTimeDilation();                                                                                            // [0x475fb10] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.TTTrackBase
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FTTTrackBase
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	FName                                              TrackName;                                                  // 0x0008   (0x000C)  
	bool                                               bIsExternalCurve;                                           // 0x0014   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0015   (0x0003)  MISSED
};

/// Struct /Script/Engine.TTEventTrack
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000030) align 8 pad: 0x0000
struct FTTEventTrack : FTTTrackBase
{ 
	FName                                              FunctionName;                                               // 0x0018   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0024   (0x0004)  MISSED
	class UCurveFloat*                                 CurveKeys;                                                  // 0x0028   (0x0008)  
};

/// Struct /Script/Engine.TTPropertyTrack
/// Size: 0x0010 (16 bytes) (0x000018 - 0x000028) align 8 pad: 0x0000
struct FTTPropertyTrack : FTTTrackBase
{ 
	FName                                              PropertyName;                                               // 0x0018   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Struct /Script/Engine.TTFloatTrack
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
struct FTTFloatTrack : FTTPropertyTrack
{ 
	class UCurveFloat*                                 CurveFloat;                                                 // 0x0028   (0x0008)  
};

/// Struct /Script/Engine.TTVectorTrack
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
struct FTTVectorTrack : FTTPropertyTrack
{ 
	class UCurveVector*                                CurveVector;                                                // 0x0028   (0x0008)  
};

/// Struct /Script/Engine.TTLinearColorTrack
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
struct FTTLinearColorTrack : FTTPropertyTrack
{ 
	class UCurveLinearColor*                           CurveLinearColor;                                           // 0x0028   (0x0008)  
};

/// Class /Script/Engine.TimelineTemplate
/// Size: 0x0098 (152 bytes) (0x000030 - 0x0000C8) align 8 pad: 0x0000
class UTimelineTemplate : public UObject
{ 
public:
	float                                              TimelineLength;                                             // 0x0030   (0x0004)  
	TEnumAsByte<ETimelineLengthMode>                   LengthMode;                                                 // 0x0034   (0x0001)  
	bool                                               bAutoPlay : 1;                                              // 0x0035:0 (0x0001)  
	bool                                               bLoop : 1;                                                  // 0x0035:1 (0x0001)  
	bool                                               bReplicated : 1;                                            // 0x0035:2 (0x0001)  
	bool                                               bIgnoreTimeDilation : 1;                                    // 0x0035:3 (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0036   (0x0002)  MISSED
	TArray<FTTEventTrack>                              EventTracks;                                                // 0x0038   (0x0010)  
	TArray<FTTFloatTrack>                              FloatTracks;                                                // 0x0048   (0x0010)  
	TArray<FTTVectorTrack>                             VectorTracks;                                               // 0x0058   (0x0010)  
	TArray<FTTLinearColorTrack>                        LinearColorTracks;                                          // 0x0068   (0x0010)  
	TArray<FBPVariableMetaDataEntry>                   MetaDataArray;                                              // 0x0078   (0x0010)  
	FGuid                                              TimelineGuid;                                               // 0x0088   (0x0010)  
	FName                                              VariableName;                                               // 0x0098   (0x000C)  
	FName                                              DirectionPropertyName;                                      // 0x00A4   (0x000C)  
	FName                                              UpdateFunctionName;                                         // 0x00B0   (0x000C)  
	FName                                              FinishedFunctionName;                                       // 0x00BC   (0x000C)  
};

/// Class /Script/Engine.TireType
/// Size: 0x0008 (8 bytes) (0x000038 - 0x000040) align 8 pad: 0x0000
class UTireType : public UDataAsset
{ 
public:
	float                                              FrictionScale;                                              // 0x0038   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/Engine.TODLightManagerSubsystem
/// Size: 0x00B8 (184 bytes) (0x000038 - 0x0000F0) align 8 pad: 0x0000
class UTODLightManagerSubsystem : public UWorldSubsystem
{ 
public:
	unsigned char                                      UnknownData00_3[0xA];                                       // 0x0038   (0x000A)  MISSED
	bool                                               bEnableLerpLightIntensity;                                  // 0x0042   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x0043   (0x0001)  MISSED
	float                                              LightScaleTime;                                             // 0x0044   (0x0004)  
	float                                              LightIntensityMul;                                          // 0x0048   (0x0004)  
	bool                                               bEnableRestRegisterIntensity;                               // 0x004C   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x004D   (0x0003)  MISSED
	SDK_UNDEFINED(80,228) /* TMap<UPointLightComponent*, float> */ __um(ProxiesToDayPointLight);                   // 0x0050   (0x0050)  
	SDK_UNDEFINED(80,229) /* TMap<UPointLightComponent*, float> */ __um(ProxiesToNightPointLight);                 // 0x00A0   (0x0050)  
	// void EnableTODLightManagerIsDay(bool IsDay);                                                                             // [0x47634a0] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.TouchInputControl
/// Size: 0x0078 (120 bytes) (0x000000 - 0x000078) align 8 pad: 0x0000
struct FTouchInputControl
{ 
	class UTexture2D*                                  Image1;                                                     // 0x0000   (0x0008)  
	class UTexture2D*                                  Image2;                                                     // 0x0008   (0x0008)  
	FVector2D                                          Center;                                                     // 0x0010   (0x0008)  
	FVector2D                                          VisualSize;                                                 // 0x0018   (0x0008)  
	FVector2D                                          ThumbSize;                                                  // 0x0020   (0x0008)  
	FVector2D                                          InteractionSize;                                            // 0x0028   (0x0008)  
	FVector2D                                          InputScale;                                                 // 0x0030   (0x0008)  
	FKey                                               MainInputKey;                                               // 0x0038   (0x0020)  
	FKey                                               AltInputKey;                                                // 0x0058   (0x0020)  
};

/// Class /Script/Engine.TouchInterface
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000060) align 8 pad: 0x0000
class UTouchInterface : public UObject
{ 
public:
	TArray<FTouchInputControl>                         Controls;                                                   // 0x0030   (0x0010)  
	float                                              ActiveOpacity;                                              // 0x0040   (0x0004)  
	float                                              InactiveOpacity;                                            // 0x0044   (0x0004)  
	float                                              TimeUntilDeactive;                                          // 0x0048   (0x0004)  
	float                                              TimeUntilReset;                                             // 0x004C   (0x0004)  
	float                                              ActivationDelay;                                            // 0x0050   (0x0004)  
	bool                                               bPreventRecenter;                                           // 0x0054   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0055   (0x0003)  MISSED
	float                                              StartupDelay;                                               // 0x0058   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/Engine.TriggerBase
/// Size: 0x0008 (8 bytes) (0x0002A8 - 0x0002B0) align 8 pad: 0x0000
class ATriggerBase : public AActor
{ 
public:
	class UShapeComponent*                             CollisionComponent;                                         // 0x02A8   (0x0008)  
};

/// Class /Script/Engine.TriggerBox
/// Size: 0x0000 (0 bytes) (0x0002B0 - 0x0002B0) align 8 pad: 0x0000
class ATriggerBox : public ATriggerBase
{ 
public:
};

/// Class /Script/Engine.TriggerCapsule
/// Size: 0x0000 (0 bytes) (0x0002B0 - 0x0002B0) align 8 pad: 0x0000
class ATriggerCapsule : public ATriggerBase
{ 
public:
};

/// Class /Script/Engine.TriggerSphere
/// Size: 0x0000 (0 bytes) (0x0002B0 - 0x0002B0) align 8 pad: 0x0000
class ATriggerSphere : public ATriggerBase
{ 
public:
};

/// Class /Script/Engine.TriggerVolume
/// Size: 0x0000 (0 bytes) (0x0002E0 - 0x0002E0) align 8 pad: 0x0000
class ATriggerVolume : public AVolume
{ 
public:
};

/// Class /Script/Engine.TwitterIntegrationBase
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UTwitterIntegrationBase : public UPlatformInterfaceBase
{ 
public:
	// bool TwitterRequest(FString URL, TArray<FString>& ParamKeysAndValues, TEnumAsByte<ETwitterRequestMethod> RequestMethod, int32_t AccountIndex); // [0x4763890] Native|Public|HasOutParms 
	// bool ShowTweetUI(FString InitialMessage, FString URL, FString Picture);                                                  // [0x4763730] Native|Public        
	// void Init();                                                                                                             // [0x3633570] Native|Public        
	// int32_t GetNumAccounts();                                                                                                // [0x3cf4fa0] Native|Public        
	// FString GetAccountName(int32_t AccountIndex);                                                                            // [0x4763530] Native|Public        
	// bool CanShowTweetUI();                                                                                                   // [0x1779ea0] Native|Public        
	// bool AuthorizeAccounts();                                                                                                // [0x3656730] Native|Public        
};

/// Class /Script/Engine.UserDefinedEnum
/// Size: 0x0050 (80 bytes) (0x000068 - 0x0000B8) align 8 pad: 0x0000
class UUserDefinedEnum : public UEnum
{ 
public:
	SDK_UNDEFINED(80,230) /* TMap<FName, FText> */     __um(DisplayNameMap);                                       // 0x0068   (0x0050)  
};

/// Class /Script/Engine.UserDefinedStruct
/// Size: 0x0048 (72 bytes) (0x0000C8 - 0x000110) align 8 pad: 0x0000
class UUserDefinedStruct : public UScriptStruct
{ 
public:
	TEnumAsByte<EUserDefinedStructureStatus>           Status;                                                     // 0x00C8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x00C9   (0x0003)  MISSED
	FGuid                                              Guid;                                                       // 0x00CC   (0x0010)  
	unsigned char                                      UnknownData01_7[0x34];                                      // 0x00DC   (0x0034)  MISSED
};

/// Class /Script/Engine.UserInterfaceSettings
/// Size: 0x0278 (632 bytes) (0x000048 - 0x0002C0) align 8 pad: 0x0000
class UUserInterfaceSettings : public UDeveloperSettings
{ 
public:
	ERenderFocusRule                                   RenderFocusRule;                                            // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0049   (0x0007)  MISSED
	SDK_UNDEFINED(80,231) /* TMap<TEnumAsByte<EMouseCursor>, FHardwareCursorReference> */ __um(HardwareCursors);   // 0x0050   (0x0050)  
	SDK_UNDEFINED(80,232) /* TMap<TEnumAsByte<EMouseCursor>, FSoftClassPath> */ __um(SoftwareCursors);             // 0x00A0   (0x0050)  
	FSoftClassPath                                     DefaultCursor;                                              // 0x00F0   (0x0020)  
	FSoftClassPath                                     TextEditBeamCursor;                                         // 0x0110   (0x0020)  
	FSoftClassPath                                     CrosshairsCursor;                                           // 0x0130   (0x0020)  
	FSoftClassPath                                     HandCursor;                                                 // 0x0150   (0x0020)  
	FSoftClassPath                                     GrabHandCursor;                                             // 0x0170   (0x0020)  
	FSoftClassPath                                     GrabHandClosedCursor;                                       // 0x0190   (0x0020)  
	FSoftClassPath                                     SlashedCircleCursor;                                        // 0x01B0   (0x0020)  
	float                                              ApplicationScale;                                           // 0x01D0   (0x0004)  
	EUIScalingRule                                     UIScaleRule;                                                // 0x01D4   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x01D5   (0x0003)  MISSED
	FSoftClassPath                                     CustomScalingRuleClass;                                     // 0x01D8   (0x0020)  
	FRuntimeFloatCurve                                 UIScaleCurve;                                               // 0x01F8   (0x0088)  
	bool                                               bAllowHighDPIInGameMode;                                    // 0x0280   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0281   (0x0003)  MISSED
	FIntPoint                                          DesignScreenSize;                                           // 0x0284   (0x0008)  
	bool                                               bLoadWidgetsOnDedicatedServer;                              // 0x028C   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x028D   (0x0003)  MISSED
	TArray<class UObject*>                             CursorClasses;                                              // 0x0290   (0x0010)  
	class UClass*                                      CustomScalingRuleClassInstance;                             // 0x02A0   (0x0008)  
	class UDPICustomScalingRule*                       CustomScalingRule;                                          // 0x02A8   (0x0008)  
	unsigned char                                      UnknownData04_7[0x10];                                      // 0x02B0   (0x0010)  MISSED
};

/// Class /Script/Engine.VectorField
/// Size: 0x0020 (32 bytes) (0x000030 - 0x000050) align 8 pad: 0x0000
class UVectorField : public UObject
{ 
public:
	FBox                                               Bounds;                                                     // 0x0030   (0x001C)  
	float                                              Intensity;                                                  // 0x004C   (0x0004)  
};

/// Class /Script/Engine.VectorFieldAnimated
/// Size: 0x0040 (64 bytes) (0x000050 - 0x000090) align 8 pad: 0x0000
class UVectorFieldAnimated : public UVectorField
{ 
public:
	class UTexture2D*                                  Texture;                                                    // 0x0050   (0x0008)  
	TEnumAsByte<EVectorFieldConstructionOp>            ConstructionOp;                                             // 0x0058   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0059   (0x0003)  MISSED
	int32_t                                            VolumeSizeX;                                                // 0x005C   (0x0004)  
	int32_t                                            VolumeSizeY;                                                // 0x0060   (0x0004)  
	int32_t                                            VolumeSizeZ;                                                // 0x0064   (0x0004)  
	int32_t                                            SubImagesX;                                                 // 0x0068   (0x0004)  
	int32_t                                            SubImagesY;                                                 // 0x006C   (0x0004)  
	int32_t                                            FrameCount;                                                 // 0x0070   (0x0004)  
	float                                              FramesPerSecond;                                            // 0x0074   (0x0004)  
	bool                                               bLoop : 1;                                                  // 0x0078:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0079   (0x0007)  MISSED
	class UVectorFieldStatic*                          NoiseField;                                                 // 0x0080   (0x0008)  
	float                                              NoiseScale;                                                 // 0x0088   (0x0004)  
	float                                              NoiseMax;                                                   // 0x008C   (0x0004)  
};

/// Class /Script/Engine.VectorFieldComponent
/// Size: 0x0030 (48 bytes) (0x0004E0 - 0x000510) align 16 pad: 0x0000
class UVectorFieldComponent : public UPrimitiveComponent
{ 
public:
	class UVectorField*                                VectorField;                                                // 0x04E0   (0x0008)  
	float                                              Intensity;                                                  // 0x04E8   (0x0004)  
	float                                              Tightness;                                                  // 0x04EC   (0x0004)  
	bool                                               bPreviewVectorField : 1;                                    // 0x04F0:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x1F];                                      // 0x04F1   (0x001F)  MISSED
	// void SetIntensity(float NewIntensity);                                                                                   // [0x47636a0] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.VectorFieldStatic
/// Size: 0x0050 (80 bytes) (0x000050 - 0x0000A0) align 8 pad: 0x0000
class UVectorFieldStatic : public UVectorField
{ 
public:
	int32_t                                            SizeX;                                                      // 0x0050   (0x0004)  
	int32_t                                            SizeY;                                                      // 0x0054   (0x0004)  
	int32_t                                            SizeZ;                                                      // 0x0058   (0x0004)  
	bool                                               bAllowCPUAccess;                                            // 0x005C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x43];                                      // 0x005D   (0x0043)  MISSED
};

/// Class /Script/Engine.VectorFieldVolume
/// Size: 0x0008 (8 bytes) (0x0002A8 - 0x0002B0) align 8 pad: 0x0000
class AVectorFieldVolume : public AActor
{ 
public:
	class UVectorFieldComponent*                       VectorFieldComponent;                                       // 0x02A8   (0x0008)  
};

/// Class /Script/Engine.ViewportStatsSubsystem
/// Size: 0x0020 (32 bytes) (0x000038 - 0x000058) align 8 pad: 0x0000
class UViewportStatsSubsystem : public UWorldSubsystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x20];                                      // 0x0038   (0x0020)  MISSED
	// void RemoveDisplayDelegate(int32_t IndexToRemove);                                                                       // [0x4763610] Final|Native|Public|BlueprintCallable 
	// void AddTimedDisplay(FText Text, FLinearColor Color, float Duration);                                                    // [0x4763320] Final|Native|Public|HasDefaults|BlueprintCallable 
	// int32_t AddDisplayDelegate(FDelegateProperty& Delegate);                                                                 // [0x4763250] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.VirtualTexture
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UVirtualTexture : public UObject
{ 
public:
};

/// Class /Script/Engine.LightMapVirtualTexture
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class ULightMapVirtualTexture : public UVirtualTexture
{ 
public:
};

/// Class /Script/Engine.RuntimeVirtualTextureStreamingProxy
/// Size: 0x0000 (0 bytes) (0x000118 - 0x000118) align 8 pad: 0x0000
class URuntimeVirtualTextureStreamingProxy : public UTexture2D
{ 
public:
};

/// Struct /Script/Engine.VirtualTextureBuildSettings
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FVirtualTextureBuildSettings
{ 
	int32_t                                            TileSize;                                                   // 0x0000   (0x0004)  
	int32_t                                            TileBorderSize;                                             // 0x0004   (0x0004)  
	bool                                               bEnableCompressCrunch;                                      // 0x0008   (0x0001)  
	bool                                               bEnableCompressZlib;                                        // 0x0009   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x000A   (0x0002)  MISSED
};

/// Class /Script/Engine.VirtualTexture2D
/// Size: 0x0010 (16 bytes) (0x000118 - 0x000128) align 8 pad: 0x0000
class UVirtualTexture2D : public UTexture2D
{ 
public:
	FVirtualTextureBuildSettings                       Settings;                                                   // 0x0118   (0x000C)  
	bool                                               bContinuousUpdate;                                          // 0x0124   (0x0001)  
	bool                                               bSinglePhysicalSpace;                                       // 0x0125   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x0126   (0x0002)  MISSED
};

/// Class /Script/Engine.VirtualTextureBuilder
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UVirtualTextureBuilder : public UObject
{ 
public:
	class UVirtualTexture2D*                           Texture;                                                    // 0x0030   (0x0008)  
	uint64_t                                           BuildHash;                                                  // 0x0038   (0x0008)  
};

/// Struct /Script/Engine.VirtualTextureSpacePoolConfig
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FVirtualTextureSpacePoolConfig
{ 
	int32_t                                            MinTileSize;                                                // 0x0000   (0x0004)  
	int32_t                                            MaxTileSize;                                                // 0x0004   (0x0004)  
	SDK_UNDEFINED(16,233) /* TArray<TEnumAsByte<EPixelFormat>> */ __um(Formats);                                   // 0x0008   (0x0010)  
	int32_t                                            SizeInMegabyte;                                             // 0x0018   (0x0004)  
	bool                                               bAllowSizeScale;                                            // 0x001C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x001D   (0x0003)  MISSED
	uint32_t                                           ScalabilityGroup;                                           // 0x0020   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Class /Script/Engine.VirtualTexturePoolConfig
/// Size: 0x0018 (24 bytes) (0x000030 - 0x000048) align 8 pad: 0x0000
class UVirtualTexturePoolConfig : public UObject
{ 
public:
	int32_t                                            DefaultSizeInMegabyte;                                      // 0x0030   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0034   (0x0004)  MISSED
	TArray<FVirtualTextureSpacePoolConfig>             Pools;                                                      // 0x0038   (0x0010)  
};

/// Class /Script/Engine.VisualLoggerAutomationTests
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UVisualLoggerAutomationTests : public UObject
{ 
public:
};

/// Class /Script/Engine.VisualLoggerDebugSnapshotInterface
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UVisualLoggerDebugSnapshotInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.VisualLoggerKismetLibrary
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
{ 
public:
	// void RedirectVislog(class UObject* SourceOwner, class UObject* DestinationOwner);                                        // [0x4767270] Final|Native|Static|Public|BlueprintCallable 
	// void LogText(class UObject* WorldContextObject, FString Text, FName LogCategory, bool bAddToMessageLog);                 // [0x47670b0] Final|Native|Static|Public|BlueprintCallable 
	// void LogSegment(class UObject* WorldContextObject, FVector SegmentStart, FVector SegmentEnd, FString Text, FLinearColor ObjectColor, float Thickness, FName CategoryName, bool bAddToMessageLog); // [0x4766d80] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// void LogLocation(class UObject* WorldContextObject, FVector Location, FString Text, FLinearColor ObjectColor, float Radius, FName LogCategory, bool bAddToMessageLog); // [0x4766ac0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// void LogBox(class UObject* WorldContextObject, FBox BoxShape, FString Text, FLinearColor ObjectColor, FName LogCategory, bool bAddToMessageLog); // [0x4766850] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// void EnableRecording(bool bEnabled);                                                                                     // [0xf17190] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.VoiceChannel
/// Size: 0x0010 (16 bytes) (0x000078 - 0x000088) align 8 pad: 0x0000
class UVoiceChannel : public UChannel
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0078   (0x0010)  MISSED
};

/// Struct /Script/Engine.VoiceSettings
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FVoiceSettings
{ 
	class USceneComponent*                             ComponentToAttachTo;                                        // 0x0000   (0x0008)  
	class USoundAttenuation*                           AttenuationSettings;                                        // 0x0008   (0x0008)  
	class USoundEffectSourcePresetChain*               SourceEffectChain;                                          // 0x0010   (0x0008)  
};

/// Class /Script/Engine.VOIPTalker
/// Size: 0x0038 (56 bytes) (0x0000C0 - 0x0000F8) align 8 pad: 0x0000
class UVOIPTalker : public UActorComponent
{ 
public:
	FVoiceSettings                                     Settings;                                                   // 0x00C0   (0x0018)  
	unsigned char                                      UnknownData00_7[0x20];                                      // 0x00D8   (0x0020)  MISSED
	// void RegisterWithPlayerState(class APlayerState* OwningState);                                                           // [0x4767330] Final|Native|Public|BlueprintCallable 
	// float GetVoiceLevel();                                                                                                   // [0x47667d0] Final|Native|Public|BlueprintCallable 
	// class UVOIPTalker* CreateTalkerForPlayer(class APlayerState* OwningState);                                               // [0x4766740] Final|Native|Static|Public|BlueprintCallable 
	// void BPOnTalkingEnd();                                                                                                   // [0x4609110] Native|Event|Protected|BlueprintEvent 
	// void BPOnTalkingBegin(class UAudioComponent* AudioComponent);                                                            // [0x47666b0] Native|Event|Protected|BlueprintEvent 
};

/// Class /Script/Engine.VOIPStatics
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UVOIPStatics : public UBlueprintFunctionLibrary
{ 
public:
	// void SetMicThreshold(float InThreshold);                                                                                 // [0x47676e0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.VolumeTexture
/// Size: 0x0058 (88 bytes) (0x0000F0 - 0x000148) align 8 pad: 0x0000
class UVolumeTexture : public UTexture
{ 
public:
	unsigned char                                      UnknownData00_1[0x58];                                      // 0x00F0   (0x0058)  MISSED
};

/// Class /Script/Engine.VolumetricCloudComponent
/// Size: 0x0058 (88 bytes) (0x000218 - 0x000270) align 16 pad: 0x0000
class UVolumetricCloudComponent : public USceneComponent
{ 
public:
	float                                              LayerBottomAltitude;                                        // 0x0218   (0x0004)  
	float                                              LayerHeight;                                                // 0x021C   (0x0004)  
	float                                              TracingStartMaxDistance;                                    // 0x0220   (0x0004)  
	float                                              TracingMaxDistance;                                         // 0x0224   (0x0004)  
	float                                              PlanetRadius;                                               // 0x0228   (0x0004)  
	FColor                                             GroundAlbedo;                                               // 0x022C   (0x0004)  
	class UMaterialInterface*                          Material;                                                   // 0x0230   (0x0008)  
	bool                                               bUsePerSampleAtmosphericLightTransmittance : 1;             // 0x0238:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0239   (0x0003)  MISSED
	float                                              SkyLightCloudBottomOcclusion;                               // 0x023C   (0x0004)  
	float                                              ViewSampleCountScale;                                       // 0x0240   (0x0004)  
	float                                              ReflectionSampleCountScale;                                 // 0x0244   (0x0004)  
	float                                              ShadowViewSampleCountScale;                                 // 0x0248   (0x0004)  
	float                                              ShadowReflectionSampleCountScale;                           // 0x024C   (0x0004)  
	float                                              ShadowTracingDistance;                                      // 0x0250   (0x0004)  
	FLinearColor                                       CloudColorTint;                                             // 0x0254   (0x0010)  
	float                                              CloudColorIntensity;                                        // 0x0264   (0x0004)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0268   (0x0008)  MISSED
	// void SetViewSampleCountScale(float NewValue);                                                                            // [0x4767c60] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetTracingStartMaxDistance(float NewValue);                                                                         // [0x4767be0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetTracingMaxDistance(float NewValue);                                                                              // [0x4767b60] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetSkyLightCloudBottomOcclusion(float NewValue);                                                                    // [0x47679e0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetShadowViewSampleCountScale(float NewValue);                                                                      // [0x47418b0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetShadowTracingDistance(float NewValue);                                                                           // [0x4767960] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetShadowReflectionSampleCountScale(float NewValue);                                                                // [0x47678e0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetReflectionSampleCountScale(float NewValue);                                                                      // [0x4741c50] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetPlanetRadius(float NewValue);                                                                                    // [0x47677e0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetMaterial(class UMaterialInterface* NewValue);                                                                    // [0x47675d0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetLayerHeight(float NewValue);                                                                                     // [0x4740270] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetLayerBottomAltitude(float NewValue);                                                                             // [0x4767550] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetGroundAlbedo(FColor NewValue);                                                                                   // [0x47674d0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// void SetCloudColorTint(FLinearColor NewValue);                                                                           // [0x4767440] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// void SetCloudColorIntensity(float NewValue);                                                                             // [0x47673c0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// void SetbUsePerSampleAtmosphericLightTransmittance(bool NewValue);                                                       // [0x4767d60] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.VolumetricCloud
/// Size: 0x0008 (8 bytes) (0x0002A8 - 0x0002B0) align 8 pad: 0x0000
class AVolumetricCloud : public AInfo
{ 
public:
	class UVolumetricCloudComponent*                   VolumetricCloudComponent;                                   // 0x02A8   (0x0008)  
};

/// Class /Script/Engine.KuroVolumetricCloudComponent
/// Size: 0x0080 (128 bytes) (0x0004E0 - 0x000560) align 16 pad: 0x0000
class UKuroVolumetricCloudComponent : public UPrimitiveComponent
{ 
public:
	FLinearColor                                       CloudTopColor;                                              // 0x04E0   (0x0010)  
	FLinearColor                                       CloudBottomColor;                                           // 0x04F0   (0x0010)  
	FLinearColor                                       CloudTopEmissive;                                           // 0x0500   (0x0010)  
	FLinearColor                                       CloudBottomEmissive;                                        // 0x0510   (0x0010)  
	float                                              DirectionalLightBlend;                                      // 0x0520   (0x0004)  
	float                                              Falloff;                                                    // 0x0524   (0x0004)  
	float                                              Heighness;                                                  // 0x0528   (0x0004)  
	float                                              Speed;                                                      // 0x052C   (0x0004)  
	FVector2D                                          SpeedHigh;                                                  // 0x0530   (0x0008)  
	FVector2D                                          SpeedMedium;                                                // 0x0538   (0x0008)  
	FVector2D                                          SpeedLow;                                                   // 0x0540   (0x0008)  
	float                                              FadeOutEdge;                                                // 0x0548   (0x0004)  
	bool                                               bEdgeFadeOut;                                               // 0x054C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x13];                                      // 0x054D   (0x0013)  MISSED
};

/// Class /Script/Engine.VolumetricLightmapDensityVolume
/// Size: 0x0008 (8 bytes) (0x0002E0 - 0x0002E8) align 8 pad: 0x0000
class AVolumetricLightmapDensityVolume : public AVolume
{ 
public:
	FInt32Interval                                     AllowedMipLevelRange;                                       // 0x02E0   (0x0008)  
};

/// Class /Script/Engine.WindDirectionalSource
/// Size: 0x0008 (8 bytes) (0x0002A8 - 0x0002B0) align 8 pad: 0x0000
class AWindDirectionalSource : public AInfo
{ 
public:
	class UWindDirectionalSourceComponent*             Component;                                                  // 0x02A8   (0x0008)  
};

/// Class /Script/Engine.WindDirectionalSourceComponent
/// Size: 0x0028 (40 bytes) (0x000218 - 0x000240) align 16 pad: 0x0000
class UWindDirectionalSourceComponent : public USceneComponent
{ 
public:
	float                                              Strength;                                                   // 0x0218   (0x0004)  
	float                                              Speed;                                                      // 0x021C   (0x0004)  
	float                                              MinGustAmount;                                              // 0x0220   (0x0004)  
	float                                              MaxGustAmount;                                              // 0x0224   (0x0004)  
	float                                              Radius;                                                     // 0x0228   (0x0004)  
	bool                                               bPointWind : 1;                                             // 0x022C:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x13];                                      // 0x022D   (0x0013)  MISSED
	// void UpdateWindParam(float NewStrength, float NewSpeed, float NewMInGust, float NewMaxGust);                             // [0x4767df0] Final|Native|Public|BlueprintCallable 
	// void SetWindType(EWindSourceType InNewType);                                                                             // [0x4767ce0] Final|Native|Public|BlueprintCallable 
	// void SetStrength(float InNewStrength);                                                                                   // [0x4767ae0] Final|Native|Public|BlueprintCallable 
	// void SetSpeed(float InNewSpeed);                                                                                         // [0x4767a60] Final|Native|Public|BlueprintCallable 
	// void SetRadius(float InNewRadius);                                                                                       // [0x4767860] Final|Native|Public|BlueprintCallable 
	// void SetMinimumGustAmount(float InNewMinGust);                                                                           // [0x4767760] Final|Native|Public|BlueprintCallable 
	// void SetMaximumGustAmount(float InNewMaxGust);                                                                           // [0x4767660] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.WorldComposition
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000070) align 8 pad: 0x0000
class UWorldComposition : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x20];                                      // 0x0030   (0x0020)  MISSED
	TArray<class ULevelStreaming*>                     TilesStreaming;                                             // 0x0050   (0x0010)  
	double                                             TilesStreamingTimeThreshold;                                // 0x0060   (0x0008)  
	bool                                               bLoadAllTilesDuringCinematic;                               // 0x0068   (0x0001)  
	bool                                               bRebaseOriginIn3DSpace;                                     // 0x0069   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x006A   (0x0002)  MISSED
	float                                              RebaseOriginDistance;                                       // 0x006C   (0x0004)  
};

/// Class /Script/Engine.WorldPartition
/// Size: 0x0098 (152 bytes) (0x000038 - 0x0000D0) align 16 pad: 0x0000
class UWorldPartition : public UActorDescContainer
{ 
public:
	class UWorldPartitionRuntimeHash*                  RuntimeHash;                                                // 0x0038   (0x0008)  
	unsigned char                                      UnknownData00_6[0x78];                                      // 0x0040   (0x0078)  MISSED
	class UWorldPartitionStreamingPolicy*              StreamingPolicy;                                            // 0x00B8   (0x0008)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x00C0   (0x0010)  MISSED
};

/// Class /Script/Engine.WorldPartitionCaveVolume
/// Size: 0x0028 (40 bytes) (0x0002E0 - 0x000308) align 8 pad: 0x0000
class AWorldPartitionCaveVolume : public AVolume
{ 
public:
	ECaveOrRoom                                        VolumeType;                                                 // 0x02E0   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x02E1   (0x0007)  MISSED
	FString                                            EnClosetDataLayer;                                          // 0x02E8   (0x0010)  
	FString                                            EnCloseSubDataLayer;                                        // 0x02F8   (0x0010)  
};

/// Class /Script/Engine.WorldPartitionCaveVolumeManager
/// Size: 0x0010 (16 bytes) (0x000038 - 0x000048) align 8 pad: 0x0000
class UWorldPartitionCaveVolumeManager : public UWorldSubsystem
{ 
public:
	TArray<class AActor*>                              CaveOrRoomVolumes;                                          // 0x0038   (0x0010)  
};

/// Class /Script/Engine.WorldPartitionEditorHash
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UWorldPartitionEditorHash : public UObject
{ 
public:
};

/// Class /Script/Engine.WorldPartitionEditorCell
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UWorldPartitionEditorCell : public UObject
{ 
public:
};

/// Class /Script/Engine.WorldPartitionEditorPerProjectUserSettings
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UWorldPartitionEditorPerProjectUserSettings : public UObject
{ 
public:
};

/// Class /Script/Engine.WorldPartitionEditorSpatialHash
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UWorldPartitionEditorSpatialHash : public UWorldPartitionEditorHash
{ 
public:
};

/// Class /Script/Engine.WorldPartitionLevelStreamingDynamic
/// Size: 0x0010 (16 bytes) (0x000190 - 0x0001A0) align 16 pad: 0x0000
class UWorldPartitionLevelStreamingDynamic : public ULevelStreamingDynamic
{ 
public:
	bool                                               bShouldBeAlwaysLoaded;                                      // 0x0190   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0191   (0x0003)  MISSED
	SDK_UNDEFINED(8,234) /* TWeakObjectPtr<UWorldPartition*> */ __um(OuterWorldPartition);                         // 0x0194   (0x0008)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x019C   (0x0004)  MISSED
};

/// Class /Script/Engine.WorldPartitionStreamingPolicy
/// Size: 0x00C0 (192 bytes) (0x000030 - 0x0000F0) align 8 pad: 0x0000
class UWorldPartitionStreamingPolicy : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0xC0];                                      // 0x0030   (0x00C0)  MISSED
};

/// Class /Script/Engine.WorldPartitionLevelStreamingPolicy
/// Size: 0x0050 (80 bytes) (0x0000F0 - 0x000140) align 8 pad: 0x0000
class UWorldPartitionLevelStreamingPolicy : public UWorldPartitionStreamingPolicy
{ 
public:
	SDK_UNDEFINED(80,235) /* TMap<FName, FName> */     __um(SubObjectsToCellRemapping);                            // 0x00F0   (0x0050)  
};

/// Struct /Script/Engine.ActorDataLayer
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FActorDataLayer
{ 
	FName                                              Name;                                                       // 0x0000   (0x000C)  
};

/// Class /Script/Engine.WorldPartitionMiniMap
/// Size: 0x0040 (64 bytes) (0x0002A8 - 0x0002E8) align 8 pad: 0x0000
class AWorldPartitionMiniMap : public AInfo
{ 
public:
	FBox                                               MiniMapWorldBounds;                                         // 0x02A8   (0x001C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x02C4   (0x0004)  MISSED
	class UTexture2D*                                  MiniMapTexture;                                             // 0x02C8   (0x0008)  
	TArray<FActorDataLayer>                            ExcludedDataLayers;                                         // 0x02D0   (0x0010)  
	int32_t                                            MiniMapSize;                                                // 0x02E0   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x02E4   (0x0004)  MISSED
};

/// Class /Script/Engine.WorldPartitionRuntimeHash
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UWorldPartitionRuntimeHash : public UObject
{ 
public:
};

/// Struct /Script/Engine.SpatialHashRuntimeGrid
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FSpatialHashRuntimeGrid
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Class /Script/Engine.SpatialHashRuntimeGridInfo
/// Size: 0x0008 (8 bytes) (0x0002A8 - 0x0002B0) align 8 pad: 0x0000
class ASpatialHashRuntimeGridInfo : public AInfo
{ 
public:
	FSpatialHashRuntimeGrid                            GridSettings;                                               // 0x02A8   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x02A9   (0x0007)  MISSED
};

/// Struct /Script/Engine.WorldPartitionRuntimeCell
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FWorldPartitionRuntimeCell
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	bool                                               bIsAlwaysLoaded;                                            // 0x0008   (0x0001)  
	bool                                               bHasHLODCellData;                                           // 0x0009   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x000A   (0x0006)  MISSED
	TArray<FName>                                      DataLayers;                                                 // 0x0010   (0x0010)  
	FName                                              CellName;                                                   // 0x0020   (0x000C)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x002C   (0x0004)  MISSED
	class UWorldPartition*                             OuterWorldPartition;                                        // 0x0030   (0x0008)  
};

/// Struct /Script/Engine.WorldPartitionRuntimeSpatialHashCell
/// Size: 0x0028 (40 bytes) (0x000038 - 0x000060) align 16 pad: 0x0000
struct FWorldPartitionRuntimeSpatialHashCell : FWorldPartitionRuntimeCell
{ 
	FVector                                            Position;                                                   // 0x0038   (0x000C)  
	int32_t                                            Level;                                                      // 0x0044   (0x0004)  
	int32_t                                            Priority;                                                   // 0x0048   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x004C   (0x0004)  MISSED
	FVector4                                           ActorsBound;                                                // 0x0050   (0x0010)  
};

/// Struct /Script/Engine.WorldPartitionRuntimeLevelStreamingCell
/// Size: 0x0010 (16 bytes) (0x000060 - 0x000070) align 16 pad: 0x0000
struct FWorldPartitionRuntimeLevelStreamingCell : FWorldPartitionRuntimeSpatialHashCell
{ 
	class UWorldPartitionLevelStreamingDynamic*        LevelStreaming;                                             // 0x0060   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0068   (0x0008)  MISSED
};

/// Struct /Script/Engine.SpatialHashStreamingGridLayerCell
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FSpatialHashStreamingGridLayerCell
{ 
	TArray<FWorldPartitionRuntimeLevelStreamingCell>   GridCells;                                                  // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.SpatialHashStreamingGridLevel
/// Size: 0x00B0 (176 bytes) (0x000000 - 0x0000B0) align 8 pad: 0x0000
struct FSpatialHashStreamingGridLevel
{ 
	TArray<FSpatialHashStreamingGridLayerCell>         LayerCells;                                                 // 0x0000   (0x0010)  
	SDK_UNDEFINED(80,236) /* TMap<int32_t, int32_t> */ __um(LayerCellsMapping);                                    // 0x0010   (0x0050)  
	SDK_UNDEFINED(80,237) /* TMap<int32_t, FString> */ __um(CoordCells);                                           // 0x0060   (0x0050)  
};

/// Struct /Script/Engine.SpatialHashStreamingGrid
/// Size: 0x00B0 (176 bytes) (0x000000 - 0x0000B0) align 8 pad: 0x0000
struct FSpatialHashStreamingGrid
{ 
	FName                                              GridName;                                                   // 0x0000   (0x000C)  
	FVector                                            Origin;                                                     // 0x000C   (0x000C)  
	int32_t                                            CellSize;                                                   // 0x0018   (0x0004)  
	float                                              LoadingRange;                                               // 0x001C   (0x0004)  
	float                                              PcLoadingRangeScalar;                                       // 0x0020   (0x0004)  
	float                                              MobileLoadingRangeScalar;                                   // 0x0024   (0x0004)  
	float                                              PcLoadingRange;                                             // 0x0028   (0x0004)  
	float                                              UnLoadingRangeAdditional;                                   // 0x002C   (0x0004)  
	FLinearColor                                       DebugColor;                                                 // 0x0030   (0x0010)  
	TArray<FSpatialHashStreamingGridLevel>             GridLevels;                                                 // 0x0040   (0x0010)  
	FBox                                               WorldBounds;                                                // 0x0050   (0x001C)  
	bool                                               bRangeStreaming;                                            // 0x006C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x006D   (0x0003)  MISSED
	float                                              StreamingOutStart;                                          // 0x0070   (0x0004)  
	bool                                               bUseZAxis;                                                  // 0x0074   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0075   (0x0003)  MISSED
	float                                              ZLoadingRangeCoefficient;                                   // 0x0078   (0x0004)  
	bool                                               bRegionLoadRangeAdjust;                                     // 0x007C   (0x0001)  
	bool                                               bIsHLODGrid;                                                // 0x007D   (0x0001)  
	bool                                               bIsLandScape;                                               // 0x007E   (0x0001)  
	bool                                               bIsHLODGridVolume;                                          // 0x007F   (0x0001)  
	bool                                               bIsHLODStreamingGrid;                                       // 0x0080   (0x0001)  
	bool                                               bEnCloseSpaceAlreayOverride;                                // 0x0081   (0x0001)  
	bool                                               bSkipQualityLevel;                                          // 0x0082   (0x0001)  
	bool                                               bUseExtralSteamingDistance;                                 // 0x0083   (0x0001)  
	FVector                                            ExtraStreamingDistances;                                    // 0x0084   (0x000C)  
	bool                                               bInCludeBounds;                                             // 0x0090   (0x0001)  
	unsigned char                                      UnknownData02_7[0x1F];                                      // 0x0091   (0x001F)  MISSED
};

/// Class /Script/Engine.WorldPartitionRuntimeSpatialHash
/// Size: 0x0060 (96 bytes) (0x000030 - 0x000090) align 8 pad: 0x0000
class UWorldPartitionRuntimeSpatialHash : public UWorldPartitionRuntimeHash
{ 
public:
	unsigned char                                      UnknownData00_3[0x50];                                      // 0x0030   (0x0050)  MISSED
	TArray<FSpatialHashStreamingGrid>                  StreamingGrids;                                             // 0x0080   (0x0010)  
};

/// Class /Script/Engine.WorldPartitionStreamingSourceComponent
/// Size: 0x0010 (16 bytes) (0x0000C0 - 0x0000D0) align 8 pad: 0x0000
class UWorldPartitionStreamingSourceComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00C0   (0x0008)  MISSED
	bool                                               bStreamingSourceEnabled;                                    // 0x00C8   (0x0001)  
	EStreamingSourceTargetState                        TargetState;                                                // 0x00C9   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x00CA   (0x0006)  MISSED
	// bool IsStreamingSourceEnabled();                                                                                         // [0x476afe0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void EnableStreamingSource();                                                                                            // [0x476ab10] Final|Native|Public|BlueprintCallable 
	// void DisableStreamingSource();                                                                                           // [0x476aaf0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.WorldPartitionSubsystem
/// Size: 0x0058 (88 bytes) (0x000038 - 0x000090) align 8 pad: 0x0000
class UWorldPartitionSubsystem : public UWorldSubsystem
{ 
public:
	unsigned char                                      UnknownData00_3[0x38];                                      // 0x0038   (0x0038)  MISSED
	TArray<class UWorldPartition*>                     RegisteredWorldPartitions;                                  // 0x0070   (0x0010)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0080   (0x0010)  MISSED
	// void UnLoadEditorLandScapeByIndex(int32_t LandScapeIndex);                                                               // [0x476b000] Final|Native|Public|BlueprintCallable 
	// void UnloadEditorCellByIndex(int32_t CellIndex);                                                                         // [0x476b000] Final|Native|Public|BlueprintCallable 
	// void SetStreamingEnable(bool StreamingEnable);                                                                           // [0x476b090] Final|Native|Public|BlueprintCallable 
	// void LoadEditorLandScapeByIndex(int32_t LandScapeIndex);                                                                 // [0x476b000] Final|Native|Public|BlueprintCallable 
	// void LoadEditorCellByIndex(int32_t CellIndex);                                                                           // [0x476b000] Final|Native|Public|BlueprintCallable 
	// bool IsStreamingEnable();                                                                                                // [0x476afb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsStreamingCompleted(EWorldPartitionRuntimeCellState QueryState, TArray<FWorldPartitionStreamingQuerySource>& QuerySources, bool bReturnCellDetail, int32_t& CellNum, int32_t& MatchCellNum, bool bExactState, bool bEnableDataLayerTest); // [0x476ad20] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// bool IsRenderAssetsStreamingCompleted(FWorldPartitionStreamingQuerySource& QuerySource, bool bIgnoreQuerySource, bool bQueryMeshOnly, bool bForceStopQuery); // [0x476ab60] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetEditorLandScapeCount();                                                                                       // [0x476ab30] Final|Native|Public|BlueprintCallable 
	// int32_t GetEditorGridCellCount();                                                                                        // [0x476ab30] Final|Native|Public|BlueprintCallable 
	// void AddOrRemoveRenderAssetsQueryViewInfo(FVector& ViewOrigin, float Duration, float BoostFactor);                       // [0x476a9e0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.WorldPartitionTriggerVolume
/// Size: 0x0018 (24 bytes) (0x0002E0 - 0x0002F8) align 8 pad: 0x0000
class AWorldPartitionTriggerVolume : public AVolume
{ 
public:
	FName                                              DataLayerName;                                              // 0x02E0   (0x000C)  
	EWorldPartitionLoadState                           LoadState;                                                  // 0x02EC   (0x0004)  
	float                                              LoadStateAdjustCoef;                                        // 0x02F0   (0x0004)  
	EVolumeTriggerType                                 TriggerType;                                                // 0x02F4   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x02F5   (0x0003)  MISSED
	// void NotifyActorEndOverlap(class AActor* OtherActor);                                                                    // [0x4771000] Final|Native|Private 
	// void NotifyActorBeginOverlap(class AActor* OtherActor);                                                                  // [0x4770f70] Final|Native|Private 
};

/// Class /Script/Engine.WorldPartitionTriggerVolumeManager
/// Size: 0x0010 (16 bytes) (0x000038 - 0x000048) align 8 pad: 0x0000
class UWorldPartitionTriggerVolumeManager : public UWorldSubsystem
{ 
public:
	TArray<class AActor*>                              WorldPartitionTriggerVolumeArray;                           // 0x0038   (0x0010)  
};

/// Class /Script/Engine.WorldPartitionVolume
/// Size: 0x0000 (0 bytes) (0x0002E0 - 0x0002E0) align 8 pad: 0x0000
class AWorldPartitionVolume : public AVolume
{ 
public:
};

/// Struct /Script/Engine.MaterialProxySettings
/// Size: 0x0088 (136 bytes) (0x000000 - 0x000088) align 4 pad: 0x0000
struct FMaterialProxySettings
{ 
	FIntPoint                                          TextureSize;                                                // 0x0000   (0x0008)  
	float                                              GutterSpace;                                                // 0x0008   (0x0004)  
	float                                              MetallicConstant;                                           // 0x000C   (0x0004)  
	float                                              RoughnessConstant;                                          // 0x0010   (0x0004)  
	float                                              AnisotropyConstant;                                         // 0x0014   (0x0004)  
	float                                              SpecularConstant;                                           // 0x0018   (0x0004)  
	float                                              OpacityConstant;                                            // 0x001C   (0x0004)  
	float                                              OpacityMaskConstant;                                        // 0x0020   (0x0004)  
	float                                              AmbientOcclusionConstant;                                   // 0x0024   (0x0004)  
	TEnumAsByte<ETextureSizingType>                    TextureSizingType;                                          // 0x0028   (0x0001)  
	TEnumAsByte<EMaterialMergeType>                    MaterialMergeType;                                          // 0x0029   (0x0001)  
	TEnumAsByte<EBlendMode>                            BlendMode;                                                  // 0x002A   (0x0001)  
	bool                                               bAllowTwoSidedMaterial : 1;                                 // 0x002B:0 (0x0001)  
	bool                                               bNormalMap : 1;                                             // 0x002B:1 (0x0001)  
	bool                                               bTangentMap : 1;                                            // 0x002B:2 (0x0001)  
	bool                                               bMetallicMap : 1;                                           // 0x002B:3 (0x0001)  
	bool                                               bRoughnessMap : 1;                                          // 0x002B:4 (0x0001)  
	bool                                               bAnisotropyMap : 1;                                         // 0x002B:5 (0x0001)  
	bool                                               bSpecularMap : 1;                                           // 0x002B:6 (0x0001)  
	bool                                               bEmissiveMap : 1;                                           // 0x002B:7 (0x0001)  
	bool                                               bOpacityMap : 1;                                            // 0x002C:0 (0x0001)  
	bool                                               bOpacityMaskMap : 1;                                        // 0x002C:1 (0x0001)  
	bool                                               bAmbientOcclusionMap : 1;                                   // 0x002C:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x002D   (0x0003)  MISSED
	FIntPoint                                          DiffuseTextureSize;                                         // 0x0030   (0x0008)  
	FIntPoint                                          NormalTextureSize;                                          // 0x0038   (0x0008)  
	FIntPoint                                          TangentTextureSize;                                         // 0x0040   (0x0008)  
	FIntPoint                                          MetallicTextureSize;                                        // 0x0048   (0x0008)  
	FIntPoint                                          RoughnessTextureSize;                                       // 0x0050   (0x0008)  
	FIntPoint                                          AnisotropyTextureSize;                                      // 0x0058   (0x0008)  
	FIntPoint                                          SpecularTextureSize;                                        // 0x0060   (0x0008)  
	FIntPoint                                          EmissiveTextureSize;                                        // 0x0068   (0x0008)  
	FIntPoint                                          OpacityTextureSize;                                         // 0x0070   (0x0008)  
	FIntPoint                                          OpacityMaskTextureSize;                                     // 0x0078   (0x0008)  
	FIntPoint                                          AmbientOcclusionTextureSize;                                // 0x0080   (0x0008)  
};

/// Struct /Script/Engine.MeshProxySettings
/// Size: 0x00A8 (168 bytes) (0x000000 - 0x0000A8) align 4 pad: 0x0000
struct FMeshProxySettings
{ 
	int32_t                                            ScreenSize;                                                 // 0x0000   (0x0004)  
	float                                              VoxelSize;                                                  // 0x0004   (0x0004)  
	FMaterialProxySettings                             MaterialSettings;                                           // 0x0008   (0x0088)  
	float                                              MergeDistance;                                              // 0x0090   (0x0004)  
	FColor                                             UnresolvedGeometryColor;                                    // 0x0094   (0x0004)  
	float                                              MaxRayCastDist;                                             // 0x0098   (0x0004)  
	float                                              HardAngleThreshold;                                         // 0x009C   (0x0004)  
	int32_t                                            LightMapResolution;                                         // 0x00A0   (0x0004)  
	TEnumAsByte<EProxyNormalComputationMethod>         NormalCalculationMethod;                                    // 0x00A4   (0x0001)  
	TEnumAsByte<ELandscapeCullingPrecision>            LandscapeCullingPrecision;                                  // 0x00A5   (0x0001)  
	bool                                               bCalculateCorrectLODModel : 1;                              // 0x00A6:0 (0x0001)  
	bool                                               bUseMaxLod : 1;                                             // 0x00A6:1 (0x0001)  
	bool                                               bUseZeroLod : 1;                                            // 0x00A6:2 (0x0001)  
	bool                                               bOverrideVoxelSize : 1;                                     // 0x00A6:3 (0x0001)  
	bool                                               bOverrideTransferDistance : 1;                              // 0x00A6:4 (0x0001)  
	bool                                               bUseHardAngleThreshold : 1;                                 // 0x00A6:5 (0x0001)  
	bool                                               bComputeLightMapResolution : 1;                             // 0x00A6:6 (0x0001)  
	bool                                               bRecalculateNormals : 1;                                    // 0x00A6:7 (0x0001)  
	bool                                               bUseLandscapeCulling : 1;                                   // 0x00A7:0 (0x0001)  
	bool                                               bAllowAdjacency : 1;                                        // 0x00A7:1 (0x0001)  
	bool                                               bAllowDistanceField : 1;                                    // 0x00A7:2 (0x0001)  
	bool                                               bReuseMeshLightmapUVs : 1;                                  // 0x00A7:3 (0x0001)  
	bool                                               bCreateCollision : 1;                                       // 0x00A7:4 (0x0001)  
	bool                                               bAllowVertexColors : 1;                                     // 0x00A7:5 (0x0001)  
	bool                                               bGenerateLightmapUVs : 1;                                   // 0x00A7:6 (0x0001)  
};

/// Struct /Script/Engine.MeshMergingSettings
/// Size: 0x00A4 (164 bytes) (0x000000 - 0x0000A4) align 4 pad: 0x0000
struct FMeshMergingSettings
{ 
	int32_t                                            TargetLightMapResolution;                                   // 0x0000   (0x0004)  
	EUVOutput                                          OutputUVs[8];                                               // 0x0004   (0x0008)  
	FMaterialProxySettings                             MaterialSettings;                                           // 0x000C   (0x0088)  
	int32_t                                            GutterSize;                                                 // 0x0094   (0x0004)  
	int32_t                                            SpecificLOD;                                                // 0x0098   (0x0004)  
	EMeshLODSelectionType                              LODSelectionType;                                           // 0x009C   (0x0001)  
	bool                                               bGenerateLightMapUV : 1;                                    // 0x009D:0 (0x0001)  
	bool                                               bComputedLightMapResolution : 1;                            // 0x009D:1 (0x0001)  
	bool                                               bPivotPointAtZero : 1;                                      // 0x009D:2 (0x0001)  
	bool                                               bMergePhysicsData : 1;                                      // 0x009D:3 (0x0001)  
	bool                                               bMergeMaterials : 1;                                        // 0x009D:4 (0x0001)  
	bool                                               bCreateMergedMaterial : 1;                                  // 0x009D:5 (0x0001)  
	bool                                               bBakeVertexDataToMesh : 1;                                  // 0x009D:6 (0x0001)  
	bool                                               bUseVertexDataForBakingMaterial : 1;                        // 0x009D:7 (0x0001)  
	bool                                               bUseTextureBinning : 1;                                     // 0x009E:0 (0x0001)  
	bool                                               bReuseMeshLightmapUVs : 1;                                  // 0x009E:1 (0x0001)  
	bool                                               bMergeEquivalentMaterials : 1;                              // 0x009E:2 (0x0001)  
	bool                                               bUseLandscapeCulling : 1;                                   // 0x009E:3 (0x0001)  
	bool                                               bIncludeImposters : 1;                                      // 0x009E:4 (0x0001)  
	bool                                               bAllowDistanceField : 1;                                    // 0x009E:5 (0x0001)  
	EHLODBakeDiffuseToVertexColorMode                  BakeDiffuseToVertexColorMode;                               // 0x009F   (0x0001)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x00A0   (0x0004)  MISSED
};

/// Struct /Script/Engine.HierarchicalSimplification
/// Size: 0x0164 (356 bytes) (0x000000 - 0x000164) align 4 pad: 0x0000
struct FHierarchicalSimplification
{ 
	float                                              TransitionScreenSize;                                       // 0x0000   (0x0004)  
	float                                              OverrideDrawDistance;                                       // 0x0004   (0x0004)  
	bool                                               bUseOverrideDrawDistance : 1;                               // 0x0008:0 (0x0001)  
	bool                                               bAllowSpecificExclusion : 1;                                // 0x0008:1 (0x0001)  
	bool                                               bSimplifyMesh : 1;                                          // 0x0008:2 (0x0001)  
	bool                                               bOnlyGenerateClustersForVolumes : 1;                        // 0x0008:3 (0x0001)  
	bool                                               bReusePreviousLevelClusters : 1;                            // 0x0008:4 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0009   (0x0003)  MISSED
	FMeshProxySettings                                 ProxySetting;                                               // 0x000C   (0x00A8)  
	FMeshMergingSettings                               MergeSetting;                                               // 0x00B4   (0x00A4)  
	float                                              DesiredBoundRadius;                                         // 0x0158   (0x0004)  
	float                                              DesiredFillingPercentage;                                   // 0x015C   (0x0004)  
	int32_t                                            MinNumberOfActorsToBuild;                                   // 0x0160   (0x0004)  
};

/// Class /Script/Engine.HierarchicalLODSetup
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000070) align 8 pad: 0x0000
class UHierarchicalLODSetup : public UObject
{ 
public:
	TArray<FHierarchicalSimplification>                HierarchicalLODSetup;                                       // 0x0030   (0x0010)  
	SDK_UNDEFINED(48,238) /* TWeakObjectPtr<UMaterialInterface*> */ __um(OverrideBaseMaterial);                    // 0x0040   (0x0030)  
};

/// Struct /Script/Engine.NetViewer
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FNetViewer
{ 
	class UNetConnection*                              Connection;                                                 // 0x0000   (0x0008)  
	class AActor*                                      InViewer;                                                   // 0x0008   (0x0008)  
	class AActor*                                      ViewTarget;                                                 // 0x0010   (0x0008)  
	FVector                                            ViewLocation;                                               // 0x0018   (0x000C)  
	FVector                                            ViewDir;                                                    // 0x0024   (0x000C)  
};

/// Class /Script/Engine.WorldSettings
/// Size: 0x01A8 (424 bytes) (0x0002A8 - 0x000450) align 8 pad: 0x0000
class AWorldSettings : public AInfo
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x02A8   (0x0008)  MISSED
	int32_t                                            VisibilityCellSize;                                         // 0x02B0   (0x0004)  
	TEnumAsByte<EVisibilityAggressiveness>             VisibilityAggressiveness;                                   // 0x02B4   (0x0001)  
	bool                                               bPrecomputeVisibility : 1;                                  // 0x02B5:0 (0x0001)  
	bool                                               bPlaceCellsOnlyAlongCameraTracks : 1;                       // 0x02B5:1 (0x0001)  
	bool                                               bEnableWorldBoundsChecks : 1;                               // 0x02B5:2 (0x0001)  
	bool                                               bEnableNavigationSystem : 1;                                // 0x02B5:3 (0x0001)  
	bool                                               bEnableAISystem : 1;                                        // 0x02B5:4 (0x0001)  
	bool                                               bEnableWorldComposition : 1;                                // 0x02B5:5 (0x0001)  
	bool                                               bEnableWorldPartition : 1;                                  // 0x02B5:6 (0x0001)  
	bool                                               bTestWpMap : 1;                                             // 0x02B5:7 (0x0001)  
	bool                                               bEnableKuroActorClusters : 1;                               // 0x02B6:0 (0x0001)  
	bool                                               bEnableNavPartition : 1;                                    // 0x02B6:1 (0x0001)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x02B7   (0x0001)  MISSED
	class UClass*                                      WorldPartitionStreamingPolicyClass;                         // 0x02B8   (0x0008)  
	FVector                                            LevelInstancePivotOffset;                                   // 0x02C0   (0x000C)  
	bool                                               bUseClientSideLevelStreamingVolumes : 1;                    // 0x02CC:0 (0x0001)  
	bool                                               bEnableWorldOriginRebasing : 1;                             // 0x02CC:1 (0x0001)  
	bool                                               bWorldGravitySet : 1;                                       // 0x02CC:2 (0x0001)  
	bool                                               bGlobalGravitySet : 1;                                      // 0x02CC:3 (0x0001)  
	bool                                               bMinimizeBSPSections : 1;                                   // 0x02CC:4 (0x0001)  
	bool                                               bForceNoPrecomputedLighting : 1;                            // 0x02CC:5 (0x0001)  
	bool                                               bHighPriorityLoading : 1;                                   // 0x02CC:6 (0x0001)  
	bool                                               bHighPriorityLoadingLocal : 1;                              // 0x02CC:7 (0x0001)  
	bool                                               bOverrideDefaultBroadphaseSettings : 1;                     // 0x02CD:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x2];                                       // 0x02CE   (0x0002)  MISSED
	class UNavigationSystemConfig*                     NavigationSystemConfig;                                     // 0x02D0   (0x0008)  
	class UNavigationSystemConfig*                     NavigationSystemConfigOverride;                             // 0x02D8   (0x0008)  
	class UWorldPartition*                             WorldPartition;                                             // 0x02E0   (0x0008)  
	uint32_t                                           InstancedFoliageGridSize;                                   // 0x02E8   (0x0004)  
	float                                              WorldToMeters;                                              // 0x02EC   (0x0004)  
	float                                              KillZ;                                                      // 0x02F0   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x02F4   (0x0004)  MISSED
	class UClass*                                      KillZDamageType;                                            // 0x02F8   (0x0008)  
	float                                              WorldGravityZ;                                              // 0x0300   (0x0004)  
	float                                              GlobalGravityZ;                                             // 0x0304   (0x0004)  
	class UClass*                                      DefaultPhysicsVolumeClass;                                  // 0x0308   (0x0008)  
	class UClass*                                      PhysicsCollisionHandlerClass;                               // 0x0310   (0x0008)  
	class UClass*                                      DefaultGameMode;                                            // 0x0318   (0x0008)  
	class UClass*                                      GameNetworkManagerClass;                                    // 0x0320   (0x0008)  
	int32_t                                            PackedLightAndShadowMapTextureSize;                         // 0x0328   (0x0004)  
	FVector                                            DefaultColorScale;                                          // 0x032C   (0x000C)  
	float                                              DefaultMaxDistanceFieldOcclusionDistance;                   // 0x0338   (0x0004)  
	float                                              GlobalDistanceFieldViewDistance;                            // 0x033C   (0x0004)  
	float                                              DynamicIndirectShadowsSelfShadowingIntensity;               // 0x0340   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0344   (0x0004)  MISSED
	FReverbSettings                                    DefaultReverbSettings;                                      // 0x0348   (0x0020)  
	FInteriorSettings                                  DefaultAmbientZoneSettings;                                 // 0x0368   (0x0024)  
	float                                              MonoCullingDistance;                                        // 0x038C   (0x0004)  
	class USoundMix*                                   DefaultBaseSoundMix;                                        // 0x0390   (0x0008)  
	float                                              TimeDilation;                                               // 0x0398   (0x0004)  
	float                                              MatineeTimeDilation;                                        // 0x039C   (0x0004)  
	float                                              DemoPlayTimeDilation;                                       // 0x03A0   (0x0004)  
	float                                              MinGlobalTimeDilation;                                      // 0x03A4   (0x0004)  
	float                                              MaxGlobalTimeDilation;                                      // 0x03A8   (0x0004)  
	float                                              MinUndilatedFrameTime;                                      // 0x03AC   (0x0004)  
	float                                              MaxUndilatedFrameTime;                                      // 0x03B0   (0x0004)  
	FBroadphaseSettings                                BroadphaseSettings;                                         // 0x03B4   (0x0040)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x03F4   (0x0004)  MISSED
	class APlayerState*                                Pauser;                                                     // 0x03F8   (0x0008)  
	TArray<FNetViewer>                                 ReplicationViewers;                                         // 0x0400   (0x0010)  
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0410   (0x0010)  
	class APlayerState*                                PauserPlayerState;                                          // 0x0420   (0x0008)  
	int32_t                                            MaxNumberOfBookmarks;                                       // 0x0428   (0x0004)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x042C   (0x0004)  MISSED
	class UClass*                                      DefaultBookmarkClass;                                       // 0x0430   (0x0008)  
	TArray<class UBookmarkBase*>                       BookmarkArray;                                              // 0x0438   (0x0010)  
	class UClass*                                      LastBookmarkClass;                                          // 0x0448   (0x0008)  
	// void OnRep_WorldGravityZ();                                                                                              // [0x46255d0] Native|Public        
};

/// Struct /Script/Engine.ExpressionOutput
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FExpressionOutput
{ 
	FName                                              OutputName;                                                 // 0x0000   (0x000C)  
};

/// Struct /Script/Engine.Vector2MaterialInput
/// Size: 0x0000 (0 bytes) (0x000010 - 0x000010) align 4 pad: 0x0000
struct FVector2MaterialInput : FMaterialInput
{ 
};

/// Struct /Script/Engine.VectorDistribution
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FVectorDistribution
{ 
	FDistributionLookupTable                           Table;                                                      // 0x0000   (0x0020)  
};

/// Struct /Script/Engine.Vector4Distribution
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FVector4Distribution
{ 
	FDistributionLookupTable                           Table;                                                      // 0x0000   (0x0020)  
};

/// Struct /Script/Engine.FloatRK4SpringInterpolator
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FFloatRK4SpringInterpolator
{ 
	float                                              StiffnessConstant;                                          // 0x0000   (0x0004)  
	float                                              DampeningRatio;                                             // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.VectorRK4SpringInterpolator
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FVectorRK4SpringInterpolator
{ 
	float                                              StiffnessConstant;                                          // 0x0000   (0x0004)  
	float                                              DampeningRatio;                                             // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.FormatArgumentData
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 pad: 0x0000
struct FFormatArgumentData
{ 
	FString                                            ArgumentName;                                               // 0x0000   (0x0010)  
	TEnumAsByte<EFormatArgumentType>                   ArgumentValueType;                                          // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0011   (0x0007)  MISSED
	FText                                              ArgumentValue;                                              // 0x0018   (0x0018)  
	int32_t                                            ArgumentValueInt;                                           // 0x0030   (0x0004)  
	float                                              ArgumentValueFloat;                                         // 0x0034   (0x0004)  
	ETextGender                                        ArgumentValueGender;                                        // 0x0038   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Struct /Script/Engine.BranchingPointNotifyPayload
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FBranchingPointNotifyPayload
{ 
	unsigned char                                      UnknownData00_2[0x20];                                      // 0x0000   (0x0020)  MISSED
};

/// Struct /Script/Engine.PlatformInterfaceData
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FPlatformInterfaceData
{ 
	FName                                              DataName;                                                   // 0x0000   (0x000C)  
	TEnumAsByte<EPlatformInterfaceDataType>            Type;                                                       // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	int32_t                                            IntValue;                                                   // 0x0010   (0x0004)  
	float                                              FloatValue;                                                 // 0x0014   (0x0004)  
	FString                                            StringValue;                                                // 0x0018   (0x0010)  
	class UObject*                                     ObjectValue;                                                // 0x0028   (0x0008)  
};

/// Struct /Script/Engine.PlatformInterfaceDelegateResult
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FPlatformInterfaceDelegateResult
{ 
	bool                                               bSuccessful;                                                // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FPlatformInterfaceData                             Data;                                                       // 0x0008   (0x0030)  
};

/// Struct /Script/Engine.DebugFloatHistory
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FDebugFloatHistory
{ 
	TArray<float>                                      Samples;                                                    // 0x0000   (0x0010)  
	float                                              MaxSamples;                                                 // 0x0010   (0x0004)  
	float                                              MinValue;                                                   // 0x0014   (0x0004)  
	float                                              MaxValue;                                                   // 0x0018   (0x0004)  
	bool                                               bAutoAdjustMinMax;                                          // 0x001C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x001D   (0x0003)  MISSED
};

/// Struct /Script/Engine.LatentActionInfo
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FLatentActionInfo
{ 
	int32_t                                            Linkage;                                                    // 0x0000   (0x0004)  
	int32_t                                            UUID;                                                       // 0x0004   (0x0004)  
	FName                                              ExecutionFunction;                                          // 0x0008   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	class UObject*                                     CallbackTarget;                                             // 0x0018   (0x0008)  
};

/// Struct /Script/Engine.TimerHandle
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 pad: 0x0000
struct FTimerHandle
{ 
	uint64_t                                           Handle;                                                     // 0x0000   (0x0008)  
};

/// Struct /Script/Engine.CollisionProfileName
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FCollisionProfileName
{ 
	FName                                              Name;                                                       // 0x0000   (0x000C)  
};

/// Struct /Script/Engine.GenericStruct
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FGenericStruct
{ 
	int32_t                                            Data;                                                       // 0x0000   (0x0004)  
};

/// Struct /Script/Engine.UserActivity
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FUserActivity
{ 
	FString                                            ActionName;                                                 // 0x0000   (0x0010)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0010   (0x0008)  MISSED
};

/// Struct /Script/Engine.FastArraySerializerItem
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FFastArraySerializerItem
{ 
	int32_t                                            ReplicationID;                                              // 0x0000   (0x0004)  
	int32_t                                            ReplicationKey;                                             // 0x0004   (0x0004)  
	int32_t                                            MostRecentArrayReplicationKey;                              // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.CurveTableRowHandle
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FCurveTableRowHandle
{ 
	class UCurveTable*                                 CurveTable;                                                 // 0x0000   (0x0008)  
	FName                                              RowName;                                                    // 0x0008   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/Engine.FastArraySerializer
/// Size: 0x0108 (264 bytes) (0x000000 - 0x000108) align 8 pad: 0x0000
struct FFastArraySerializer
{ 
	unsigned char                                      UnknownData00_7[0x54];                                      // 0x0000   (0x0054)  MISSED
	int32_t                                            ArrayReplicationKey;                                        // 0x0054   (0x0004)  
	unsigned char                                      UnknownData01_6[0xA8];                                      // 0x0058   (0x00A8)  MISSED
	EFastArraySerializerDeltaFlags                     DeltaFlags;                                                 // 0x0100   (0x0001)  
	unsigned char                                      UnknownData02_7[0x7];                                       // 0x0101   (0x0007)  MISSED
};

/// Struct /Script/Engine.AnimNode_Base
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FAnimNode_Base
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Engine.InputRange
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FInputRange
{ 
	float                                              Min;                                                        // 0x0000   (0x0004)  
	float                                              Max;                                                        // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.InputScaleBiasClamp
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 4 pad: 0x0000
struct FInputScaleBiasClamp
{ 
	bool                                               bMapRange;                                                  // 0x0000   (0x0001)  
	bool                                               bClampResult;                                               // 0x0001   (0x0001)  
	bool                                               bInterpResult;                                              // 0x0002   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0003   (0x0001)  MISSED
	FInputRange                                        InRange;                                                    // 0x0004   (0x0008)  
	FInputRange                                        OutRange;                                                   // 0x000C   (0x0008)  
	float                                              Scale;                                                      // 0x0014   (0x0004)  
	float                                              Bias;                                                       // 0x0018   (0x0004)  
	float                                              ClampMin;                                                   // 0x001C   (0x0004)  
	float                                              ClampMax;                                                   // 0x0020   (0x0004)  
	float                                              InterpSpeedIncreasing;                                      // 0x0024   (0x0004)  
	float                                              InterpSpeedDecreasing;                                      // 0x0028   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/Engine.InputAlphaBoolBlend
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align 8 pad: 0x0000
struct FInputAlphaBoolBlend
{ 
	float                                              BlendInTime;                                                // 0x0000   (0x0004)  
	float                                              BlendOutTime;                                               // 0x0004   (0x0004)  
	EAlphaBlendOption                                  BlendOption;                                                // 0x0008   (0x0001)  
	bool                                               bInitialized;                                               // 0x0009   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x000A   (0x0006)  MISSED
	class UCurveFloat*                                 CustomCurve;                                                // 0x0010   (0x0008)  
	FAlphaBlend                                        AlphaBlend;                                                 // 0x0018   (0x0030)  
};

/// Struct /Script/Engine.InputScaleBias
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FInputScaleBias
{ 
	float                                              Scale;                                                      // 0x0000   (0x0004)  
	float                                              Bias;                                                       // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.PoseLinkBase
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FPoseLinkBase
{ 
	int32_t                                            LinkId;                                                     // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_7[0xC];                                       // 0x0004   (0x000C)  MISSED
};

/// Struct /Script/Engine.ComponentSpacePoseLink
/// Size: 0x0000 (0 bytes) (0x000010 - 0x000010) align 8 pad: 0x0000
struct FComponentSpacePoseLink : FPoseLinkBase
{ 
};

/// Struct /Script/Engine.TableRowBase
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 pad: 0x0000
struct FTableRowBase
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Engine.KeyHandleLookupTable
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 pad: 0x0000
struct FKeyHandleLookupTable
{ 
	unsigned char                                      UnknownData00_2[0x60];                                      // 0x0000   (0x0060)  MISSED
};

/// Struct /Script/Engine.RuntimeCurveLinearColor
/// Size: 0x0208 (520 bytes) (0x000000 - 0x000208) align 8 pad: 0x0000
struct FRuntimeCurveLinearColor
{ 
	FRichCurve                                         ColorCurves[4];                                             // 0x0000   (0x0200)  
	class UCurveLinearColor*                           ExternalCurve;                                              // 0x0200   (0x0008)  
};

/// Struct /Script/Engine.PoseLink
/// Size: 0x0000 (0 bytes) (0x000010 - 0x000010) align 8 pad: 0x0000
struct FPoseLink : FPoseLinkBase
{ 
};

/// Struct /Script/Engine.ActorComponentDuplicatedObjectData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FActorComponentDuplicatedObjectData
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Engine.ActorComponentInstanceData
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align 8 pad: 0x0000
struct FActorComponentInstanceData
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	class UObject*                                     SourceComponentTemplate;                                    // 0x0008   (0x0008)  
	EComponentCreationMethod                           SourceComponentCreationMethod;                              // 0x0010   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0011   (0x0003)  MISSED
	int32_t                                            SourceComponentTypeSerializedIndex;                         // 0x0014   (0x0004)  
	TArray<char>                                       SavedProperties;                                            // 0x0018   (0x0010)  
	FActorComponentDuplicatedObjectData                UniqueTransientPackage;                                     // 0x0028   (0x0010)  
	TArray<FActorComponentDuplicatedObjectData>        DuplicatedObjects;                                          // 0x0038   (0x0010)  
	TArray<class UObject*>                             ReferencedObjects;                                          // 0x0048   (0x0010)  
	TArray<FName>                                      ReferencedNames;                                            // 0x0058   (0x0010)  
};

/// Struct /Script/Engine.AnimNode_CustomProperty
/// Size: 0x0048 (72 bytes) (0x000010 - 0x000058) align 8 pad: 0x0000
struct FAnimNode_CustomProperty : FAnimNode_Base
{ 
	TArray<FName>                                      SourcePropertyNames;                                        // 0x0010   (0x0010)  
	TArray<FName>                                      DestPropertyNames;                                          // 0x0020   (0x0010)  
	class UObject*                                     TargetInstance;                                             // 0x0030   (0x0008)  
	unsigned char                                      UnknownData00_7[0x20];                                      // 0x0038   (0x0020)  MISSED
};

/// Struct /Script/Engine.AnimInstanceProxy
/// Size: 0x0810 (2064 bytes) (0x000000 - 0x000810) align 16 pad: 0x0000
struct FAnimInstanceProxy
{ 
	unsigned char                                      UnknownData00_2[0x810];                                     // 0x0000   (0x0810)  MISSED
};

/// Struct /Script/Engine.ComponentReference
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FComponentReference
{ 
	class AActor*                                      OtherActor;                                                 // 0x0000   (0x0008)  
	FName                                              ComponentProperty;                                          // 0x0008   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	FString                                            PathToComponent;                                            // 0x0018   (0x0010)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.AnimNode_AssetPlayerBase
/// Size: 0x0038 (56 bytes) (0x000010 - 0x000048) align 8 pad: 0x0000
struct FAnimNode_AssetPlayerBase : FAnimNode_Base
{ 
	FName                                              GroupName;                                                  // 0x0010   (0x000C)  
	TEnumAsByte<EAnimGroupRole>                        GroupRole;                                                  // 0x001C   (0x0001)  
	EAnimSyncGroupScope                                GroupScope;                                                 // 0x001D   (0x0001)  
	bool                                               bIgnoreForRelevancyTest;                                    // 0x001E   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x001F   (0x0001)  MISSED
	float                                              BlendWeight;                                                // 0x0020   (0x0004)  
	float                                              InternalTimeAccumulator;                                    // 0x0024   (0x0004)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x0028   (0x0010)  MISSED
	FString                                            AnimationName;                                              // 0x0038   (0x0010)  
};

/// Struct /Script/Engine.NamedCurveValue
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FNamedCurveValue
{ 
	FName                                              Name;                                                       // 0x0000   (0x000C)  
	float                                              Value;                                                      // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.AntiCurveMap
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FAntiCurveMap
{ 
	FName                                              Name;                                                       // 0x0000   (0x000C)  
	float                                              AntiThreshold;                                              // 0x000C   (0x0004)  
	TArray<FName>                                      AntiCurves;                                                 // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.PerBoneBlendWeight
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FPerBoneBlendWeight
{ 
	int32_t                                            SourceIndex;                                                // 0x0000   (0x0004)  
	float                                              BlendWeight;                                                // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.PoseSnapshot
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 pad: 0x0000
struct FPoseSnapshot
{ 
	TArray<FTransform>                                 LocalTransforms;                                            // 0x0000   (0x0010)  
	TArray<FName>                                      BoneNames;                                                  // 0x0010   (0x0010)  
	FName                                              SkeletalMeshName;                                           // 0x0020   (0x000C)  
	FName                                              SnapshotName;                                               // 0x002C   (0x000C)  
	bool                                               bIsValid;                                                   // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Struct /Script/Engine.AnimNode_Root
/// Size: 0x0028 (40 bytes) (0x000010 - 0x000038) align 8 pad: 0x0000
struct FAnimNode_Root : FAnimNode_Base
{ 
	FPoseLink                                          Result;                                                     // 0x0010   (0x0010)  
	FName                                              Name;                                                       // 0x0020   (0x000C)  
	FName                                              Group;                                                      // 0x002C   (0x000C)  
};

/// Struct /Script/Engine.AnimCurveParam
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FAnimCurveParam
{ 
	FName                                              Name;                                                       // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x000C   (0x0004)  MISSED
};

/// Struct /Script/Engine.SceneComponentInstanceData
/// Size: 0x0050 (80 bytes) (0x000068 - 0x0000B8) align 8 pad: 0x0000
struct FSceneComponentInstanceData : FActorComponentInstanceData
{ 
	SDK_UNDEFINED(80,239) /* TMap<USceneComponent*, FTransform> */ __um(AttachedInstanceComponents);               // 0x0068   (0x0050)  
};

/// Struct /Script/Engine.AnimationGroupReference
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FAnimationGroupReference
{ 
	FName                                              GroupName;                                                  // 0x0000   (0x000C)  
	TEnumAsByte<EAnimGroupRole>                        GroupRole;                                                  // 0x000C   (0x0001)  
	EAnimSyncGroupScope                                GroupScope;                                                 // 0x000D   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x000E   (0x0002)  MISSED
};

/// Struct /Script/Engine.AnimGroupInstance
/// Size: 0x0080 (128 bytes) (0x000000 - 0x000080) align 8 pad: 0x0000
struct FAnimGroupInstance
{ 
	unsigned char                                      UnknownData00_2[0x80];                                      // 0x0000   (0x0080)  MISSED
};

/// Struct /Script/Engine.AnimTickRecord
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 pad: 0x0000
struct FAnimTickRecord
{ 
	class UAnimationAsset*                             SourceAsset;                                                // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_7[0x48];                                      // 0x0008   (0x0048)  MISSED
};

/// Struct /Script/Engine.MarkerSyncAnimPosition
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FMarkerSyncAnimPosition
{ 
	FName                                              PreviousMarkerName;                                         // 0x0000   (0x000C)  
	FName                                              NextMarkerName;                                             // 0x000C   (0x000C)  
	float                                              PositionBetweenMarkers;                                     // 0x0018   (0x0004)  
};

/// Struct /Script/Engine.BlendFilter
/// Size: 0x0078 (120 bytes) (0x000000 - 0x000078) align 8 pad: 0x0000
struct FBlendFilter
{ 
	unsigned char                                      UnknownData00_2[0x78];                                      // 0x0000   (0x0078)  MISSED
};

/// Struct /Script/Engine.BlendSampleData
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align 8 pad: 0x0000
struct FBlendSampleData
{ 
	int32_t                                            SampleDataIndex;                                            // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	class UAnimSequence*                               Animation;                                                  // 0x0008   (0x0008)  
	float                                              TotalWeight;                                                // 0x0010   (0x0004)  
	float                                              Time;                                                       // 0x0014   (0x0004)  
	float                                              PreviousTime;                                               // 0x0018   (0x0004)  
	float                                              SamplePlayRate;                                             // 0x001C   (0x0004)  
	unsigned char                                      UnknownData01_7[0x28];                                      // 0x0020   (0x0028)  MISSED
};

/// Struct /Script/Engine.AnimationRecordingSettings
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FAnimationRecordingSettings
{ 
	bool                                               bRecordInWorldSpace;                                        // 0x0000   (0x0001)  
	bool                                               bRemoveRootAnimation;                                       // 0x0001   (0x0001)  
	bool                                               bAutoSaveAsset;                                             // 0x0002   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0003   (0x0001)  MISSED
	float                                              SampleRate;                                                 // 0x0004   (0x0004)  
	float                                              Length;                                                     // 0x0008   (0x0004)  
	TEnumAsByte<ERichCurveInterpMode>                  InterpMode;                                                 // 0x000C   (0x0001)  
	TEnumAsByte<ERichCurveTangentMode>                 TangentMode;                                                // 0x000D   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x000E   (0x0001)  MISSED
	bool                                               bRecordTransforms;                                          // 0x000F   (0x0001)  
	bool                                               bRecordCurves;                                              // 0x0010   (0x0001)  
	unsigned char                                      UnknownData02_7[0x3];                                       // 0x0011   (0x0003)  MISSED
};

/// Struct /Script/Engine.ComponentSpacePose
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FComponentSpacePose
{ 
	TArray<FTransform>                                 Transforms;                                                 // 0x0000   (0x0010)  
	TArray<FName>                                      Names;                                                      // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.LocalSpacePose
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FLocalSpacePose
{ 
	TArray<FTransform>                                 Transforms;                                                 // 0x0000   (0x0010)  
	TArray<FName>                                      Names;                                                      // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.NamedTransform
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 16 pad: 0x0000
struct FNamedTransform
{ 
	FTransform                                         Value;                                                      // 0x0000   (0x0030)  
	FName                                              Name;                                                       // 0x0030   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Struct /Script/Engine.NamedColor
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FNamedColor
{ 
	FColor                                             Value;                                                      // 0x0000   (0x0004)  
	FName                                              Name;                                                       // 0x0004   (0x000C)  
};

/// Struct /Script/Engine.NamedVector
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FNamedVector
{ 
	FVector                                            Value;                                                      // 0x0000   (0x000C)  
	FName                                              Name;                                                       // 0x000C   (0x000C)  
};

/// Struct /Script/Engine.NamedFloat
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FNamedFloat
{ 
	float                                              Value;                                                      // 0x0000   (0x0004)  
	FName                                              Name;                                                       // 0x0004   (0x000C)  
};

/// Struct /Script/Engine.AnimParentNodeAssetOverride
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FAnimParentNodeAssetOverride
{ 
	class UAnimationAsset*                             NewAsset;                                                   // 0x0000   (0x0008)  
	FGuid                                              ParentNodeGuid;                                             // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.AnimBlueprintDebugData
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FAnimBlueprintDebugData
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.AnimationFrameSnapshot
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FAnimationFrameSnapshot
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.StateMachineDebugData
/// Size: 0x00B0 (176 bytes) (0x000000 - 0x0000B0) align 8 pad: 0x0000
struct FStateMachineDebugData
{ 
	unsigned char                                      UnknownData00_2[0xB0];                                      // 0x0000   (0x00B0)  MISSED
};

/// Struct /Script/Engine.StateMachineStateDebugData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FStateMachineStateDebugData
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Engine.AnimGraphBlendOptions
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FAnimGraphBlendOptions
{ 
	float                                              BlendInTime;                                                // 0x0000   (0x0004)  
	float                                              BlendOutTime;                                               // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.GraphAssetPlayerInformation
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FGraphAssetPlayerInformation
{ 
	TArray<int32_t>                                    PlayerNodeIndices;                                          // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.CachedPoseIndices
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FCachedPoseIndices
{ 
	TArray<int32_t>                                    OrderedSavedPoseNodeIndices;                                // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.RootMotionExtractionStep
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FRootMotionExtractionStep
{ 
	class UAnimSequence*                               AnimSequence;                                               // 0x0000   (0x0008)  
	float                                              StartPosition;                                              // 0x0008   (0x0004)  
	float                                              EndPosition;                                                // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.AnimationErrorStats
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FAnimationErrorStats
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Engine.VectorCurve
/// Size: 0x0180 (384 bytes) (0x000020 - 0x0001A0) align 8 pad: 0x0000
struct FVectorCurve : FAnimCurveBase
{ 
	FRichCurve                                         FloatCurves[3];                                             // 0x0020   (0x0180)  
};

/// Struct /Script/Engine.TransformCurve
/// Size: 0x04E0 (1248 bytes) (0x000020 - 0x000500) align 8 pad: 0x0000
struct FTransformCurve : FAnimCurveBase
{ 
	FVectorCurve                                       TranslationCurve;                                           // 0x0020   (0x01A0)  
	FVectorCurve                                       RotationCurve;                                              // 0x01C0   (0x01A0)  
	FVectorCurve                                       ScaleCurve;                                                 // 0x0360   (0x01A0)  
};

/// Struct /Script/Engine.SlotEvaluationPose
/// Size: 0x0130 (304 bytes) (0x000000 - 0x000130) align 16 pad: 0x0000
struct FSlotEvaluationPose
{ 
	TEnumAsByte<EAdditiveAnimationType>                AdditiveType;                                               // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              Weight;                                                     // 0x0004   (0x0004)  
	unsigned char                                      UnknownData01_7[0x128];                                     // 0x0008   (0x0128)  MISSED
};

/// Struct /Script/Engine.A2Pose
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FA2Pose
{ 
	TArray<FTransform>                                 Bones;                                                      // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.A2CSPose
/// Size: 0x0018 (24 bytes) (0x000010 - 0x000028) align 8 pad: 0x0000
struct FA2CSPose : FA2Pose
{ 
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0010   (0x0008)  MISSED
	TArray<char>                                       ComponentSpaceFlags;                                        // 0x0018   (0x0010)  
};

/// Struct /Script/Engine.QueuedDrawDebugItem
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align 8 pad: 0x0000
struct FQueuedDrawDebugItem
{ 
	TEnumAsByte<EDrawDebugItemType>                    ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FVector                                            StartLoc;                                                   // 0x0004   (0x000C)  
	FVector                                            EndLoc;                                                     // 0x0010   (0x000C)  
	FVector                                            Center;                                                     // 0x001C   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x0028   (0x000C)  
	float                                              Radius;                                                     // 0x0034   (0x0004)  
	float                                              Size;                                                       // 0x0038   (0x0004)  
	int32_t                                            Segments;                                                   // 0x003C   (0x0004)  
	FColor                                             Color;                                                      // 0x0040   (0x0004)  
	bool                                               bPersistentLines;                                           // 0x0044   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0045   (0x0003)  MISSED
	float                                              LifeTime;                                                   // 0x0048   (0x0004)  
	float                                              Thickness;                                                  // 0x004C   (0x0004)  
	FString                                            Message;                                                    // 0x0050   (0x0010)  
	FVector2D                                          TextScale;                                                  // 0x0060   (0x0008)  
};

/// Struct /Script/Engine.AnimInstanceSubsystemData
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FAnimInstanceSubsystemData
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.AnimMontageInstance
/// Size: 0x01B8 (440 bytes) (0x000000 - 0x0001B8) align 8 pad: 0x0000
struct FAnimMontageInstance
{ 
	class UAnimMontage*                                Montage;                                                    // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0008   (0x0020)  MISSED
	bool                                               bPlaying;                                                   // 0x0028   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              DefaultBlendTimeMultiplier;                                 // 0x002C   (0x0004)  
	unsigned char                                      UnknownData02_6[0xB8];                                      // 0x0030   (0x00B8)  MISSED
	TArray<int32_t>                                    NextSections;                                               // 0x00E8   (0x0010)  
	TArray<int32_t>                                    PrevSections;                                               // 0x00F8   (0x0010)  
	unsigned char                                      UnknownData03_6[0x10];                                      // 0x0108   (0x0010)  MISSED
	TArray<FAnimNotifyEvent>                           ActiveStateBranchingPoints;                                 // 0x0118   (0x0010)  
	float                                              Position;                                                   // 0x0128   (0x0004)  
	float                                              PlayRate;                                                   // 0x012C   (0x0004)  
	FAlphaBlend                                        Blend;                                                      // 0x0130   (0x0030)  
	unsigned char                                      UnknownData04_6[0x30];                                      // 0x0160   (0x0030)  MISSED
	int32_t                                            DisableRootMotionCount;                                     // 0x0190   (0x0004)  
	unsigned char                                      UnknownData05_7[0x24];                                      // 0x0194   (0x0024)  MISSED
};

/// Struct /Script/Engine.AnimNode_ApplyMeshSpaceAdditive
/// Size: 0x00C8 (200 bytes) (0x000010 - 0x0000D8) align 8 pad: 0x0000
struct FAnimNode_ApplyMeshSpaceAdditive : FAnimNode_Base
{ 
	FPoseLink                                          Base;                                                       // 0x0010   (0x0010)  
	FPoseLink                                          Additive;                                                   // 0x0020   (0x0010)  
	EAnimAlphaInputType                                AlphaInputType;                                             // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	float                                              ALPHA;                                                      // 0x0034   (0x0004)  
	bool                                               bAlphaBoolEnabled : 1;                                      // 0x0038:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0039   (0x0007)  MISSED
	FInputAlphaBoolBlend                               AlphaBoolBlend;                                             // 0x0040   (0x0048)  
	FName                                              AlphaCurveName;                                             // 0x0088   (0x000C)  
	FInputScaleBias                                    AlphaScaleBias;                                             // 0x0094   (0x0008)  
	FInputScaleBiasClamp                               AlphaScaleBiasClamp;                                        // 0x009C   (0x0030)  
	int32_t                                            LODThreshold;                                               // 0x00CC   (0x0004)  
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x00D0   (0x0008)  MISSED
};

/// Struct /Script/Engine.AnimNode_Inertialization
/// Size: 0x0060 (96 bytes) (0x000010 - 0x000070) align 8 pad: 0x0000
struct FAnimNode_Inertialization : FAnimNode_Base
{ 
	FPoseLink                                          Source;                                                     // 0x0010   (0x0010)  
	unsigned char                                      UnknownData00_7[0x50];                                      // 0x0020   (0x0050)  MISSED
};

/// Struct /Script/Engine.InertializationPoseDiff
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FInertializationPoseDiff
{ 
	unsigned char                                      UnknownData00_2[0x28];                                      // 0x0000   (0x0028)  MISSED
};

/// Struct /Script/Engine.InertializationCurveDiff
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FInertializationCurveDiff
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Engine.InertializationBoneDiff
/// Size: 0x003C (60 bytes) (0x000000 - 0x00003C) align 4 pad: 0x0000
struct FInertializationBoneDiff
{ 
	unsigned char                                      UnknownData00_2[0x3C];                                      // 0x0000   (0x003C)  MISSED
};

/// Struct /Script/Engine.InertializationPose
/// Size: 0x00A0 (160 bytes) (0x000000 - 0x0000A0) align 16 pad: 0x0000
struct FInertializationPose
{ 
	unsigned char                                      UnknownData00_2[0xA0];                                      // 0x0000   (0x00A0)  MISSED
};

/// Struct /Script/Engine.AnimNode_LinkedAnimGraph
/// Size: 0x0050 (80 bytes) (0x000058 - 0x0000A8) align 8 pad: 0x0000
struct FAnimNode_LinkedAnimGraph : FAnimNode_CustomProperty
{ 
	TArray<FPoseLink>                                  InputPoses;                                                 // 0x0058   (0x0010)  
	TArray<FName>                                      InputPoseNames;                                             // 0x0068   (0x0010)  
	class UClass*                                      InstanceClass;                                              // 0x0078   (0x0008)  
	FName                                              Tag;                                                        // 0x0080   (0x000C)  
	unsigned char                                      UnknownData00_6[0x18];                                      // 0x008C   (0x0018)  MISSED
	bool                                               bReceiveNotifiesFromLinkedInstances : 1;                    // 0x00A4:0 (0x0001)  
	bool                                               bPropagateNotifiesToLinkedInstances : 1;                    // 0x00A4:1 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x00A5   (0x0003)  MISSED
};

/// Struct /Script/Engine.AnimNode_LinkedAnimLayer
/// Size: 0x0018 (24 bytes) (0x0000A8 - 0x0000C0) align 8 pad: 0x0000
struct FAnimNode_LinkedAnimLayer : FAnimNode_LinkedAnimGraph
{ 
	class UClass*                                      Interface;                                                  // 0x00A8   (0x0008)  
	FName                                              Layer;                                                      // 0x00B0   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x00BC   (0x0004)  MISSED
};

/// Struct /Script/Engine.AnimNode_LinkedInputPose
/// Size: 0x0128 (296 bytes) (0x000010 - 0x000138) align 8 pad: 0x0000
struct FAnimNode_LinkedInputPose : FAnimNode_Base
{ 
	FName                                              Name;                                                       // 0x0010   (0x000C)  
	FName                                              Graph;                                                      // 0x001C   (0x000C)  
	FPoseLink                                          InputPose;                                                  // 0x0028   (0x0010)  
	unsigned char                                      UnknownData00_7[0x100];                                     // 0x0038   (0x0100)  MISSED
};

/// Struct /Script/Engine.AnimNode_SaveCachedPose
/// Size: 0x01A0 (416 bytes) (0x000010 - 0x0001B0) align 16 pad: 0x0000
struct FAnimNode_SaveCachedPose : FAnimNode_Base
{ 
	FPoseLink                                          Pose;                                                       // 0x0010   (0x0010)  
	FName                                              CachePoseName;                                              // 0x0020   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x002C   (0x0004)  MISSED
	bool                                               OpenReInitialize;                                           // 0x0030   (0x0001)  
	unsigned char                                      UnknownData01_7[0x17F];                                     // 0x0031   (0x017F)  MISSED
};

/// Struct /Script/Engine.AnimNode_SequencePlayer
/// Size: 0x0048 (72 bytes) (0x000048 - 0x000090) align 8 pad: 0x0000
struct FAnimNode_SequencePlayer : FAnimNode_AssetPlayerBase
{ 
	class UAnimSequenceBase*                           Sequence;                                                   // 0x0048   (0x0008)  
	float                                              PlayRateBasis;                                              // 0x0050   (0x0004)  
	float                                              PlayRate;                                                   // 0x0054   (0x0004)  
	FInputScaleBiasClamp                               PlayRateScaleBiasClamp;                                     // 0x0058   (0x0030)  
	float                                              StartPosition;                                              // 0x0088   (0x0004)  
	bool                                               bLoopAnimation;                                             // 0x008C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x008D   (0x0003)  MISSED
};

/// Struct /Script/Engine.AnimNode_StateMachine
/// Size: 0x0128 (296 bytes) (0x000010 - 0x000138) align 8 pad: 0x0000
struct FAnimNode_StateMachine : FAnimNode_Base
{ 
	int32_t                                            StateMachineIndexInClass;                                   // 0x0010   (0x0004)  
	int32_t                                            MaxTransitionsPerFrame;                                     // 0x0014   (0x0004)  
	bool                                               bSkipFirstUpdateTransition;                                 // 0x0018   (0x0001)  
	bool                                               bReinitializeOnBecomingRelevant;                            // 0x0019   (0x0001)  
	bool                                               bForceDisableNetMode;                                       // 0x001A   (0x0001)  
	bool                                               bNeverInherit;                                              // 0x001B   (0x0001)  
	unsigned char                                      UnknownData00_7[0x11C];                                     // 0x001C   (0x011C)  MISSED
};

/// Struct /Script/Engine.AnimationPotentialTransition
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FAnimationPotentialTransition
{ 
	unsigned char                                      UnknownData00_2[0x30];                                      // 0x0000   (0x0030)  MISSED
};

/// Struct /Script/Engine.AnimationActiveTransitionEntry
/// Size: 0x00C8 (200 bytes) (0x000000 - 0x0000C8) align 8 pad: 0x0000
struct FAnimationActiveTransitionEntry
{ 
	unsigned char                                      UnknownData00_7[0xB8];                                      // 0x0000   (0x00B8)  MISSED
	class UBlendProfile*                               BlendProfile;                                               // 0x00B8   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x00C0   (0x0008)  MISSED
};

/// Struct /Script/Engine.AnimNode_TransitionPoseEvaluator
/// Size: 0x0130 (304 bytes) (0x000010 - 0x000140) align 16 pad: 0x0000
struct FAnimNode_TransitionPoseEvaluator : FAnimNode_Base
{ 
	unsigned char                                      UnknownData00_3[0x120];                                     // 0x0010   (0x0120)  MISSED
	int32_t                                            FramesToCachePose;                                          // 0x0130   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0134   (0x0004)  MISSED
	TEnumAsByte<EEvaluatorDataSource>                  DataSource;                                                 // 0x0138   (0x0001)  
	TEnumAsByte<EEvaluatorMode>                        EvaluatorMode;                                              // 0x0139   (0x0001)  
	unsigned char                                      UnknownData02_7[0x6];                                       // 0x013A   (0x0006)  MISSED
};

/// Struct /Script/Engine.AnimNode_TransitionResult
/// Size: 0x0018 (24 bytes) (0x000010 - 0x000028) align 8 pad: 0x0000
struct FAnimNode_TransitionResult : FAnimNode_Base
{ 
	bool                                               bCanEnterTransition;                                        // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_7[0x17];                                      // 0x0011   (0x0017)  MISSED
};

/// Struct /Script/Engine.AnimNode_UseCachedPose
/// Size: 0x0020 (32 bytes) (0x000010 - 0x000030) align 8 pad: 0x0000
struct FAnimNode_UseCachedPose : FAnimNode_Base
{ 
	FPoseLink                                          LinkToCachingNode;                                          // 0x0010   (0x0010)  
	FName                                              CachePoseName;                                              // 0x0020   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/Engine.AnimNode_ConvertLocalToComponentSpace
/// Size: 0x0010 (16 bytes) (0x000010 - 0x000020) align 8 pad: 0x0000
struct FAnimNode_ConvertLocalToComponentSpace : FAnimNode_Base
{ 
	FPoseLink                                          LocalPose;                                                  // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.AnimNode_ConvertComponentToLocalSpace
/// Size: 0x0010 (16 bytes) (0x000010 - 0x000020) align 8 pad: 0x0000
struct FAnimNode_ConvertComponentToLocalSpace : FAnimNode_Base
{ 
	FComponentSpacePoseLink                            ComponentPose;                                              // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.AnimNotifyArray
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FAnimNotifyArray
{ 
	TArray<FAnimNotifyEventReference>                  Notifies;                                                   // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.CompressedTrack
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FCompressedTrack
{ 
	TArray<char>                                       ByteStream;                                                 // 0x0000   (0x0010)  
	TArray<float>                                      Times;                                                      // 0x0010   (0x0010)  
	float                                              Mins[3];                                                    // 0x0020   (0x000C)  
	float                                              Ranges[3];                                                  // 0x002C   (0x000C)  
};

/// Struct /Script/Engine.CurveTrack
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FCurveTrack
{ 
	FName                                              CurveName;                                                  // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	TArray<float>                                      CurveWeights;                                               // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.ShearTrack
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FShearTrack
{ 
	TArray<FVector>                                    ShearKeys;                                                  // 0x0000   (0x0010)  
	TArray<float>                                      Times;                                                      // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.ScaleTrack
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FScaleTrack
{ 
	TArray<FVector>                                    ScaleKeys;                                                  // 0x0000   (0x0010)  
	TArray<float>                                      Times;                                                      // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.RotationTrack
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FRotationTrack
{ 
	TArray<FQuat>                                      RotKeys;                                                    // 0x0000   (0x0010)  
	TArray<float>                                      Times;                                                      // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.TranslationTrack
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FTranslationTrack
{ 
	TArray<FVector>                                    PosKeys;                                                    // 0x0000   (0x0010)  
	TArray<float>                                      Times;                                                      // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.RawAnimSequenceTrack
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align 8 pad: 0x0000
struct FRawAnimSequenceTrack
{ 
	TArray<FVector>                                    PosKeys;                                                    // 0x0000   (0x0010)  
	TArray<FQuat>                                      RotKeys;                                                    // 0x0010   (0x0010)  
	TArray<FVector>                                    ScaleKeys;                                                  // 0x0020   (0x0010)  
	TArray<FVector>                                    ShearKeys;                                                  // 0x0030   (0x0010)  
	bool                                               bContainsShear;                                             // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Struct /Script/Engine.AnimSequenceTrackContainer
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FAnimSequenceTrackContainer
{ 
	TArray<FRawAnimSequenceTrack>                      AnimationTracks;                                            // 0x0000   (0x0010)  
	TArray<FName>                                      TrackNames;                                                 // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.AnimSingleNodeInstanceProxy
/// Size: 0x0160 (352 bytes) (0x000810 - 0x000970) align 16 pad: 0x0000
struct FAnimSingleNodeInstanceProxy : FAnimInstanceProxy
{ 
	unsigned char                                      UnknownData00_1[0x160];                                     // 0x0810   (0x0160)  MISSED
};

/// Struct /Script/Engine.AnimNode_SingleNode
/// Size: 0x0028 (40 bytes) (0x000010 - 0x000038) align 8 pad: 0x0000
struct FAnimNode_SingleNode : FAnimNode_Base
{ 
	FPoseLink                                          SourcePose;                                                 // 0x0010   (0x0010)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0020   (0x0018)  MISSED
};

/// Struct /Script/Engine.AnimationTransitionRule
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FAnimationTransitionRule
{ 
	FName                                              RuleToExecute;                                              // 0x0000   (0x000C)  
	bool                                               TransitionReturnVal;                                        // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	int32_t                                            TransitionIndex;                                            // 0x0010   (0x0004)  
};

/// Struct /Script/Engine.AnimationState
/// Size: 0x0024 (36 bytes) (0x00000C - 0x000030) align 8 pad: 0x0000
struct FAnimationState : FAnimationStateBase
{ 
	unsigned char                                      UnknownData00_3[0x4];                                       // 0x000C   (0x0004)  MISSED
	TArray<FAnimationTransitionRule>                   Transitions;                                                // 0x0010   (0x0010)  
	int32_t                                            StateRootNodeIndex;                                         // 0x0020   (0x0004)  
	int32_t                                            StartNotify;                                                // 0x0024   (0x0004)  
	int32_t                                            EndNotify;                                                  // 0x0028   (0x0004)  
	int32_t                                            FullyBlendedNotify;                                         // 0x002C   (0x0004)  
};

/// Struct /Script/Engine.AnimNotifyTrack
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 pad: 0x0000
struct FAnimNotifyTrack
{ 
	FName                                              TrackName;                                                  // 0x0000   (0x000C)  
	FLinearColor                                       TrackColor;                                                 // 0x000C   (0x0010)  
	unsigned char                                      UnknownData00_7[0x24];                                      // 0x001C   (0x0024)  MISSED
};

/// Struct /Script/Engine.PerBoneBlendWeights
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FPerBoneBlendWeights
{ 
	TArray<FPerBoneBlendWeight>                        BoneBlendWeights;                                           // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.AssetImportInfo
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FAssetImportInfo
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.AtmospherePrecomputeInstanceData
/// Size: 0x00A8 (168 bytes) (0x0000B8 - 0x000160) align 8 pad: 0x0000
struct FAtmospherePrecomputeInstanceData : FSceneComponentInstanceData
{ 
	unsigned char                                      UnknownData00_1[0xA8];                                      // 0x00B8   (0x00A8)  MISSED
};

/// Struct /Script/Engine.AudioReverbEffect
/// Size: 0x0040 (64 bytes) (0x000008 - 0x000048) align 8 pad: 0x0000
struct FAudioReverbEffect : FAudioEffectParameters
{ 
	unsigned char                                      UnknownData00_1[0x40];                                      // 0x0008   (0x0040)  MISSED
};

/// Struct /Script/Engine.NavAvoidanceData
/// Size: 0x003C (60 bytes) (0x000000 - 0x00003C) align 4 pad: 0x0000
struct FNavAvoidanceData
{ 
	unsigned char                                      UnknownData00_2[0x3C];                                      // 0x0000   (0x003C)  MISSED
};

/// Struct /Script/Engine.GridBlendSample
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FGridBlendSample
{ 
	FEditorElement                                     GridElement;                                                // 0x0000   (0x0018)  
	float                                              BlendWeight;                                                // 0x0018   (0x0004)  
};

/// Struct /Script/Engine.BPEditorBookmarkNode
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FBPEditorBookmarkNode
{ 
	FGuid                                              NodeGuid;                                                   // 0x0000   (0x0010)  
	FGuid                                              ParentGuid;                                                 // 0x0010   (0x0010)  
	FText                                              DisplayName;                                                // 0x0020   (0x0018)  
};

/// Struct /Script/Engine.EditedDocumentInfo
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FEditedDocumentInfo
{ 
	FSoftObjectPath                                    EditedObjectPath;                                           // 0x0000   (0x0020)  
	FVector2D                                          SavedViewOffset;                                            // 0x0020   (0x0008)  
	float                                              SavedZoomAmount;                                            // 0x0028   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x002C   (0x0004)  MISSED
	class UObject*                                     EditedObject;                                               // 0x0030   (0x0008)  
};

/// Struct /Script/Engine.BPInterfaceDescription
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FBPInterfaceDescription
{ 
	class UClass*                                      Interface;                                                  // 0x0000   (0x0008)  
	TArray<class UEdGraph*>                            Graphs;                                                     // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.BPVariableDescription
/// Size: 0x00F0 (240 bytes) (0x000000 - 0x0000F0) align 8 pad: 0x0000
struct FBPVariableDescription
{ 
	FName                                              VarName;                                                    // 0x0000   (0x000C)  
	FGuid                                              VarGuid;                                                    // 0x000C   (0x0010)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	FEdGraphPinType                                    VarType;                                                    // 0x0020   (0x0070)  
	FString                                            FriendlyName;                                               // 0x0090   (0x0010)  
	FText                                              Category;                                                   // 0x00A0   (0x0018)  
	uint64_t                                           PropertyFlags;                                              // 0x00B8   (0x0008)  
	FName                                              RepNotifyFunc;                                              // 0x00C0   (0x000C)  
	TEnumAsByte<ELifetimeCondition>                    ReplicationCondition;                                       // 0x00CC   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x00CD   (0x0003)  MISSED
	TArray<FBPVariableMetaDataEntry>                   MetaDataArray;                                              // 0x00D0   (0x0010)  
	FString                                            DefaultValue;                                               // 0x00E0   (0x0010)  
};

/// Struct /Script/Engine.BlueprintMacroCosmeticInfo
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FBlueprintMacroCosmeticInfo
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.CompilerNativizationOptions
/// Size: 0x0080 (128 bytes) (0x000000 - 0x000080) align 8 pad: 0x0000
struct FCompilerNativizationOptions
{ 
	FName                                              PlatformName;                                               // 0x0000   (0x000C)  
	bool                                               ServerOnlyPlatform;                                         // 0x000C   (0x0001)  
	bool                                               ClientOnlyPlatform;                                         // 0x000D   (0x0001)  
	bool                                               bExcludeMonolithicHeaders;                                  // 0x000E   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x000F   (0x0001)  MISSED
	TArray<FName>                                      ExcludedModules;                                            // 0x0010   (0x0010)  
	SDK_UNDEFINED(80,240) /* TSet<FSoftObjectPath> */  __um(ExcludedAssets);                                       // 0x0020   (0x0050)  
	TArray<FString>                                    ExcludedFolderPaths;                                        // 0x0070   (0x0010)  
};

/// Struct /Script/Engine.EventGraphFastCallPair
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FEventGraphFastCallPair
{ 
	class UFunction*                                   FunctionToPatch;                                            // 0x0000   (0x0008)  
	int32_t                                            EventGraphCallOffset;                                       // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x000C   (0x0004)  MISSED
};

/// Struct /Script/Engine.BlueprintDebugData
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FBlueprintDebugData
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.PointerToUberGraphFrame
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 pad: 0x0000
struct FPointerToUberGraphFrame
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Engine.DebuggingInfoForSingleFunction
/// Size: 0x0190 (400 bytes) (0x000000 - 0x000190) align 8 pad: 0x0000
struct FDebuggingInfoForSingleFunction
{ 
	unsigned char                                      UnknownData00_2[0x190];                                     // 0x0000   (0x0190)  MISSED
};

/// Struct /Script/Engine.NodeToCodeAssociation
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FNodeToCodeAssociation
{ 
	unsigned char                                      UnknownData00_2[0x14];                                      // 0x0000   (0x0014)  MISSED
};

/// Struct /Script/Engine.AnimCurveType
/// Size: 0x0002 (2 bytes) (0x000000 - 0x000002) align 1 pad: 0x0000
struct FAnimCurveType
{ 
	unsigned char                                      UnknownData00_2[0x2];                                       // 0x0000   (0x0002)  MISSED
};

/// Struct /Script/Engine.BoneFoldEditableLayers
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FBoneFoldEditableLayers
{ 
	TArray<FBoneFoldLayer>                             BoneFoldLayers;                                             // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.FoldedBoneInfo
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FFoldedBoneInfo
{ 
	uint16_t                                           BoneIndex;                                                  // 0x0000   (0x0002)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0002   (0x0002)  MISSED
	FName                                              BoneName;                                                   // 0x0004   (0x000C)  
};

/// Struct /Script/Engine.BookmarkBaseJumpToSettings
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FBookmarkBaseJumpToSettings
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.BookmarkJumpToSettings
/// Size: 0x0000 (0 bytes) (0x000001 - 0x000001) align 1 pad: 0x0000
struct FBookmarkJumpToSettings : FBookmarkBaseJumpToSettings
{ 
};

/// Struct /Script/Engine.Bookmark2DJumpToSettings
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FBookmark2DJumpToSettings
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.IntegerAnimationAttribute
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FIntegerAnimationAttribute
{ 
	int32_t                                            Value;                                                      // 0x0000   (0x0004)  
};

/// Struct /Script/Engine.NonBlendableIntegerAnimationAttribute
/// Size: 0x0000 (0 bytes) (0x000004 - 0x000004) align 4 pad: 0x0000
struct FNonBlendableIntegerAnimationAttribute : FIntegerAnimationAttribute
{ 
};

/// Struct /Script/Engine.FloatAnimationAttribute
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FFloatAnimationAttribute
{ 
	float                                              Value;                                                      // 0x0000   (0x0004)  
};

/// Struct /Script/Engine.NonBlendableFloatAnimationAttribute
/// Size: 0x0000 (0 bytes) (0x000004 - 0x000004) align 4 pad: 0x0000
struct FNonBlendableFloatAnimationAttribute : FFloatAnimationAttribute
{ 
};

/// Struct /Script/Engine.TransformAnimationAttribute
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 16 pad: 0x0000
struct FTransformAnimationAttribute
{ 
	FTransform                                         Value;                                                      // 0x0000   (0x0030)  
};

/// Struct /Script/Engine.NonBlendableTransformAnimationAttribute
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 16 pad: 0x0000
struct FNonBlendableTransformAnimationAttribute : FTransformAnimationAttribute
{ 
};

/// Struct /Script/Engine.StringAnimationAttribute
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FStringAnimationAttribute
{ 
	FString                                            Value;                                                      // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.CachedAnimTransitionData
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 4 pad: 0x0000
struct FCachedAnimTransitionData
{ 
	FName                                              StateMachineName;                                           // 0x0000   (0x000C)  
	FName                                              FromStateName;                                              // 0x000C   (0x000C)  
	FName                                              ToStateName;                                                // 0x0018   (0x000C)  
	unsigned char                                      UnknownData00_7[0xC];                                       // 0x0024   (0x000C)  MISSED
};

/// Struct /Script/Engine.CachedAnimRelevancyData
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align 4 pad: 0x0000
struct FCachedAnimRelevancyData
{ 
	FName                                              StateMachineName;                                           // 0x0000   (0x000C)  
	FName                                              StateName;                                                  // 0x000C   (0x000C)  
	unsigned char                                      UnknownData00_7[0xC];                                       // 0x0018   (0x000C)  MISSED
};

/// Struct /Script/Engine.CachedAnimAssetPlayerData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 4 pad: 0x0000
struct FCachedAnimAssetPlayerData
{ 
	FName                                              StateMachineName;                                           // 0x0000   (0x000C)  
	FName                                              StateName;                                                  // 0x000C   (0x000C)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0018   (0x0008)  MISSED
};

/// Struct /Script/Engine.CachedAnimStateData
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align 4 pad: 0x0000
struct FCachedAnimStateData
{ 
	FName                                              StateMachineName;                                           // 0x0000   (0x000C)  
	FName                                              StateName;                                                  // 0x000C   (0x000C)  
	unsigned char                                      UnknownData00_7[0xC];                                       // 0x0018   (0x000C)  MISSED
};

/// Struct /Script/Engine.CachedAnimStateArray
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FCachedAnimStateArray
{ 
	TArray<FCachedAnimStateData>                       States;                                                     // 0x0000   (0x0010)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0010   (0x0008)  MISSED
};

/// Struct /Script/Engine.PooledCameraShakes
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FPooledCameraShakes
{ 
	TArray<class UCameraShakeBase*>                    PooledShakes;                                               // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.CameraShakeDuration
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FCameraShakeDuration
{ 
	float                                              Duration;                                                   // 0x0000   (0x0004)  
	ECameraShakeDurationType                           Type;                                                       // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Struct /Script/Engine.CameraShakeInfo
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FCameraShakeInfo
{ 
	FCameraShakeDuration                               Duration;                                                   // 0x0000   (0x0008)  
	float                                              BlendIn;                                                    // 0x0008   (0x0004)  
	float                                              BlendOut;                                                   // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.CameraShakeUpdateResult
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 4 pad: 0x0000
struct FCameraShakeUpdateResult
{ 
	unsigned char                                      UnknownData00_2[0x20];                                      // 0x0000   (0x0020)  MISSED
};

/// Struct /Script/Engine.CameraShakeUpdateParams
/// Size: 0x06A0 (1696 bytes) (0x000000 - 0x0006A0) align 16 pad: 0x0000
struct FCameraShakeUpdateParams
{ 
	unsigned char                                      UnknownData00_2[0x6A0];                                     // 0x0000   (0x06A0)  MISSED
};

/// Struct /Script/Engine.DummySpacerCameraTypes
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FDummySpacerCameraTypes
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.CanvasIcon
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FCanvasIcon
{ 
	class UTexture*                                    Texture;                                                    // 0x0000   (0x0008)  
	float                                              U;                                                          // 0x0008   (0x0004)  
	float                                              V;                                                          // 0x000C   (0x0004)  
	float                                              UL;                                                         // 0x0010   (0x0004)  
	float                                              VL;                                                         // 0x0014   (0x0004)  
};

/// Struct /Script/Engine.WrappedStringElement
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FWrappedStringElement
{ 
	FString                                            Value;                                                      // 0x0000   (0x0010)  
	FVector2D                                          LineExtent;                                                 // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.TextSizingParameters
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FTextSizingParameters
{ 
	float                                              DrawX;                                                      // 0x0000   (0x0004)  
	float                                              DrawY;                                                      // 0x0004   (0x0004)  
	float                                              DrawXL;                                                     // 0x0008   (0x0004)  
	float                                              DrawYL;                                                     // 0x000C   (0x0004)  
	FVector2D                                          Scaling;                                                    // 0x0010   (0x0008)  
	class UFont*                                       DrawFont;                                                   // 0x0018   (0x0008)  
	FVector2D                                          SpacingAdjust;                                              // 0x0020   (0x0008)  
};

/// Struct /Script/Engine.CharacterNetworkSerializationPackedBits
/// Size: 0x0098 (152 bytes) (0x000000 - 0x000098) align 8 pad: 0x0000
struct FCharacterNetworkSerializationPackedBits
{ 
	unsigned char                                      UnknownData00_2[0x98];                                      // 0x0000   (0x0098)  MISSED
};

/// Struct /Script/Engine.CharacterMoveResponsePackedBits
/// Size: 0x0000 (0 bytes) (0x000098 - 0x000098) align 8 pad: 0x0000
struct FCharacterMoveResponsePackedBits : FCharacterNetworkSerializationPackedBits
{ 
};

/// Struct /Script/Engine.CharacterServerMovePackedBits
/// Size: 0x0000 (0 bytes) (0x000098 - 0x000098) align 8 pad: 0x0000
struct FCharacterServerMovePackedBits : FCharacterNetworkSerializationPackedBits
{ 
};

/// Struct /Script/Engine.KuroCharacterNetworkMoveData
/// Size: 0x0044 (68 bytes) (0x000000 - 0x000044) align 4 pad: 0x0000
struct FKuroCharacterNetworkMoveData
{ 
	float                                              Timestamp;                                                  // 0x0000   (0x0004)  
	FVector                                            Acceleration;                                               // 0x0004   (0x000C)  
	FVector                                            Velocity;                                                   // 0x0010   (0x000C)  
	FVector                                            Location;                                                   // 0x001C   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x0028   (0x000C)  
	FRotator                                           ControlRotation;                                            // 0x0034   (0x000C)  
	char                                               CompressedMoveFlags;                                        // 0x0040   (0x0001)  
	char                                               MovementMode;                                               // 0x0041   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x0042   (0x0002)  MISSED
};

/// Struct /Script/Engine.ChildActorAttachedActorInfo
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 16 pad: 0x0000
struct FChildActorAttachedActorInfo
{ 
	SDK_UNDEFINED(8,241) /* TWeakObjectPtr<AActor*> */ __um(Actor);                                                // 0x0000   (0x0008)  
	FName                                              SocketName;                                                 // 0x0008   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0014   (0x000C)  MISSED
	FTransform                                         RelativeTransform;                                          // 0x0020   (0x0030)  
};

/// Struct /Script/Engine.ChildActorComponentInstanceData
/// Size: 0x0038 (56 bytes) (0x0000B8 - 0x0000F0) align 8 pad: 0x0000
struct FChildActorComponentInstanceData : FSceneComponentInstanceData
{ 
	class UClass*                                      ChildActorClass;                                            // 0x00B8   (0x0008)  
	FName                                              ChildActorName;                                             // 0x00C0   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00CC   (0x0004)  MISSED
	TArray<FChildActorAttachedActorInfo>               AttachedActors;                                             // 0x00D0   (0x0010)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x00E0   (0x0010)  MISSED
};

/// Struct /Script/Engine.AutoCompleteNode
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FAutoCompleteNode
{ 
	int32_t                                            IndexChar;                                                  // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	TArray<int32_t>                                    AutoCompleteListIndices;                                    // 0x0008   (0x0010)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0018   (0x0010)  MISSED
};

/// Struct /Script/Engine.CustomAttribute
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FCustomAttribute
{ 
	FName                                              Name;                                                       // 0x0000   (0x000C)  
	int32_t                                            VariantType;                                                // 0x000C   (0x0004)  
	TArray<float>                                      Times;                                                      // 0x0010   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0020   (0x0010)  MISSED
};

/// Struct /Script/Engine.CustomAttributePerBoneData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FCustomAttributePerBoneData
{ 
	int32_t                                            BoneTreeIndex;                                              // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	TArray<FCustomAttribute>                           Attributes;                                                 // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.DataTableCategoryHandle
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FDataTableCategoryHandle
{ 
	class UDataTable*                                  DataTable;                                                  // 0x0000   (0x0008)  
	FName                                              ColumnName;                                                 // 0x0008   (0x000C)  
	FName                                              RowContents;                                                // 0x0014   (0x000C)  
};

/// Struct /Script/Engine.DataTableRowHandle
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FDataTableRowHandle
{ 
	class UDataTable*                                  DataTable;                                                  // 0x0000   (0x0008)  
	FName                                              RowName;                                                    // 0x0008   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/Engine.RollbackNetStartupActorInfo
/// Size: 0x00B8 (184 bytes) (0x000000 - 0x0000B8) align 8 pad: 0x0000
struct FRollbackNetStartupActorInfo
{ 
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0000   (0x0010)  MISSED
	class UObject*                                     Archetype;                                                  // 0x0010   (0x0008)  
	unsigned char                                      UnknownData01_6[0x28];                                      // 0x0018   (0x0028)  MISSED
	class ULevel*                                      Level;                                                      // 0x0040   (0x0008)  
	unsigned char                                      UnknownData02_6[0x60];                                      // 0x0048   (0x0060)  MISSED
	TArray<class UObject*>                             ObjReferences;                                              // 0x00A8   (0x0010)  
};

/// Struct /Script/Engine.GraphReference
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FGraphReference
{ 
	class UEdGraph*                                    MacroGraph;                                                 // 0x0000   (0x0008)  
	class UBlueprint*                                  GraphBlueprint;                                             // 0x0008   (0x0008)  
	FGuid                                              GraphGuid;                                                  // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.EdGraphPinReference
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FEdGraphPinReference
{ 
	SDK_UNDEFINED(8,242) /* TWeakObjectPtr<UEdGraphNode*> */ __um(OwningNode);                                     // 0x0000   (0x0008)  
	FGuid                                              PinId;                                                      // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.EdGraphSchemaAction
/// Size: 0x0100 (256 bytes) (0x000000 - 0x000100) align 8 pad: 0x0000
struct FEdGraphSchemaAction
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	FText                                              MenuDescription;                                            // 0x0008   (0x0018)  
	FText                                              TooltipDescription;                                         // 0x0020   (0x0018)  
	FText                                              Category;                                                   // 0x0038   (0x0018)  
	FText                                              Keywords;                                                   // 0x0050   (0x0018)  
	int32_t                                            Grouping;                                                   // 0x0068   (0x0004)  
	int32_t                                            SectionID;                                                  // 0x006C   (0x0004)  
	TArray<FString>                                    MenuDescriptionArray;                                       // 0x0070   (0x0010)  
	TArray<FString>                                    FullSearchTitlesArray;                                      // 0x0080   (0x0010)  
	TArray<FString>                                    FullSearchKeywordsArray;                                    // 0x0090   (0x0010)  
	TArray<FString>                                    FullSearchCategoryArray;                                    // 0x00A0   (0x0010)  
	TArray<FString>                                    LocalizedMenuDescriptionArray;                              // 0x00B0   (0x0010)  
	TArray<FString>                                    LocalizedFullSearchTitlesArray;                             // 0x00C0   (0x0010)  
	TArray<FString>                                    LocalizedFullSearchKeywordsArray;                           // 0x00D0   (0x0010)  
	TArray<FString>                                    LocalizedFullSearchCategoryArray;                           // 0x00E0   (0x0010)  
	FString                                            SearchText;                                                 // 0x00F0   (0x0010)  
};

/// Struct /Script/Engine.EdGraphSchemaAction_NewNode
/// Size: 0x0008 (8 bytes) (0x000100 - 0x000108) align 8 pad: 0x0000
struct FEdGraphSchemaAction_NewNode : FEdGraphSchemaAction
{ 
	class UEdGraphNode*                                NodeTemplate;                                               // 0x0100   (0x0008)  
};

/// Struct /Script/Engine.ScreenMessageString
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FScreenMessageString
{ 
	uint64_t                                           Key;                                                        // 0x0000   (0x0008)  
	FString                                            ScreenMessage;                                              // 0x0008   (0x0010)  
	FColor                                             DisplayColor;                                               // 0x0018   (0x0004)  
	float                                              TimeToDisplay;                                              // 0x001C   (0x0004)  
	float                                              CurrentTimeDisplayed;                                       // 0x0020   (0x0004)  
	FVector2D                                          TextScale;                                                  // 0x0024   (0x0008)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/Engine.URL
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align 8 pad: 0x0000
struct FURL
{ 
	FString                                            Protocol;                                                   // 0x0000   (0x0010)  
	FString                                            Host;                                                       // 0x0010   (0x0010)  
	int32_t                                            Port;                                                       // 0x0020   (0x0004)  
	int32_t                                            Valid;                                                      // 0x0024   (0x0004)  
	FString                                            Map;                                                        // 0x0028   (0x0010)  
	FString                                            RedirectURL;                                                // 0x0038   (0x0010)  
	TArray<FString>                                    Op;                                                         // 0x0048   (0x0010)  
	FString                                            Portal;                                                     // 0x0058   (0x0010)  
};

/// Struct /Script/Engine.FullyLoadedPackagesInfo
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FFullyLoadedPackagesInfo
{ 
	TEnumAsByte<EFullyLoadPackageType>                 FullyLoadType;                                              // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FString                                            Tag;                                                        // 0x0008   (0x0010)  
	TArray<FName>                                      PackagesToLoad;                                             // 0x0018   (0x0010)  
	TArray<class UObject*>                             LoadedObjects;                                              // 0x0028   (0x0010)  
};

/// Struct /Script/Engine.LevelStreamingStatus
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FLevelStreamingStatus
{ 
	FName                                              PackageName;                                                // 0x0000   (0x000C)  
	bool                                               bShouldBeLoaded : 1;                                        // 0x000C:0 (0x0001)  
	bool                                               bShouldBeVisible : 1;                                       // 0x000C:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x000D   (0x0003)  MISSED
	uint32_t                                           LODIndex;                                                   // 0x0010   (0x0004)  
};

/// Struct /Script/Engine.NamedNetDriver
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FNamedNetDriver
{ 
	class UNetDriver*                                  NetDriver;                                                  // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0008   (0x0008)  MISSED
};

/// Struct /Script/Engine.WorldContext
/// Size: 0x0290 (656 bytes) (0x000000 - 0x000290) align 8 pad: 0x0000
struct FWorldContext
{ 
	unsigned char                                      UnknownData00_7[0xD8];                                      // 0x0000   (0x00D8)  MISSED
	FURL                                               LastURL;                                                    // 0x00D8   (0x0068)  
	FURL                                               LastRemoteURL;                                              // 0x0140   (0x0068)  
	class UPendingNetGame*                             PendingNetGame;                                             // 0x01A8   (0x0008)  
	TArray<FFullyLoadedPackagesInfo>                   PackagesToFullyLoad;                                        // 0x01B0   (0x0010)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x01C0   (0x0010)  MISSED
	TArray<class ULevel*>                              LoadedLevelsForPendingMapChange;                            // 0x01D0   (0x0010)  
	unsigned char                                      UnknownData02_6[0x18];                                      // 0x01E0   (0x0018)  MISSED
	TArray<class UObjectReferencer*>                   ObjectReferencers;                                          // 0x01F8   (0x0010)  
	TArray<FLevelStreamingStatus>                      PendingLevelStreamingStatusUpdates;                         // 0x0208   (0x0010)  
	class UGameViewportClient*                         GameViewport;                                               // 0x0218   (0x0008)  
	class UGameInstance*                               OwningGameInstance;                                         // 0x0220   (0x0008)  
	TArray<FNamedNetDriver>                            ActiveNetDrivers;                                           // 0x0228   (0x0010)  
	unsigned char                                      UnknownData03_7[0x58];                                      // 0x0238   (0x0058)  MISSED
};

/// Struct /Script/Engine.ExposureSettings
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FExposureSettings
{ 
	float                                              FixedEV100;                                                 // 0x0000   (0x0004)  
	bool                                               bFixed;                                                     // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Struct /Script/Engine.TickPrerequisite
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FTickPrerequisite
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Engine.CanvasUVTri
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 4 pad: 0x0000
struct FCanvasUVTri
{ 
	FVector2D                                          V0_Pos;                                                     // 0x0000   (0x0008)  
	FVector2D                                          V0_UV;                                                      // 0x0008   (0x0008)  
	FLinearColor                                       V0_Color;                                                   // 0x0010   (0x0010)  
	FVector2D                                          V1_Pos;                                                     // 0x0020   (0x0008)  
	FVector2D                                          V1_UV;                                                      // 0x0028   (0x0008)  
	FLinearColor                                       V1_Color;                                                   // 0x0030   (0x0010)  
	FVector2D                                          V2_Pos;                                                     // 0x0040   (0x0008)  
	FVector2D                                          V2_UV;                                                      // 0x0048   (0x0008)  
	FLinearColor                                       V2_Color;                                                   // 0x0050   (0x0010)  
};

/// Struct /Script/Engine.DepthFieldGlowInfo
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align 4 pad: 0x0000
struct FDepthFieldGlowInfo
{ 
	bool                                               bEnableGlow : 1;                                            // 0x0000:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	FLinearColor                                       GlowColor;                                                  // 0x0004   (0x0010)  
	FVector2D                                          GlowOuterRadius;                                            // 0x0014   (0x0008)  
	FVector2D                                          GlowInnerRadius;                                            // 0x001C   (0x0008)  
};

/// Struct /Script/Engine.FontRenderInfo
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 4 pad: 0x0000
struct FFontRenderInfo
{ 
	bool                                               bClipText : 1;                                              // 0x0000:0 (0x0001)  
	bool                                               bEnableShadow : 1;                                          // 0x0000:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	FDepthFieldGlowInfo                                GlowInfo;                                                   // 0x0004   (0x0024)  
};

/// Struct /Script/Engine.DamageEvent
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FDamageEvent
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	class UClass*                                      DamageTypeClass;                                            // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.RadialDamageParams
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FRadialDamageParams
{ 
	float                                              BaseDamage;                                                 // 0x0000   (0x0004)  
	float                                              MinimumDamage;                                              // 0x0004   (0x0004)  
	float                                              InnerRadius;                                                // 0x0008   (0x0004)  
	float                                              OuterRadius;                                                // 0x000C   (0x0004)  
	float                                              DamageFalloff;                                              // 0x0010   (0x0004)  
};

/// Struct /Script/Engine.RadialDamageEvent
/// Size: 0x0030 (48 bytes) (0x000010 - 0x000040) align 8 pad: 0x0000
struct FRadialDamageEvent : FDamageEvent
{ 
	FRadialDamageParams                                Params;                                                     // 0x0010   (0x0014)  
	FVector                                            Origin;                                                     // 0x0024   (0x000C)  
	TArray<FHitResult>                                 ComponentHits;                                              // 0x0030   (0x0010)  
};

/// Struct /Script/Engine.PointDamageEvent
/// Size: 0x00A8 (168 bytes) (0x000010 - 0x0000B8) align 8 pad: 0x0000
struct FPointDamageEvent : FDamageEvent
{ 
	float                                              Damage;                                                     // 0x0010   (0x0004)  
	FVector_NetQuantizeNormal                          ShotDirection;                                              // 0x0014   (0x000C)  
	FHitResult                                         HitInfo;                                                    // 0x0020   (0x0094)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x00B4   (0x0004)  MISSED
};

/// Struct /Script/Engine.MeshBuildSettings
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FMeshBuildSettings
{ 
	bool                                               bHasKuroUVUnwrap : 1;                                       // 0x0000:0 (0x0001)  
	bool                                               bHasKuroInsideCulling : 1;                                  // 0x0000:1 (0x0001)  
	bool                                               bUseMikkTSpace : 1;                                         // 0x0000:2 (0x0001)  
	bool                                               bRecomputeNormals : 1;                                      // 0x0000:3 (0x0001)  
	bool                                               bRecomputeTangents : 1;                                     // 0x0000:4 (0x0001)  
	bool                                               bComputeWeightedNormals : 1;                                // 0x0000:5 (0x0001)  
	bool                                               bRemoveDegenerates : 1;                                     // 0x0000:6 (0x0001)  
	bool                                               bBuildAdjacencyBuffer : 1;                                  // 0x0000:7 (0x0001)  
	bool                                               bBuildReversedIndexBuffer : 1;                              // 0x0001:0 (0x0001)  
	bool                                               bUseHighPrecisionTangentBasis : 1;                          // 0x0001:1 (0x0001)  
	bool                                               bUseFullPrecisionUVs : 1;                                   // 0x0001:2 (0x0001)  
	bool                                               bGenerateLightmapUVs : 1;                                   // 0x0001:3 (0x0001)  
	bool                                               bGenerateDistanceFieldAsIfTwoSided : 1;                     // 0x0001:4 (0x0001)  
	bool                                               bSupportFaceRemap : 1;                                      // 0x0001:5 (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0002   (0x0002)  MISSED
	int32_t                                            MinLightmapResolution;                                      // 0x0004   (0x0004)  
	int32_t                                            SrcLightmapIndex;                                           // 0x0008   (0x0004)  
	int32_t                                            DstLightmapIndex;                                           // 0x000C   (0x0004)  
	float                                              BuildScale;                                                 // 0x0010   (0x0004)  
	FVector                                            BuildScale3D;                                               // 0x0014   (0x000C)  
	float                                              DistanceFieldResolutionScale;                               // 0x0020   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0024   (0x0004)  MISSED
	class UStaticMesh*                                 DistanceFieldReplacementMesh;                               // 0x0028   (0x0008)  
};

/// Struct /Script/Engine.POV
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FPOV
{ 
	FVector                                            Location;                                                   // 0x0000   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x000C   (0x000C)  
	float                                              FOV;                                                        // 0x0018   (0x0004)  
};

/// Struct /Script/Engine.AnimUpdateRateParameters
/// Size: 0x0098 (152 bytes) (0x000000 - 0x000098) align 8 pad: 0x0000
struct FAnimUpdateRateParameters
{ 
	unsigned char                                      UnknownData00_7[0x1];                                       // 0x0000   (0x0001)  MISSED
	EUpdateRateShiftBucket                             ShiftBucket;                                                // 0x0001   (0x0001)  
	bool                                               bInterpolateSkippedFrames : 1;                              // 0x0002:0 (0x0001)  
	bool                                               bShouldUseLodMap : 1;                                       // 0x0002:1 (0x0001)  
	bool                                               bShouldUseDistanceMap : 1;                                  // 0x0002:2 (0x0001)  
	bool                                               bShouldUseMinLod : 1;                                       // 0x0002:3 (0x0001)  
	bool                                               bSkipUpdate : 1;                                            // 0x0002:4 (0x0001)  
	bool                                               bSkipEvaluation : 1;                                        // 0x0002:5 (0x0001)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x0003   (0x0001)  MISSED
	int32_t                                            UpdateRate;                                                 // 0x0004   (0x0004)  
	int32_t                                            EvaluationRate;                                             // 0x0008   (0x0004)  
	float                                              TickedPoseOffestTime;                                       // 0x000C   (0x0004)  
	float                                              AdditionalTime;                                             // 0x0010   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	int32_t                                            BaseNonRenderedUpdateRate;                                  // 0x0018   (0x0004)  
	int32_t                                            MaxEvalRateForInterpolation;                                // 0x001C   (0x0004)  
	TArray<float>                                      BaseVisibleDistanceFactorThesholds;                         // 0x0020   (0x0010)  
	SDK_UNDEFINED(80,243) /* TMap<int32_t, int32_t> */ __um(LODToFrameSkipMap);                                    // 0x0030   (0x0050)  
	TArray<float>                                      BaseVisibleDistanceThresholds;                              // 0x0080   (0x0010)  
	int32_t                                            SkippedUpdateFrames;                                        // 0x0090   (0x0004)  
	int32_t                                            SkippedEvalFrames;                                          // 0x0094   (0x0004)  
};

/// Struct /Script/Engine.AnimSlotDesc
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FAnimSlotDesc
{ 
	FName                                              SlotName;                                                   // 0x0000   (0x000C)  
	int32_t                                            NumChannels;                                                // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.AnimSlotInfo
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FAnimSlotInfo
{ 
	FName                                              SlotName;                                                   // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	TArray<float>                                      ChannelWeights;                                             // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.MTDResult
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FMTDResult
{ 
	FVector                                            Direction;                                                  // 0x0000   (0x000C)  
	float                                              Distance;                                                   // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.OverlapResult
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FOverlapResult
{ 
	SDK_UNDEFINED(8,244) /* TWeakObjectPtr<AActor*> */ __um(Actor);                                                // 0x0000   (0x0008)  
	SDK_UNDEFINED(8,245) /* TWeakObjectPtr<UPrimitiveComponent*> */ __um(Component);                               // 0x0008   (0x0008)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0010   (0x0004)  MISSED
	bool                                               bBlockingHit : 1;                                           // 0x0014:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0015   (0x0003)  MISSED
};

/// Struct /Script/Engine.SwarmDebugOptions
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FSwarmDebugOptions
{ 
	bool                                               bDistributionEnabled : 1;                                   // 0x0000:0 (0x0001)  
	bool                                               bForceContentExport : 1;                                    // 0x0000:1 (0x0001)  
	bool                                               bInitialized : 1;                                           // 0x0000:2 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0001   (0x0003)  MISSED
};

/// Struct /Script/Engine.LightmassDebugOptions
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FLightmassDebugOptions
{ 
	bool                                               bDebugMode : 1;                                             // 0x0000:0 (0x0001)  
	bool                                               bStatsEnabled : 1;                                          // 0x0000:1 (0x0001)  
	bool                                               bGatherBSPSurfacesAcrossComponents : 1;                     // 0x0000:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              CoplanarTolerance;                                          // 0x0004   (0x0004)  
	bool                                               bUseImmediateImport : 1;                                    // 0x0008:0 (0x0001)  
	bool                                               bImmediateProcessMappings : 1;                              // 0x0008:1 (0x0001)  
	bool                                               bSortMappings : 1;                                          // 0x0008:2 (0x0001)  
	bool                                               bDumpBinaryFiles : 1;                                       // 0x0008:3 (0x0001)  
	bool                                               bDebugMaterials : 1;                                        // 0x0008:4 (0x0001)  
	bool                                               bPadMappings : 1;                                           // 0x0008:5 (0x0001)  
	bool                                               bDebugPaddings : 1;                                         // 0x0008:6 (0x0001)  
	bool                                               bOnlyCalcDebugTexelMappings : 1;                            // 0x0008:7 (0x0001)  
	bool                                               bUseRandomColors : 1;                                       // 0x0009:0 (0x0001)  
	bool                                               bColorBordersGreen : 1;                                     // 0x0009:1 (0x0001)  
	bool                                               bColorByExecutionTime : 1;                                  // 0x0009:2 (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x000A   (0x0002)  MISSED
	float                                              ExecutionTimeDivisor;                                       // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.BasedPosition
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FBasedPosition
{ 
	class AActor*                                      Base;                                                       // 0x0000   (0x0008)  
	FVector                                            Position;                                                   // 0x0008   (0x000C)  
	FVector                                            CachedBaseLocation;                                         // 0x0014   (0x000C)  
	FRotator                                           CachedBaseRotation;                                         // 0x0020   (0x000C)  
	FVector                                            CachedTransPosition;                                        // 0x002C   (0x000C)  
};

/// Struct /Script/Engine.FractureEffect
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FFractureEffect
{ 
	class UParticleSystem*                             ParticleSystem;                                             // 0x0000   (0x0008)  
	class USoundBase*                                  Sound;                                                      // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.RigidBodyContactInfo
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FRigidBodyContactInfo
{ 
	FVector                                            ContactPosition;                                            // 0x0000   (0x000C)  
	FVector                                            ContactNormal;                                              // 0x000C   (0x000C)  
	float                                              ContactPenetration;                                         // 0x0018   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	class UPhysicalMaterial*                           PhysMaterial[2];                                            // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.CollisionImpactData
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FCollisionImpactData
{ 
	TArray<FRigidBodyContactInfo>                      ContactInfos;                                               // 0x0000   (0x0010)  
	FVector                                            TotalNormalImpulse;                                         // 0x0010   (0x000C)  
	FVector                                            TotalFrictionImpulse;                                       // 0x001C   (0x000C)  
	bool                                               bIsVelocityDeltaUnderThreshold;                             // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0029   (0x0007)  MISSED
};

/// Struct /Script/Engine.RigidBodyState
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 16 pad: 0x0000
struct FRigidBodyState
{ 
	FVector_NetQuantize100                             Position;                                                   // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FQuat                                              Quaternion;                                                 // 0x0010   (0x0010)  
	FVector_NetQuantize100                             LinVel;                                                     // 0x0020   (0x000C)  
	FVector_NetQuantize100                             AngVel;                                                     // 0x002C   (0x000C)  
	char                                               Flags;                                                      // 0x0038   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Struct /Script/Engine.ForceFeedbackParameters
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FForceFeedbackParameters
{ 
	FName                                              Tag;                                                        // 0x0000   (0x000C)  
	bool                                               bLooping;                                                   // 0x000C   (0x0001)  
	bool                                               bIgnoreTimeDilation;                                        // 0x000D   (0x0001)  
	bool                                               bPlayWhilePaused;                                           // 0x000E   (0x0001)  
	unsigned char                                      UnknownData00_7[0x1];                                       // 0x000F   (0x0001)  MISSED
};

/// Struct /Script/Engine.PredictProjectilePathPointData
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FPredictProjectilePathPointData
{ 
	FVector                                            Location;                                                   // 0x0000   (0x000C)  
	FVector                                            Velocity;                                                   // 0x000C   (0x000C)  
	float                                              Time;                                                       // 0x0018   (0x0004)  
};

/// Struct /Script/Engine.PredictProjectilePathResult
/// Size: 0x00C0 (192 bytes) (0x000000 - 0x0000C0) align 8 pad: 0x0000
struct FPredictProjectilePathResult
{ 
	TArray<FPredictProjectilePathPointData>            PathData;                                                   // 0x0000   (0x0010)  
	FPredictProjectilePathPointData                    LastTraceDestination;                                       // 0x0010   (0x001C)  
	FHitResult                                         HitResult;                                                  // 0x002C   (0x0094)  
};

/// Struct /Script/Engine.PredictProjectilePathParams
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 pad: 0x0000
struct FPredictProjectilePathParams
{ 
	FVector                                            StartLocation;                                              // 0x0000   (0x000C)  
	FVector                                            LaunchVelocity;                                             // 0x000C   (0x000C)  
	bool                                               bTraceWithCollision;                                        // 0x0018   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0019   (0x0003)  MISSED
	float                                              ProjectileRadius;                                           // 0x001C   (0x0004)  
	float                                              MaxSimTime;                                                 // 0x0020   (0x0004)  
	bool                                               bTraceWithChannel;                                          // 0x0024   (0x0001)  
	TEnumAsByte<ECollisionChannel>                     TraceChannel;                                               // 0x0025   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0026   (0x0002)  MISSED
	SDK_UNDEFINED(16,246) /* TArray<TEnumAsByte<EObjectTypeQuery>> */ __um(ObjectTypes);                           // 0x0028   (0x0010)  
	TArray<class AActor*>                              ActorsToIgnore;                                             // 0x0038   (0x0010)  
	float                                              SimFrequency;                                               // 0x0048   (0x0004)  
	float                                              OverrideGravityZ;                                           // 0x004C   (0x0004)  
	TEnumAsByte<EDrawDebugTrace>                       DrawDebugType;                                              // 0x0050   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0051   (0x0003)  MISSED
	float                                              DrawDebugTime;                                              // 0x0054   (0x0004)  
	bool                                               bTraceComplex;                                              // 0x0058   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0059   (0x0007)  MISSED
};

/// Struct /Script/Engine.ActiveHapticFeedbackEffect
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FActiveHapticFeedbackEffect
{ 
	class UHapticFeedbackEffect_Base*                  HapticEffect;                                               // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0008   (0x0010)  MISSED
};

/// Struct /Script/Engine.ClusterNode
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 4 pad: 0x0000
struct FClusterNode
{ 
	FVector                                            BoundMin;                                                   // 0x0000   (0x000C)  
	int32_t                                            FirstChild;                                                 // 0x000C   (0x0004)  
	FVector                                            BoundMax;                                                   // 0x0010   (0x000C)  
	int32_t                                            LastChild;                                                  // 0x001C   (0x0004)  
	int32_t                                            FirstInstance;                                              // 0x0020   (0x0004)  
	int32_t                                            LastInstance;                                               // 0x0024   (0x0004)  
	FVector                                            MinInstanceScale;                                           // 0x0028   (0x000C)  
	FVector                                            MaxInstanceScale;                                           // 0x0034   (0x000C)  
};

/// Struct /Script/Engine.ClusterNode_DEPRECATED
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 4 pad: 0x0000
struct FClusterNode_DEPRECATED
{ 
	FVector                                            BoundMin;                                                   // 0x0000   (0x000C)  
	int32_t                                            FirstChild;                                                 // 0x000C   (0x0004)  
	FVector                                            BoundMax;                                                   // 0x0010   (0x000C)  
	int32_t                                            LastChild;                                                  // 0x001C   (0x0004)  
	int32_t                                            FirstInstance;                                              // 0x0020   (0x0004)  
	int32_t                                            LastInstance;                                               // 0x0024   (0x0004)  
};

/// Struct /Script/Engine.HLODISMComponentDesc
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FHLODISMComponentDesc
{ 
	class UStaticMesh*                                 StaticMesh;                                                 // 0x0000   (0x0008)  
	class UMaterialInterface*                          Material;                                                   // 0x0008   (0x0008)  
	TArray<FTransform>                                 Instances;                                                  // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.ImportanceTexture
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 pad: 0x0000
struct FImportanceTexture
{ 
	FIntPoint                                          Size;                                                       // 0x0000   (0x0008)  
	int32_t                                            NumMips;                                                    // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	TArray<float>                                      MarginalCDF;                                                // 0x0010   (0x0010)  
	TArray<float>                                      ConditionalCDF;                                             // 0x0020   (0x0010)  
	TArray<FColor>                                     TextureData;                                                // 0x0030   (0x0010)  
	SDK_UNDEFINED(8,247) /* TWeakObjectPtr<UTexture2D*> */ __um(Texture);                                          // 0x0040   (0x0008)  
	TEnumAsByte<EImportanceWeight>                     Weighting;                                                  // 0x0048   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0049   (0x0007)  MISSED
};

/// Struct /Script/Engine.InputClampState
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FInputClampState
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Engine.InputClampConstants
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FInputClampConstants
{ 
	bool                                               bClampResult;                                               // 0x0000   (0x0001)  
	bool                                               bInterpResult;                                              // 0x0001   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0002   (0x0002)  MISSED
	float                                              ClampMin;                                                   // 0x0004   (0x0004)  
	float                                              ClampMax;                                                   // 0x0008   (0x0004)  
	float                                              InterpSpeedIncreasing;                                      // 0x000C   (0x0004)  
	float                                              InterpSpeedDecreasing;                                      // 0x0010   (0x0004)  
};

/// Struct /Script/Engine.InstancedStaticMeshLightMapInstanceData
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 16 pad: 0x0000
struct FInstancedStaticMeshLightMapInstanceData
{ 
	FTransform                                         Transform;                                                  // 0x0000   (0x0030)  
	TArray<FGuid>                                      MapBuildDataIds;                                            // 0x0030   (0x0010)  
};

/// Struct /Script/Engine.InstancedStaticMeshComponentInstanceData
/// Size: 0x0098 (152 bytes) (0x0000B8 - 0x000150) align 16 pad: 0x0000
struct FInstancedStaticMeshComponentInstanceData : FSceneComponentInstanceData
{ 
	class UStaticMesh*                                 StaticMesh;                                                 // 0x00B8   (0x0008)  
	FInstancedStaticMeshLightMapInstanceData           CachedStaticLighting;                                       // 0x00C0   (0x0040)  
	TArray<FInstancedStaticMeshInstanceData>           PerInstanceSMData;                                          // 0x0100   (0x0010)  
	TArray<float>                                      PerInstanceSMCustomData;                                    // 0x0110   (0x0010)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0120   (0x0020)  MISSED
	int32_t                                            InstancingRandomSeed;                                       // 0x0140   (0x0004)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0144   (0x000C)  MISSED
};

/// Struct /Script/Engine.InterpEdSelKey
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FInterpEdSelKey
{ 
	class UInterpGroup*                                Group;                                                      // 0x0000   (0x0008)  
	class UInterpTrack*                                Track;                                                      // 0x0008   (0x0008)  
	int32_t                                            KeyIndex;                                                   // 0x0010   (0x0004)  
	float                                              UnsnappedPosition;                                          // 0x0014   (0x0004)  
};

/// Struct /Script/Engine.CameraPreviewInfo
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FCameraPreviewInfo
{ 
	class UClass*                                      PawnClass;                                                  // 0x0000   (0x0008)  
	class UAnimSequence*                               AnimSeq;                                                    // 0x0008   (0x0008)  
	FVector                                            Location;                                                   // 0x0010   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x001C   (0x000C)  
	class APawn*                                       PawnInst;                                                   // 0x0028   (0x0008)  
};

/// Struct /Script/Engine.SubTrackGroup
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FSubTrackGroup
{ 
	FString                                            GroupName;                                                  // 0x0000   (0x0010)  
	TArray<int32_t>                                    TrackIndices;                                               // 0x0010   (0x0010)  
	bool                                               bIsCollapsed : 1;                                           // 0x0020:0 (0x0001)  
	bool                                               bIsSelected : 1;                                            // 0x0020:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0021   (0x0007)  MISSED
};

/// Struct /Script/Engine.SupportedSubTrackInfo
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FSupportedSubTrackInfo
{ 
	class UClass*                                      SupportedClass;                                             // 0x0000   (0x0008)  
	FString                                            SubTrackName;                                               // 0x0008   (0x0010)  
	int32_t                                            GroupIndex;                                                 // 0x0018   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/Engine.ISMComponentData
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FISMComponentData
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.ISMClientInstance
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FISMClientInstance
{ 
	TArray<int32_t>                                    ComponentIndices;                                           // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.ISMClientData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FISMClientData
{ 
	TArray<FISMClientInstance>                         Instances;                                                  // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.ISMComponentInstance
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FISMComponentInstance
{ 
	int32_t                                            ClientIndex;                                                // 0x0000   (0x0004)  
	int32_t                                            InstanceIndex;                                              // 0x0004   (0x0004)  
	int32_t                                            InstanceSubIndex;                                           // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.ISMComponentDescriptor
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FISMComponentDescriptor
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.ISMClientHandle
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FISMClientHandle
{ 
	int32_t                                            Index;                                                      // 0x0000   (0x0004)  
	FGuid                                              Guid;                                                       // 0x0004   (0x0010)  
};

/// Struct /Script/Engine.VectorSpringState
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FVectorSpringState
{ 
	unsigned char                                      UnknownData00_2[0x18];                                      // 0x0000   (0x0018)  MISSED
};

/// Struct /Script/Engine.FloatSpringState
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FFloatSpringState
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Engine.DrawToRenderTargetContext
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FDrawToRenderTargetContext
{ 
	class UTextureRenderTarget2D*                      RenderTarget;                                               // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0008   (0x0008)  MISSED
};

/// Struct /Script/Engine.KuroFrameStatsCaptureResult
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FKuroFrameStatsCaptureResult
{ 
	FString                                            FrameData;                                                  // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.KuroStaticMeshStreamingLog
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 pad: 0x0000
struct FKuroStaticMeshStreamingLog
{ 
	unsigned char                                      UnknownData00_2[0x60];                                      // 0x0000   (0x0060)  MISSED
};

/// Struct /Script/Engine.KuroStaticMeshStreamingActorInfo
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 pad: 0x0000
struct FKuroStaticMeshStreamingActorInfo
{ 
	unsigned char                                      UnknownData00_2[0x50];                                      // 0x0000   (0x0050)  MISSED
};

/// Struct /Script/Engine.KuroBaseFolderCheckConfig
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FKuroBaseFolderCheckConfig
{ 
	FString                                            Regex;                                                      // 0x0000   (0x0010)  
	int32_t                                            MatchingPriority;                                           // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/Engine.KuroStaticMeshFolderCheckConfig
/// Size: 0x0040 (64 bytes) (0x000018 - 0x000058) align 8 pad: 0x0000
struct FKuroStaticMeshFolderCheckConfig : FKuroBaseFolderCheckConfig
{ 
	TArray<FString>                                    MaterialInstance;                                           // 0x0018   (0x0010)  
	float                                              ScreenSizeCullRatio;                                        // 0x0028   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x002C   (0x0004)  MISSED
	TArray<int32_t>                                    TriangleLimit;                                              // 0x0030   (0x0010)  
	FString                                            CollisionPreset;                                            // 0x0040   (0x0010)  
	bool                                               IsBuildAdjacencyBuffer : 1;                                 // 0x0050:0 (0x0001)  
	bool                                               IsBuildReveresedIndexBuffer : 1;                            // 0x0050:1 (0x0001)  
	bool                                               IsGenerateLightmapUVs : 1;                                  // 0x0050:2 (0x0001)  
	bool                                               IsUseFullPrecisionUVs : 1;                                  // 0x0050:3 (0x0001)  
	bool                                               bCheckTriangle : 1;                                         // 0x0050:4 (0x0001)  
	bool                                               bCheckCollisionPreset : 1;                                  // 0x0050:5 (0x0001)  
	bool                                               AutoCheckForceModify : 1;                                   // 0x0050:6 (0x0001)  
	bool                                               IsCheckScreenSizeCullRatio : 1;                             // 0x0050:7 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0051   (0x0007)  MISSED
};

/// Struct /Script/Engine.KuroTextureFolderCheckConfig
/// Size: 0x0158 (344 bytes) (0x000018 - 0x000170) align 8 pad: 0x0000
struct FKuroTextureFolderCheckConfig : FKuroBaseFolderCheckConfig
{ 
	int32_t                                            SizeX;                                                      // 0x0018   (0x0004)  
	int32_t                                            SizeY;                                                      // 0x001C   (0x0004)  
	int32_t                                            SetSizeX;                                                   // 0x0020   (0x0004)  
	int32_t                                            SetSizeY;                                                   // 0x0024   (0x0004)  
	int32_t                                            MinSizeX;                                                   // 0x0028   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x002C   (0x0004)  MISSED
	TArray<FString>                                    Format;                                                     // 0x0030   (0x0010)  
	FString                                            CompressionQuality;                                         // 0x0040   (0x0010)  
	FString                                            AddressingMode;                                             // 0x0050   (0x0010)  
	FString                                            MipLoadOptions;                                             // 0x0060   (0x0010)  
	FString                                            TextureGroup;                                               // 0x0070   (0x0010)  
	TArray<FString>                                    TextureGroups;                                              // 0x0080   (0x0010)  
	TArray<FString>                                    MipGenSetting;                                              // 0x0090   (0x0010)  
	TArray<float>                                      AlphaCoverageThresholds;                                    // 0x00A0   (0x0010)  
	TArray<FString>                                    DownScalePlatform;                                          // 0x00B0   (0x0010)  
	TArray<float>                                      DownScaleValue;                                             // 0x00C0   (0x0010)  
	TArray<float>                                      DownDefaultScaleValue;                                      // 0x00D0   (0x0010)  
	TArray<int32_t>                                    RuntimeLODBias;                                             // 0x00E0   (0x0010)  
	bool                                               IsOnlyCheckSize : 1;                                        // 0x00F0:0 (0x0001)  
	bool                                               IsPowerOfTwo : 1;                                           // 0x00F0:1 (0x0001)  
	bool                                               NeverStreaming : 1;                                         // 0x00F0:2 (0x0001)  
	bool                                               IsCheckAddressingMode : 1;                                  // 0x00F0:3 (0x0001)  
	bool                                               IsSRGB : 1;                                                 // 0x00F0:4 (0x0001)  
	bool                                               AutoCheckForceModify : 1;                                   // 0x00F0:5 (0x0001)  
	bool                                               IsForceKeepMipsData : 1;                                    // 0x00F0:6 (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x00F1   (0x0007)  MISSED
	SDK_UNDEFINED(80,248) /* TMap<FString, float> */   __um(DownScale);                                            // 0x00F8   (0x0050)  
	int32_t                                            TextureUsageCheckMode;                                      // 0x0148   (0x0004)  
	float                                              TextureUsageThreshold;                                      // 0x014C   (0x0004)  
	TArray<float>                                      AdjustmentsMin;                                             // 0x0150   (0x0010)  
	TArray<float>                                      AdjustmentsMax;                                             // 0x0160   (0x0010)  
};

/// Struct /Script/Engine.KuroSkeletalMeshFolderCheckConfig
/// Size: 0x0168 (360 bytes) (0x000018 - 0x000180) align 8 pad: 0x0000
struct FKuroSkeletalMeshFolderCheckConfig : FKuroBaseFolderCheckConfig
{ 
	TArray<FString>                                    NormalImportMethod;                                         // 0x0018   (0x0010)  
	FString                                            NumCoordsCheckCondition;                                    // 0x0028   (0x0010)  
	TArray<FString>                                    SlotNameList;                                               // 0x0038   (0x0010)  
	TArray<FString>                                    SlotNameMatchMat;                                           // 0x0048   (0x0010)  
	TArray<FString>                                    SocketString;                                               // 0x0058   (0x0010)  
	TArray<FString>                                    SlotNameRegex;                                              // 0x0068   (0x0010)  
	TArray<int32_t>                                    Triangles;                                                  // 0x0078   (0x0010)  
	float                                              LodDownRate;                                                // 0x0088   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x008C   (0x0004)  MISSED
	TArray<float>                                      AdjoinLODPrimGapLimit;                                      // 0x0090   (0x0010)  
	TArray<float>                                      AdjoinLODPrimMaxGapLimit;                                   // 0x00A0   (0x0010)  
	float                                              TextureNum;                                                 // 0x00B0   (0x0004)  
	float                                              TextureNumMobile;                                           // 0x00B4   (0x0004)  
	int32_t                                            Bones;                                                      // 0x00B8   (0x0004)  
	char                                               Section;                                                    // 0x00BC   (0x0001)  
	char                                               MinLodNums;                                                 // 0x00BD   (0x0001)  
	char                                               MaxLodNums;                                                 // 0x00BE   (0x0001)  
	char                                               NumCoords;                                                  // 0x00BF   (0x0001)  
	bool                                               ImportMorphTargets : 1;                                     // 0x00C0:0 (0x0001)  
	bool                                               IsNeedLODSetting : 1;                                       // 0x00C0:1 (0x0001)  
	int8_t                                             UseLODDistance;                                             // 0x00C1   (0x0001)  
	bool                                               IsNeedBound : 1;                                            // 0x00C2:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x5];                                       // 0x00C3   (0x0005)  MISSED
	SDK_UNDEFINED(80,249) /* TMap<FString, FString> */ __um(SlotNameMatMap);                                       // 0x00C8   (0x0050)  
	TArray<FString>                                    PlatformSetting;                                            // 0x0118   (0x0010)  
	TArray<int32_t>                                    PlatformMinLod;                                             // 0x0128   (0x0010)  
	TArray<float>                                      ScreenSizePC;                                               // 0x0138   (0x0010)  
	TArray<float>                                      ScreenSizeMobile;                                           // 0x0148   (0x0010)  
	TArray<FString>                                    SamplingRegionsName;                                        // 0x0158   (0x0010)  
	float                                              ScreenSizeCullRatio;                                        // 0x0168   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x016C   (0x0004)  MISSED
	TArray<FString>                                    BoneNameRegex;                                              // 0x0170   (0x0010)  
};

/// Struct /Script/Engine.KuroMaterialInstFolderCheckConfig
/// Size: 0x0060 (96 bytes) (0x000018 - 0x000078) align 8 pad: 0x0000
struct FKuroMaterialInstFolderCheckConfig : FKuroBaseFolderCheckConfig
{ 
	int32_t                                            ShaderVariant;                                              // 0x0018   (0x0004)  
	int32_t                                            PixelInstruction;                                           // 0x001C   (0x0004)  
	int32_t                                            VertexInstruction;                                          // 0x0020   (0x0004)  
	char                                               TextureSample;                                              // 0x0024   (0x0001)  
	char                                               TextureNum;                                                 // 0x0025   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0026   (0x0002)  MISSED
	TArray<FString>                                    TextureRefFolder;                                           // 0x0028   (0x0010)  
	TArray<FString>                                    ShaderRefFolder;                                            // 0x0038   (0x0010)  
	TArray<FString>                                    AppointMaterialParent;                                      // 0x0048   (0x0010)  
	TArray<FString>                                    AppointTexParamName;                                        // 0x0058   (0x0010)  
	TArray<FString>                                    AppointTexPath;                                             // 0x0068   (0x0010)  
};

/// Struct /Script/Engine.KuroFoliageTypeFolderCheckConfig
/// Size: 0x0060 (96 bytes) (0x000018 - 0x000078) align 8 pad: 0x0000
struct FKuroFoliageTypeFolderCheckConfig : FKuroBaseFolderCheckConfig
{ 
	TArray<FString>                                    StaticMeshRefFolder;                                        // 0x0018   (0x0010)  
	float                                              DensityLowDefault;                                          // 0x0028   (0x0004)  
	float                                              DensityMidDefault;                                          // 0x002C   (0x0004)  
	float                                              DensityHighDefault;                                         // 0x0030   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0034   (0x0004)  MISSED
	TArray<FString>                                    PlatformSetting;                                            // 0x0038   (0x0010)  
	TArray<float>                                      PlatformDensityLow;                                         // 0x0048   (0x0010)  
	TArray<float>                                      PlatformDensityMid;                                         // 0x0058   (0x0010)  
	TArray<float>                                      PlatformDensityHigh;                                        // 0x0068   (0x0010)  
};

/// Struct /Script/Engine.KuroEffectModelNiagaraFolderCheckConfig
/// Size: 0x0000 (0 bytes) (0x000018 - 0x000018) align 8 pad: 0x0000
struct FKuroEffectModelNiagaraFolderCheckConfig : FKuroBaseFolderCheckConfig
{ 
};

/// Struct /Script/Engine.KuroEffectModelBaseFolderCheckConfig
/// Size: 0x0020 (32 bytes) (0x000018 - 0x000038) align 8 pad: 0x0000
struct FKuroEffectModelBaseFolderCheckConfig : FKuroBaseFolderCheckConfig
{ 
	bool                                               bUiScenePrimitive : 1;                                      // 0x0018:0 (0x0001)  
	bool                                               bAutoPlay : 1;                                              // 0x0018:1 (0x0001)  
	bool                                               bAutoDestroy : 1;                                           // 0x0018:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0019   (0x0003)  MISSED
	int32_t                                            PCTriangles;                                                // 0x001C   (0x0004)  
	float                                              PCTexNums;                                                  // 0x0020   (0x0004)  
	int32_t                                            MobileTriangles;                                            // 0x0024   (0x0004)  
	float                                              MobileTexNums;                                              // 0x0028   (0x0004)  
	int32_t                                            PCMipsNums;                                                 // 0x002C   (0x0004)  
	int32_t                                            MobileMipsNums;                                             // 0x0030   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Struct /Script/Engine.KuroEffectModelGroupFolderCheckConfig
/// Size: 0x0000 (0 bytes) (0x000018 - 0x000018) align 8 pad: 0x0000
struct FKuroEffectModelGroupFolderCheckConfig : FKuroBaseFolderCheckConfig
{ 
};

/// Struct /Script/Engine.KuroNPCSetupDataFolderCheckConfig
/// Size: 0x0040 (64 bytes) (0x000018 - 0x000058) align 8 pad: 0x0000
struct FKuroNPCSetupDataFolderCheckConfig : FKuroBaseFolderCheckConfig
{ 
	FString                                            SkelMainSuffix;                                             // 0x0018   (0x0010)  
	FString                                            SkelHairSuffix;                                             // 0x0028   (0x0010)  
	FString                                            SkelFaceSuffix;                                             // 0x0038   (0x0010)  
	FString                                            SkelBodySuffix;                                             // 0x0048   (0x0010)  
};

/// Struct /Script/Engine.KuroSkeletonFolderCheckConfig
/// Size: 0x0008 (8 bytes) (0x000018 - 0x000020) align 8 pad: 0x0000
struct FKuroSkeletonFolderCheckConfig : FKuroBaseFolderCheckConfig
{ 
	bool                                               UpdateAnimationSeq;                                         // 0x0018   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0019   (0x0007)  MISSED
};

/// Struct /Script/Engine.KuroNiagaraFolderCheckConfig
/// Size: 0x0000 (0 bytes) (0x000018 - 0x000018) align 8 pad: 0x0000
struct FKuroNiagaraFolderCheckConfig : FKuroBaseFolderCheckConfig
{ 
};

/// Struct /Script/Engine.KuroPoseAssetFolderCheckConfig
/// Size: 0x0008 (8 bytes) (0x000018 - 0x000020) align 8 pad: 0x0000
struct FKuroPoseAssetFolderCheckConfig : FKuroBaseFolderCheckConfig
{ 
	bool                                               IsAdditive : 1;                                             // 0x0018:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0019   (0x0007)  MISSED
};

/// Struct /Script/Engine.KuroAnimSequenceFolderCheckConfig
/// Size: 0x0008 (8 bytes) (0x000018 - 0x000020) align 8 pad: 0x0000
struct FKuroAnimSequenceFolderCheckConfig : FKuroBaseFolderCheckConfig
{ 
	float                                              MaxFrameRate;                                               // 0x0018   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/Engine.KuroLevelFolderCheckConfig
/// Size: 0x0008 (8 bytes) (0x000018 - 0x000020) align 8 pad: 0x0000
struct FKuroLevelFolderCheckConfig : FKuroBaseFolderCheckConfig
{ 
	bool                                               bCheckLevelActor;                                           // 0x0018   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0019   (0x0007)  MISSED
};

/// Struct /Script/Engine.KuroCommonTypeFolderCheckConfig
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FKuroCommonTypeFolderCheckConfig
{ 
	FString                                            ClassName;                                                  // 0x0000   (0x0010)  
	TArray<FString>                                    Regexes;                                                    // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.KuroResourceFolderCheckConfig
/// Size: 0x0178 (376 bytes) (0x000000 - 0x000178) align 8 pad: 0x0000
struct FKuroResourceFolderCheckConfig
{ 
	FString                                            Regex;                                                      // 0x0000   (0x0010)  
	TArray<FKuroStaticMeshFolderCheckConfig>           StaticMeshConfig;                                           // 0x0010   (0x0010)  
	TArray<FKuroTextureFolderCheckConfig>              TextureConfig;                                              // 0x0020   (0x0010)  
	TArray<FKuroSkeletalMeshFolderCheckConfig>         SkeletalMeshConfig;                                         // 0x0030   (0x0010)  
	TArray<FKuroMaterialInstFolderCheckConfig>         MaterialInstanceConfig;                                     // 0x0040   (0x0010)  
	TArray<FKuroFoliageTypeFolderCheckConfig>          FoliageTypeConfig;                                          // 0x0050   (0x0010)  
	TArray<FKuroEffectModelNiagaraFolderCheckConfig>   EffectModelNiagaraConfig;                                   // 0x0060   (0x0010)  
	TArray<FKuroEffectModelBaseFolderCheckConfig>      EffectModelBaseConfig;                                      // 0x0070   (0x0010)  
	TArray<FKuroEffectModelGroupFolderCheckConfig>     EffectModelGroupConfig;                                     // 0x0080   (0x0010)  
	TArray<FKuroNPCSetupDataFolderCheckConfig>         NpcSetupDataConfig;                                         // 0x0090   (0x0010)  
	TArray<FKuroSkeletonFolderCheckConfig>             SkeletonConfig;                                             // 0x00A0   (0x0010)  
	TArray<FKuroNiagaraFolderCheckConfig>              NiagaraConfig;                                              // 0x00B0   (0x0010)  
	TArray<FKuroPoseAssetFolderCheckConfig>            PoseAssetConfig;                                            // 0x00C0   (0x0010)  
	TArray<FKuroAnimSequenceFolderCheckConfig>         AnimSequenceConfig;                                         // 0x00D0   (0x0010)  
	TArray<FKuroLevelFolderCheckConfig>                LevelConfig;                                                // 0x00E0   (0x0010)  
	FString                                            SpriteRegex;                                                // 0x00F0   (0x0010)  
	FString                                            LGUIPrefabRegex;                                            // 0x0100   (0x0010)  
	bool                                               IsTexImportCheckFailDelete;                                 // 0x0110   (0x0001)  
	bool                                               IsAutoCheckXls;                                             // 0x0111   (0x0001)  
	bool                                               IsAutoCheckFolder;                                          // 0x0112   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0113   (0x0001)  MISSED
	int32_t                                            ObsoleteDays;                                               // 0x0114   (0x0004)  
	TArray<FKuroCommonTypeFolderCheckConfig>           CommonTypeConfig;                                           // 0x0118   (0x0010)  
	TArray<FString>                                    StaticMeshNameTagRegex;                                     // 0x0128   (0x0010)  
	TArray<FString>                                    MatNameTagRegex;                                            // 0x0138   (0x0010)  
	TArray<FString>                                    TexNameTagRegex;                                            // 0x0148   (0x0010)  
	TArray<FString>                                    SkipFolder;                                                 // 0x0158   (0x0010)  
	TArray<FString>                                    SkipCheckNameFolder;                                        // 0x0168   (0x0010)  
};

/// Struct /Script/Engine.KuroResourceFolderCheckConfigArray
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FKuroResourceFolderCheckConfigArray
{ 
	TArray<FKuroResourceFolderCheckConfig>             AllFolderCheckConfig;                                       // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.KuroMaterialDetailCheckData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FKuroMaterialDetailCheckData
{ 
	FString                                            mat_path;                                                   // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.KuroFoliageDetailCheckData
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FKuroFoliageDetailCheckData
{ 
	FString                                            foliage_path;                                               // 0x0000   (0x0010)  
	FString                                            foliage_model_path;                                         // 0x0010   (0x0010)  
	FString                                            foliage_show_distance_type;                                 // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.KuroModelTypeDetailCheckData
/// Size: 0x0190 (400 bytes) (0x000000 - 0x000190) align 8 pad: 0x0000
struct FKuroModelTypeDetailCheckData
{ 
	FString                                            type_name;                                                  // 0x0000   (0x0010)  
	FString                                            parent_type_name;                                           // 0x0010   (0x0010)  
	TArray<int32_t>                                    lod_prim_limit;                                             // 0x0020   (0x0010)  
	TArray<float>                                      adjoin_lod_prim_gap_limit;                                  // 0x0030   (0x0010)  
	TArray<float>                                      adjoin_lod_prim_gap_max_limit;                              // 0x0040   (0x0010)  
	int32_t                                            hlod_prim_limit;                                            // 0x0050   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0054   (0x0004)  MISSED
	FString                                            streaming_grid;                                             // 0x0058   (0x0010)  
	int32_t                                            bound_box_length;                                           // 0x0068   (0x0004)  
	int32_t                                            bound_box_min_length;                                       // 0x006C   (0x0004)  
	int32_t                                            collision_prim_limit;                                       // 0x0070   (0x0004)  
	float                                              max_sacle;                                                  // 0x0074   (0x0004)  
	float                                              min_scale;                                                  // 0x0078   (0x0004)  
	float                                              scale_max_allowed_difference;                               // 0x007C   (0x0004)  
	float                                              screen_size_cull_ratio;                                     // 0x0080   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0084   (0x0004)  MISSED
	TArray<FString>                                    platform_setting;                                           // 0x0088   (0x0010)  
	TArray<int32_t>                                    platform_min_lod;                                           // 0x0098   (0x0010)  
	float                                              extended_bound_sphere_radius;                               // 0x00A8   (0x0004)  
	float                                              screen_size_gradient;                                       // 0x00AC   (0x0004)  
	int8_t                                             use_kuro_lod_distance;                                      // 0x00B0   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x00B1   (0x0007)  MISSED
	TArray<float>                                      screen_size_pc;                                             // 0x00B8   (0x0010)  
	TArray<float>                                      screen_size_pc_min;                                         // 0x00C8   (0x0010)  
	TArray<float>                                      screen_size_mobile;                                         // 0x00D8   (0x0010)  
	TArray<float>                                      screen_size_mobile_min;                                     // 0x00E8   (0x0010)  
	float                                              screen_size_cross_border_down_rate;                         // 0x00F8   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x00FC   (0x0004)  MISSED
	TArray<float>                                      kuro_lod_distance_pc;                                       // 0x0100   (0x0010)  
	TArray<float>                                      kuro_lod_distance_pc_max;                                   // 0x0110   (0x0010)  
	TArray<float>                                      kuro_lod_distance_mobile;                                   // 0x0120   (0x0010)  
	TArray<float>                                      kuro_lod_distance_mobile_max;                               // 0x0130   (0x0010)  
	float                                              kuro_lod_distance_cross_border_scale_rate;                  // 0x0140   (0x0004)  
	float                                              instance_count_score;                                       // 0x0144   (0x0004)  
	float                                              instance_type_count_score;                                  // 0x0148   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x014C   (0x0004)  MISSED
	TArray<FString>                                    Tags;                                                       // 0x0150   (0x0010)  
	TArray<FString>                                    lod_mat_path;                                               // 0x0160   (0x0010)  
	float                                              texture_count;                                              // 0x0170   (0x0004)  
	float                                              texture_count_mobile;                                       // 0x0174   (0x0004)  
	TArray<char>                                       part_count;                                                 // 0x0178   (0x0010)  
	char                                               uv_count;                                                   // 0x0188   (0x0001)  
	char                                               lod_mat_num;                                                // 0x0189   (0x0001)  
	bool                                               is_open_far_shadow : 1;                                     // 0x018A:0 (0x0001)  
	unsigned char                                      UnknownData05_7[0x5];                                       // 0x018B   (0x0005)  MISSED
};

/// Struct /Script/Engine.KuroModelDetailCheckData
/// Size: 0x01E8 (488 bytes) (0x000000 - 0x0001E8) align 8 pad: 0x0000
struct FKuroModelDetailCheckData
{ 
	FString                                            model_path;                                                 // 0x0000   (0x0010)  
	FKuroModelTypeDetailCheckData                      model_type_detail;                                          // 0x0010   (0x0190)  
	FString                                            ucx_type;                                                   // 0x01A0   (0x0010)  
	FString                                            collision_complexity;                                       // 0x01B0   (0x0010)  
	FString                                            phy_mat;                                                    // 0x01C0   (0x0010)  
	FString                                            can_character_step_up_on;                                   // 0x01D0   (0x0010)  
	bool                                               is_need_occlusion_mesh;                                     // 0x01E0   (0x0001)  
	bool                                               is_selective_cook;                                          // 0x01E1   (0x0001)  
	bool                                               is_use_imposter;                                            // 0x01E2   (0x0001)  
	bool                                               is_character_can_stand_on;                                  // 0x01E3   (0x0001)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x01E4   (0x0004)  MISSED
};

/// Struct /Script/Engine.KuroPrefabDetailCheckData
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FKuroPrefabDetailCheckData
{ 
	FString                                            prefab_path;                                                // 0x0000   (0x0010)  
	TArray<FString>                                    prefab_model_path;                                          // 0x0010   (0x0010)  
	FString                                            PrefabModelPathString;                                      // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.KuroTextureDetailCheckData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FKuroTextureDetailCheckData
{ 
	FString                                            tex_path;                                                   // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.KuroOcclusionDetailCheckData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FKuroOcclusionDetailCheckData
{ 
	FString                                            occlusion_mesh_path;                                        // 0x0000   (0x0010)  
	FString                                            OcclusionModelPath;                                         // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.KuroResourceDetailCheckData
/// Size: 0x02A0 (672 bytes) (0x000000 - 0x0002A0) align 8 pad: 0x0000
struct FKuroResourceDetailCheckData
{ 
	TArray<FKuroMaterialDetailCheckData>               Material;                                                   // 0x0000   (0x0010)  
	TArray<FKuroFoliageDetailCheckData>                Foliage;                                                    // 0x0010   (0x0010)  
	TArray<FKuroModelDetailCheckData>                  Model;                                                      // 0x0020   (0x0010)  
	TArray<FKuroPrefabDetailCheckData>                 Prefab;                                                     // 0x0030   (0x0010)  
	TArray<FKuroTextureDetailCheckData>                Texture;                                                    // 0x0040   (0x0010)  
	TArray<FKuroOcclusionDetailCheckData>              Occlusion;                                                  // 0x0050   (0x0010)  
	TArray<FString>                                    DetailCheckFolder;                                          // 0x0060   (0x0010)  
	SDK_UNDEFINED(80,250) /* TMap<FString, FKuroMaterialDetailCheckData> */ __um(MaterialDetailCheckDataMap);      // 0x0070   (0x0050)  
	SDK_UNDEFINED(80,251) /* TMap<FString, FKuroFoliageDetailCheckData> */ __um(FoliageDetailCheckDataMap);        // 0x00C0   (0x0050)  
	SDK_UNDEFINED(80,252) /* TMap<FString, FKuroModelDetailCheckData> */ __um(ModelDetailCheckDataMap);            // 0x0110   (0x0050)  
	SDK_UNDEFINED(80,253) /* TMap<FString, FKuroPrefabDetailCheckData> */ __um(PrefabDetailCheckDataMap);          // 0x0160   (0x0050)  
	SDK_UNDEFINED(80,254) /* TMap<FString, FKuroTextureDetailCheckData> */ __um(TextureDetailCheckDataMap);        // 0x01B0   (0x0050)  
	SDK_UNDEFINED(80,255) /* TMap<FString, FKuroOcclusionDetailCheckData> */ __um(OcclusionDetailCheckDataMap);    // 0x0200   (0x0050)  
	SDK_UNDEFINED(80,256) /* TMap<FString, FKuroOcclusionDetailCheckData> */ __um(OcclusionDetailRecordCheckDataMap); // 0x0250   (0x0050)  
};

/// Struct /Script/Engine.KuroNiagaraDetailCheckData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FKuroNiagaraDetailCheckData
{ 
	FString                                            niagara_path;                                               // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.LatentActionManager
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 pad: 0x0000
struct FLatentActionManager
{ 
	unsigned char                                      UnknownData00_2[0x60];                                      // 0x0000   (0x0060)  MISSED
};

/// Struct /Script/Engine.LevelSimplificationDetails
/// Size: 0x012C (300 bytes) (0x000000 - 0x00012C) align 4 pad: 0x0000
struct FLevelSimplificationDetails
{ 
	bool                                               bCreatePackagePerAsset;                                     // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              DetailsPercentage;                                          // 0x0004   (0x0004)  
	FMaterialProxySettings                             StaticMeshMaterialSettings;                                 // 0x0008   (0x0088)  
	bool                                               bOverrideLandscapeExportLOD;                                // 0x0090   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0091   (0x0003)  MISSED
	int32_t                                            LandscapeExportLOD;                                         // 0x0094   (0x0004)  
	FMaterialProxySettings                             LandscapeMaterialSettings;                                  // 0x0098   (0x0088)  
	bool                                               bBakeFoliageToLandscape;                                    // 0x0120   (0x0001)  
	bool                                               bBakeGrassToLandscape;                                      // 0x0121   (0x0001)  
	bool                                               bGenerateMeshNormalMap;                                     // 0x0122   (0x0001)  
	bool                                               bGenerateMeshMetallicMap;                                   // 0x0123   (0x0001)  
	bool                                               bGenerateMeshRoughnessMap;                                  // 0x0124   (0x0001)  
	bool                                               bGenerateMeshSpecularMap;                                   // 0x0125   (0x0001)  
	bool                                               bGenerateLandscapeNormalMap;                                // 0x0126   (0x0001)  
	bool                                               bGenerateLandscapeMetallicMap;                              // 0x0127   (0x0001)  
	bool                                               bGenerateLandscapeRoughnessMap;                             // 0x0128   (0x0001)  
	bool                                               bGenerateLandscapeSpecularMap;                              // 0x0129   (0x0001)  
	unsigned char                                      UnknownData02_7[0x2];                                       // 0x012A   (0x0002)  MISSED
};

/// Struct /Script/Engine.StreamableTextureInstance
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 4 pad: 0x0000
struct FStreamableTextureInstance
{ 
	unsigned char                                      UnknownData00_2[0x28];                                      // 0x0000   (0x0028)  MISSED
};

/// Struct /Script/Engine.DynamicTextureInstance
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
struct FDynamicTextureInstance : FStreamableTextureInstance
{ 
	class UTexture2D*                                  Texture;                                                    // 0x0028   (0x0008)  
	bool                                               bAttached;                                                  // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	float                                              OriginalRadius;                                             // 0x0034   (0x0004)  
};

/// Struct /Script/Engine.NewLevelInstanceParams
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FNewLevelInstanceParams
{ 
	ELevelInstanceCreationType                         Type;                                                       // 0x0000   (0x0001)  
	bool                                               bExternalActors;                                            // 0x0001   (0x0001)  
	ELevelInstancePivotType                            PivotType;                                                  // 0x0002   (0x0001)  
	unsigned char                                      UnknownData00_6[0x5];                                       // 0x0003   (0x0005)  MISSED
	class AActor*                                      PivotActor;                                                 // 0x0008   (0x0008)  
	class UWorld*                                      TemplateWorld;                                              // 0x0010   (0x0008)  
	FString                                            LevelPackageName;                                           // 0x0018   (0x0010)  
	bool                                               bPromptForSave;                                             // 0x0028   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0029   (0x0007)  MISSED
};

/// Struct /Script/Engine.PrecomputedLightInstanceData
/// Size: 0x0058 (88 bytes) (0x0000B8 - 0x000110) align 16 pad: 0x0000
struct FPrecomputedLightInstanceData : FSceneComponentInstanceData
{ 
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00B8   (0x0008)  MISSED
	FTransform                                         Transform;                                                  // 0x00C0   (0x0030)  
	FGuid                                              LightGuid;                                                  // 0x00F0   (0x0010)  
	int32_t                                            PreviewShadowMapChannel;                                    // 0x0100   (0x0004)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0104   (0x000C)  MISSED
};

/// Struct /Script/Engine.BatchedPoint
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 4 pad: 0x0000
struct FBatchedPoint
{ 
	FVector                                            Position;                                                   // 0x0000   (0x000C)  
	FLinearColor                                       Color;                                                      // 0x000C   (0x0010)  
	float                                              PointSize;                                                  // 0x001C   (0x0004)  
	float                                              RemainingLifeTime;                                          // 0x0020   (0x0004)  
	char                                               DepthPriority;                                              // 0x0024   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0025   (0x0003)  MISSED
};

/// Struct /Script/Engine.BatchedLine
/// Size: 0x0034 (52 bytes) (0x000000 - 0x000034) align 4 pad: 0x0000
struct FBatchedLine
{ 
	FVector                                            Start;                                                      // 0x0000   (0x000C)  
	FVector                                            End;                                                        // 0x000C   (0x000C)  
	FLinearColor                                       Color;                                                      // 0x0018   (0x0010)  
	float                                              Thickness;                                                  // 0x0028   (0x0004)  
	float                                              RemainingLifeTime;                                          // 0x002C   (0x0004)  
	char                                               DepthPriority;                                              // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0031   (0x0003)  MISSED
};

/// Struct /Script/Engine.ClientReceiveData
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 pad: 0x0000
struct FClientReceiveData
{ 
	class APlayerController*                           LocalPC;                                                    // 0x0000   (0x0008)  
	FName                                              MessageType;                                                // 0x0008   (0x000C)  
	int32_t                                            MessageIndex;                                               // 0x0014   (0x0004)  
	FString                                            MessageString;                                              // 0x0018   (0x0010)  
	class APlayerState*                                RelatedPlayerState;                                         // 0x0028   (0x0008)  
	class APlayerState*                                RelatedPlayerState0;                                        // 0x0030   (0x0008)  
	class UObject*                                     OptionalObject;                                             // 0x0038   (0x0008)  
};

/// Struct /Script/Engine.HLODInstancingKey
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FHLODInstancingKey
{ 
	class UStaticMesh*                                 StaticMesh;                                                 // 0x0000   (0x0008)  
	class UMaterialInterface*                          Material;                                                   // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.LODMappingData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FLODMappingData
{ 
	TArray<int32_t>                                    Mapping;                                                    // 0x0000   (0x0010)  
	TArray<int32_t>                                    InverseMapping;                                             // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.ParameterGroupData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FParameterGroupData
{ 
	FString                                            GroupName;                                                  // 0x0000   (0x0010)  
	int32_t                                            GroupSortPriority;                                          // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/Engine.StaticComponentMaskValue
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 1 pad: 0x0000
struct FStaticComponentMaskValue
{ 
	bool                                               R;                                                          // 0x0000   (0x0001)  
	bool                                               G;                                                          // 0x0001   (0x0001)  
	bool                                               B;                                                          // 0x0002   (0x0001)  
	bool                                               A;                                                          // 0x0003   (0x0001)  
};

/// Struct /Script/Engine.ParameterChannelNames
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 pad: 0x0000
struct FParameterChannelNames
{ 
	FText                                              R;                                                          // 0x0000   (0x0018)  
	FText                                              G;                                                          // 0x0018   (0x0018)  
	FText                                              B;                                                          // 0x0030   (0x0018)  
	FText                                              A;                                                          // 0x0048   (0x0018)  
};

/// Struct /Script/Engine.FunctionExpressionOutput
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FFunctionExpressionOutput
{ 
	class UMaterialExpressionFunctionOutput*           ExpressionOutput;                                           // 0x0000   (0x0008)  
	FGuid                                              ExpressionOutputId;                                         // 0x0008   (0x0010)  
	FExpressionOutput                                  Output;                                                     // 0x0018   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Struct /Script/Engine.FunctionExpressionInput
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FFunctionExpressionInput
{ 
	class UMaterialExpressionFunctionInput*            ExpressionInput;                                            // 0x0000   (0x0008)  
	FGuid                                              ExpressionInputId;                                          // 0x0008   (0x0010)  
	FExpressionInput                                   Input;                                                      // 0x0018   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0028   (0x0010)  MISSED
};

/// Struct /Script/Engine.ScalarParameterAtlasInstanceData
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align 8 pad: 0x0000
struct FScalarParameterAtlasInstanceData
{ 
	bool                                               bIsUsedAsAtlasPosition;                                     // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	SDK_UNDEFINED(48,257) /* TWeakObjectPtr<UCurveLinearColor*> */ __um(Curve);                                    // 0x0008   (0x0030)  
	SDK_UNDEFINED(48,258) /* TWeakObjectPtr<UCurveLinearColorAtlas*> */ __um(Atlas);                               // 0x0038   (0x0030)  
};

/// Struct /Script/Engine.MemberReference
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FMemberReference
{ 
	class UObject*                                     MemberParent;                                               // 0x0000   (0x0008)  
	FString                                            MemberScope;                                                // 0x0008   (0x0010)  
	FName                                              MemberName;                                                 // 0x0018   (0x000C)  
	FGuid                                              MemberGuid;                                                 // 0x0024   (0x0010)  
	bool                                               bSelfContext;                                               // 0x0034   (0x0001)  
	bool                                               bWasDeprecated;                                             // 0x0035   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x0036   (0x0002)  MISSED
};

/// Struct /Script/Engine.MeshInstancingSettings
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FMeshInstancingSettings
{ 
	class UClass*                                      ActorClassToUse;                                            // 0x0000   (0x0008)  
	int32_t                                            InstanceReplacementThreshold;                               // 0x0008   (0x0004)  
	EMeshInstancingReplacementMethod                   MeshReplacementMethod;                                      // 0x000C   (0x0001)  
	bool                                               bSkipMeshesWithVertexColors;                                // 0x000D   (0x0001)  
	bool                                               bUseHLODVolumes;                                            // 0x000E   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x000F   (0x0001)  MISSED
	class UClass*                                      ISMComponentToUse;                                          // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.MeshReductionSettings
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align 4 pad: 0x0000
struct FMeshReductionSettings
{ 
	float                                              PercentTriangles;                                           // 0x0000   (0x0004)  
	float                                              PercentVertices;                                            // 0x0004   (0x0004)  
	float                                              MaxDeviation;                                               // 0x0008   (0x0004)  
	float                                              PixelError;                                                 // 0x000C   (0x0004)  
	float                                              WeldingThreshold;                                           // 0x0010   (0x0004)  
	float                                              HardAngleThreshold;                                         // 0x0014   (0x0004)  
	int32_t                                            BaseLODModel;                                               // 0x0018   (0x0004)  
	TEnumAsByte<EMeshFeatureImportance>                SilhouetteImportance;                                       // 0x001C   (0x0001)  
	TEnumAsByte<EMeshFeatureImportance>                TextureImportance;                                          // 0x001D   (0x0001)  
	TEnumAsByte<EMeshFeatureImportance>                ShadingImportance;                                          // 0x001E   (0x0001)  
	bool                                               bRecalculateNormals : 1;                                    // 0x001F:0 (0x0001)  
	bool                                               bGenerateUniqueLightmapUVs : 1;                             // 0x001F:1 (0x0001)  
	bool                                               bKeepSymmetry : 1;                                          // 0x001F:2 (0x0001)  
	bool                                               bVisibilityAided : 1;                                       // 0x001F:3 (0x0001)  
	bool                                               bCullOccluded : 1;                                          // 0x001F:4 (0x0001)  
	bool                                               bProtectProfile : 1;                                        // 0x001F:5 (0x0001)  
	bool                                               bAlreadyProtectProfile : 1;                                 // 0x001F:6 (0x0001)  
	bool                                               bInsideCulling : 1;                                         // 0x001F:7 (0x0001)  
	bool                                               bUVUnwrap : 1;                                              // 0x0020:0 (0x0001)  
	EStaticMeshReductionTerimationCriterion            TerminationCriterion;                                       // 0x0021   (0x0001)  
	TEnumAsByte<EMeshFeatureImportance>                VisibilityAggressiveness;                                   // 0x0022   (0x0001)  
	TEnumAsByte<EMeshFeatureImportance>                VertexColorImportance;                                      // 0x0023   (0x0001)  
};

/// Struct /Script/Engine.NameCurveKey
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FNameCurveKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	FName                                              Value;                                                      // 0x0004   (0x000C)  
};

/// Struct /Script/Engine.NameCurve
/// Size: 0x0010 (16 bytes) (0x000068 - 0x000078) align 8 pad: 0x0000
struct FNameCurve : FIndexedCurve
{ 
	TArray<FNameCurveKey>                              Keys;                                                       // 0x0068   (0x0010)  
};

/// Struct /Script/Engine.NavDataConfig
/// Size: 0x0058 (88 bytes) (0x000038 - 0x000090) align 8 pad: 0x0000
struct FNavDataConfig : FNavAgentProperties
{ 
	FName                                              Name;                                                       // 0x0038   (0x000C)  
	FColor                                             Color;                                                      // 0x0044   (0x0004)  
	FVector                                            DefaultQueryExtent;                                         // 0x0048   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0054   (0x0004)  MISSED
	class UClass*                                      NavigationDataClass;                                        // 0x0058   (0x0008)  
	SDK_UNDEFINED(48,259) /* TWeakObjectPtr<UClass*> */ __um(NavDataClass);                                        // 0x0060   (0x0030)  
};

/// Struct /Script/Engine.PacketSimulationSettings
/// Size: 0x0034 (52 bytes) (0x000000 - 0x000034) align 4 pad: 0x0000
struct FPacketSimulationSettings
{ 
	int32_t                                            PktLoss;                                                    // 0x0000   (0x0004)  
	int32_t                                            PktLossMaxSize;                                             // 0x0004   (0x0004)  
	int32_t                                            PktLossMinSize;                                             // 0x0008   (0x0004)  
	int32_t                                            PktOrder;                                                   // 0x000C   (0x0004)  
	int32_t                                            PktDup;                                                     // 0x0010   (0x0004)  
	int32_t                                            PktLag;                                                     // 0x0014   (0x0004)  
	int32_t                                            PktLagVariance;                                             // 0x0018   (0x0004)  
	int32_t                                            PktLagMin;                                                  // 0x001C   (0x0004)  
	int32_t                                            PktLagMax;                                                  // 0x0020   (0x0004)  
	int32_t                                            PktIncomingLagMin;                                          // 0x0024   (0x0004)  
	int32_t                                            PktIncomingLagMax;                                          // 0x0028   (0x0004)  
	int32_t                                            PktIncomingLoss;                                            // 0x002C   (0x0004)  
	int32_t                                            PktJitter;                                                  // 0x0030   (0x0004)  
};

/// Struct /Script/Engine.NodeItem
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 16 pad: 0x0000
struct FNodeItem
{ 
	FName                                              ParentName;                                                 // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FTransform                                         Transform;                                                  // 0x0010   (0x0030)  
};

/// Struct /Script/Engine.ParticleCurvePair
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FParticleCurvePair
{ 
	FString                                            CurveName;                                                  // 0x0000   (0x0010)  
	class UObject*                                     CurveObject;                                                // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.BeamTargetData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FBeamTargetData
{ 
	FName                                              TargetName;                                                 // 0x0000   (0x000C)  
	float                                              TargetPercentage;                                           // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.ParticleSystemWorldManagerTickFunction
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
struct FParticleSystemWorldManagerTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.ParticleSystemReplayFrame
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FParticleSystemReplayFrame
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Engine.ParticleEmitterReplayFrame
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FParticleEmitterReplayFrame
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Engine.FreezablePerPlatformInt
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FFreezablePerPlatformInt
{ 
	unsigned char                                      UnknownData00_2[0x4];                                       // 0x0000   (0x0004)  MISSED
};

/// Struct /Script/Engine.PSOConverterConfigShaderTypeFilter
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FPSOConverterConfigShaderTypeFilter
{ 
	FString                                            ShaderTypeRegex;                                            // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.PSOGeneratorConfigCollector
/// Size: 0x0080 (128 bytes) (0x000000 - 0x000080) align 8 pad: 0x0000
struct FPSOGeneratorConfigCollector
{ 
	TArray<FString>                                    Materials;                                                  // 0x0000   (0x0010)  
	TArray<FString>                                    VertexFactories;                                            // 0x0010   (0x0010)  
	TArray<FString>                                    Pipelines;                                                  // 0x0020   (0x0010)  
	unsigned char                                      UnknownData00_7[0x50];                                      // 0x0030   (0x0050)  MISSED
};

/// Struct /Script/Engine.PSOGeneratorConfigPipeline
/// Size: 0x00B8 (184 bytes) (0x000000 - 0x0000B8) align 8 pad: 0x0000
struct FPSOGeneratorConfigPipeline
{ 
	SDK_UNDEFINED(80,260) /* TMap<FString, FPSOGeneratorConfigVariable> */ __um(Variables);                        // 0x0000   (0x0050)  
	TArray<FString>                                    Shaders;                                                    // 0x0050   (0x0010)  
	TArray<FString>                                    VertexInputs;                                               // 0x0060   (0x0010)  
	TArray<FString>                                    BlendStates;                                                // 0x0070   (0x0010)  
	TArray<FString>                                    RasterizerStates;                                           // 0x0080   (0x0010)  
	TArray<FString>                                    DepthStencilStates;                                         // 0x0090   (0x0010)  
	TArray<FString>                                    RenderTargets;                                              // 0x00A0   (0x0010)  
	char                                               SubpassHint;                                                // 0x00B0   (0x0001)  
	char                                               SubpassIndex;                                               // 0x00B1   (0x0001)  
	TEnumAsByte<EPSOGeneratorPrimitiveType>            PrimitiveType;                                              // 0x00B2   (0x0001)  
	unsigned char                                      UnknownData00_7[0x5];                                       // 0x00B3   (0x0005)  MISSED
};

/// Struct /Script/Engine.PSOGeneratorConfigVariable
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FPSOGeneratorConfigVariable
{ 
	TArray<FString>                                    Values;                                                     // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.PSOGeneratorConfigSingleRenderTarget
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FPSOGeneratorConfigSingleRenderTarget
{ 
	TEnumAsByte<EPSOGeneratorPixelFormat>              Format;                                                     // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	uint32_t                                           Flags;                                                      // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.PSOGeneratorConfigRenderTarget
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FPSOGeneratorConfigRenderTarget
{ 
	TArray<FPSOGeneratorConfigSingleRenderTarget>      ColorTargets;                                               // 0x0000   (0x0010)  
	FPSOGeneratorConfigSingleRenderTarget              DepthStencilTarget;                                         // 0x0010   (0x0008)  
	TEnumAsByte<EPSOGeneratorRenderTargetLoadAction>   DepthLoad;                                                  // 0x0018   (0x0001)  
	TEnumAsByte<EPSOGeneratorRenderTargetLoadAction>   StencilLoad;                                                // 0x0019   (0x0001)  
	TEnumAsByte<EPSOGeneratorRenderTargetStoreAction>  DepthStore;                                                 // 0x001A   (0x0001)  
	TEnumAsByte<EPSOGeneratorRenderTargetStoreAction>  StencilStore;                                               // 0x001B   (0x0001)  
	int32_t                                            MSAASamples;                                                // 0x001C   (0x0004)  
};

/// Struct /Script/Engine.PSOGeneratorConfigDepthStencilState
/// Size: 0x000E (14 bytes) (0x000000 - 0x00000E) align 1 pad: 0x0000
struct FPSOGeneratorConfigDepthStencilState
{ 
	bool                                               bEnableDepthWrite;                                          // 0x0000   (0x0001)  
	TEnumAsByte<EPSOGeneratorCompareFunction>          DepthTest;                                                  // 0x0001   (0x0001)  
	bool                                               bEnableFrontFaceStencil;                                    // 0x0002   (0x0001)  
	TEnumAsByte<EPSOGeneratorCompareFunction>          FrontFaceStencilTest;                                       // 0x0003   (0x0001)  
	TEnumAsByte<EPSOGeneratorStencilOp>                FrontFaceStencilFailStencilOp;                              // 0x0004   (0x0001)  
	TEnumAsByte<EPSOGeneratorStencilOp>                FrontFaceDepthFailStencilOp;                                // 0x0005   (0x0001)  
	TEnumAsByte<EPSOGeneratorStencilOp>                FrontFacePassStencilOp;                                     // 0x0006   (0x0001)  
	bool                                               bEnableBackFaceStencil;                                     // 0x0007   (0x0001)  
	TEnumAsByte<EPSOGeneratorCompareFunction>          BackFaceStencilTest;                                        // 0x0008   (0x0001)  
	TEnumAsByte<EPSOGeneratorStencilOp>                BackFaceStencilFailStencilOp;                               // 0x0009   (0x0001)  
	TEnumAsByte<EPSOGeneratorStencilOp>                BackFaceDepthFailStencilOp;                                 // 0x000A   (0x0001)  
	TEnumAsByte<EPSOGeneratorStencilOp>                BackFacePassStencilOp;                                      // 0x000B   (0x0001)  
	char                                               StencilReadMask;                                            // 0x000C   (0x0001)  
	char                                               StencilWriteMask;                                           // 0x000D   (0x0001)  
};

/// Struct /Script/Engine.PSOGeneratorConfigRasterizerState
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FPSOGeneratorConfigRasterizerState
{ 
	float                                              DepthBias;                                                  // 0x0000   (0x0004)  
	float                                              SlopeScaleDepthBias;                                        // 0x0004   (0x0004)  
	TEnumAsByte<EPSOGeneratorRasterizerFillMode>       FillMode;                                                   // 0x0008   (0x0001)  
	TEnumAsByte<EPSOGeneratorRasterizerCullMode>       CullMode;                                                   // 0x0009   (0x0001)  
	bool                                               bAllowMSAA;                                                 // 0x000A   (0x0001)  
	bool                                               bEnableLineAA;                                              // 0x000B   (0x0001)  
};

/// Struct /Script/Engine.PSOGeneratorConfigBlendStateTarget
/// Size: 0x0007 (7 bytes) (0x000000 - 0x000007) align 1 pad: 0x0000
struct FPSOGeneratorConfigBlendStateTarget
{ 
	TEnumAsByte<EPSOGeneratorBlendOperation>           ColorBlendOp;                                               // 0x0000   (0x0001)  
	TEnumAsByte<EPSOGeneratorBlendFactor>              ColorSrcBlend;                                              // 0x0001   (0x0001)  
	TEnumAsByte<EPSOGeneratorBlendFactor>              ColorDestBlend;                                             // 0x0002   (0x0001)  
	TEnumAsByte<EPSOGeneratorBlendOperation>           AlphaBlendOp;                                               // 0x0003   (0x0001)  
	TEnumAsByte<EPSOGeneratorBlendFactor>              AlphaSrcBlend;                                              // 0x0004   (0x0001)  
	TEnumAsByte<EPSOGeneratorBlendFactor>              AlphaDestBlend;                                             // 0x0005   (0x0001)  
	TEnumAsByte<EPSOGeneratorColorWriteMask>           ColorWriteMask;                                             // 0x0006   (0x0001)  
};

/// Struct /Script/Engine.PSOGeneratorConfigBlendState
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FPSOGeneratorConfigBlendState
{ 
	TArray<FPSOGeneratorConfigBlendStateTarget>        Targets;                                                    // 0x0000   (0x0010)  
	bool                                               bUseIndependentRenderTargetBlendStates;                     // 0x0010   (0x0001)  
	bool                                               bUseAlphaToCoverage;                                        // 0x0011   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x0012   (0x0006)  MISSED
};

/// Struct /Script/Engine.PSOGeneratorConfigVertexInputElement
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FPSOGeneratorConfigVertexInputElement
{ 
	FString                                            Name;                                                       // 0x0000   (0x0010)  
	char                                               StreamIndex;                                                // 0x0010   (0x0001)  
	char                                               Offset;                                                     // 0x0011   (0x0001)  
	TEnumAsByte<EPSOGeneratorVertexElementType>        Type;                                                       // 0x0012   (0x0001)  
	char                                               AttributeIndex;                                             // 0x0013   (0x0001)  
	uint16_t                                           Stride;                                                     // 0x0014   (0x0002)  
	uint16_t                                           bUseInstanceIndex;                                          // 0x0016   (0x0002)  
};

/// Struct /Script/Engine.PSOGeneratorConfigVertexInput
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FPSOGeneratorConfigVertexInput
{ 
	TArray<FPSOGeneratorConfigVertexInputElement>      Elements;                                                   // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.PSOGeneratorConfigShaderPermutation
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FPSOGeneratorConfigShaderPermutation
{ 
	FString                                            PermutationName;                                            // 0x0000   (0x0010)  
	TArray<FString>                                    PermutationValues;                                          // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.PSOGeneratorConfigSingleShader
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FPSOGeneratorConfigSingleShader
{ 
	FString                                            ShaderName;                                                 // 0x0000   (0x0010)  
	FString                                            ShaderClass;                                                // 0x0010   (0x0010)  
	TArray<FPSOGeneratorConfigShaderPermutation>       Permutations;                                               // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.PSOGeneratorConfigShader
/// Size: 0x0120 (288 bytes) (0x000000 - 0x000120) align 8 pad: 0x0000
struct FPSOGeneratorConfigShader
{ 
	FPSOGeneratorConfigSingleShader                    VertexShader;                                               // 0x0000   (0x0030)  
	FPSOGeneratorConfigSingleShader                    FragmentShader;                                             // 0x0030   (0x0030)  
	FPSOGeneratorConfigSingleShader                    GeometryShader;                                             // 0x0060   (0x0030)  
	FPSOGeneratorConfigSingleShader                    HullShader;                                                 // 0x0090   (0x0030)  
	FPSOGeneratorConfigSingleShader                    DomainShader;                                               // 0x00C0   (0x0030)  
	FPSOGeneratorConfigSingleShader                    ComputeShader;                                              // 0x00F0   (0x0030)  
};

/// Struct /Script/Engine.ViewTargetTransitionParams
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FViewTargetTransitionParams
{ 
	float                                              BlendTime;                                                  // 0x0000   (0x0004)  
	TEnumAsByte<EViewTargetBlendFunction>              BlendFunction;                                              // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0005   (0x0003)  MISSED
	float                                              BlendExp;                                                   // 0x0008   (0x0004)  
	bool                                               bLockOutgoing : 1;                                          // 0x000C:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x000D   (0x0003)  MISSED
	bool                                               bKuroEnableBlend;                                           // 0x0010   (0x0001)  
	unsigned char                                      UnknownData02_7[0x3];                                       // 0x0011   (0x0003)  MISSED
};

/// Struct /Script/Engine.UpdateLevelStreamingLevelStatus
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FUpdateLevelStreamingLevelStatus
{ 
	FName                                              PackageName;                                                // 0x0000   (0x000C)  
	int32_t                                            LODIndex;                                                   // 0x000C   (0x0004)  
	bool                                               bNewShouldBeLoaded : 1;                                     // 0x0010:0 (0x0001)  
	bool                                               bNewShouldBeVisible : 1;                                    // 0x0010:1 (0x0001)  
	bool                                               bNewShouldBlockOnLoad : 1;                                  // 0x0010:2 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0011   (0x0003)  MISSED
};

/// Struct /Script/Engine.PlayerMuteList
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FPlayerMuteList
{ 
	unsigned char                                      UnknownData00_7[0x30];                                      // 0x0000   (0x0030)  MISSED
	bool                                               bHasVoiceHandshakeCompleted;                                // 0x0030   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	int32_t                                            VoiceChannelIdx;                                            // 0x0034   (0x0004)  
};

/// Struct /Script/Engine.PreviewAttachedObjectPair
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align 8 pad: 0x0000
struct FPreviewAttachedObjectPair
{ 
	SDK_UNDEFINED(48,261) /* TWeakObjectPtr<UObject*> */ __um(AttachedObject);                                     // 0x0000   (0x0030)  
	class UObject*                                     Object;                                                     // 0x0030   (0x0008)  
	FName                                              AttachedTo;                                                 // 0x0038   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/Engine.PreviewAssetAttachContainer
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FPreviewAssetAttachContainer
{ 
	TArray<FPreviewAttachedObjectPair>                 AttachedObjects;                                            // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.PrimitiveComponentInstanceData
/// Size: 0x0048 (72 bytes) (0x0000B8 - 0x000100) align 16 pad: 0x0000
struct FPrimitiveComponentInstanceData : FSceneComponentInstanceData
{ 
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00B8   (0x0008)  MISSED
	FTransform                                         ComponentTransform;                                         // 0x00C0   (0x0030)  
	int32_t                                            VisibilityId;                                               // 0x00F0   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00F4   (0x0004)  MISSED
	class UPrimitiveComponent*                         LODParent;                                                  // 0x00F8   (0x0008)  
};

/// Struct /Script/Engine.SpriteCategoryInfo
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 pad: 0x0000
struct FSpriteCategoryInfo
{ 
	FName                                              Category;                                                   // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FText                                              DisplayName;                                                // 0x0010   (0x0018)  
	FText                                              Description;                                                // 0x0028   (0x0018)  
};

/// Struct /Script/Engine.QuartzPulseOverrideStep
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FQuartzPulseOverrideStep
{ 
	int32_t                                            NumberOfPulses;                                             // 0x0000   (0x0004)  
	EQuartzCommandQuantization                         PulseDuration;                                              // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Struct /Script/Engine.QuartzTimeSignature
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FQuartzTimeSignature
{ 
	int32_t                                            NumBeats;                                                   // 0x0000   (0x0004)  
	EQuartzTimeSignatureQuantization                   BeatType;                                                   // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0005   (0x0003)  MISSED
	TArray<FQuartzPulseOverrideStep>                   OptionalPulseOverride;                                      // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.QuartzClockSettings
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FQuartzClockSettings
{ 
	FQuartzTimeSignature                               TimeSignature;                                              // 0x0000   (0x0018)  
	bool                                               bIgnoreLevelChange;                                         // 0x0018   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0019   (0x0007)  MISSED
};

/// Struct /Script/Engine.QuartzQuantizationBoundary
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FQuartzQuantizationBoundary
{ 
	EQuartzCommandQuantization                         Quantization;                                               // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              Multiplier;                                                 // 0x0004   (0x0004)  
	EQuarztQuantizationReference                       CountingReferencePoint;                                     // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/Engine.QuartzTransportTimeStamp
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FQuartzTransportTimeStamp
{ 
	unsigned char                                      UnknownData00_2[0xC];                                       // 0x0000   (0x000C)  MISSED
};

/// Struct /Script/Engine.RBFDataList
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FRBFDataList
{ 
	TArray<float>                                      Data;                                                       // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.RBFPrecomputation
/// Size: 0x0098 (152 bytes) (0x000000 - 0x000098) align 8 pad: 0x0000
struct FRBFPrecomputation
{ 
	float                                              RotationLimitX;                                             // 0x0000   (0x0004)  
	float                                              RotationLimitY;                                             // 0x0004   (0x0004)  
	float                                              RotationLimitZ;                                             // 0x0008   (0x0004)  
	float                                              interval;                                                   // 0x000C   (0x0004)  
	TArray<FRBFDataList>                               PreWeights;                                                 // 0x0010   (0x0010)  
	float                                              PrecomputeRadius;                                           // 0x0020   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0024   (0x0004)  MISSED
	TArray<float>                                      LookupAngleXY;                                              // 0x0028   (0x0010)  
	TArray<float>                                      LookupAngleZ;                                               // 0x0038   (0x0010)  
	SDK_UNDEFINED(80,262) /* TMap<FRBFLookupIndex, int32_t> */ __um(WeightLookupTable);                            // 0x0048   (0x0050)  
};

/// Struct /Script/Engine.RBFLookupIndex
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FRBFLookupIndex
{ 
	int32_t                                            IndexXY;                                                    // 0x0000   (0x0004)  
	int32_t                                            IndexZ;                                                     // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.LevelNameAndTime
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FLevelNameAndTime
{ 
	FString                                            LevelName;                                                  // 0x0000   (0x0010)  
	uint32_t                                           LevelChangeTimeInMS;                                        // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/Engine.CompressedRichCurve
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FCompressedRichCurve
{ 
	unsigned char                                      UnknownData00_2[0x18];                                      // 0x0000   (0x0018)  MISSED
};

/// Struct /Script/Engine.RootMotionSourceStatus
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FRootMotionSourceStatus
{ 
	char                                               Flags;                                                      // 0x0000   (0x0001)  
};

/// Struct /Script/Engine.RootMotionFinishVelocitySettings
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FRootMotionFinishVelocitySettings
{ 
	ERootMotionFinishVelocityMode                      Mode;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FVector                                            SetVelocity;                                                // 0x0004   (0x000C)  
	float                                              ClampVelocity;                                              // 0x0010   (0x0004)  
};

/// Struct /Script/Engine.RootMotionSource
/// Size: 0x00A0 (160 bytes) (0x000000 - 0x0000A0) align 16 pad: 0x0008
#pragma pack(push, 0x1)
struct FRootMotionSource
{ 
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0000   (0x0010)  MISSED
	uint16_t                                           Priority;                                                   // 0x0010   (0x0002)  
	uint16_t                                           LocalID;                                                    // 0x0012   (0x0002)  
	ERootMotionAccumulateMode                          AccumulateMode;                                             // 0x0014   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	FName                                              InstanceName;                                               // 0x0018   (0x000C)  
	float                                              StartTime;                                                  // 0x0024   (0x0004)  
	float                                              CurrentTime;                                                // 0x0028   (0x0004)  
	float                                              PreviousTime;                                               // 0x002C   (0x0004)  
	float                                              Duration;                                                   // 0x0030   (0x0004)  
	FRootMotionSourceStatus                            Status;                                                     // 0x0034   (0x0001)  
	FRootMotionSourceSettings                          Settings;                                                   // 0x0035   (0x0001)  
	bool                                               bInLocalSpace;                                              // 0x0036   (0x0001)  
	unsigned char                                      UnknownData02_6[0x9];                                       // 0x0037   (0x0009)  MISSED
	FRootMotionMovementParams                          RootMotionParams;                                           // 0x0040   (0x0040)  
	FRootMotionFinishVelocitySettings                  FinishVelocityParams;                                       // 0x0080   (0x0014)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x0094   (0x0004)  MISSED
};
#pragma pack(pop)

/// Struct /Script/Engine.RootMotionSource_JumpForce
/// Size: 0x0038 (56 bytes) (0x000098 - 0x0000D0) align 16 pad: 0x0000
struct FRootMotionSource_JumpForce : FRootMotionSource
{ 
	FRotator                                           Rotation;                                                   // 0x0098   (0x000C)  
	float                                              Distance;                                                   // 0x00A4   (0x0004)  
	float                                              Height;                                                     // 0x00A8   (0x0004)  
	bool                                               bDisableTimeout;                                            // 0x00AC   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x00AD   (0x0003)  MISSED
	class UCurveVector*                                PathOffsetCurve;                                            // 0x00B0   (0x0008)  
	class UCurveFloat*                                 TimeMappingCurve;                                           // 0x00B8   (0x0008)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x00C0   (0x0010)  MISSED
};

/// Struct /Script/Engine.RootMotionSource_MoveToDynamicForce
/// Size: 0x0038 (56 bytes) (0x000098 - 0x0000D0) align 16 pad: 0x0000
struct FRootMotionSource_MoveToDynamicForce : FRootMotionSource
{ 
	FVector                                            StartLocation;                                              // 0x0098   (0x000C)  
	FVector                                            InitialTargetLocation;                                      // 0x00A4   (0x000C)  
	FVector                                            TargetLocation;                                             // 0x00B0   (0x000C)  
	bool                                               bRestrictSpeedToExpected;                                   // 0x00BC   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x00BD   (0x0003)  MISSED
	class UCurveVector*                                PathOffsetCurve;                                            // 0x00C0   (0x0008)  
	class UCurveFloat*                                 TimeMappingCurve;                                           // 0x00C8   (0x0008)  
};

/// Struct /Script/Engine.RootMotionSource_MoveToForce
/// Size: 0x0028 (40 bytes) (0x000098 - 0x0000C0) align 16 pad: 0x0000
struct FRootMotionSource_MoveToForce : FRootMotionSource
{ 
	FVector                                            StartLocation;                                              // 0x0098   (0x000C)  
	FVector                                            TargetLocation;                                             // 0x00A4   (0x000C)  
	bool                                               bRestrictSpeedToExpected;                                   // 0x00B0   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x00B1   (0x0007)  MISSED
	class UCurveVector*                                PathOffsetCurve;                                            // 0x00B8   (0x0008)  
};

/// Struct /Script/Engine.RootMotionSource_RadialForce
/// Size: 0x0048 (72 bytes) (0x000098 - 0x0000E0) align 16 pad: 0x0000
struct FRootMotionSource_RadialForce : FRootMotionSource
{ 
	FVector                                            Location;                                                   // 0x0098   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00A4   (0x0004)  MISSED
	class AActor*                                      LocationActor;                                              // 0x00A8   (0x0008)  
	float                                              Radius;                                                     // 0x00B0   (0x0004)  
	float                                              Strength;                                                   // 0x00B4   (0x0004)  
	bool                                               bIsPush;                                                    // 0x00B8   (0x0001)  
	bool                                               bNoZForce;                                                  // 0x00B9   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x00BA   (0x0006)  MISSED
	class UCurveFloat*                                 StrengthDistanceFalloff;                                    // 0x00C0   (0x0008)  
	class UCurveFloat*                                 StrengthOverTime;                                           // 0x00C8   (0x0008)  
	bool                                               bUseFixedWorldDirection;                                    // 0x00D0   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x00D1   (0x0003)  MISSED
	FRotator                                           FixedWorldDirection;                                        // 0x00D4   (0x000C)  
};

/// Struct /Script/Engine.RootMotionSource_ConstantForce
/// Size: 0x0018 (24 bytes) (0x000098 - 0x0000B0) align 16 pad: 0x0000
struct FRootMotionSource_ConstantForce : FRootMotionSource
{ 
	FVector                                            Force;                                                      // 0x0098   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00A4   (0x0004)  MISSED
	class UCurveFloat*                                 StrengthOverTime;                                           // 0x00A8   (0x0008)  
};

/// Struct /Script/Engine.CameraExposureSettings
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 pad: 0x0000
struct FCameraExposureSettings
{ 
	TEnumAsByte<EAutoExposureMethod>                   method;                                                     // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              LowPercent;                                                 // 0x0004   (0x0004)  
	float                                              HighPercent;                                                // 0x0008   (0x0004)  
	float                                              MinBrightness;                                              // 0x000C   (0x0004)  
	float                                              MaxBrightness;                                              // 0x0010   (0x0004)  
	float                                              SpeedUp;                                                    // 0x0014   (0x0004)  
	float                                              SpeedDown;                                                  // 0x0018   (0x0004)  
	float                                              Bias;                                                       // 0x001C   (0x0004)  
	class UCurveFloat*                                 BiasCurve;                                                  // 0x0020   (0x0008)  
	class UTexture*                                    MeterMask;                                                  // 0x0028   (0x0008)  
	float                                              HistogramLogMin;                                            // 0x0030   (0x0004)  
	float                                              HistogramLogMax;                                            // 0x0034   (0x0004)  
	float                                              CalibrationConstant;                                        // 0x0038   (0x0004)  
	bool                                               ApplyPhysicalCameraExposure : 1;                            // 0x003C:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x003D   (0x0003)  MISSED
};

/// Struct /Script/Engine.GaussianSumBloomSettings
/// Size: 0x0084 (132 bytes) (0x000000 - 0x000084) align 4 pad: 0x0000
struct FGaussianSumBloomSettings
{ 
	float                                              Intensity;                                                  // 0x0000   (0x0004)  
	float                                              Threshold;                                                  // 0x0004   (0x0004)  
	float                                              SizeScale;                                                  // 0x0008   (0x0004)  
	float                                              Filter1Size;                                                // 0x000C   (0x0004)  
	float                                              Filter2Size;                                                // 0x0010   (0x0004)  
	float                                              Filter3Size;                                                // 0x0014   (0x0004)  
	float                                              Filter4Size;                                                // 0x0018   (0x0004)  
	float                                              Filter5Size;                                                // 0x001C   (0x0004)  
	float                                              Filter6Size;                                                // 0x0020   (0x0004)  
	FLinearColor                                       Filter1Tint;                                                // 0x0024   (0x0010)  
	FLinearColor                                       Filter2Tint;                                                // 0x0034   (0x0010)  
	FLinearColor                                       Filter3Tint;                                                // 0x0044   (0x0010)  
	FLinearColor                                       Filter4Tint;                                                // 0x0054   (0x0010)  
	FLinearColor                                       Filter5Tint;                                                // 0x0064   (0x0010)  
	FLinearColor                                       Filter6Tint;                                                // 0x0074   (0x0010)  
};

/// Struct /Script/Engine.ConvolutionBloomSettings
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FConvolutionBloomSettings
{ 
	class UTexture2D*                                  Texture;                                                    // 0x0000   (0x0008)  
	float                                              Size;                                                       // 0x0008   (0x0004)  
	FVector2D                                          CenterUV;                                                   // 0x000C   (0x0008)  
	float                                              PreFilterMin;                                               // 0x0014   (0x0004)  
	float                                              PreFilterMax;                                               // 0x0018   (0x0004)  
	float                                              PreFilterMult;                                              // 0x001C   (0x0004)  
	float                                              BufferScale;                                                // 0x0020   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Struct /Script/Engine.LensBloomSettings
/// Size: 0x00B8 (184 bytes) (0x000000 - 0x0000B8) align 8 pad: 0x0000
struct FLensBloomSettings
{ 
	FGaussianSumBloomSettings                          GaussianSum;                                                // 0x0000   (0x0084)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0084   (0x0004)  MISSED
	FConvolutionBloomSettings                          Convolution;                                                // 0x0088   (0x0028)  
	TEnumAsByte<EBloomMethod>                          method;                                                     // 0x00B0   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x00B1   (0x0007)  MISSED
};

/// Struct /Script/Engine.LensImperfectionSettings
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FLensImperfectionSettings
{ 
	class UTexture*                                    DirtMask;                                                   // 0x0000   (0x0008)  
	float                                              DirtMaskIntensity;                                          // 0x0008   (0x0004)  
	FLinearColor                                       DirtMaskTint;                                               // 0x000C   (0x0010)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/Engine.LensSettings
/// Size: 0x00E0 (224 bytes) (0x000000 - 0x0000E0) align 8 pad: 0x0000
struct FLensSettings
{ 
	FLensBloomSettings                                 Bloom;                                                      // 0x0000   (0x00B8)  
	FLensImperfectionSettings                          Imperfections;                                              // 0x00B8   (0x0020)  
	float                                              ChromaticAberration;                                        // 0x00D8   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x00DC   (0x0004)  MISSED
};

/// Struct /Script/Engine.FilmStockSettings
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FFilmStockSettings
{ 
	float                                              Slope;                                                      // 0x0000   (0x0004)  
	float                                              Toe;                                                        // 0x0004   (0x0004)  
	float                                              Shoulder;                                                   // 0x0008   (0x0004)  
	float                                              BlackClip;                                                  // 0x000C   (0x0004)  
	float                                              WhiteClip;                                                  // 0x0010   (0x0004)  
};

/// Struct /Script/Engine.ColorGradePerRangeSettings
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 16 pad: 0x0000
struct FColorGradePerRangeSettings
{ 
	FVector4                                           Saturation;                                                 // 0x0000   (0x0010)  
	FVector4                                           Contrast;                                                   // 0x0010   (0x0010)  
	FVector4                                           Gamma;                                                      // 0x0020   (0x0010)  
	FVector4                                           Gain;                                                       // 0x0030   (0x0010)  
	FVector4                                           Offset;                                                     // 0x0040   (0x0010)  
};

/// Struct /Script/Engine.ColorGradingSettings
/// Size: 0x0150 (336 bytes) (0x000000 - 0x000150) align 16 pad: 0x0000
struct FColorGradingSettings
{ 
	FColorGradePerRangeSettings                        Global;                                                     // 0x0000   (0x0050)  
	FColorGradePerRangeSettings                        Shadows;                                                    // 0x0050   (0x0050)  
	FColorGradePerRangeSettings                        Midtones;                                                   // 0x00A0   (0x0050)  
	FColorGradePerRangeSettings                        Highlights;                                                 // 0x00F0   (0x0050)  
	float                                              ShadowsMax;                                                 // 0x0140   (0x0004)  
	float                                              HighlightsMin;                                              // 0x0144   (0x0004)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0148   (0x0008)  MISSED
};

/// Struct /Script/Engine.SceneViewExtensionIsActiveFunctor
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 16 pad: 0x0000
struct FSceneViewExtensionIsActiveFunctor
{ 
	unsigned char                                      UnknownData00_2[0x50];                                      // 0x0000   (0x0050)  MISSED
};

/// Struct /Script/Engine.ImportedSectionGroup
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 pad: 0x0000
struct FImportedSectionGroup
{ 
	SDK_UNDEFINED(80,263) /* TMap<FName, FSectionIndexes> */ __um(GroupData);                                      // 0x0000   (0x0050)  
};

/// Struct /Script/Engine.SectionIndexes
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FSectionIndexes
{ 
	TArray<int32_t>                                    SectionIndexes;                                             // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.ClothPhysicsProperties_Legacy
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 4 pad: 0x0000
struct FClothPhysicsProperties_Legacy
{ 
	float                                              VerticalResistance;                                         // 0x0000   (0x0004)  
	float                                              HorizontalResistance;                                       // 0x0004   (0x0004)  
	float                                              BendResistance;                                             // 0x0008   (0x0004)  
	float                                              ShearResistance;                                            // 0x000C   (0x0004)  
	float                                              Friction;                                                   // 0x0010   (0x0004)  
	float                                              Damping;                                                    // 0x0014   (0x0004)  
	float                                              TetherStiffness;                                            // 0x0018   (0x0004)  
	float                                              TetherLimit;                                                // 0x001C   (0x0004)  
	float                                              Drag;                                                       // 0x0020   (0x0004)  
	float                                              StiffnessFrequency;                                         // 0x0024   (0x0004)  
	float                                              GravityScale;                                               // 0x0028   (0x0004)  
	float                                              MassScale;                                                  // 0x002C   (0x0004)  
	float                                              InertiaBlend;                                               // 0x0030   (0x0004)  
	float                                              SelfCollisionThickness;                                     // 0x0034   (0x0004)  
	float                                              SelfCollisionSquashScale;                                   // 0x0038   (0x0004)  
	float                                              SelfCollisionStiffness;                                     // 0x003C   (0x0004)  
	float                                              SolverFrequency;                                            // 0x0040   (0x0004)  
	float                                              FiberCompression;                                           // 0x0044   (0x0004)  
	float                                              FiberExpansion;                                             // 0x0048   (0x0004)  
	float                                              FiberResistance;                                            // 0x004C   (0x0004)  
};

/// Struct /Script/Engine.ClothingAssetData_Legacy
/// Size: 0x0080 (128 bytes) (0x000000 - 0x000080) align 8 pad: 0x0000
struct FClothingAssetData_Legacy
{ 
	FName                                              AssetName;                                                  // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FString                                            ApexFileName;                                               // 0x0010   (0x0010)  
	bool                                               bClothPropertiesChanged;                                    // 0x0020   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0021   (0x0003)  MISSED
	FClothPhysicsProperties_Legacy                     PhysicsProperties;                                          // 0x0024   (0x0050)  
	unsigned char                                      UnknownData02_7[0xC];                                       // 0x0074   (0x000C)  MISSED
};

/// Struct /Script/Engine.SkeletalMeshClothBuildParams
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 pad: 0x0000
struct FSkeletalMeshClothBuildParams
{ 
	SDK_UNDEFINED(8,264) /* TWeakObjectPtr<UClothingAssetBase*> */ __um(TargetAsset);                              // 0x0000   (0x0008)  
	int32_t                                            TargetLod;                                                  // 0x0008   (0x0004)  
	bool                                               bRemapParameters;                                           // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	FString                                            AssetName;                                                  // 0x0010   (0x0010)  
	int32_t                                            LODIndex;                                                   // 0x0020   (0x0004)  
	int32_t                                            SourceSection;                                              // 0x0024   (0x0004)  
	bool                                               bRemoveFromMesh;                                            // 0x0028   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0029   (0x0007)  MISSED
	SDK_UNDEFINED(48,265) /* TWeakObjectPtr<UPhysicsAsset*> */ __um(PhysicsAsset);                                 // 0x0030   (0x0030)  
};

/// Struct /Script/Engine.BoneMirrorExport
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FBoneMirrorExport
{ 
	FName                                              BoneName;                                                   // 0x0000   (0x000C)  
	FName                                              SourceBoneName;                                             // 0x000C   (0x000C)  
	TEnumAsByte<EAxis>                                 BoneFlipAxis;                                               // 0x0018   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0019   (0x0003)  MISSED
};

/// Struct /Script/Engine.SkeletalMeshComponentClothTickFunction
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
struct FSkeletalMeshComponentClothTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.SkeletalMeshComponentEndPhysicsTickFunction
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
struct FSkeletalMeshComponentEndPhysicsTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.NameMapping
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FNameMapping
{ 
	FName                                              NodeName;                                                   // 0x0000   (0x000C)  
	FName                                              BoneName;                                                   // 0x000C   (0x000C)  
};

/// Struct /Script/Engine.RigConfiguration
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FRigConfiguration
{ 
	class URig*                                        Rig;                                                        // 0x0000   (0x0008)  
	TArray<FNameMapping>                               BoneMappingTable;                                           // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.BoneReductionSetting
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FBoneReductionSetting
{ 
	TArray<FName>                                      BonesToRemove;                                              // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.ReferencePose
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FReferencePose
{ 
	FName                                              PoseName;                                                   // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	TArray<FTransform>                                 ReferencePose;                                              // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.SkeletonToMeshLinkup
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FSkeletonToMeshLinkup
{ 
	TArray<int32_t>                                    SkeletonToMeshTable;                                        // 0x0000   (0x0010)  
	TArray<int32_t>                                    MeshToSkeletonTable;                                        // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.SkelMeshSkinWeightInfo
/// Size: 0x003C (60 bytes) (0x000000 - 0x00003C) align 4 pad: 0x0000
struct FSkelMeshSkinWeightInfo
{ 
	int32_t                                            Bones[12];                                                  // 0x0000   (0x0030)  
	char                                               Weights[12];                                                // 0x0030   (0x000C)  
};

/// Struct /Script/Engine.SkinWeightProfileManagerTickFunction
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
struct FSkinWeightProfileManagerTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.PrecomputedSkyLightInstanceData
/// Size: 0x00B8 (184 bytes) (0x0000B8 - 0x000170) align 16 pad: 0x0000
struct FPrecomputedSkyLightInstanceData : FSceneComponentInstanceData
{ 
	FGuid                                              LightGuid;                                                  // 0x00B8   (0x0010)  
	float                                              AverageBrightness;                                          // 0x00C8   (0x0004)  
	unsigned char                                      UnknownData00_7[0xA4];                                      // 0x00CC   (0x00A4)  MISSED
};

/// Struct /Script/Engine.SmartNameMapping
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align 8 pad: 0x0000
struct FSmartNameMapping
{ 
	unsigned char                                      UnknownData00_2[0x70];                                      // 0x0000   (0x0070)  MISSED
};

/// Struct /Script/Engine.CurveMetaData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FCurveMetaData
{ 
	unsigned char                                      UnknownData00_2[0x18];                                      // 0x0000   (0x0018)  MISSED
};

/// Struct /Script/Engine.SoundClassEditorData
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FSoundClassEditorData
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Engine.SoundNodeEditorData
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FSoundNodeEditorData
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Engine.SoundSubmixSpectralAnalysisBandSettings
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FSoundSubmixSpectralAnalysisBandSettings
{ 
	float                                              BandFrequency;                                              // 0x0000   (0x0004)  
	int32_t                                            AttackTimeMsec;                                             // 0x0004   (0x0004)  
	int32_t                                            ReleaseTimeMsec;                                            // 0x0008   (0x0004)  
	float                                              QFactor;                                                    // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.SoundWaveEnvelopeDataPerSound
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FSoundWaveEnvelopeDataPerSound
{ 
	float                                              Envelope;                                                   // 0x0000   (0x0004)  
	float                                              PlaybackTime;                                               // 0x0004   (0x0004)  
	class USoundWave*                                  SoundWave;                                                  // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.SoundWaveSpectralData
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FSoundWaveSpectralData
{ 
	float                                              FrequencyHz;                                                // 0x0000   (0x0004)  
	float                                              Magnitude;                                                  // 0x0004   (0x0004)  
	float                                              NormalizedMagnitude;                                        // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.SoundWaveSpectralDataPerSound
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FSoundWaveSpectralDataPerSound
{ 
	TArray<FSoundWaveSpectralData>                     SpectralData;                                               // 0x0000   (0x0010)  
	float                                              PlaybackTime;                                               // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	class USoundWave*                                  SoundWave;                                                  // 0x0018   (0x0008)  
};

/// Struct /Script/Engine.StreamedAudioPlatformData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FStreamedAudioPlatformData
{ 
	unsigned char                                      UnknownData00_2[0x20];                                      // 0x0000   (0x0020)  MISSED
};

/// Struct /Script/Engine.SplineInstanceData
/// Size: 0x00E8 (232 bytes) (0x0000B8 - 0x0001A0) align 8 pad: 0x0000
struct FSplineInstanceData : FSceneComponentInstanceData
{ 
	bool                                               bSplineHasBeenEdited;                                       // 0x00B8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x00B9   (0x0007)  MISSED
	FSplineCurves                                      SplineCurves;                                               // 0x00C0   (0x0070)  
	FSplineCurves                                      SplineCurvesPreUCS;                                         // 0x0130   (0x0070)  
};

/// Struct /Script/Engine.SplinePoint
/// Size: 0x0044 (68 bytes) (0x000000 - 0x000044) align 4 pad: 0x0000
struct FSplinePoint
{ 
	float                                              InputKey;                                                   // 0x0000   (0x0004)  
	FVector                                            Position;                                                   // 0x0004   (0x000C)  
	FVector                                            ArriveTangent;                                              // 0x0010   (0x000C)  
	FVector                                            LeaveTangent;                                               // 0x001C   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x0028   (0x000C)  
	FVector                                            Scale;                                                      // 0x0034   (0x000C)  
	TEnumAsByte<ESplinePointType>                      Type;                                                       // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0041   (0x0003)  MISSED
};

/// Struct /Script/Engine.SplineMeshInstanceData
/// Size: 0x0030 (48 bytes) (0x0000B8 - 0x0000E8) align 8 pad: 0x0000
struct FSplineMeshInstanceData : FSceneComponentInstanceData
{ 
	FVector                                            StartPos;                                                   // 0x00B8   (0x000C)  
	FVector                                            EndPos;                                                     // 0x00C4   (0x000C)  
	FVector                                            StartTangent;                                               // 0x00D0   (0x000C)  
	FVector                                            EndTangent;                                                 // 0x00DC   (0x000C)  
};

/// Struct /Script/Engine.MaterialRemapIndex
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FMaterialRemapIndex
{ 
	uint32_t                                           ImportVersionKey;                                           // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	TArray<int32_t>                                    MaterialRemap;                                              // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.AssetEditorOrbitCameraPosition
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 4 pad: 0x0000
struct FAssetEditorOrbitCameraPosition
{ 
	bool                                               bIsSet;                                                     // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FVector                                            CamOrbitPoint;                                              // 0x0004   (0x000C)  
	FVector                                            CamOrbitZoom;                                               // 0x0010   (0x000C)  
	FRotator                                           CamOrbitRotation;                                           // 0x001C   (0x000C)  
};

/// Struct /Script/Engine.MeshSectionInfoMap
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 pad: 0x0000
struct FMeshSectionInfoMap
{ 
	SDK_UNDEFINED(80,266) /* TMap<uint32_t, FMeshSectionInfo> */ __um(Map);                                        // 0x0000   (0x0050)  
};

/// Struct /Script/Engine.MeshSectionInfo
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FMeshSectionInfo
{ 
	int32_t                                            MaterialIndex;                                              // 0x0000   (0x0004)  
	bool                                               bEnableCollision;                                           // 0x0004   (0x0001)  
	bool                                               bCastShadow;                                                // 0x0005   (0x0001)  
	bool                                               bVisibleInRayTracing;                                       // 0x0006   (0x0001)  
	bool                                               bForceOpaque;                                               // 0x0007   (0x0001)  
};

/// Struct /Script/Engine.StaticMeshSourceModel
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align 8 pad: 0x0000
struct FStaticMeshSourceModel
{ 
	FMeshBuildSettings                                 BuildSettings;                                              // 0x0000   (0x0030)  
	FMeshReductionSettings                             ReductionSettings;                                          // 0x0030   (0x0024)  
	float                                              LODDistance;                                                // 0x0054   (0x0004)  
	FPerPlatformFloat                                  ScreenSize;                                                 // 0x0058   (0x0004)  
	FPerPlatformFloat                                  KuroLODDistance;                                            // 0x005C   (0x0004)  
	FString                                            SourceImportFilename;                                       // 0x0060   (0x0010)  
};

/// Struct /Script/Engine.SerializedTriMeshCollisionData
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FSerializedTriMeshCollisionData
{ 
	TArray<FVector>                                    Vertices;                                                   // 0x0000   (0x0010)  
	TArray<FIntVector>                                 Indices;                                                    // 0x0010   (0x0010)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0020   (0x0008)  MISSED
};

/// Struct /Script/Engine.StaticMeshOptimizationSettings
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FStaticMeshOptimizationSettings
{ 
	TEnumAsByte<EOptimizationType>                     ReductionMethod;                                            // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              NumOfTrianglesPercentage;                                   // 0x0004   (0x0004)  
	float                                              MaxDeviationPercentage;                                     // 0x0008   (0x0004)  
	float                                              WeldingThreshold;                                           // 0x000C   (0x0004)  
	bool                                               bRecalcNormals;                                             // 0x0010   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0011   (0x0003)  MISSED
	float                                              NormalsThreshold;                                           // 0x0014   (0x0004)  
	char                                               SilhouetteImportance;                                       // 0x0018   (0x0001)  
	char                                               TextureImportance;                                          // 0x0019   (0x0001)  
	char                                               ShadingImportance;                                          // 0x001A   (0x0001)  
	unsigned char                                      UnknownData02_7[0x1];                                       // 0x001B   (0x0001)  MISSED
};

/// Struct /Script/Engine.PaintedVertex
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 16 pad: 0x0000
struct FPaintedVertex
{ 
	FVector                                            Position;                                                   // 0x0000   (0x000C)  
	FColor                                             Color;                                                      // 0x000C   (0x0004)  
	FVector4                                           Normal;                                                     // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.StaticMeshVertexColorLODData
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FStaticMeshVertexColorLODData
{ 
	TArray<FPaintedVertex>                             PaintedVertices;                                            // 0x0000   (0x0010)  
	TArray<FColor>                                     VertexBufferColors;                                         // 0x0010   (0x0010)  
	uint32_t                                           LODIndex;                                                   // 0x0020   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Struct /Script/Engine.StaticMeshComponentInstanceData
/// Size: 0x0040 (64 bytes) (0x000100 - 0x000140) align 16 pad: 0x0000
struct FStaticMeshComponentInstanceData : FPrimitiveComponentInstanceData
{ 
	class UStaticMesh*                                 StaticMesh;                                                 // 0x0100   (0x0008)  
	TArray<FStaticMeshVertexColorLODData>              VertexColorLODs;                                            // 0x0108   (0x0010)  
	TArray<FGuid>                                      CachedStaticLighting;                                       // 0x0118   (0x0010)  
	TArray<FStreamingTextureBuildInfo>                 StreamingTextureData;                                       // 0x0128   (0x0010)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0138   (0x0008)  MISSED
};

/// Struct /Script/Engine.TextureFormatSettings
/// Size: 0x0002 (2 bytes) (0x000000 - 0x000002) align 1 pad: 0x0000
struct FTextureFormatSettings
{ 
	TEnumAsByte<TextureCompressionSettings>            CompressionSettings;                                        // 0x0000   (0x0001)  
	bool                                               CompressionNoAlpha : 1;                                     // 0x0001:0 (0x0001)  
	bool                                               CompressionNone : 1;                                        // 0x0001:1 (0x0001)  
	bool                                               CompressionYCoCg : 1;                                       // 0x0001:2 (0x0001)  
	bool                                               SRGB : 1;                                                   // 0x0001:3 (0x0001)  
};

/// Struct /Script/Engine.TexturePlatformData
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FTexturePlatformData
{ 
	unsigned char                                      UnknownData00_2[0x30];                                      // 0x0000   (0x0030)  MISSED
};

/// Struct /Script/Engine.TextureSource
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FTextureSource
{ 
	unsigned char                                      UnknownData00_2[0x38];                                      // 0x0000   (0x0038)  MISSED
};

/// Struct /Script/Engine.TextureSourceBlock
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FTextureSourceBlock
{ 
	int32_t                                            BlockX;                                                     // 0x0000   (0x0004)  
	int32_t                                            BlockY;                                                     // 0x0004   (0x0004)  
	int32_t                                            SizeX;                                                      // 0x0008   (0x0004)  
	int32_t                                            SizeY;                                                      // 0x000C   (0x0004)  
	int32_t                                            NumSlices;                                                  // 0x0010   (0x0004)  
	int32_t                                            NumMips;                                                    // 0x0014   (0x0004)  
};

/// Struct /Script/Engine.StreamingRenderAssetPrimitiveInfo
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FStreamingRenderAssetPrimitiveInfo
{ 
	class UStreamableRenderAsset*                      RenderAsset;                                                // 0x0000   (0x0008)  
	FBoxSphereBounds                                   Bounds;                                                     // 0x0008   (0x001C)  
	float                                              TexelFactor;                                                // 0x0024   (0x0004)  
	uint32_t                                           PackedRelativeBox;                                          // 0x0028   (0x0004)  
	bool                                               bAllowInvalidTexelFactorWhenUnregistered : 1;               // 0x002C:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x002D   (0x0003)  MISSED
};

/// Struct /Script/Engine.TTTrackId
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FTTTrackId
{ 
	int32_t                                            TrackType;                                                  // 0x0000   (0x0004)  
	int32_t                                            TrackIndex;                                                 // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.TimeStretchCurveInstance
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FTimeStretchCurveInstance
{ 
	bool                                               bHasValidData;                                              // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2F];                                      // 0x0001   (0x002F)  MISSED
};

/// Struct /Script/Engine.UpdateLevelVisibilityLevelInfo
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FUpdateLevelVisibilityLevelInfo
{ 
	FName                                              PackageName;                                                // 0x0000   (0x000C)  
	FName                                              Filename;                                                   // 0x000C   (0x000C)  
	bool                                               bIsVisible : 1;                                             // 0x0018:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0019   (0x0003)  MISSED
};

/// Struct /Script/Engine.HardwareCursorReference
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FHardwareCursorReference
{ 
	FName                                              CursorPath;                                                 // 0x0000   (0x000C)  
	FVector2D                                          HotSpot;                                                    // 0x000C   (0x0008)  
};

/// Struct /Script/Engine.EndPhysicsTickFunction
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
struct FEndPhysicsTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.StartPhysicsTickFunction
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
struct FStartPhysicsTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.LevelViewportInfo
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 4 pad: 0x0000
struct FLevelViewportInfo
{ 
	FVector                                            CamPosition;                                                // 0x0000   (0x000C)  
	FRotator                                           CamRotation;                                                // 0x000C   (0x000C)  
	float                                              CamOrthoZoom;                                               // 0x0018   (0x0004)  
	bool                                               CamUpdated;                                                 // 0x001C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x001D   (0x0003)  MISSED
};

/// Struct /Script/Engine.WorldPartitionPerWorldSettings
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FWorldPartitionPerWorldSettings
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.WorldPartitionRuntimeCellObjectMapping
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FWorldPartitionRuntimeCellObjectMapping
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.PartionedActorsInfoData
/// Size: 0x0048 (72 bytes) (0x000008 - 0x000050) align 8 pad: 0x0000
struct FPartionedActorsInfoData : FTableRowBase
{ 
	FString                                            GridName;                                                   // 0x0008   (0x0010)  
	FString                                            CellName;                                                   // 0x0018   (0x0010)  
	int32_t                                            Level;                                                      // 0x0028   (0x0004)  
	int32_t                                            CellSize;                                                   // 0x002C   (0x0004)  
	int32_t                                            GridSize;                                                   // 0x0030   (0x0004)  
	int32_t                                            PcLoadingRange;                                             // 0x0034   (0x0004)  
	int32_t                                            PcMinStreamingRange;                                        // 0x0038   (0x0004)  
	int32_t                                            PcMaxStreamingRange;                                        // 0x003C   (0x0004)  
	int32_t                                            MobileLoadingRange;                                         // 0x0040   (0x0004)  
	int32_t                                            MobileMinStreamingRange;                                    // 0x0044   (0x0004)  
	int32_t                                            MobileMaxStreamingRange;                                    // 0x0048   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Struct /Script/Engine.WorldPartitionRuntimeSpatialHashGridPreviewer
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FWorldPartitionRuntimeSpatialHashGridPreviewer
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.WorldPartitionStreamingQuerySource
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FWorldPartitionStreamingQuerySource
{ 
	FVector                                            Location;                                                   // 0x0000   (0x000C)  
	float                                              Radius;                                                     // 0x000C   (0x0004)  
	bool                                               bUseLoadingRangeRadius;                                     // 0x0010   (0x0001)  
	bool                                               bEnableDataLayerTest;                                       // 0x0011   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x0012   (0x0006)  MISSED
	TArray<FName>                                      DataLayers;                                                 // 0x0018   (0x0010)  
	bool                                               bDataLayersOnly;                                            // 0x0028   (0x0001)  
	bool                                               bSpatialQuery;                                              // 0x0029   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x002A   (0x0006)  MISSED
};

/// Struct /Script/Engine.PSCPoolElem
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FPSCPoolElem
{ 
	class UParticleSystemComponent*                    PSC;                                                        // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0008   (0x0008)  MISSED
};

/// Struct /Script/Engine.PSCPool
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FPSCPool
{ 
	TArray<FPSCPoolElem>                               FreeElements;                                               // 0x0000   (0x0010)  
	TArray<class UParticleSystemComponent*>            InUseComponents_Auto;                                       // 0x0010   (0x0010)  
	TArray<class UParticleSystemComponent*>            InUseComponents_Manual;                                     // 0x0020   (0x0010)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0030   (0x0008)  MISSED
};

/// Struct /Script/Engine.ActorCheckJsonParamsFirstFolders
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FActorCheckJsonParamsFirstFolders
{ 
	FString                                            FirstName;                                                  // 0x0000   (0x0010)  
	FString                                            Regex;                                                      // 0x0010   (0x0010)  
	uint32_t                                           SecondGroupIndex;                                           // 0x0020   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0024   (0x0004)  MISSED
	TArray<FString>                                    AdditionalDataLayers;                                       // 0x0028   (0x0010)  
};

/// Struct /Script/Engine.ActorCheckJsonParamsSecondFolders
/// Size: 0x0098 (152 bytes) (0x000000 - 0x000098) align 8 pad: 0x0000
struct FActorCheckJsonParamsSecondFolders
{ 
	FString                                            SecondName;                                                 // 0x0000   (0x0010)  
	FString                                            Regex;                                                      // 0x0010   (0x0010)  
	bool                                               EnableSpecifiedClass : 1;                                   // 0x0020:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0021   (0x0007)  MISSED
	TArray<FString>                                    SpecifiedClassName;                                         // 0x0028   (0x0010)  
	FString                                            Grid;                                                       // 0x0038   (0x0010)  
	TArray<FString>                                    DataLayers;                                                 // 0x0048   (0x0010)  
	TArray<FString>                                    OverrideGridPattern;                                        // 0x0058   (0x0010)  
	TArray<FString>                                    OverrideGrid;                                               // 0x0068   (0x0010)  
	TArray<FString>                                    AdditionalDataLayerPattern;                                 // 0x0078   (0x0010)  
	TArray<FString>                                    AdditionalDataLayers;                                       // 0x0088   (0x0010)  
};

/// Struct /Script/Engine.ActorCheckJsonParamsDetail
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align 8 pad: 0x0000
struct FActorCheckJsonParamsDetail
{ 
	FString                                            Regex;                                                      // 0x0000   (0x0010)  
	TArray<FActorCheckJsonParamsFirstFolders>          FirstFolders;                                               // 0x0010   (0x0010)  
	TArray<FActorCheckJsonParamsSecondFolders>         SecondFolders;                                              // 0x0020   (0x0010)  
	TArray<FString>                                    SecondGroups;                                               // 0x0030   (0x0010)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0040   (0x0018)  MISSED
};

/// Struct /Script/Engine.SpecifiedClassRefCheck
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FSpecifiedClassRefCheck
{ 
	TArray<FString>                                    StaticMeshActorRefMesh;                                     // 0x0000   (0x0010)  
	TArray<FString>                                    DecalActorMeshRefMat;                                       // 0x0010   (0x0010)  
	TArray<FString>                                    LevelInstanceBehavior;                                      // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.HISMDistanceInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FHISMDistanceInfo
{ 
	FString                                            Index;                                                      // 0x0000   (0x0010)  
	float                                              StartDistance;                                              // 0x0010   (0x0004)  
	float                                              EndDistance;                                                // 0x0014   (0x0004)  
};

/// Struct /Script/Engine.HISMCullDistanceCheck
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FHISMCullDistanceCheck
{ 
	TArray<FHISMDistanceInfo>                          HISMCullDistanceConfig;                                     // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.LightCullDistanceConfig
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 4 pad: 0x0000
struct FLightCullDistanceConfig
{ 
	float                                              UseCullType;                                                // 0x0000   (0x0004)  
	int32_t                                            LightCullType;                                              // 0x0004   (0x0004)  
	float                                              MaxDrawDistance;                                            // 0x0008   (0x0004)  
	float                                              MinDrawDistance;                                            // 0x000C   (0x0004)  
	float                                              MaxDrawFadeRange;                                           // 0x0010   (0x0004)  
	float                                              MinDrawFadeRange;                                           // 0x0014   (0x0004)  
	float                                              HaloMaxDrawDistance;                                        // 0x0018   (0x0004)  
	float                                              HaloMinDrawDistance;                                        // 0x001C   (0x0004)  
	float                                              HaloMaxDrawFadeRange;                                       // 0x0020   (0x0004)  
	float                                              HaloMinDrawFadeRange;                                       // 0x0024   (0x0004)  
};

/// Struct /Script/Engine.LightCullDistanceCheck
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FLightCullDistanceCheck
{ 
	TArray<FLightCullDistanceConfig>                   LightCullDistanceConfig;                                    // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.LightCastShadowCheck
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FLightCastShadowCheck
{ 
	FString                                            Folder;                                                     // 0x0000   (0x0010)  
	FString                                            CastShadows;                                                // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.MeshCastShadowCheck
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FMeshCastShadowCheck
{ 
	TArray<FString>                                    SpecifiedClassName;                                         // 0x0000   (0x0010)  
	int32_t                                            StaticMeshNeedShadowProxy;                                  // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/Engine.SpecifiedFolderPath
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FSpecifiedFolderPath
{ 
	FString                                            FolderPath;                                                 // 0x0000   (0x0010)  
	TArray<FString>                                    DataLayers;                                                 // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.SpecifiedFolderPathCheck
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FSpecifiedFolderPathCheck
{ 
	TArray<FSpecifiedFolderPath>                       SpecifiedFolders;                                           // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.MeshRefCheck
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FMeshRefCheck
{ 
	TArray<FString>                                    ValidDirectory;                                             // 0x0000   (0x0010)  
	TArray<FString>                                    Temporarydirectory;                                         // 0x0010   (0x0010)  
	TArray<FString>                                    DonotCheckDirectory;                                        // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.SpecialPathCheck
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FSpecialPathCheck
{ 
	TArray<FString>                                    None;                                                       // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.ISMBoundCheckConfig
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FISMBoundCheckConfig
{ 
	FString                                            Key;                                                        // 0x0000   (0x0010)  
	float                                              Value;                                                      // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/Engine.ISMBoundCheck
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FISMBoundCheck
{ 
	TArray<FISMBoundCheckConfig>                       ISMBoundCheckConfig;                                        // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.AdditionalDataLayerCheckConfig
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FAdditionalDataLayerCheckConfig
{ 
	FString                                            ActorTagKey;                                                // 0x0000   (0x0010)  
	FString                                            DataLayer;                                                  // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.AdditionalDataLayerCheck
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FAdditionalDataLayerCheck
{ 
	TArray<FAdditionalDataLayerCheckConfig>            AdditionalDataLayerConfig;                                  // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.TestMapWhiteList
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FTestMapWhiteList
{ 
	bool                                               EnableSkipCheckSpecifiedClass;                              // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	TArray<FString>                                    SkipSpecifiedClassName;                                     // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.LandScapeFolderCheck
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FLandScapeFolderCheck
{ 
	TArray<FString>                                    SpecifiedClassName;                                         // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.HLODFolderCheck
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FHLODFolderCheck
{ 
	TArray<FString>                                    HLODFolder;                                                 // 0x0000   (0x0010)  
	TArray<FString>                                    Vegetatition;                                               // 0x0010   (0x0010)  
	FString                                            HLODPattern;                                                // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.EncloseSpaceFolderCheck
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FEncloseSpaceFolderCheck
{ 
	TArray<FString>                                    EnclosedSpace;                                              // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.EffectActorCheck
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FEffectActorCheck
{ 
	TArray<FString>                                    PlayTypeForcePlayPath;                                      // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.ActorCheckJsonParams
/// Size: 0x03C0 (960 bytes) (0x000000 - 0x0003C0) align 8 pad: 0x0000
struct FActorCheckJsonParams
{ 
	FActorCheckJsonParamsDetail                        Artist;                                                     // 0x0000   (0x0058)  
	FActorCheckJsonParamsDetail                        Designer;                                                   // 0x0058   (0x0058)  
	FActorCheckJsonParamsDetail                        Pcg;                                                        // 0x00B0   (0x0058)  
	FActorCheckJsonParamsDetail                        Audio;                                                      // 0x0108   (0x0058)  
	FSpecifiedClassRefCheck                            SpecifiedClassRefCheck;                                     // 0x0160   (0x0030)  
	FHISMCullDistanceCheck                             HISMDistanceCheck;                                          // 0x0190   (0x0010)  
	FLightCullDistanceCheck                            LightCullDistanceCheck;                                     // 0x01A0   (0x0010)  
	TArray<FLightCastShadowCheck>                      LightCastShadowCheck;                                       // 0x01B0   (0x0010)  
	int32_t                                            OpenFarShadowRadius;                                        // 0x01C0   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x01C4   (0x0004)  MISSED
	FMeshCastShadowCheck                               MeshCastShadowCheck;                                        // 0x01C8   (0x0018)  
	int32_t                                            ISMMinInstanceCount;                                        // 0x01E0   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x01E4   (0x0004)  MISSED
	FSpecifiedFolderPathCheck                          SpecifiedFolderPathCheck;                                   // 0x01E8   (0x0010)  
	FMeshRefCheck                                      MeshRefCheck;                                               // 0x01F8   (0x0030)  
	FSpecialPathCheck                                  SpecialPathCheck;                                           // 0x0228   (0x0010)  
	FISMBoundCheck                                     ISMBoundCheck;                                              // 0x0238   (0x0010)  
	FAdditionalDataLayerCheck                          AdditionalDataLayerCheck;                                   // 0x0248   (0x0010)  
	FTestMapWhiteList                                  TestMapWhiteList;                                           // 0x0258   (0x0018)  
	FLandScapeFolderCheck                              LandScapeFolderCheck;                                       // 0x0270   (0x0010)  
	FHLODFolderCheck                                   HLODFolderCheck;                                            // 0x0280   (0x0030)  
	FEncloseSpaceFolderCheck                           EncloseSpaceFolderCheck;                                    // 0x02B0   (0x0010)  
	FEffectActorCheck                                  EffectActorCheck;                                           // 0x02C0   (0x0010)  
	SDK_UNDEFINED(80,267) /* TMap<FString, FString> */ __um(TexArrayMap);                                          // 0x02D0   (0x0050)  
	SDK_UNDEFINED(80,268) /* TMap<FString, float> */   __um(ActorMaxBoundExtent);                                  // 0x0320   (0x0050)  
	unsigned char                                      UnknownData02_7[0x50];                                      // 0x0370   (0x0050)  MISSED
};

/// Struct /Script/Engine.ActorFolderCheckResult
/// Size: 0x00F8 (248 bytes) (0x000000 - 0x0000F8) align 8 pad: 0x0000
struct FActorFolderCheckResult
{ 
	unsigned char                                      UnknownData00_2[0xF8];                                      // 0x0000   (0x00F8)  MISSED
};

/// Struct /Script/Engine.MapDataLayerTaskInfo
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FMapDataLayerTaskInfo
{ 
	FString                                            TaskName;                                                   // 0x0000   (0x0010)  
	FString                                            DataLayerName;                                              // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.MapAllDataLayerTaskInfo
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FMapAllDataLayerTaskInfo
{ 
	TArray<FMapDataLayerTaskInfo>                      AllDataLayerTasks;                                          // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.MapAreaInfo
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FMapAreaInfo
{ 
	FString                                            Map;                                                        // 0x0000   (0x0010)  
	TArray<FString>                                    Areas;                                                      // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.LightmassWorldInfoSettings
/// Size: 0x004C (76 bytes) (0x000000 - 0x00004C) align 4 pad: 0x0000
struct FLightmassWorldInfoSettings
{ 
	float                                              StaticLightingLevelScale;                                   // 0x0000   (0x0004)  
	int32_t                                            NumIndirectLightingBounces;                                 // 0x0004   (0x0004)  
	int32_t                                            NumSkyLightingBounces;                                      // 0x0008   (0x0004)  
	float                                              IndirectLightingQuality;                                    // 0x000C   (0x0004)  
	float                                              IndirectLightingSmoothness;                                 // 0x0010   (0x0004)  
	FColor                                             EnvironmentColor;                                           // 0x0014   (0x0004)  
	float                                              EnvironmentIntensity;                                       // 0x0018   (0x0004)  
	float                                              EmissiveBoost;                                              // 0x001C   (0x0004)  
	float                                              DiffuseBoost;                                               // 0x0020   (0x0004)  
	TEnumAsByte<EVolumeLightingMethod>                 VolumeLightingMethod;                                       // 0x0024   (0x0001)  
	bool                                               bUseAmbientOcclusion : 1;                                   // 0x0025:0 (0x0001)  
	bool                                               bGenerateAmbientOcclusionMaterialMask : 1;                  // 0x0025:1 (0x0001)  
	bool                                               bVisualizeMaterialDiffuse : 1;                              // 0x0025:2 (0x0001)  
	bool                                               bVisualizeAmbientOcclusion : 1;                             // 0x0025:3 (0x0001)  
	bool                                               bCompressLightmaps : 1;                                     // 0x0025:4 (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0026   (0x0002)  MISSED
	float                                              VolumetricLightmapDetailCellSize;                           // 0x0028   (0x0004)  
	float                                              VolumetricLightmapMaximumBrickMemoryMb;                     // 0x002C   (0x0004)  
	float                                              VolumetricLightmapSphericalHarmonicSmoothing;               // 0x0030   (0x0004)  
	float                                              VolumeLightSamplePlacementScale;                            // 0x0034   (0x0004)  
	float                                              DirectIlluminationOcclusionFraction;                        // 0x0038   (0x0004)  
	float                                              IndirectIlluminationOcclusionFraction;                      // 0x003C   (0x0004)  
	float                                              OcclusionExponent;                                          // 0x0040   (0x0004)  
	float                                              FullyOccludedSamplesFraction;                               // 0x0044   (0x0004)  
	float                                              MaxOcclusionDistance;                                       // 0x0048   (0x0004)  
};

/// Class /Script/UMG.Visual
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UVisual : public UObject
{ 
public:
};

/// Struct /Script/UMG.WidgetTransform
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FWidgetTransform
{ 
	FVector2D                                          Translation;                                                // 0x0000   (0x0008)  
	FVector2D                                          Scale;                                                      // 0x0008   (0x0008)  
	FVector2D                                          Shear;                                                      // 0x0010   (0x0008)  
	float                                              Angle;                                                      // 0x0018   (0x0004)  
};

/// Class /Script/UMG.Widget
/// Size: 0x00F8 (248 bytes) (0x000030 - 0x000128) align 8 pad: 0x0000
class UWidget : public UVisual
{ 
public:
	class UPanelSlot*                                  Slot;                                                       // 0x0030   (0x0008)  
	SDK_UNDEFINED(20,269) /* FDelegateProperty */      __um(bIsEnabledDelegate);                                   // 0x0038   (0x0014)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x004C   (0x0004)  MISSED
	FText                                              ToolTipText;                                                // 0x0050   (0x0018)  
	SDK_UNDEFINED(20,270) /* FDelegateProperty */      __um(ToolTipTextDelegate);                                  // 0x0068   (0x0014)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x007C   (0x0004)  MISSED
	class UWidget*                                     ToolTipWidget;                                              // 0x0080   (0x0008)  
	SDK_UNDEFINED(20,271) /* FDelegateProperty */      __um(ToolTipWidgetDelegate);                                // 0x0088   (0x0014)  
	SDK_UNDEFINED(20,272) /* FDelegateProperty */      __um(VisibilityDelegate);                                   // 0x009C   (0x0014)  
	FWidgetTransform                                   RenderTransform;                                            // 0x00B0   (0x001C)  
	FVector2D                                          RenderTransformPivot;                                       // 0x00CC   (0x0008)  
	bool                                               bIsVariable : 1;                                            // 0x00D4:0 (0x0001)  
	bool                                               bCreatedByConstructionScript : 1;                           // 0x00D4:1 (0x0001)  
	bool                                               bIsEnabled : 1;                                             // 0x00D4:2 (0x0001)  
	bool                                               bOverride_Cursor : 1;                                       // 0x00D4:3 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x00D5   (0x0003)  MISSED
	class USlateAccessibleWidgetData*                  AccessibleWidgetData;                                       // 0x00D8   (0x0008)  
	bool                                               bIsVolatile : 1;                                            // 0x00E0:0 (0x0001)  
	TEnumAsByte<EMouseCursor>                          Cursor;                                                     // 0x00E1   (0x0001)  
	EWidgetClipping                                    Clipping;                                                   // 0x00E2   (0x0001)  
	ESlateVisibility                                   Visibility;                                                 // 0x00E3   (0x0001)  
	float                                              RenderOpacity;                                              // 0x00E4   (0x0004)  
	class UWidgetNavigation*                           Navigation;                                                 // 0x00E8   (0x0008)  
	EFlowDirectionPreference                           FlowDirectionPreference;                                    // 0x00F0   (0x0001)  
	unsigned char                                      UnknownData03_6[0x27];                                      // 0x00F1   (0x0027)  MISSED
	TArray<class UPropertyBinding*>                    NativeBindings;                                             // 0x0118   (0x0010)  
	// void SetVisibility(ESlateVisibility InVisibility);                                                                       // [0x3baeea0] Native|Public|BlueprintCallable 
	// void SetUserFocus(class APlayerController* PlayerController);                                                            // [0x3baec70] Final|Native|Public|BlueprintCallable 
	// void SetToolTipText(FText& InToolTipText);                                                                               // [0x3baeba0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetToolTip(class UWidget* Widget);                                                                                  // [0x3baeb10] Final|Native|Public|BlueprintCallable 
	// void SetRenderTranslation(FVector2D Translation);                                                                        // [0x3baea00] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetRenderTransformPivot(FVector2D Pivot);                                                                           // [0x3bae980] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetRenderTransformAngle(float Angle);                                                                               // [0x3bae900] Final|Native|Public|BlueprintCallable 
	// void SetRenderTransform(FWidgetTransform InTransform);                                                                   // [0x3bae820] Final|Native|Public|BlueprintCallable 
	// void SetRenderShear(FVector2D Shear);                                                                                    // [0x3bae7a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetRenderScale(FVector2D Scale);                                                                                    // [0x3bae720] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetRenderOpacity(float InOpacity);                                                                                  // [0x3bae6a0] Final|Native|Public|BlueprintCallable 
	// void SetNavigationRuleExplicit(EUINavigation Direction, class UWidget* InWidget);                                        // [0x3bae540] Final|Native|Public|BlueprintCallable 
	// void SetNavigationRuleCustomBoundary(EUINavigation Direction, FDelegateProperty InCustomDelegate);                       // [0x3bae450] Final|Native|Public|BlueprintCallable 
	// void SetNavigationRuleCustom(EUINavigation Direction, FDelegateProperty InCustomDelegate);                               // [0x3bae360] Final|Native|Public|BlueprintCallable 
	// void SetNavigationRuleBase(EUINavigation Direction, EUINavigationRule Rule);                                             // [0x3bae290] Final|Native|Public|BlueprintCallable 
	// void SetNavigationRule(EUINavigation Direction, EUINavigationRule Rule, FName WidgetToFocus);                            // [0x3bae160] Final|Native|Public|BlueprintCallable 
	// void SetKeyboardFocus();                                                                                                 // [0x3bae140] Final|Native|Public|BlueprintCallable 
	// void SetIsEnabled(bool bInIsEnabled);                                                                                    // [0x14b3b90] Native|Public|BlueprintCallable 
	// void SetFocus();                                                                                                         // [0x3bae0a0] Final|Native|Public|BlueprintCallable 
	// void SetCursor(TEnumAsByte<EMouseCursor> InCursor);                                                                      // [0x3bae020] Final|Native|Public|BlueprintCallable 
	// void SetClipping(EWidgetClipping InClipping);                                                                            // [0x3badfa0] Final|Native|Public|BlueprintCallable 
	// void SetAllNavigationRules(EUINavigationRule Rule, FName WidgetToFocus);                                                 // [0x3badeb0] Final|Native|Public|BlueprintCallable 
	// void ResetCursor();                                                                                                      // [0x3bade90] Final|Native|Public|BlueprintCallable 
	// void RemoveFromParent();                                                                                                 // [0x1773580] Native|Public|BlueprintCallable 
	// FEventReply OnReply__DelegateSignature();                                                                                // [0x25a7960] Public|Delegate      
	// FEventReply OnPointerEvent__DelegateSignature(FGeometry MyGeometry, FPointerEvent& MouseEvent);                          // [0x25a7960] Public|Delegate|HasOutParms 
	// bool IsVisible();                                                                                                        // [0x3bade60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsHovered();                                                                                                        // [0x1779ea0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void InvalidateLayoutAndVolatility();                                                                                    // [0x3bade40] Final|Native|Public|BlueprintCallable 
	// bool HasUserFocusedDescendants(class APlayerController* PlayerController);                                               // [0x3badda0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool HasUserFocus(class APlayerController* PlayerController);                                                            // [0x3badd00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool HasMouseCaptureByUser(int32_t UserIndex, int32_t PointerIndex);                                                     // [0x3badc30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool HasMouseCapture();                                                                                                  // [0x3badc00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool HasKeyboardFocus();                                                                                                 // [0x3badbd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool HasFocusedDescendants();                                                                                            // [0x3badba0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool HasAnyUserFocus();                                                                                                  // [0x3badb70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UWidget* GetWidget__DelegateSignature();                                                                           // [0x25a7960] Public|Delegate      
	// ESlateVisibility GetVisibility();                                                                                        // [0x3badb40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FGeometry GetTickSpaceGeometry();                                                                                        // [0x3bada20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FText GetText__DelegateSignature();                                                                                      // [0x25a7960] Public|Delegate      
	// ESlateVisibility GetSlateVisibility__DelegateSignature();                                                                // [0x25a7960] Public|Delegate      
	// FSlateColor GetSlateColor__DelegateSignature();                                                                          // [0x25a7960] Public|Delegate      
	// FSlateBrush GetSlateBrush__DelegateSignature();                                                                          // [0x25a7960] Public|Delegate      
	// float GetRenderTransformAngle();                                                                                         // [0x3bad9c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetRenderOpacity();                                                                                                // [0x3bad990] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UPanelWidget* GetParent();                                                                                         // [0x3bad960] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FGeometry GetPaintSpaceGeometry();                                                                                       // [0x3bad920] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class APlayerController* GetOwningPlayer();                                                                              // [0x3bad8f0] BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class ULocalPlayer* GetOwningLocalPlayer();                                                                              // [0x3bad8c0] BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// TEnumAsByte<EMouseCursor> GetMouseCursor__DelegateSignature();                                                           // [0x25a7960] Public|Delegate      
	// FLinearColor GetLinearColor__DelegateSignature();                                                                        // [0x25a7960] Public|Delegate|HasDefaults 
	// bool GetIsEnabled();                                                                                                     // [0x3bad890] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetInt32__DelegateSignature();                                                                                   // [0x25a7960] Public|Delegate      
	// class UGameInstance* GetGameInstance();                                                                                  // [0x3bad860] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetFloat__DelegateSignature();                                                                                     // [0x25a7960] Public|Delegate      
	// FVector2D GetDesiredSize();                                                                                              // [0x3bad7f0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// EWidgetClipping GetClipping();                                                                                           // [0x3bad7c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// ECheckBoxState GetCheckBoxState__DelegateSignature();                                                                    // [0x25a7960] Public|Delegate      
	// FGeometry GetCachedGeometry();                                                                                           // [0x3bad780] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool GetBool__DelegateSignature();                                                                                       // [0x25a7960] Public|Delegate      
	// FText GetAccessibleText();                                                                                               // [0x3bad6e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FText GetAccessibleSummaryText();                                                                                        // [0x3bad640] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UWidget* GenerateWidgetForString__DelegateSignature(FString Item);                                                 // [0x25a7960] Public|Delegate      
	// class UWidget* GenerateWidgetForObject__DelegateSignature(class UObject* Item);                                          // [0x25a7960] Public|Delegate      
	// void ForceVolatile(bool bForce);                                                                                         // [0x3bad5b0] Final|Native|Public|BlueprintCallable 
	// void ForceLayoutPrepass();                                                                                               // [0x3bad590] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/UMG.DynamicPropertyPath
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
struct FDynamicPropertyPath : FCachedPropertyPath
{ 
};

/// Struct /Script/UMG.DelegateRuntimeBinding
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align 8 pad: 0x0000
struct FDelegateRuntimeBinding
{ 
	FString                                            ObjectName;                                                 // 0x0000   (0x0010)  
	FName                                              PropertyName;                                               // 0x0010   (0x000C)  
	FName                                              FunctionName;                                               // 0x001C   (0x000C)  
	FDynamicPropertyPath                               SourcePath;                                                 // 0x0028   (0x0028)  
	EBindingKind                                       Kind;                                                       // 0x0050   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0051   (0x0007)  MISSED
};

/// Class /Script/UMG.WidgetBlueprintGeneratedClass
/// Size: 0x0040 (64 bytes) (0x000338 - 0x000378) align 8 pad: 0x0000
class UWidgetBlueprintGeneratedClass : public UBlueprintGeneratedClass
{ 
public:
	class UWidgetTree*                                 WidgetTree;                                                 // 0x0338   (0x0008)  
	bool                                               bClassRequiresNativeTick : 1;                               // 0x0340:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0341   (0x0007)  MISSED
	TArray<FDelegateRuntimeBinding>                    Bindings;                                                   // 0x0348   (0x0010)  
	TArray<class UWidgetAnimation*>                    Animations;                                                 // 0x0358   (0x0010)  
	TArray<FName>                                      NamedSlots;                                                 // 0x0368   (0x0010)  
};

/// Class /Script/UMG.PanelWidget
/// Size: 0x0018 (24 bytes) (0x000128 - 0x000140) align 8 pad: 0x0000
class UPanelWidget : public UWidget
{ 
public:
	TArray<class UPanelSlot*>                          Slots;                                                      // 0x0128   (0x0010)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0138   (0x0008)  MISSED
	// bool RemoveChildAt(int32_t Index);                                                                                       // [0x3b99c00] Final|Native|Public|BlueprintCallable 
	// bool RemoveChild(class UWidget* Content);                                                                                // [0x3b99b60] Final|Native|Public|BlueprintCallable 
	// bool HasChild(class UWidget* Content);                                                                                   // [0x3b999d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool HasAnyChildren();                                                                                                   // [0x3b999a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetChildrenCount();                                                                                              // [0x3b99650] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetChildIndex(class UWidget* Content);                                                                           // [0x3b995b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UWidget* GetChildAt(int32_t Index);                                                                                // [0x3b99510] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// TArray<UWidget*> GetAllChildren();                                                                                       // [0x3b99490] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void ClearChildren();                                                                                                    // [0x3b993c0] Native|Public|BlueprintCallable 
	// class UPanelSlot* AddChild(class UWidget* Content);                                                                      // [0x3b99280] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.ContentWidget
/// Size: 0x0000 (0 bytes) (0x000140 - 0x000140) align 8 pad: 0x0000
class UContentWidget : public UPanelWidget
{ 
public:
	// class UPanelSlot* SetContent(class UWidget* Content);                                                                    // [0x3b90f40] Final|Native|Public|BlueprintCallable 
	// class UPanelSlot* GetContentSlot();                                                                                      // [0x3b907a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UWidget* GetContent();                                                                                             // [0x3b90770] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/UMG.NamedSlotBinding
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FNamedSlotBinding
{ 
	FName                                              Name;                                                       // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	class UWidget*                                     Content;                                                    // 0x0010   (0x0008)  
};

/// Struct /Script/UMG.AnimationEventBinding
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FAnimationEventBinding
{ 
	class UWidgetAnimation*                            Animation;                                                  // 0x0000   (0x0008)  
	SDK_UNDEFINED(20,273) /* FDelegateProperty */      __um(Delegate);                                             // 0x0008   (0x0014)  
	EWidgetAnimationEvent                              AnimationEvent;                                             // 0x001C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x001D   (0x0003)  MISSED
	FName                                              UserTag;                                                    // 0x0020   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Class /Script/UMG.UserWidget
/// Size: 0x0168 (360 bytes) (0x000128 - 0x000290) align 8 pad: 0x0000
class UUserWidget : public UWidget
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0128   (0x0008)  MISSED
	FLinearColor                                       ColorAndOpacity;                                            // 0x0130   (0x0010)  
	SDK_UNDEFINED(20,274) /* FDelegateProperty */      __um(ColorAndOpacityDelegate);                              // 0x0140   (0x0014)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0154   (0x0004)  MISSED
	FSlateColor                                        ForegroundColor;                                            // 0x0158   (0x0028)  
	SDK_UNDEFINED(20,275) /* FDelegateProperty */      __um(ForegroundColorDelegate);                              // 0x0180   (0x0014)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0194   (0x0004)  MISSED
	SDK_UNDEFINED(16,276) /* FMulticastInlineDelegate */ __um(OnVisibilityChanged);                                // 0x0198   (0x0010)  
	unsigned char                                      UnknownData03_6[0x18];                                      // 0x01A8   (0x0018)  MISSED
	FMargin                                            Padding;                                                    // 0x01C0   (0x0010)  
	TArray<class UUMGSequencePlayer*>                  ActiveSequencePlayers;                                      // 0x01D0   (0x0010)  
	class UUMGSequenceTickManager*                     AnimationTickManager;                                       // 0x01E0   (0x0008)  
	TArray<class UUMGSequencePlayer*>                  StoppedSequencePlayers;                                     // 0x01E8   (0x0010)  
	TArray<FNamedSlotBinding>                          NamedSlotBindings;                                          // 0x01F8   (0x0010)  
	class UWidgetTree*                                 WidgetTree;                                                 // 0x0208   (0x0008)  
	int32_t                                            Priority;                                                   // 0x0210   (0x0004)  
	bool                                               bSupportsKeyboardFocus : 1;                                 // 0x0214:0 (0x0001)  
	bool                                               bIsFocusable : 1;                                           // 0x0214:1 (0x0001)  
	bool                                               bStopAction : 1;                                            // 0x0214:2 (0x0001)  
	bool                                               bHasScriptImplementedTick : 1;                              // 0x0214:3 (0x0001)  
	bool                                               bHasScriptImplementedPaint : 1;                             // 0x0214:4 (0x0001)  
	unsigned char                                      UnknownData04_5[0xB];                                       // 0x0215   (0x000B)  MISSED
	EWidgetTickFrequency                               TickFrequency;                                              // 0x0220   (0x0001)  
	unsigned char                                      UnknownData05_6[0x7];                                       // 0x0221   (0x0007)  MISSED
	class UInputComponent*                             InputComponent;                                             // 0x0228   (0x0008)  
	TArray<FAnimationEventBinding>                     AnimationCallbacks;                                         // 0x0230   (0x0010)  
	unsigned char                                      UnknownData06_7[0x50];                                      // 0x0240   (0x0050)  MISSED
	// void UnregisterInputComponent();                                                                                         // [0x3bab6b0] Final|Native|Protected|BlueprintCallable 
	// void UnbindFromAnimationStarted(class UWidgetAnimation* Animation, FDelegateProperty Delegate);                          // [0x3bab5c0] Final|Native|Public|BlueprintCallable 
	// void UnbindFromAnimationFinished(class UWidgetAnimation* Animation, FDelegateProperty Delegate);                         // [0x3bab4d0] Final|Native|Public|BlueprintCallable 
	// void UnbindAllFromAnimationStarted(class UWidgetAnimation* Animation);                                                   // [0x3bab440] Final|Native|Public|BlueprintCallable 
	// void UnbindAllFromAnimationFinished(class UWidgetAnimation* Animation);                                                  // [0x3bab3b0] Final|Native|Public|BlueprintCallable 
	// void Tick(FGeometry MyGeometry, float InDeltaTime);                                                                      // [0x25a7960] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// void StopListeningForInputAction(FName ActionName, TEnumAsByte<EInputEvent> EventType);                                  // [0x3bab2c0] Final|Native|Protected|BlueprintCallable 
	// void StopListeningForAllInputActions();                                                                                  // [0x3bab2a0] Final|Native|Protected|BlueprintCallable 
	// void StopAnimationsAndLatentActions();                                                                                   // [0x3bab280] Final|Native|Public|BlueprintCallable 
	// void StopAnimation(class UWidgetAnimation* InAnimation);                                                                 // [0x3bab1f0] Final|Native|Public|BlueprintCallable 
	// void StopAllAnimations();                                                                                                // [0x3bab1d0] Final|Native|Public|BlueprintCallable 
	// void SetPositionInViewport(FVector2D Position, bool bRemoveDPIScale);                                                    // [0x3baaec0] Final|BlueprintCosmetic|Native|Public|HasDefaults|BlueprintCallable 
	// void SetPlaybackSpeed(class UWidgetAnimation* InAnimation, float PlaybackSpeed);                                         // [0x3baadf0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// void SetPadding(FMargin InPadding);                                                                                      // [0x3baad60] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// void SetOwningPlayer(class APlayerController* LocalPlayerController);                                                    // [0x3baacd0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// void SetNumLoopsToPlay(class UWidgetAnimation* InAnimation, int32_t NumLoopsToPlay);                                     // [0x3baac00] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// void SetInputActionPriority(int32_t NewPriority);                                                                        // [0x3baa9a0] Final|Native|Protected|BlueprintCallable 
	// void SetInputActionBlocking(bool bShouldBlock);                                                                          // [0x3baa910] Final|Native|Protected|BlueprintCallable 
	// void SetForegroundColor(FSlateColor InForegroundColor);                                                                  // [0x3baa790] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// void SetDesiredSizeInViewport(FVector2D Size);                                                                           // [0x3baa710] Final|BlueprintCosmetic|Native|Public|HasDefaults|BlueprintCallable 
	// void SetColorAndOpacity(FLinearColor InColorAndOpacity);                                                                 // [0x3baa5f0] Final|BlueprintCosmetic|Native|Public|HasDefaults|BlueprintCallable 
	// void SetAnimationCurrentTime(class UWidgetAnimation* InAnimation, float InTime);                                         // [0x3baa520] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// void SetAnchorsInViewport(FAnchors Anchors);                                                                             // [0x3baa490] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// void SetAlignmentInViewport(FVector2D Alignment);                                                                        // [0x3baa410] Final|BlueprintCosmetic|Native|Public|HasDefaults|BlueprintCallable 
	// void ReverseAnimation(class UWidgetAnimation* InAnimation);                                                              // [0x3baa380] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// void RemoveFromViewport();                                                                                               // [0x3baa360] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// void RegisterInputComponent();                                                                                           // [0x3baa340] Final|Native|Protected|BlueprintCallable 
	// void PreConstruct(bool IsDesignTime);                                                                                    // [0x25a7960] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// void PlaySound(class USoundBase* SoundToPlay);                                                                           // [0x3baa2b0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// class UUMGSequencePlayer* PlayAnimationTimeRange(class UWidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int32_t NumLoopsToPlay, TEnumAsByte<EUMGSequencePlayMode> PlayMode, float PlaybackSpeed, bool bRestoreState); // [0x3baa090] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// class UUMGSequencePlayer* PlayAnimationReverse(class UWidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState); // [0x3ba9f70] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// class UUMGSequencePlayer* PlayAnimationForward(class UWidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState); // [0x3ba9e50] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// class UUMGSequencePlayer* PlayAnimation(class UWidgetAnimation* InAnimation, float StartAtTime, int32_t NumLoopsToPlay, TEnumAsByte<EUMGSequencePlayMode> PlayMode, float PlaybackSpeed, bool bRestoreState); // [0x3ba9c80] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// float PauseAnimation(class UWidgetAnimation* InAnimation);                                                               // [0x3ba9be0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// FEventReply OnTouchStarted(FGeometry MyGeometry, FPointerEvent& InTouchEvent);                                           // [0x25a7960] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// FEventReply OnTouchMoved(FGeometry MyGeometry, FPointerEvent& InTouchEvent);                                             // [0x25a7960] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// FEventReply OnTouchGesture(FGeometry MyGeometry, FPointerEvent& GestureEvent);                                           // [0x25a7960] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// FEventReply OnTouchForceChanged(FGeometry MyGeometry, FPointerEvent& InTouchEvent);                                      // [0x25a7960] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// FEventReply OnTouchEnded(FGeometry MyGeometry, FPointerEvent& InTouchEvent);                                             // [0x25a7960] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// void OnRemovedFromFocusPath(FFocusEvent InFocusEvent);                                                                   // [0x25a7960] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// FEventReply OnPreviewMouseButtonDown(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                   // [0x25a7960] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// FEventReply OnPreviewKeyDown(FGeometry MyGeometry, FKeyEvent InKeyEvent);                                                // [0x25a7960] Event|Public|BlueprintEvent 
	// void OnPaint(FPaintContext& Context);                                                                                    // [0x25a7960] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent|Const 
	// FEventReply OnMouseWheel(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                               // [0x25a7960] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// FEventReply OnMouseMove(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                                // [0x25a7960] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// void OnMouseLeave(FPointerEvent& MouseEvent);                                                                            // [0x25a7960] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// void OnMouseEnter(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                                      // [0x25a7960] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// void OnMouseCaptureLost();                                                                                               // [0x25a7960] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// FEventReply OnMouseButtonUp(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                            // [0x25a7960] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// FEventReply OnMouseButtonDown(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                          // [0x25a7960] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// FEventReply OnMouseButtonDoubleClick(FGeometry InMyGeometry, FPointerEvent& InMouseEvent);                               // [0x25a7960] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// FEventReply OnMotionDetected(FGeometry MyGeometry, FMotionEvent InMotionEvent);                                          // [0x25a7960] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// FEventReply OnKeyUp(FGeometry MyGeometry, FKeyEvent InKeyEvent);                                                         // [0x25a7960] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// FEventReply OnKeyDown(FGeometry MyGeometry, FKeyEvent InKeyEvent);                                                       // [0x25a7960] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// FEventReply OnKeyChar(FGeometry MyGeometry, FCharacterEvent InCharacterEvent);                                           // [0x25a7960] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// void OnInitialized();                                                                                                    // [0x25a7960] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// FEventReply OnFocusReceived(FGeometry MyGeometry, FFocusEvent InFocusEvent);                                             // [0x25a7960] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// void OnFocusLost(FFocusEvent InFocusEvent);                                                                              // [0x25a7960] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// bool OnDrop(FGeometry MyGeometry, FPointerEvent PointerEvent, class UDragDropOperation* Operation);                      // [0x25a7960] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// bool OnDragOver(FGeometry MyGeometry, FPointerEvent PointerEvent, class UDragDropOperation* Operation);                  // [0x25a7960] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// void OnDragLeave(FPointerEvent PointerEvent, class UDragDropOperation* Operation);                                       // [0x25a7960] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// void OnDragEnter(FGeometry MyGeometry, FPointerEvent PointerEvent, class UDragDropOperation* Operation);                 // [0x25a7960] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// void OnDragDetected(FGeometry MyGeometry, FPointerEvent& PointerEvent, class UDragDropOperation*& Operation);            // [0x25a7960] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// void OnDragCancelled(FPointerEvent& PointerEvent, class UDragDropOperation* Operation);                                  // [0x25a7960] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// void OnAnimationStarted(class UWidgetAnimation* Animation);                                                              // [0x3ba9b50] BlueprintCosmetic|Native|Event|Protected|BlueprintEvent 
	// void OnAnimationFinished(class UWidgetAnimation* Animation);                                                             // [0x3ba9ac0] BlueprintCosmetic|Native|Event|Protected|BlueprintEvent 
	// FEventReply OnAnalogValueChanged(FGeometry MyGeometry, FAnalogInputEvent InAnalogInputEvent);                            // [0x25a7960] Event|Public|BlueprintEvent 
	// void OnAddedToFocusPath(FFocusEvent InFocusEvent);                                                                       // [0x25a7960] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// void ListenForInputAction(FName ActionName, TEnumAsByte<EInputEvent> EventType, bool bConsume, FDelegateProperty callback); // [0x3ba9930] Final|Native|Protected|BlueprintCallable 
	// bool IsPlayingAnimation();                                                                                               // [0x3ba9900] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsListeningForInputAction(FName ActionName);                                                                        // [0x3ba9850] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// bool IsInViewport();                                                                                                     // [0x3ba9620] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsInteractable();                                                                                                   // [0x25a7960] BlueprintCosmetic|Event|Public|BlueprintEvent|Const 
	// bool IsAnyAnimationPlaying();                                                                                            // [0x3ba9820] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsAnimationPlayingForward(class UWidgetAnimation* InAnimation);                                                     // [0x3ba9780] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// bool IsAnimationPlaying(class UWidgetAnimation* InAnimation);                                                            // [0x3ba96e0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class APawn* GetOwningPlayerPawn();                                                                                      // [0x3ba9680] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class APlayerCameraManager* GetOwningPlayerCameraManager();                                                              // [0x3ba9650] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool GetIsVisible();                                                                                                     // [0x3ba9620] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetAnimationCurrentTime(class UWidgetAnimation* InAnimation);                                                      // [0x3ba9580] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FAnchors GetAnchorsInViewport();                                                                                         // [0x3ba9540] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector2D GetAlignmentInViewport();                                                                                      // [0x3ba9500] Final|BlueprintCosmetic|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// void FlushAnimations();                                                                                                  // [0x3ba94e0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// void Destruct();                                                                                                         // [0x25a7960] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// void Construct();                                                                                                        // [0x25a7960] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// void CancelLatentActions();                                                                                              // [0x3ba9480] Final|Native|Public|BlueprintCallable 
	// void BindToAnimationStarted(class UWidgetAnimation* Animation, FDelegateProperty Delegate);                              // [0x3ba9390] Final|Native|Public|BlueprintCallable 
	// void BindToAnimationFinished(class UWidgetAnimation* Animation, FDelegateProperty Delegate);                             // [0x3ba92a0] Final|Native|Public|BlueprintCallable 
	// void BindToAnimationEvent(class UWidgetAnimation* Animation, FDelegateProperty Delegate, EWidgetAnimationEvent AnimationEvent, FName UserTag); // [0x3ba9120] Final|Native|Public|BlueprintCallable 
	// void AddToViewport(int32_t ZOrder);                                                                                      // [0x3ba9090] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// bool AddToPlayerScreen(int32_t ZOrder);                                                                                  // [0x3ba8ff0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.PanelSlot
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UPanelSlot : public UVisual
{ 
public:
	class UPanelWidget*                                Parent;                                                     // 0x0030   (0x0008)  
	class UWidget*                                     Content;                                                    // 0x0038   (0x0008)  
};

/// Class /Script/UMG.AsyncTaskDownloadImage
/// Size: 0x0020 (32 bytes) (0x000038 - 0x000058) align 8 pad: 0x0000
class UAsyncTaskDownloadImage : public UBlueprintAsyncActionBase
{ 
public:
	SDK_UNDEFINED(16,277) /* FMulticastInlineDelegate */ __um(OnSuccess);                                          // 0x0038   (0x0010)  
	SDK_UNDEFINED(16,278) /* FMulticastInlineDelegate */ __um(OnFail);                                             // 0x0048   (0x0010)  
	// class UAsyncTaskDownloadImage* DownloadImage(FString URL);                                                               // [0x3b8bb50] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/UMG.BackgroundBlur
/// Size: 0x00C0 (192 bytes) (0x000140 - 0x000200) align 8 pad: 0x0000
class UBackgroundBlur : public UContentWidget
{ 
public:
	FMargin                                            Padding;                                                    // 0x0140   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0150   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0151   (0x0001)  
	bool                                               bApplyAlphaToBlur;                                          // 0x0152   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0153   (0x0001)  MISSED
	float                                              blurStrength;                                               // 0x0154   (0x0004)  
	bool                                               bOverrideAutoRadiusCalculation;                             // 0x0158   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0159   (0x0003)  MISSED
	int32_t                                            BlurRadius;                                                 // 0x015C   (0x0004)  
	FSlateBrush                                        LowQualityFallbackBrush;                                    // 0x0160   (0x0090)  
	unsigned char                                      UnknownData02_7[0x10];                                      // 0x01F0   (0x0010)  MISSED
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x3b8da80] Final|Native|Public|BlueprintCallable 
	// void SetPadding(FMargin InPadding);                                                                                      // [0x3b8d290] Final|Native|Public|BlueprintCallable 
	// void SetLowQualityFallbackBrush(FSlateBrush& InBrush);                                                                   // [0x3b8cee0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3b8cbb0] Final|Native|Public|BlueprintCallable 
	// void SetBlurStrength(float InStrength);                                                                                  // [0x3b8c430] Native|Public|BlueprintCallable 
	// void SetBlurRadius(int32_t InBlurRadius);                                                                                // [0x3b8c3a0] Final|Native|Public|BlueprintCallable 
	// void SetApplyAlphaToBlur(bool bInApplyAlphaToBlur);                                                                      // [0x3b8c1f0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.BackgroundBlurSlot
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UBackgroundBlurSlot : public UPanelSlot
{ 
public:
	FMargin                                            Padding;                                                    // 0x0040   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0050   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0051   (0x0001)  
	unsigned char                                      UnknownData00_7[0x16];                                      // 0x0052   (0x0016)  MISSED
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x3b8db00] Final|Native|Public|BlueprintCallable 
	// void SetPadding(FMargin InPadding);                                                                                      // [0x3b8d320] Final|Native|Public|BlueprintCallable 
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3b8cc30] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.PropertyBinding
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000070) align 8 pad: 0x0000
class UPropertyBinding : public UObject
{ 
public:
	SDK_UNDEFINED(8,279) /* TWeakObjectPtr<UObject*> */ __um(SourceObject);                                        // 0x0030   (0x0008)  
	FDynamicPropertyPath                               SourcePath;                                                 // 0x0038   (0x0028)  
	FName                                              DestinationProperty;                                        // 0x0060   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x006C   (0x0004)  MISSED
};

/// Class /Script/UMG.BoolBinding
/// Size: 0x0000 (0 bytes) (0x000070 - 0x000070) align 8 pad: 0x0000
class UBoolBinding : public UPropertyBinding
{ 
public:
	// bool GetValue();                                                                                                         // [0x3b8be60] Final|Native|Public|Const 
};

/// Class /Script/UMG.Border
/// Size: 0x0170 (368 bytes) (0x000140 - 0x0002B0) align 8 pad: 0x0000
class UBorder : public UContentWidget
{ 
public:
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0140   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0141   (0x0001)  
	bool                                               bShowEffectWhenDisabled : 1;                                // 0x0142:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0143   (0x0001)  MISSED
	FLinearColor                                       ContentColorAndOpacity;                                     // 0x0144   (0x0010)  
	SDK_UNDEFINED(20,280) /* FDelegateProperty */      __um(ContentColorAndOpacityDelegate);                       // 0x0154   (0x0014)  
	FMargin                                            Padding;                                                    // 0x0168   (0x0010)  
	FSlateBrush                                        Background;                                                 // 0x0178   (0x0090)  
	SDK_UNDEFINED(20,281) /* FDelegateProperty */      __um(BackgroundDelegate);                                   // 0x0208   (0x0014)  
	FLinearColor                                       BrushColor;                                                 // 0x021C   (0x0010)  
	SDK_UNDEFINED(20,282) /* FDelegateProperty */      __um(BrushColorDelegate);                                   // 0x022C   (0x0014)  
	FVector2D                                          DesiredSizeScale;                                           // 0x0240   (0x0008)  
	bool                                               bFlipForRightToLeftFlowDirection;                           // 0x0248   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0249   (0x0003)  MISSED
	SDK_UNDEFINED(20,283) /* FDelegateProperty */      __um(OnMouseButtonDownEvent);                               // 0x024C   (0x0014)  
	SDK_UNDEFINED(20,284) /* FDelegateProperty */      __um(OnMouseButtonUpEvent);                                 // 0x0260   (0x0014)  
	SDK_UNDEFINED(20,285) /* FDelegateProperty */      __um(OnMouseMoveEvent);                                     // 0x0274   (0x0014)  
	SDK_UNDEFINED(20,286) /* FDelegateProperty */      __um(OnMouseDoubleClickEvent);                              // 0x0288   (0x0014)  
	unsigned char                                      UnknownData02_7[0x14];                                      // 0x029C   (0x0014)  MISSED
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x3b8db80] Final|Native|Public|BlueprintCallable 
	// void SetPadding(FMargin InPadding);                                                                                      // [0x3b8d3b0] Final|Native|Public|BlueprintCallable 
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3b8ccb0] Final|Native|Public|BlueprintCallable 
	// void SetDesiredSizeScale(FVector2D InScale);                                                                             // [0x3b8cb30] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetContentColorAndOpacity(FLinearColor InContentColorAndOpacity);                                                   // [0x3b8caa0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetBrushFromTexture(class UTexture2D* Texture);                                                                     // [0x3b8c800] Final|Native|Public|BlueprintCallable 
	// void SetBrushFromMaterial(class UMaterialInterface* Material);                                                           // [0x3b8c770] Final|Native|Public|BlueprintCallable 
	// void SetBrushFromAsset(class USlateBrushAsset* Asset);                                                                   // [0x3b8c6e0] Final|Native|Public|BlueprintCallable 
	// void SetBrushColor(FLinearColor InBrushColor);                                                                           // [0x3b8c650] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetBrush(FSlateBrush& InBrush);                                                                                     // [0x3b8c4c0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// class UMaterialInstanceDynamic* GetDynamicMaterial();                                                                    // [0x3b8bd20] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.BorderSlot
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UBorderSlot : public UPanelSlot
{ 
public:
	FMargin                                            Padding;                                                    // 0x0040   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0050   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0051   (0x0001)  
	unsigned char                                      UnknownData00_7[0x16];                                      // 0x0052   (0x0016)  MISSED
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x3b8dc00] Final|Native|Public|BlueprintCallable 
	// void SetPadding(FMargin InPadding);                                                                                      // [0x3b8d440] Final|Native|Public|BlueprintCallable 
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3b8cd30] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.BrushBinding
/// Size: 0x0008 (8 bytes) (0x000070 - 0x000078) align 8 pad: 0x0000
class UBrushBinding : public UPropertyBinding
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0070   (0x0008)  MISSED
	// FSlateBrush GetValue();                                                                                                  // [0x3b8be90] Final|Native|Public|Const 
};

/// Class /Script/UMG.Button
/// Size: 0x0338 (824 bytes) (0x000140 - 0x000478) align 8 pad: 0x0000
class UButton : public UContentWidget
{ 
public:
	class USlateWidgetStyleAsset*                      Style;                                                      // 0x0140   (0x0008)  
	FButtonStyle                                       WidgetStyle;                                                // 0x0148   (0x02A8)  
	FLinearColor                                       ColorAndOpacity;                                            // 0x03F0   (0x0010)  
	FLinearColor                                       BackgroundColor;                                            // 0x0400   (0x0010)  
	TEnumAsByte<EButtonClickMethod>                    ClickMethod;                                                // 0x0410   (0x0001)  
	TEnumAsByte<EButtonTouchMethod>                    TouchMethod;                                                // 0x0411   (0x0001)  
	TEnumAsByte<EButtonPressMethod>                    PressMethod;                                                // 0x0412   (0x0001)  
	bool                                               IsFocusable;                                                // 0x0413   (0x0001)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0414   (0x0004)  MISSED
	SDK_UNDEFINED(16,287) /* FMulticastInlineDelegate */ __um(OnClicked);                                          // 0x0418   (0x0010)  
	SDK_UNDEFINED(16,288) /* FMulticastInlineDelegate */ __um(OnPressed);                                          // 0x0428   (0x0010)  
	SDK_UNDEFINED(16,289) /* FMulticastInlineDelegate */ __um(OnReleased);                                         // 0x0438   (0x0010)  
	SDK_UNDEFINED(16,290) /* FMulticastInlineDelegate */ __um(OnHovered);                                          // 0x0448   (0x0010)  
	SDK_UNDEFINED(16,291) /* FMulticastInlineDelegate */ __um(OnUnhovered);                                        // 0x0458   (0x0010)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0468   (0x0010)  MISSED
	// void SetTouchMethod(TEnumAsByte<EButtonTouchMethod> InTouchMethod);                                                      // [0x3b8d980] Final|Native|Public|BlueprintCallable 
	// void SetStyle(FButtonStyle& InStyle);                                                                                    // [0x3b8d8a0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetPressMethod(TEnumAsByte<EButtonPressMethod> InPressMethod);                                                      // [0x3b8d5d0] Final|Native|Public|BlueprintCallable 
	// void SetColorAndOpacity(FLinearColor InColorAndOpacity);                                                                 // [0x3b8ca10] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetClickMethod(TEnumAsByte<EButtonClickMethod> InClickMethod);                                                      // [0x3b8c910] Final|Native|Public|BlueprintCallable 
	// void SetBackgroundColor(FLinearColor InBackgroundColor);                                                                 // [0x3b8c310] Final|Native|Public|HasDefaults|BlueprintCallable 
	// bool IsPressed();                                                                                                        // [0x3b8bff0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.ButtonSlot
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UButtonSlot : public UPanelSlot
{ 
public:
	FMargin                                            Padding;                                                    // 0x0040   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0050   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0051   (0x0001)  
	unsigned char                                      UnknownData00_7[0x16];                                      // 0x0052   (0x0016)  MISSED
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x20f3700] Final|Native|Public|BlueprintCallable 
	// void SetPadding(FMargin InPadding);                                                                                      // [0x20f3670] Final|Native|Public|BlueprintCallable 
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x20f35f0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.CanvasPanel
/// Size: 0x0010 (16 bytes) (0x000140 - 0x000150) align 8 pad: 0x0000
class UCanvasPanel : public UPanelWidget
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0140   (0x0010)  MISSED
	// class UCanvasPanelSlot* AddChildToCanvas(class UWidget* Content);                                                        // [0x3b8bab0] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/UMG.AnchorData
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 4 pad: 0x0000
struct FAnchorData
{ 
	FMargin                                            Offsets;                                                    // 0x0000   (0x0010)  
	FAnchors                                           Anchors;                                                    // 0x0010   (0x0010)  
	FVector2D                                          Alignment;                                                  // 0x0020   (0x0008)  
};

/// Class /Script/UMG.CanvasPanelSlot
/// Size: 0x0038 (56 bytes) (0x000040 - 0x000078) align 8 pad: 0x0000
class UCanvasPanelSlot : public UPanelSlot
{ 
public:
	FAnchorData                                        LayoutData;                                                 // 0x0040   (0x0028)  
	bool                                               bAutoSize;                                                  // 0x0068   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0069   (0x0003)  MISSED
	int32_t                                            ZOrder;                                                     // 0x006C   (0x0004)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0070   (0x0008)  MISSED
	// void SetZOrder(int32_t InZOrder);                                                                                        // [0x3b8dc80] Final|Native|Public|BlueprintCallable 
	// void setSize(FVector2D InSize);                                                                                          // [0x3b8d820] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetPosition(FVector2D InPosition);                                                                                  // [0x3b8d550] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetOffsets(FMargin InOffset);                                                                                       // [0x3b8d200] Final|Native|Public|BlueprintCallable 
	// void SetMinimum(FVector2D InMinimumAnchors);                                                                             // [0x3b8d0f0] Final|Native|Public|HasDefaults 
	// void SetMaximum(FVector2D InMaximumAnchors);                                                                             // [0x3b8d070] Final|Native|Public|HasDefaults 
	// void SetLayout(FAnchorData& InLayoutData);                                                                               // [0x3b8ce40] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetAutoSize(bool InbAutoSize);                                                                                      // [0x3b8c280] Final|Native|Public|BlueprintCallable 
	// void SetAnchors(FAnchors InAnchors);                                                                                     // [0x3b8c160] Final|Native|Public|BlueprintCallable 
	// void SetAlignment(FVector2D InAlignment);                                                                                // [0x3b8c0e0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// int32_t GetZOrder();                                                                                                     // [0x3b8bf90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector2D GetSize();                                                                                                     // [0x3b8be20] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FVector2D GetPosition();                                                                                                 // [0x3b8bde0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// FMargin GetOffsets();                                                                                                    // [0x3b8bda0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FAnchorData GetLayout();                                                                                                 // [0x3b8bd50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool GetAutoSize();                                                                                                      // [0x3b8bcc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FAnchors GetAnchors();                                                                                                   // [0x3b8bc80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector2D GetAlignment();                                                                                                // [0x3b8bc40] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.CheckBox
/// Size: 0x06B0 (1712 bytes) (0x000140 - 0x0007F0) align 8 pad: 0x0000
class UCheckBox : public UContentWidget
{ 
public:
	ECheckBoxState                                     CheckedState;                                               // 0x0140   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0141   (0x0003)  MISSED
	SDK_UNDEFINED(20,292) /* FDelegateProperty */      __um(CheckedStateDelegate);                                 // 0x0144   (0x0014)  
	FCheckBoxStyle                                     WidgetStyle;                                                // 0x0158   (0x05E0)  
	class USlateWidgetStyleAsset*                      Style;                                                      // 0x0738   (0x0008)  
	class USlateBrushAsset*                            UncheckedImage;                                             // 0x0740   (0x0008)  
	class USlateBrushAsset*                            UncheckedHoveredImage;                                      // 0x0748   (0x0008)  
	class USlateBrushAsset*                            UncheckedPressedImage;                                      // 0x0750   (0x0008)  
	class USlateBrushAsset*                            CheckedImage;                                               // 0x0758   (0x0008)  
	class USlateBrushAsset*                            CheckedHoveredImage;                                        // 0x0760   (0x0008)  
	class USlateBrushAsset*                            CheckedPressedImage;                                        // 0x0768   (0x0008)  
	class USlateBrushAsset*                            UndeterminedImage;                                          // 0x0770   (0x0008)  
	class USlateBrushAsset*                            UndeterminedHoveredImage;                                   // 0x0778   (0x0008)  
	class USlateBrushAsset*                            UndeterminedPressedImage;                                   // 0x0780   (0x0008)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0788   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0789   (0x0003)  MISSED
	FMargin                                            Padding;                                                    // 0x078C   (0x0010)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x079C   (0x0004)  MISSED
	FSlateColor                                        BorderBackgroundColor;                                      // 0x07A0   (0x0028)  
	TEnumAsByte<EButtonClickMethod>                    ClickMethod;                                                // 0x07C8   (0x0001)  
	TEnumAsByte<EButtonTouchMethod>                    TouchMethod;                                                // 0x07C9   (0x0001)  
	TEnumAsByte<EButtonPressMethod>                    PressMethod;                                                // 0x07CA   (0x0001)  
	bool                                               IsFocusable;                                                // 0x07CB   (0x0001)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x07CC   (0x0004)  MISSED
	SDK_UNDEFINED(16,293) /* FMulticastInlineDelegate */ __um(OnCheckStateChanged);                                // 0x07D0   (0x0010)  
	unsigned char                                      UnknownData04_7[0x10];                                      // 0x07E0   (0x0010)  MISSED
	// void SetTouchMethod(TEnumAsByte<EButtonTouchMethod> InTouchMethod);                                                      // [0x3b8da00] Final|Native|Public|BlueprintCallable 
	// void SetPressMethod(TEnumAsByte<EButtonPressMethod> InPressMethod);                                                      // [0x3b8d650] Final|Native|Public|BlueprintCallable 
	// void SetIsChecked(bool InIsChecked);                                                                                     // [0x3b8cdb0] Final|Native|Public|BlueprintCallable 
	// void SetClickMethod(TEnumAsByte<EButtonClickMethod> InClickMethod);                                                      // [0x3b8c990] Final|Native|Public|BlueprintCallable 
	// void SetCheckedState(ECheckBoxState InCheckedState);                                                                     // [0x3b8c890] Final|Native|Public|BlueprintCallable 
	// bool IsPressed();                                                                                                        // [0x3b8c020] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsChecked();                                                                                                        // [0x3b8bfc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// ECheckBoxState GetCheckedState();                                                                                        // [0x3b8bcf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.NamedSlot
/// Size: 0x0010 (16 bytes) (0x000140 - 0x000150) align 8 pad: 0x0000
class UNamedSlot : public UContentWidget
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0140   (0x0010)  MISSED
};

/// Class /Script/UMG.CheckBoxGroup
/// Size: 0x0050 (80 bytes) (0x000150 - 0x0001A0) align 8 pad: 0x0000
class UCheckBoxGroup : public UNamedSlot
{ 
public:
	unsigned char                                      UnknownData00_3[0x10];                                      // 0x0150   (0x0010)  MISSED
	SDK_UNDEFINED(16,294) /* FMulticastInlineDelegate */ __um(SelectionChangedHandler);                            // 0x0160   (0x0010)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x0170   (0x0020)  MISSED
	class UWidgetSwitcher*                             Switcher;                                                   // 0x0190   (0x0008)  
	int32_t                                            CurrentSelectIndex;                                         // 0x0198   (0x0004)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x019C   (0x0004)  MISSED
	// void SetSelectIndex(int32_t Index, bool ForceSelect);                                                                    // [0x3b8d750] Final|Native|Public|BlueprintCallable 
	// void OnStateChanged(bool bIsChecked);                                                                                    // [0x3b8c050] Final|Native|Protected 
};

/// Class /Script/UMG.CheckedStateBinding
/// Size: 0x0008 (8 bytes) (0x000070 - 0x000078) align 8 pad: 0x0000
class UCheckedStateBinding : public UPropertyBinding
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0070   (0x0008)  MISSED
	// ECheckBoxState GetValue();                                                                                               // [0x3b8bf60] Final|Native|Public|Const 
};

/// Class /Script/UMG.CircularThrobber
/// Size: 0x00C0 (192 bytes) (0x000128 - 0x0001E8) align 8 pad: 0x0000
class UCircularThrobber : public UWidget
{ 
public:
	int32_t                                            NumberOfPieces;                                             // 0x0128   (0x0004)  
	float                                              Period;                                                     // 0x012C   (0x0004)  
	float                                              Radius;                                                     // 0x0130   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0134   (0x0004)  MISSED
	class USlateBrushAsset*                            PieceImage;                                                 // 0x0138   (0x0008)  
	FSlateBrush                                        Image;                                                      // 0x0140   (0x0090)  
	bool                                               bEnableRadius;                                              // 0x01D0   (0x0001)  
	unsigned char                                      UnknownData01_7[0x17];                                      // 0x01D1   (0x0017)  MISSED
	// void SetRadius(float InRadius);                                                                                          // [0x3b8d6d0] Final|Native|Public|BlueprintCallable 
	// void SetPeriod(float InPeriod);                                                                                          // [0x3b8d4d0] Final|Native|Public|BlueprintCallable 
	// void SetNumberOfPieces(int32_t InNumberOfPieces);                                                                        // [0x3b8d170] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.ColorBinding
/// Size: 0x0008 (8 bytes) (0x000070 - 0x000078) align 8 pad: 0x0000
class UColorBinding : public UPropertyBinding
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0070   (0x0008)  MISSED
	// FSlateColor GetSlateValue();                                                                                             // [0x3b90a30] Final|Native|Public|Const 
	// FLinearColor GetLinearValue();                                                                                           // [0x3b90800] Final|Native|Public|HasDefaults|Const 
};

/// Class /Script/UMG.ComboBox
/// Size: 0x0038 (56 bytes) (0x000128 - 0x000160) align 8 pad: 0x0000
class UComboBox : public UWidget
{ 
public:
	TArray<class UObject*>                             Items;                                                      // 0x0128   (0x0010)  
	SDK_UNDEFINED(20,295) /* FDelegateProperty */      __um(OnGenerateWidgetEvent);                                // 0x0138   (0x0014)  
	bool                                               bIsFocusable;                                               // 0x014C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x13];                                      // 0x014D   (0x0013)  MISSED
};

/// Class /Script/UMG.ComboBoxString
/// Size: 0x0DB8 (3512 bytes) (0x000128 - 0x000EE0) align 8 pad: 0x0000
class UComboBoxString : public UWidget
{ 
public:
	TArray<FString>                                    DefaultOptions;                                             // 0x0128   (0x0010)  
	FString                                            SelectedOption;                                             // 0x0138   (0x0010)  
	FComboBoxStyle                                     WidgetStyle;                                                // 0x0148   (0x0440)  
	FTableRowStyle                                     ItemStyle;                                                  // 0x0588   (0x0838)  
	FMargin                                            ContentPadding;                                             // 0x0DC0   (0x0010)  
	float                                              MaxListHeight;                                              // 0x0DD0   (0x0004)  
	bool                                               HasDownArrow;                                               // 0x0DD4   (0x0001)  
	bool                                               EnableGamepadNavigationMode;                                // 0x0DD5   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0DD6   (0x0002)  MISSED
	FSlateFontInfo                                     Font;                                                       // 0x0DD8   (0x0058)  
	FSlateColor                                        ForegroundColor;                                            // 0x0E30   (0x0028)  
	bool                                               bIsFocusable;                                               // 0x0E58   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0E59   (0x0003)  MISSED
	SDK_UNDEFINED(20,296) /* FDelegateProperty */      __um(OnGenerateWidgetEvent);                                // 0x0E5C   (0x0014)  
	SDK_UNDEFINED(16,297) /* FMulticastInlineDelegate */ __um(OnSelectionChanged);                                 // 0x0E70   (0x0010)  
	SDK_UNDEFINED(16,298) /* FMulticastInlineDelegate */ __um(OnOpening);                                          // 0x0E80   (0x0010)  
	unsigned char                                      UnknownData02_7[0x50];                                      // 0x0E90   (0x0050)  MISSED
	// void SetSelectedOption(FString Option);                                                                                  // [0x3b91970] Final|Native|Public|BlueprintCallable 
	// void SetSelectedIndex(int32_t Index);                                                                                    // [0x3b918e0] Final|Native|Public|BlueprintCallable 
	// bool RemoveOption(FString Option);                                                                                       // [0x3b90d30] Final|Native|Public|BlueprintCallable 
	// void RefreshOptions();                                                                                                   // [0x3b90c80] Final|Native|Public|BlueprintCallable 
	// void OnSelectionChangedEvent__DelegateSignature(FString SelectedItem, TEnumAsByte<ESelectInfo> SelectionType);           // [0x25a7960] MulticastDelegate|Public|Delegate 
	// void OnOpeningEvent__DelegateSignature();                                                                                // [0x25a7960] MulticastDelegate|Public|Delegate 
	// bool IsOpen();                                                                                                           // [0x3b90c50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FString GetSelectedOption();                                                                                             // [0x3b909b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetSelectedIndex();                                                                                              // [0x3b90980] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetOptionCount();                                                                                                // [0x3b90950] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FString GetOptionAtIndex(int32_t Index);                                                                                 // [0x3b90870] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t FindOptionIndex(FString Option);                                                                                 // [0x3b90630] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void ClearSelection();                                                                                                   // [0x3b90250] Final|Native|Public|BlueprintCallable 
	// void ClearOptions();                                                                                                     // [0x3b90230] Final|Native|Public|BlueprintCallable 
	// void AddOption(FString Option);                                                                                          // [0x3b900a0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.DragDropOperation
/// Size: 0x0060 (96 bytes) (0x000030 - 0x000090) align 8 pad: 0x0000
class UDragDropOperation : public UObject
{ 
public:
	FString                                            Tag;                                                        // 0x0030   (0x0010)  
	class UObject*                                     Payload;                                                    // 0x0040   (0x0008)  
	class UWidget*                                     DefaultDragVisual;                                          // 0x0048   (0x0008)  
	EDragPivot                                         Pivot;                                                      // 0x0050   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0051   (0x0003)  MISSED
	FVector2D                                          Offset;                                                     // 0x0054   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x005C   (0x0004)  MISSED
	SDK_UNDEFINED(16,299) /* FMulticastInlineDelegate */ __um(OnDrop);                                             // 0x0060   (0x0010)  
	SDK_UNDEFINED(16,300) /* FMulticastInlineDelegate */ __um(OnDragCancelled);                                    // 0x0070   (0x0010)  
	SDK_UNDEFINED(16,301) /* FMulticastInlineDelegate */ __um(OnDragged);                                          // 0x0080   (0x0010)  
	// void Drop(FPointerEvent& PointerEvent);                                                                                  // [0x3b904f0] Native|Event|Public|HasOutParms|BlueprintEvent 
	// void Dragged(FPointerEvent& PointerEvent);                                                                               // [0x3b903b0] Native|Event|Public|HasOutParms|BlueprintEvent 
	// void DragCancelled(FPointerEvent& PointerEvent);                                                                         // [0x3b90270] Native|Event|Public|HasOutParms|BlueprintEvent 
};

/// Struct /Script/UMG.SlateChildSize
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FSlateChildSize
{ 
	float                                              Value;                                                      // 0x0000   (0x0004)  
	TEnumAsByte<ESlateSizeRule>                        SizeRule;                                                   // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Struct /Script/UMG.RadialBoxSettings
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FRadialBoxSettings
{ 
	bool                                               bDistributeItemsEvenly;                                     // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              AngleBetweenItems;                                          // 0x0004   (0x0004)  
	float                                              StartingAngle;                                              // 0x0008   (0x0004)  
};

/// Struct /Script/UMG.UserWidgetPool
/// Size: 0x0080 (128 bytes) (0x000000 - 0x000080) align 8 pad: 0x0000
struct FUserWidgetPool
{ 
	TArray<class UUserWidget*>                         ActiveWidgets;                                              // 0x0000   (0x0010)  
	TArray<class UUserWidget*>                         InactiveWidgets;                                            // 0x0010   (0x0010)  
	unsigned char                                      UnknownData00_7[0x60];                                      // 0x0020   (0x0060)  MISSED
};

/// Class /Script/UMG.DynamicEntryBoxBase
/// Size: 0x00D0 (208 bytes) (0x000128 - 0x0001F8) align 8 pad: 0x0000
class UDynamicEntryBoxBase : public UWidget
{ 
public:
	EDynamicBoxType                                    EntryBoxType;                                               // 0x0128   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0129   (0x0003)  MISSED
	FVector2D                                          EntrySpacing;                                               // 0x012C   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0134   (0x0004)  MISSED
	TArray<FVector2D>                                  SpacingPattern;                                             // 0x0138   (0x0010)  
	FSlateChildSize                                    EntrySizeRule;                                              // 0x0148   (0x0008)  
	TEnumAsByte<EHorizontalAlignment>                  EntryHorizontalAlignment;                                   // 0x0150   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    EntryVerticalAlignment;                                     // 0x0151   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x0152   (0x0002)  MISSED
	int32_t                                            MaxElementSize;                                             // 0x0154   (0x0004)  
	FRadialBoxSettings                                 RadialBoxSettings;                                          // 0x0158   (0x000C)  
	unsigned char                                      UnknownData03_6[0x14];                                      // 0x0164   (0x0014)  MISSED
	FUserWidgetPool                                    EntryWidgetPool;                                            // 0x0178   (0x0080)  
	// void SetRadialSettings(FRadialBoxSettings& InSettings);                                                                  // [0x3b91770] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetEntrySpacing(FVector2D& InEntrySpacing);                                                                         // [0x3b90fe0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// int32_t GetNumEntries();                                                                                                 // [0x3b90840] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// TArray<UUserWidget*> GetAllEntries();                                                                                    // [0x3b906e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.DynamicEntryBox
/// Size: 0x0008 (8 bytes) (0x0001F8 - 0x000200) align 8 pad: 0x0000
class UDynamicEntryBox : public UDynamicEntryBoxBase
{ 
public:
	class UClass*                                      EntryWidgetClass;                                           // 0x01F8   (0x0008)  
	// void Reset(bool bDeleteWidgets);                                                                                         // [0x3b90de0] Final|Native|Public|BlueprintCallable 
	// void RemoveEntry(class UUserWidget* EntryWidget);                                                                        // [0x3b90ca0] Final|Native|Public|BlueprintCallable 
	// class UUserWidget* BP_CreateEntryOfClass(class UClass* EntryClass);                                                      // [0x3b90170] Final|Native|Private|BlueprintCallable 
	// class UUserWidget* BP_CreateEntry();                                                                                     // [0x3b90140] Final|Native|Private|BlueprintCallable 
};

/// Struct /Script/UMG.ShapedTextOptions
/// Size: 0x0003 (3 bytes) (0x000000 - 0x000003) align 1 pad: 0x0000
struct FShapedTextOptions
{ 
	bool                                               bOverride_TextShapingMethod : 1;                            // 0x0000:0 (0x0001)  
	bool                                               bOverride_TextFlowDirection : 1;                            // 0x0000:1 (0x0001)  
	ETextShapingMethod                                 TextShapingMethod;                                          // 0x0001   (0x0001)  
	ETextFlowDirection                                 TextFlowDirection;                                          // 0x0002   (0x0001)  
};

/// Class /Script/UMG.EditableText
/// Size: 0x0380 (896 bytes) (0x000128 - 0x0004A8) align 8 pad: 0x0000
class UEditableText : public UWidget
{ 
public:
	FText                                              Text;                                                       // 0x0128   (0x0018)  
	SDK_UNDEFINED(20,302) /* FDelegateProperty */      __um(TextDelegate);                                         // 0x0140   (0x0014)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0154   (0x0004)  MISSED
	FText                                              HintText;                                                   // 0x0158   (0x0018)  
	SDK_UNDEFINED(20,303) /* FDelegateProperty */      __um(HintTextDelegate);                                     // 0x0170   (0x0014)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0184   (0x0004)  MISSED
	FEditableTextStyle                                 WidgetStyle;                                                // 0x0188   (0x0238)  
	class USlateWidgetStyleAsset*                      Style;                                                      // 0x03C0   (0x0008)  
	class USlateBrushAsset*                            BackgroundImageSelected;                                    // 0x03C8   (0x0008)  
	class USlateBrushAsset*                            BackgroundImageComposing;                                   // 0x03D0   (0x0008)  
	class USlateBrushAsset*                            CaretImage;                                                 // 0x03D8   (0x0008)  
	FSlateFontInfo                                     Font;                                                       // 0x03E0   (0x0058)  
	FSlateColor                                        ColorAndOpacity;                                            // 0x0438   (0x0028)  
	bool                                               IsReadOnly;                                                 // 0x0460   (0x0001)  
	bool                                               IsPassword;                                                 // 0x0461   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x0462   (0x0002)  MISSED
	float                                              MinimumDesiredWidth;                                        // 0x0464   (0x0004)  
	bool                                               IsCaretMovedWhenGainFocus;                                  // 0x0468   (0x0001)  
	bool                                               SelectAllTextWhenFocused;                                   // 0x0469   (0x0001)  
	bool                                               RevertTextOnEscape;                                         // 0x046A   (0x0001)  
	bool                                               ClearKeyboardFocusOnCommit;                                 // 0x046B   (0x0001)  
	bool                                               SelectAllTextOnCommit;                                      // 0x046C   (0x0001)  
	bool                                               AllowContextMenu;                                           // 0x046D   (0x0001)  
	TEnumAsByte<EVirtualKeyboardType>                  KeyboardType;                                               // 0x046E   (0x0001)  
	FVirtualKeyboardOptions                            VirtualKeyboardOptions;                                     // 0x046F   (0x0001)  
	EVirtualKeyboardTrigger                            VirtualKeyboardTrigger;                                     // 0x0470   (0x0001)  
	EVirtualKeyboardDismissAction                      VirtualKeyboardDismissAction;                               // 0x0471   (0x0001)  
	TEnumAsByte<ETextJustify>                          Justification;                                              // 0x0472   (0x0001)  
	FShapedTextOptions                                 ShapedTextOptions;                                          // 0x0473   (0x0003)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x0476   (0x0002)  MISSED
	SDK_UNDEFINED(16,304) /* FMulticastInlineDelegate */ __um(OnTextChanged);                                      // 0x0478   (0x0010)  
	SDK_UNDEFINED(16,305) /* FMulticastInlineDelegate */ __um(OnTextCommitted);                                    // 0x0488   (0x0010)  
	unsigned char                                      UnknownData04_7[0x10];                                      // 0x0498   (0x0010)  MISSED
	// void SetText(FText InText);                                                                                              // [0x3b91a60] Final|Native|Public|BlueprintCallable 
	// void SetJustification(TEnumAsByte<ETextJustify> InJustification);                                                        // [0x3b91670] Final|Native|Public|BlueprintCallable 
	// void SetIsReadOnly(bool InbIsReadyOnly);                                                                                 // [0x3b91550] Final|Native|Public|BlueprintCallable 
	// void SetIsPassword(bool InbIsPassword);                                                                                  // [0x3b91430] Final|Native|Public|BlueprintCallable 
	// void SetHintText(FText InHintText);                                                                                      // [0x3b91150] Final|Native|Public|BlueprintCallable 
	// void OnEditableTextCommittedEvent__DelegateSignature(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                // [0x25a7960] MulticastDelegate|Public|Delegate|HasOutParms 
	// void OnEditableTextChangedEvent__DelegateSignature(FText& Text);                                                         // [0x25a7960] MulticastDelegate|Public|Delegate|HasOutParms 
	// FText GetText();                                                                                                         // [0x3b90ab0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.EditableTextBox
/// Size: 0x09A8 (2472 bytes) (0x000128 - 0x000AD0) align 8 pad: 0x0000
class UEditableTextBox : public UWidget
{ 
public:
	FText                                              Text;                                                       // 0x0128   (0x0018)  
	SDK_UNDEFINED(20,306) /* FDelegateProperty */      __um(TextDelegate);                                         // 0x0140   (0x0014)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0154   (0x0004)  MISSED
	FEditableTextBoxStyle                              WidgetStyle;                                                // 0x0158   (0x0860)  
	class USlateWidgetStyleAsset*                      Style;                                                      // 0x09B8   (0x0008)  
	FText                                              HintText;                                                   // 0x09C0   (0x0018)  
	SDK_UNDEFINED(20,307) /* FDelegateProperty */      __um(HintTextDelegate);                                     // 0x09D8   (0x0014)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x09EC   (0x0004)  MISSED
	FSlateFontInfo                                     Font;                                                       // 0x09F0   (0x0058)  
	FLinearColor                                       ForegroundColor;                                            // 0x0A48   (0x0010)  
	FLinearColor                                       BackgroundColor;                                            // 0x0A58   (0x0010)  
	FLinearColor                                       ReadOnlyForegroundColor;                                    // 0x0A68   (0x0010)  
	bool                                               IsReadOnly;                                                 // 0x0A78   (0x0001)  
	bool                                               IsPassword;                                                 // 0x0A79   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x0A7A   (0x0002)  MISSED
	float                                              MinimumDesiredWidth;                                        // 0x0A7C   (0x0004)  
	FMargin                                            Padding;                                                    // 0x0A80   (0x0010)  
	bool                                               IsCaretMovedWhenGainFocus;                                  // 0x0A90   (0x0001)  
	bool                                               SelectAllTextWhenFocused;                                   // 0x0A91   (0x0001)  
	bool                                               RevertTextOnEscape;                                         // 0x0A92   (0x0001)  
	bool                                               ClearKeyboardFocusOnCommit;                                 // 0x0A93   (0x0001)  
	bool                                               SelectAllTextOnCommit;                                      // 0x0A94   (0x0001)  
	bool                                               AllowContextMenu;                                           // 0x0A95   (0x0001)  
	TEnumAsByte<EVirtualKeyboardType>                  KeyboardType;                                               // 0x0A96   (0x0001)  
	FVirtualKeyboardOptions                            VirtualKeyboardOptions;                                     // 0x0A97   (0x0001)  
	EVirtualKeyboardTrigger                            VirtualKeyboardTrigger;                                     // 0x0A98   (0x0001)  
	EVirtualKeyboardDismissAction                      VirtualKeyboardDismissAction;                               // 0x0A99   (0x0001)  
	TEnumAsByte<ETextJustify>                          Justification;                                              // 0x0A9A   (0x0001)  
	FShapedTextOptions                                 ShapedTextOptions;                                          // 0x0A9B   (0x0003)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x0A9E   (0x0002)  MISSED
	SDK_UNDEFINED(16,308) /* FMulticastInlineDelegate */ __um(OnTextChanged);                                      // 0x0AA0   (0x0010)  
	SDK_UNDEFINED(16,309) /* FMulticastInlineDelegate */ __um(OnTextCommitted);                                    // 0x0AB0   (0x0010)  
	unsigned char                                      UnknownData04_7[0x10];                                      // 0x0AC0   (0x0010)  MISSED
	// void SetText(FText InText);                                                                                              // [0x3b91b40] Final|Native|Public|BlueprintCallable 
	// void SetJustification(TEnumAsByte<ETextJustify> InJustification);                                                        // [0x3b916f0] Final|Native|Public|BlueprintCallable 
	// void SetIsReadOnly(bool bReadOnly);                                                                                      // [0x3b915e0] Final|Native|Public|BlueprintCallable 
	// void SetIsPassword(bool bIsPassword);                                                                                    // [0x3b914c0] Final|Native|Public|BlueprintCallable 
	// void SetHintText(FText InText);                                                                                          // [0x3b91230] Final|Native|Public|BlueprintCallable 
	// void SetError(FText InError);                                                                                            // [0x3b91070] Final|Native|Public|BlueprintCallable 
	// void OnEditableTextBoxCommittedEvent__DelegateSignature(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);             // [0x25a7960] MulticastDelegate|Public|Delegate|HasOutParms 
	// void OnEditableTextBoxChangedEvent__DelegateSignature(FText& Text);                                                      // [0x25a7960] MulticastDelegate|Public|Delegate|HasOutParms 
	// bool HasError();                                                                                                         // [0x3b90c20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FText GetText();                                                                                                         // [0x3b90b50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void ClearError();                                                                                                       // [0x3b90210] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.ExpandableArea
/// Size: 0x0248 (584 bytes) (0x000128 - 0x000370) align 8 pad: 0x0000
class UExpandableArea : public UWidget
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0128   (0x0008)  MISSED
	FExpandableAreaStyle                               Style;                                                      // 0x0130   (0x0130)  
	FSlateBrush                                        BorderBrush;                                                // 0x0260   (0x0090)  
	FSlateColor                                        BorderColor;                                                // 0x02F0   (0x0028)  
	bool                                               bIsExpanded;                                                // 0x0318   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0319   (0x0003)  MISSED
	float                                              MaxHeight;                                                  // 0x031C   (0x0004)  
	FMargin                                            HeaderPadding;                                              // 0x0320   (0x0010)  
	FMargin                                            AreaPadding;                                                // 0x0330   (0x0010)  
	SDK_UNDEFINED(16,310) /* FMulticastInlineDelegate */ __um(OnExpansionChanged);                                 // 0x0340   (0x0010)  
	class UWidget*                                     HeaderContent;                                              // 0x0350   (0x0008)  
	class UWidget*                                     BodyContent;                                                // 0x0358   (0x0008)  
	unsigned char                                      UnknownData02_7[0x10];                                      // 0x0360   (0x0010)  MISSED
	// void SetIsExpanded_Animated(bool IsExpanded);                                                                            // [0x3b913a0] Final|Native|Public|BlueprintCallable 
	// void SetIsExpanded(bool IsExpanded);                                                                                     // [0x3b91310] Final|Native|Public|BlueprintCallable 
	// bool GetIsExpanded();                                                                                                    // [0x3b907d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.FloatBinding
/// Size: 0x0000 (0 bytes) (0x000070 - 0x000070) align 8 pad: 0x0000
class UFloatBinding : public UPropertyBinding
{ 
public:
	// float GetValue();                                                                                                        // [0x3b90bf0] Final|Native|Public|Const 
};

/// Class /Script/UMG.GridPanel
/// Size: 0x0030 (48 bytes) (0x000140 - 0x000170) align 8 pad: 0x0000
class UGridPanel : public UPanelWidget
{ 
public:
	TArray<float>                                      ColumnFill;                                                 // 0x0140   (0x0010)  
	TArray<float>                                      RowFill;                                                    // 0x0150   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0160   (0x0010)  MISSED
	// void SetRowFill(int32_t ColumnIndex, float Coefficient);                                                                 // [0x3b91810] Final|Native|Public|BlueprintCallable 
	// void SetColumnFill(int32_t ColumnIndex, float Coefficient);                                                              // [0x3b90e70] Final|Native|Public|BlueprintCallable 
	// class UGridSlot* AddChildToGrid(class UWidget* Content, int32_t InRow, int32_t InColumn);                                // [0x3b8ff90] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.GridSlot
/// Size: 0x0038 (56 bytes) (0x000040 - 0x000078) align 8 pad: 0x0000
class UGridSlot : public UPanelSlot
{ 
public:
	FMargin                                            Padding;                                                    // 0x0040   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0050   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0051   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0052   (0x0002)  MISSED
	int32_t                                            Row;                                                        // 0x0054   (0x0004)  
	int32_t                                            RowSpan;                                                    // 0x0058   (0x0004)  
	int32_t                                            Column;                                                     // 0x005C   (0x0004)  
	int32_t                                            ColumnSpan;                                                 // 0x0060   (0x0004)  
	int32_t                                            Layer;                                                      // 0x0064   (0x0004)  
	FVector2D                                          Nudge;                                                      // 0x0068   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0070   (0x0008)  MISSED
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x3b965f0] Final|Native|Public|BlueprintCallable 
	// void SetRowSpan(int32_t InRowSpan);                                                                                      // [0x3b96140] Final|Native|Public|BlueprintCallable 
	// void SetRow(int32_t InRow);                                                                                              // [0x3b960b0] Final|Native|Public|BlueprintCallable 
	// void SetPadding(FMargin InPadding);                                                                                      // [0x3b95f90] Final|Native|Public|BlueprintCallable 
	// void SetNudge(FVector2D InNudge);                                                                                        // [0x3b95e90] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetLayer(int32_t InLayer);                                                                                          // [0x3b95d20] Final|Native|Public|BlueprintCallable 
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3b95b40] Final|Native|Public|BlueprintCallable 
	// void SetColumnSpan(int32_t InColumnSpan);                                                                                // [0x3b959b0] Final|Native|Public|BlueprintCallable 
	// void SetColumn(int32_t InColumn);                                                                                        // [0x3b95920] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.HorizontalBox
/// Size: 0x0010 (16 bytes) (0x000140 - 0x000150) align 8 pad: 0x0000
class UHorizontalBox : public UPanelWidget
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0140   (0x0010)  MISSED
	// class UHorizontalBoxSlot* AddChildToHorizontalBox(class UWidget* Content);                                               // [0x3b93e90] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.HorizontalBoxSlot
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UHorizontalBoxSlot : public UPanelSlot
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0040   (0x0008)  MISSED
	FMargin                                            Padding;                                                    // 0x0048   (0x0010)  
	FSlateChildSize                                    Size;                                                       // 0x0058   (0x0008)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0060   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0061   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x0062   (0x0006)  MISSED
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x3b96670] Final|Native|Public|BlueprintCallable 
	// void setSize(FSlateChildSize InSize);                                                                                    // [0x3b964e0] Final|Native|Public|BlueprintCallable 
	// void SetPadding(FMargin InPadding);                                                                                      // [0x3b96020] Final|Native|Public|BlueprintCallable 
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3b95bc0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.Image
/// Size: 0x0120 (288 bytes) (0x000128 - 0x000248) align 8 pad: 0x0000
class UImage : public UWidget
{ 
public:
	FSlateBrush                                        Brush;                                                      // 0x0128   (0x0090)  
	SDK_UNDEFINED(20,311) /* FDelegateProperty */      __um(BrushDelegate);                                        // 0x01B8   (0x0014)  
	FLinearColor                                       ColorAndOpacity;                                            // 0x01CC   (0x0010)  
	SDK_UNDEFINED(20,312) /* FDelegateProperty */      __um(ColorAndOpacityDelegate);                              // 0x01DC   (0x0014)  
	bool                                               bFlipForRightToLeftFlowDirection;                           // 0x01F0   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x01F1   (0x0003)  MISSED
	SDK_UNDEFINED(20,313) /* FDelegateProperty */      __um(OnMouseButtonDownEvent);                               // 0x01F4   (0x0014)  
	unsigned char                                      UnknownData01_7[0x40];                                      // 0x0208   (0x0040)  MISSED
	// void SetOpacity(float InOpacity);                                                                                        // [0x3b95f10] Final|Native|Public|BlueprintCallable 
	// void SetColorAndOpacity(FLinearColor InColorAndOpacity);                                                                 // [0x3b95890] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetBrushTintColor(FSlateColor TintColor);                                                                           // [0x3b95700] Final|Native|Public|BlueprintCallable 
	// void SetBrushSize(FVector2D DesiredSize);                                                                                // [0x3b95680] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetBrushResourceObject(class UObject* ResourceObject);                                                              // [0x3b955f0] Final|Native|Public|BlueprintCallable 
	// void SetBrushFromTextureDynamic(class UTexture2DDynamic* Texture, bool bMatchSize);                                      // [0x3b95520] Native|Public|BlueprintCallable 
	// void SetBrushFromTexture(class UTexture2D* Texture, bool bMatchSize);                                                    // [0x3b95450] Native|Public|BlueprintCallable 
	// void SetBrushFromSoftTexture(TWeakObjectPtr<UTexture2D*> SoftTexture, bool bMatchSize);                                  // [0x3b952e0] Native|Public|BlueprintCallable 
	// void SetBrushFromSoftMaterial(TWeakObjectPtr<UMaterialInterface*> SoftMaterial);                                         // [0x3b951b0] Native|Public|BlueprintCallable 
	// void SetBrushFromMaterial(class UMaterialInterface* Material);                                                           // [0x3b95120] Native|Public|BlueprintCallable 
	// void SetBrushFromAtlasInterface(TScriptInterface<Class> AtlasRegion, bool bMatchSize);                                   // [0x3b95020] Native|Public|BlueprintCallable 
	// void SetBrushFromAsset(class USlateBrushAsset* Asset);                                                                   // [0x3b94f90] Native|Public|BlueprintCallable 
	// void SetBrush(FSlateBrush& InBrush);                                                                                     // [0x3b94e00] Native|Public|HasOutParms|BlueprintCallable 
	// class UMaterialInstanceDynamic* GetDynamicMaterial();                                                                    // [0x3b945d0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.InputKeySelector
/// Size: 0x0648 (1608 bytes) (0x000128 - 0x000770) align 8 pad: 0x0000
class UInputKeySelector : public UWidget
{ 
public:
	FButtonStyle                                       WidgetStyle;                                                // 0x0128   (0x02A8)  
	FTextBlockStyle                                    TextStyle;                                                  // 0x03D0   (0x0288)  
	FInputChord                                        SelectedKey;                                                // 0x0658   (0x0028)  
	FSlateFontInfo                                     Font;                                                       // 0x0680   (0x0058)  
	FMargin                                            Margin;                                                     // 0x06D8   (0x0010)  
	FLinearColor                                       ColorAndOpacity;                                            // 0x06E8   (0x0010)  
	FText                                              KeySelectionText;                                           // 0x06F8   (0x0018)  
	FText                                              NoKeySpecifiedText;                                         // 0x0710   (0x0018)  
	bool                                               bAllowModifierKeys;                                         // 0x0728   (0x0001)  
	bool                                               bAllowGamepadKeys;                                          // 0x0729   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x072A   (0x0006)  MISSED
	TArray<FKey>                                       EscapeKeys;                                                 // 0x0730   (0x0010)  
	SDK_UNDEFINED(16,314) /* FMulticastInlineDelegate */ __um(OnKeySelected);                                      // 0x0740   (0x0010)  
	SDK_UNDEFINED(16,315) /* FMulticastInlineDelegate */ __um(OnIsSelectingKeyChanged);                            // 0x0750   (0x0010)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0760   (0x0010)  MISSED
	// void SetTextBlockVisibility(ESlateVisibility InVisibility);                                                              // [0x3b96570] Final|Native|Public|BlueprintCallable 
	// void SetSelectedKey(FInputChord& InSelectedKey);                                                                         // [0x3b96360] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetNoKeySpecifiedText(FText InNoKeySpecifiedText);                                                                  // [0x3b95db0] Final|Native|Public|BlueprintCallable 
	// void SetKeySelectionText(FText InKeySelectionText);                                                                      // [0x3b95c40] Final|Native|Public|BlueprintCallable 
	// void SetEscapeKeys(TArray<FKey>& InKeys);                                                                                // [0x3b95a40] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetAllowModifierKeys(bool bInAllowModifierKeys);                                                                    // [0x3b94d70] Final|Native|Public|BlueprintCallable 
	// void SetAllowGamepadKeys(bool bInAllowGamepadKeys);                                                                      // [0x3b94ce0] Final|Native|Public|BlueprintCallable 
	// void OnKeySelected__DelegateSignature(FInputChord SelectedKey);                                                          // [0x25a7960] MulticastDelegate|Public|Delegate 
	// void OnIsSelectingKeyChanged__DelegateSignature();                                                                       // [0x25a7960] MulticastDelegate|Public|Delegate 
	// bool GetIsSelectingKey();                                                                                                // [0x3b946a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.Int32Binding
/// Size: 0x0000 (0 bytes) (0x000070 - 0x000070) align 8 pad: 0x0000
class UInt32Binding : public UPropertyBinding
{ 
public:
	// int32_t GetValue();                                                                                                      // [0x3b94910] Final|Native|Public|Const 
};

/// Class /Script/UMG.InvalidationBox
/// Size: 0x0018 (24 bytes) (0x000140 - 0x000158) align 8 pad: 0x0000
class UInvalidationBox : public UContentWidget
{ 
public:
	bool                                               bCanCache;                                                  // 0x0140   (0x0001)  
	bool                                               CacheRelativeTransforms;                                    // 0x0141   (0x0001)  
	unsigned char                                      UnknownData00_7[0x16];                                      // 0x0142   (0x0016)  MISSED
	// void SetCanCache(bool CanCache);                                                                                         // [0x3b95800] Final|Native|Public|BlueprintCallable 
	// void InvalidateCache();                                                                                                  // [0x95a130] Final|Native|Public|BlueprintCallable 
	// bool GetCanCache();                                                                                                      // [0x3b94510] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.UserListEntry
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UUserListEntry : public UInterface
{ 
public:
	// void BP_OnItemSelectionChanged(bool bIsSelected);                                                                        // [0x25a7960] Event|Protected|BlueprintEvent 
	// void BP_OnItemExpansionChanged(bool bIsExpanded);                                                                        // [0x25a7960] Event|Protected|BlueprintEvent 
	// void BP_OnEntryReleased();                                                                                               // [0x25a7960] Event|Protected|BlueprintEvent 
};

/// Class /Script/UMG.UserListEntryLibrary
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UUserListEntryLibrary : public UBlueprintFunctionLibrary
{ 
public:
	// bool IsListItemSelected(TScriptInterface<Class> UserListEntry);                                                          // [0x3b949e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// bool IsListItemExpanded(TScriptInterface<Class> UserListEntry);                                                          // [0x3b94940] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// class UListViewBase* GetOwningListView(TScriptInterface<Class> UserListEntry);                                           // [0x3b94870] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/UMG.UserObjectListEntry
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UUserObjectListEntry : public UUserListEntry
{ 
public:
	// void OnListItemObjectSet(class UObject* ListItemObject);                                                                 // [0x25a7960] Event|Protected|BlueprintEvent 
};

/// Class /Script/UMG.UserObjectListEntryLibrary
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UUserObjectListEntryLibrary : public UBlueprintFunctionLibrary
{ 
public:
	// class UObject* GetListItemObject(TScriptInterface<Class> UserObjectListEntry);                                           // [0x3b94770] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/UMG.ListViewBase
/// Size: 0x0110 (272 bytes) (0x000128 - 0x000238) align 8 pad: 0x0000
class UListViewBase : public UWidget
{ 
public:
	class UClass*                                      EntryWidgetClass;                                           // 0x0128   (0x0008)  
	float                                              WheelScrollMultiplier;                                      // 0x0130   (0x0004)  
	bool                                               bEnableScrollAnimation;                                     // 0x0134   (0x0001)  
	bool                                               bEnableFixedLineOffset;                                     // 0x0135   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0136   (0x0002)  MISSED
	float                                              FixedLineScrollOffset;                                      // 0x0138   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x013C   (0x0004)  MISSED
	SDK_UNDEFINED(16,316) /* FMulticastInlineDelegate */ __um(BP_OnEntryGenerated);                                // 0x0140   (0x0010)  
	SDK_UNDEFINED(16,317) /* FMulticastInlineDelegate */ __um(BP_OnEntryReleased);                                 // 0x0150   (0x0010)  
	FUserWidgetPool                                    EntryWidgetPool;                                            // 0x0160   (0x0080)  
	unsigned char                                      UnknownData02_7[0x58];                                      // 0x01E0   (0x0058)  MISSED
	// void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);                                                           // [0x3b966f0] Final|Native|Public|BlueprintCallable 
	// void SetScrollOffset(float InScrollOffset);                                                                              // [0x3b961d0] Final|Native|Public|BlueprintCallable 
	// void SetScrollbarVisibility(ESlateVisibility InVisibility);                                                              // [0x3b96250] Final|Native|Public|BlueprintCallable 
	// void ScrollToTop();                                                                                                      // [0x3b94cc0] Final|Native|Public|BlueprintCallable 
	// void ScrollToBottom();                                                                                                   // [0x3b94ca0] Final|Native|Public|BlueprintCallable 
	// void RequestRefresh();                                                                                                   // [0x3b94bf0] Final|Native|Public|BlueprintCallable 
	// void RegenerateAllEntries();                                                                                             // [0x3b94b40] Final|Native|Public|BlueprintCallable 
	// TArray<UUserWidget*> GetDisplayedEntryWidgets();                                                                         // [0x3b94540] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.ListView
/// Size: 0x0150 (336 bytes) (0x000238 - 0x000388) align 8 pad: 0x0000
class UListView : public UListViewBase
{ 
public:
	unsigned char                                      UnknownData00_3[0xC0];                                      // 0x0238   (0x00C0)  MISSED
	TEnumAsByte<EOrientation>                          Orientation;                                                // 0x02F8   (0x0001)  
	TEnumAsByte<ESelectionMode>                        SelectionMode;                                              // 0x02F9   (0x0001)  
	EConsumeMouseWheel                                 ConsumeMouseWheel;                                          // 0x02FA   (0x0001)  
	bool                                               bClearSelectionOnClick;                                     // 0x02FB   (0x0001)  
	bool                                               bIsFocusable;                                               // 0x02FC   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x02FD   (0x0003)  MISSED
	float                                              EntrySpacing;                                               // 0x0300   (0x0004)  
	bool                                               bReturnFocusToSelection;                                    // 0x0304   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0305   (0x0003)  MISSED
	TArray<class UObject*>                             ListItems;                                                  // 0x0308   (0x0010)  
	unsigned char                                      UnknownData03_6[0x10];                                      // 0x0318   (0x0010)  MISSED
	SDK_UNDEFINED(16,318) /* FMulticastInlineDelegate */ __um(BP_OnEntryInitialized);                              // 0x0328   (0x0010)  
	SDK_UNDEFINED(16,319) /* FMulticastInlineDelegate */ __um(BP_OnItemClicked);                                   // 0x0338   (0x0010)  
	SDK_UNDEFINED(16,320) /* FMulticastInlineDelegate */ __um(BP_OnItemDoubleClicked);                             // 0x0348   (0x0010)  
	SDK_UNDEFINED(16,321) /* FMulticastInlineDelegate */ __um(BP_OnItemIsHoveredChanged);                          // 0x0358   (0x0010)  
	SDK_UNDEFINED(16,322) /* FMulticastInlineDelegate */ __um(BP_OnItemSelectionChanged);                          // 0x0368   (0x0010)  
	SDK_UNDEFINED(16,323) /* FMulticastInlineDelegate */ __um(BP_OnItemScrolledIntoView);                          // 0x0378   (0x0010)  
	// void SetSelectionMode(TEnumAsByte<ESelectionMode> SelectionMode);                                                        // [0x3b96460] Final|Native|Public|BlueprintCallable 
	// void SetSelectedIndex(int32_t Index);                                                                                    // [0x3b962d0] Final|Native|Public|BlueprintCallable 
	// void ScrollIndexIntoView(int32_t Index);                                                                                 // [0x3b94c10] Final|Native|Public|BlueprintCallable 
	// void RemoveItem(class UObject* Item);                                                                                    // [0x3b94b60] Final|Native|Public|BlueprintCallable 
	// void NavigateToIndex(int32_t Index);                                                                                     // [0x3b94ab0] Final|Native|Public|BlueprintCallable 
	// bool IsRefreshPending();                                                                                                 // [0x3b94a80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetNumItems();                                                                                                   // [0x3b94840] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// TArray<UObject*> GetListItems();                                                                                         // [0x3b94810] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UObject* GetItemAt(int32_t Index);                                                                                 // [0x3b946d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetIndexForItem(class UObject* Item);                                                                            // [0x3b94600] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void ClearListItems();                                                                                                   // [0x3b944f0] Final|Native|Public|BlueprintCallable 
	// void BP_SetSelectedItem(class UObject* Item);                                                                            // [0x3b94460] Final|Native|Private|BlueprintCallable 
	// void BP_SetListItems(TArray<UObject*>& InListItems);                                                                     // [0x3b943b0] Final|Native|Private|HasOutParms|BlueprintCallable 
	// void BP_SetItemSelection(class UObject* Item, bool bSelected);                                                           // [0x3b942e0] Final|Native|Private|BlueprintCallable 
	// void BP_ScrollItemIntoView(class UObject* Item);                                                                         // [0x3b94250] Final|Native|Private|BlueprintCallable 
	// void BP_NavigateToItem(class UObject* Item);                                                                             // [0x3b941c0] Final|Native|Private|BlueprintCallable 
	// bool BP_IsItemVisible(class UObject* Item);                                                                              // [0x3b94120] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// bool BP_GetSelectedItems(TArray<UObject*>& Items);                                                                       // [0x3b94060] Final|Native|Private|HasOutParms|BlueprintCallable|Const 
	// class UObject* BP_GetSelectedItem();                                                                                     // [0x3b94030] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// int32_t BP_GetNumItemsSelected();                                                                                        // [0x3b94000] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// void BP_ClearSelection();                                                                                                // [0x3b93fe0] Final|Native|Private|BlueprintCallable 
	// void BP_CancelScrollIntoView();                                                                                          // [0x3b93fc0] Final|Native|Private|BlueprintCallable 
	// void AddItem(class UObject* Item);                                                                                       // [0x3b93f30] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.ListViewDesignerPreviewItem
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UListViewDesignerPreviewItem : public UObject
{ 
public:
};

/// Class /Script/UMG.MenuAnchor
/// Size: 0x0058 (88 bytes) (0x000140 - 0x000198) align 8 pad: 0x0000
class UMenuAnchor : public UContentWidget
{ 
public:
	class UClass*                                      MenuClass;                                                  // 0x0140   (0x0008)  
	SDK_UNDEFINED(20,324) /* FDelegateProperty */      __um(OnGetMenuContentEvent);                                // 0x0148   (0x0014)  
	SDK_UNDEFINED(20,325) /* FDelegateProperty */      __um(OnGetUserMenuContentEvent);                            // 0x015C   (0x0014)  
	TEnumAsByte<EMenuPlacement>                        Placement;                                                  // 0x0170   (0x0001)  
	bool                                               bFitInWindow;                                               // 0x0171   (0x0001)  
	bool                                               ShouldDeferPaintingAfterWindowContent;                      // 0x0172   (0x0001)  
	bool                                               UseApplicationMenuStack;                                    // 0x0173   (0x0001)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0174   (0x0004)  MISSED
	SDK_UNDEFINED(16,326) /* FMulticastInlineDelegate */ __um(OnMenuOpenChanged);                                  // 0x0178   (0x0010)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0188   (0x0010)  MISSED
	// void ToggleOpen(bool bFocusOnOpen);                                                                                      // [0x3b9aa10] Final|Native|Public|BlueprintCallable 
	// bool ShouldOpenDueToClick();                                                                                             // [0x3b9a9e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void SetPlacement(TEnumAsByte<EMenuPlacement> InPlacement);                                                              // [0x3b9a3c0] Final|Native|Public|BlueprintCallable 
	// void Open(bool bFocusMenu);                                                                                              // [0x3b99ad0] Final|Native|Public|BlueprintCallable 
	// bool IsOpen();                                                                                                           // [0x3b99aa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool HasOpenSubMenus();                                                                                                  // [0x3b99a70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UUserWidget* GetUserWidget__DelegateSignature();                                                                   // [0x25a7960] Public|Delegate      
	// FVector2D GetMenuPosition();                                                                                             // [0x3b997f0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// void FitInWindow(bool bFit);                                                                                             // [0x3b99400] Final|Native|Public|BlueprintCallable 
	// void Close();                                                                                                            // [0x3b993e0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.MouseCursorBinding
/// Size: 0x0000 (0 bytes) (0x000070 - 0x000070) align 8 pad: 0x0000
class UMouseCursorBinding : public UPropertyBinding
{ 
public:
	// TEnumAsByte<EMouseCursor> GetValue();                                                                                    // [0x3b99970] Final|Native|Public|Const 
};

/// Class /Script/MovieScene.MovieSceneEntitySystem
/// Size: 0x0018 (24 bytes) (0x000030 - 0x000048) align 8 pad: 0x0000
class UMovieSceneEntitySystem : public UObject
{ 
public:
	class UMovieSceneEntitySystemLinker*               Linker;                                                     // 0x0030   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0038   (0x0010)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScenePropertySystem
/// Size: 0x0010 (16 bytes) (0x000048 - 0x000058) align 8 pad: 0x0000
class UMovieScenePropertySystem : public UMovieSceneEntitySystem
{ 
public:
	class UMovieScenePropertyInstantiatorSystem*       InstantiatorSystem;                                         // 0x0048   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0050   (0x0008)  MISSED
};

/// Class /Script/UMG.MovieScene2DTransformPropertySystem
/// Size: 0x0000 (0 bytes) (0x000058 - 0x000058) align 8 pad: 0x0000
class UMovieScene2DTransformPropertySystem : public UMovieScenePropertySystem
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneSignedObject
/// Size: 0x0028 (40 bytes) (0x000030 - 0x000058) align 8 pad: 0x0000
class UMovieSceneSignedObject : public UObject
{ 
public:
	FGuid                                              Signature;                                                  // 0x0030   (0x0010)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0040   (0x0018)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneSectionEvalOptions
/// Size: 0x0002 (2 bytes) (0x000000 - 0x000002) align 1 pad: 0x0000
struct FMovieSceneSectionEvalOptions
{ 
	bool                                               bCanEditCompletionMode;                                     // 0x0000   (0x0001)  
	EMovieSceneCompletionMode                          CompletionMode;                                             // 0x0001   (0x0001)  
};

/// Struct /Script/MovieScene.MovieSceneEasingSettings
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FMovieSceneEasingSettings
{ 
	int32_t                                            AutoEaseInDuration;                                         // 0x0000   (0x0004)  
	int32_t                                            AutoEaseOutDuration;                                        // 0x0004   (0x0004)  
	SDK_UNDEFINED(16,327) /* TScriptInterface<Class> */ __um(EaseIn);                                              // 0x0008   (0x0010)  
	bool                                               bManualEaseIn;                                              // 0x0018   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0019   (0x0003)  MISSED
	int32_t                                            ManualEaseInDuration;                                       // 0x001C   (0x0004)  
	SDK_UNDEFINED(16,328) /* TScriptInterface<Class> */ __um(EaseOut);                                             // 0x0020   (0x0010)  
	bool                                               bManualEaseOut;                                             // 0x0030   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	int32_t                                            ManualEaseOutDuration;                                      // 0x0034   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneFrameRange
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FMovieSceneFrameRange
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/MovieScene.OptionalMovieSceneBlendType
/// Size: 0x0002 (2 bytes) (0x000000 - 0x000002) align 1 pad: 0x0000
struct FOptionalMovieSceneBlendType
{ 
	EMovieSceneBlendType                               BlendType;                                                  // 0x0000   (0x0001)  
	bool                                               bIsValid;                                                   // 0x0001   (0x0001)  
};

/// Class /Script/MovieScene.MovieSceneSection
/// Size: 0x0098 (152 bytes) (0x000058 - 0x0000F0) align 8 pad: 0x0000
class UMovieSceneSection : public UMovieSceneSignedObject
{ 
public:
	FMovieSceneSectionEvalOptions                      EvalOptions;                                                // 0x0058   (0x0002)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x005A   (0x0006)  MISSED
	FMovieSceneEasingSettings                          Easing;                                                     // 0x0060   (0x0038)  
	FMovieSceneFrameRange                              SectionRange;                                               // 0x0098   (0x0010)  
	FFrameNumber                                       PreRollFrames;                                              // 0x00A8   (0x0004)  
	FFrameNumber                                       PostRollFrames;                                             // 0x00AC   (0x0004)  
	int32_t                                            RowIndex;                                                   // 0x00B0   (0x0004)  
	int32_t                                            OverlapPriority;                                            // 0x00B4   (0x0004)  
	bool                                               bIsActive : 1;                                              // 0x00B8:0 (0x0001)  
	bool                                               bIsLocked : 1;                                              // 0x00B8:1 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x00B9   (0x0003)  MISSED
	float                                              StartTime;                                                  // 0x00BC   (0x0004)  
	float                                              EndTime;                                                    // 0x00C0   (0x0004)  
	float                                              PrerollTime;                                                // 0x00C4   (0x0004)  
	float                                              PostrollTime;                                               // 0x00C8   (0x0004)  
	bool                                               bIsInfinite : 1;                                            // 0x00CC:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x00CD   (0x0003)  MISSED
	bool                                               bSupportsInfiniteRange;                                     // 0x00D0   (0x0001)  
	FOptionalMovieSceneBlendType                       BlendType;                                                  // 0x00D1   (0x0002)  
	unsigned char                                      UnknownData03_7[0x1D];                                      // 0x00D3   (0x001D)  MISSED
	// void SetRowIndex(int32_t NewRowIndex);                                                                                   // [0x3996e20] Final|Native|Public|BlueprintCallable 
	// void SetPreRollFrames(int32_t InPreRollFrames);                                                                          // [0x3996d90] Final|Native|Public|BlueprintCallable 
	// void SetPostRollFrames(int32_t InPostRollFrames);                                                                        // [0x3996d00] Final|Native|Public|BlueprintCallable 
	// void SetOverlapPriority(int32_t NewPriority);                                                                            // [0x39969b0] Final|Native|Public|BlueprintCallable 
	// void SetIsLocked(bool bInIsLocked);                                                                                      // [0x3996870] Final|Native|Public|BlueprintCallable 
	// void SetIsActive(bool bInIsActive);                                                                                      // [0x39967e0] Final|Native|Public|BlueprintCallable 
	// void SetCompletionMode(EMovieSceneCompletionMode InCompletionMode);                                                      // [0x3996530] Final|Native|Public|BlueprintCallable 
	// void SetBlendType(EMovieSceneBlendType InBlendType);                                                                     // [0x39964b0] RequiredAPI|Native|Public|BlueprintCallable 
	// bool IsLocked();                                                                                                         // [0x3995670] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsActive();                                                                                                         // [0x3995640] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FFrameNumberRangeBound GetStartFrame();                                                                                  // [0x3995440] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetRowIndex();                                                                                                   // [0x20a2f90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetPreRollFrames();                                                                                              // [0x3995420] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetPostRollFrames();                                                                                             // [0x3995400] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetOverlapPriority();                                                                                            // [0x39953b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FFrameNumberRangeBound GetEndFrame();                                                                                    // [0x39951f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// EMovieSceneCompletionMode GetCompletionMode();                                                                           // [0x3995120] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FOptionalMovieSceneBlendType GetBlendType();                                                                             // [0x3994fe0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/UMG.MovieScene2DTransformMask
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FMovieScene2DTransformMask
{ 
	uint32_t                                           Mask;                                                       // 0x0000   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneChannel
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 pad: 0x0000
struct FMovieSceneChannel
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneTangentData
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FMovieSceneTangentData
{ 
	float                                              ArriveTangent;                                              // 0x0000   (0x0004)  
	float                                              LeaveTangent;                                               // 0x0004   (0x0004)  
	float                                              ArriveTangentWeight;                                        // 0x0008   (0x0004)  
	float                                              LeaveTangentWeight;                                         // 0x000C   (0x0004)  
	TEnumAsByte<ERichCurveTangentWeightMode>           TangentWeightMode;                                          // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0011   (0x0003)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneFloatValue
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FMovieSceneFloatValue
{ 
	float                                              Value;                                                      // 0x0000   (0x0004)  
	FMovieSceneTangentData                             Tangent;                                                    // 0x0004   (0x0014)  
	TEnumAsByte<ERichCurveInterpMode>                  InterpMode;                                                 // 0x0018   (0x0001)  
	TEnumAsByte<ERichCurveTangentMode>                 TangentMode;                                                // 0x0019   (0x0001)  
	char                                               PaddingByte;                                                // 0x001A   (0x0001)  
	unsigned char                                      UnknownData00_7[0x1];                                       // 0x001B   (0x0001)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneKeyHandleMap
/// Size: 0x0000 (0 bytes) (0x000060 - 0x000060) align 8 pad: 0x0000
struct FMovieSceneKeyHandleMap : FKeyHandleLookupTable
{ 
};

/// Struct /Script/MovieScene.MovieSceneFloatChannel
/// Size: 0x0098 (152 bytes) (0x000008 - 0x0000A0) align 8 pad: 0x0000
struct FMovieSceneFloatChannel : FMovieSceneChannel
{ 
	TEnumAsByte<ERichCurveExtrapolation>               PreInfinityExtrap;                                          // 0x0008   (0x0001)  
	TEnumAsByte<ERichCurveExtrapolation>               PostInfinityExtrap;                                         // 0x0009   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x000A   (0x0006)  MISSED
	TArray<FFrameNumber>                               Times;                                                      // 0x0010   (0x0010)  
	TArray<FMovieSceneFloatValue>                      Values;                                                     // 0x0020   (0x0010)  
	float                                              DefaultValue;                                               // 0x0030   (0x0004)  
	bool                                               bHasDefaultValue;                                           // 0x0034   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0035   (0x0003)  MISSED
	FMovieSceneKeyHandleMap                            KeyHandles;                                                 // 0x0038   (0x0060)  
	FFrameRate                                         TickResolution;                                             // 0x0098   (0x0008)  
};

/// Class /Script/UMG.MovieScene2DTransformSection
/// Size: 0x0470 (1136 bytes) (0x0000F0 - 0x000560) align 8 pad: 0x0000
class UMovieScene2DTransformSection : public UMovieSceneSection
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00F0   (0x0008)  MISSED
	FMovieScene2DTransformMask                         TransformMask;                                              // 0x00F8   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00FC   (0x0004)  MISSED
	FMovieSceneFloatChannel                            Translation[2];                                             // 0x0100   (0x0140)  
	FMovieSceneFloatChannel                            Rotation;                                                   // 0x0240   (0x00A0)  
	FMovieSceneFloatChannel                            Scale[2];                                                   // 0x02E0   (0x0140)  
	FMovieSceneFloatChannel                            Shear[2];                                                   // 0x0420   (0x0140)  
};

/// Struct /Script/MovieScene.MovieSceneTrackEvalOptions
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FMovieSceneTrackEvalOptions
{ 
	bool                                               bCanEvaluateNearestSection : 1;                             // 0x0000:0 (0x0001)  
	bool                                               bEvalNearestSection : 1;                                    // 0x0000:1 (0x0001)  
	bool                                               bEvaluateInPreroll : 1;                                     // 0x0000:2 (0x0001)  
	bool                                               bEvaluateInPostroll : 1;                                    // 0x0000:3 (0x0001)  
	bool                                               bEvaluateNearestSection : 1;                                // 0x0000:4 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0001   (0x0003)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneTrackEvaluationFieldEntry
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FMovieSceneTrackEvaluationFieldEntry
{ 
	class UMovieSceneSection*                          Section;                                                    // 0x0000   (0x0008)  
	FFrameNumberRange                                  Range;                                                      // 0x0008   (0x0010)  
	FFrameNumber                                       ForcedTime;                                                 // 0x0018   (0x0004)  
	ESectionEvaluationFlags                            Flags;                                                      // 0x001C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x001D   (0x0001)  MISSED
	int16_t                                            LegacySortOrder;                                            // 0x001E   (0x0002)  
};

/// Struct /Script/MovieScene.MovieSceneTrackEvaluationField
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FMovieSceneTrackEvaluationField
{ 
	TArray<FMovieSceneTrackEvaluationFieldEntry>       Entries;                                                    // 0x0000   (0x0010)  
};

/// Class /Script/MovieScene.MovieSceneTrack
/// Size: 0x0028 (40 bytes) (0x000058 - 0x000080) align 8 pad: 0x0000
class UMovieSceneTrack : public UMovieSceneSignedObject
{ 
public:
	FMovieSceneTrackEvalOptions                        EvalOptions;                                                // 0x0058   (0x0004)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x005C   (0x0001)  MISSED
	bool                                               bIsEvalDisabled;                                            // 0x005D   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x005E   (0x0002)  MISSED
	FGuid                                              EvaluationFieldGuid;                                        // 0x0060   (0x0010)  
	FMovieSceneTrackEvaluationField                    EvaluationField;                                            // 0x0070   (0x0010)  
};

/// Class /Script/MovieScene.MovieSceneNameableTrack
/// Size: 0x0000 (0 bytes) (0x000080 - 0x000080) align 8 pad: 0x0000
class UMovieSceneNameableTrack : public UMovieSceneTrack
{ 
public:
};

/// Struct /Script/MovieScene.MovieScenePropertyBinding
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FMovieScenePropertyBinding
{ 
	FName                                              PropertyName;                                               // 0x0000   (0x000C)  
	FName                                              PropertyPath;                                               // 0x000C   (0x000C)  
	bool                                               bCanUseClassLookup;                                         // 0x0018   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0019   (0x0003)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScenePropertyTrack
/// Size: 0x0038 (56 bytes) (0x000080 - 0x0000B8) align 8 pad: 0x0000
class UMovieScenePropertyTrack : public UMovieSceneNameableTrack
{ 
public:
	class UMovieSceneSection*                          SectionToKey;                                               // 0x0080   (0x0008)  
	FMovieScenePropertyBinding                         PropertyBinding;                                            // 0x0088   (0x001C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00A4   (0x0004)  MISSED
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x00A8   (0x0010)  
};

/// Class /Script/UMG.MovieScene2DTransformTrack
/// Size: 0x0000 (0 bytes) (0x0000B8 - 0x0000B8) align 8 pad: 0x0000
class UMovieScene2DTransformTrack : public UMovieScenePropertyTrack
{ 
public:
};

/// Class /Script/UMG.MovieSceneMarginSection
/// Size: 0x0280 (640 bytes) (0x0000F0 - 0x000370) align 8 pad: 0x0000
class UMovieSceneMarginSection : public UMovieSceneSection
{ 
public:
	FMovieSceneFloatChannel                            TopCurve;                                                   // 0x00F0   (0x00A0)  
	FMovieSceneFloatChannel                            LeftCurve;                                                  // 0x0190   (0x00A0)  
	FMovieSceneFloatChannel                            RightCurve;                                                 // 0x0230   (0x00A0)  
	FMovieSceneFloatChannel                            BottomCurve;                                                // 0x02D0   (0x00A0)  
};

/// Class /Script/UMG.MovieSceneMarginTrack
/// Size: 0x0008 (8 bytes) (0x0000B8 - 0x0000C0) align 8 pad: 0x0000
class UMovieSceneMarginTrack : public UMovieScenePropertyTrack
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x00B8   (0x0008)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneMaterialTrack
/// Size: 0x0010 (16 bytes) (0x000080 - 0x000090) align 8 pad: 0x0000
class UMovieSceneMaterialTrack : public UMovieSceneNameableTrack
{ 
public:
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0080   (0x0010)  
};

/// Class /Script/UMG.MovieSceneWidgetMaterialTrack
/// Size: 0x0028 (40 bytes) (0x000090 - 0x0000B8) align 8 pad: 0x0000
class UMovieSceneWidgetMaterialTrack : public UMovieSceneMaterialTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0090   (0x0008)  MISSED
	TArray<FName>                                      BrushPropertyNamePath;                                      // 0x0098   (0x0010)  
	FName                                              TrackName;                                                  // 0x00A8   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x00B4   (0x0004)  MISSED
};

/// Class /Script/UMG.TextLayoutWidget
/// Size: 0x0020 (32 bytes) (0x000128 - 0x000148) align 8 pad: 0x0000
class UTextLayoutWidget : public UWidget
{ 
public:
	FShapedTextOptions                                 ShapedTextOptions;                                          // 0x0128   (0x0003)  
	TEnumAsByte<ETextJustify>                          Justification;                                              // 0x012B   (0x0001)  
	ETextWrappingPolicy                                WrappingPolicy;                                             // 0x012C   (0x0001)  
	bool                                               AutoWrapText : 1;                                           // 0x012D:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x012E   (0x0002)  MISSED
	float                                              WrapTextAt;                                                 // 0x0130   (0x0004)  
	FMargin                                            Margin;                                                     // 0x0134   (0x0010)  
	float                                              LineHeightPercentage;                                       // 0x0144   (0x0004)  
	// void SetJustification(TEnumAsByte<ETextJustify> InJustification);                                                        // [0x3ba3140] Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.MultiLineEditableText
/// Size: 0x0368 (872 bytes) (0x000148 - 0x0004B0) align 8 pad: 0x0000
class UMultiLineEditableText : public UTextLayoutWidget
{ 
public:
	FText                                              Text;                                                       // 0x0148   (0x0018)  
	FText                                              HintText;                                                   // 0x0160   (0x0018)  
	SDK_UNDEFINED(20,329) /* FDelegateProperty */      __um(HintTextDelegate);                                     // 0x0178   (0x0014)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x018C   (0x0004)  MISSED
	FTextBlockStyle                                    WidgetStyle;                                                // 0x0190   (0x0288)  
	bool                                               bIsReadOnly;                                                // 0x0418   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0419   (0x0007)  MISSED
	FSlateFontInfo                                     Font;                                                       // 0x0420   (0x0058)  
	bool                                               SelectAllTextWhenFocused;                                   // 0x0478   (0x0001)  
	bool                                               ClearTextSelectionOnFocusLoss;                              // 0x0479   (0x0001)  
	bool                                               RevertTextOnEscape;                                         // 0x047A   (0x0001)  
	bool                                               ClearKeyboardFocusOnCommit;                                 // 0x047B   (0x0001)  
	bool                                               AllowContextMenu;                                           // 0x047C   (0x0001)  
	FVirtualKeyboardOptions                            VirtualKeyboardOptions;                                     // 0x047D   (0x0001)  
	EVirtualKeyboardDismissAction                      VirtualKeyboardDismissAction;                               // 0x047E   (0x0001)  
	unsigned char                                      UnknownData02_6[0x1];                                       // 0x047F   (0x0001)  MISSED
	SDK_UNDEFINED(16,330) /* FMulticastInlineDelegate */ __um(OnTextChanged);                                      // 0x0480   (0x0010)  
	SDK_UNDEFINED(16,331) /* FMulticastInlineDelegate */ __um(OnTextCommitted);                                    // 0x0490   (0x0010)  
	unsigned char                                      UnknownData03_7[0x10];                                      // 0x04A0   (0x0010)  MISSED
	// void SetWidgetStyle(FTextBlockStyle& InWidgetStyle);                                                                     // [0x3b9a930] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetText(FText InText);                                                                                              // [0x3b9a5a0] Final|Native|Public|BlueprintCallable 
	// void SetIsReadOnly(bool bReadOnly);                                                                                      // [0x3b9a190] Final|Native|Public|BlueprintCallable 
	// void SetHintText(FText InHintText);                                                                                      // [0x3b99ec0] Final|Native|Public|BlueprintCallable 
	// void OnMultiLineEditableTextCommittedEvent__DelegateSignature(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);       // [0x25a7960] MulticastDelegate|Public|Delegate|HasOutParms 
	// void OnMultiLineEditableTextChangedEvent__DelegateSignature(FText& Text);                                                // [0x25a7960] MulticastDelegate|Public|Delegate|HasOutParms 
	// FText GetText();                                                                                                         // [0x3b99830] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FText GetHintText();                                                                                                     // [0x3b996b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.MultiLineEditableTextBox
/// Size: 0x0BF8 (3064 bytes) (0x000148 - 0x000D40) align 8 pad: 0x0000
class UMultiLineEditableTextBox : public UTextLayoutWidget
{ 
public:
	FText                                              Text;                                                       // 0x0148   (0x0018)  
	FText                                              HintText;                                                   // 0x0160   (0x0018)  
	SDK_UNDEFINED(20,332) /* FDelegateProperty */      __um(HintTextDelegate);                                     // 0x0178   (0x0014)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x018C   (0x0004)  MISSED
	FEditableTextBoxStyle                              WidgetStyle;                                                // 0x0190   (0x0860)  
	FTextBlockStyle                                    TextStyle;                                                  // 0x09F0   (0x0288)  
	bool                                               bIsReadOnly;                                                // 0x0C78   (0x0001)  
	bool                                               AllowContextMenu;                                           // 0x0C79   (0x0001)  
	FVirtualKeyboardOptions                            VirtualKeyboardOptions;                                     // 0x0C7A   (0x0001)  
	EVirtualKeyboardDismissAction                      VirtualKeyboardDismissAction;                               // 0x0C7B   (0x0001)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0C7C   (0x0004)  MISSED
	class USlateWidgetStyleAsset*                      Style;                                                      // 0x0C80   (0x0008)  
	FSlateFontInfo                                     Font;                                                       // 0x0C88   (0x0058)  
	FLinearColor                                       ForegroundColor;                                            // 0x0CE0   (0x0010)  
	FLinearColor                                       BackgroundColor;                                            // 0x0CF0   (0x0010)  
	FLinearColor                                       ReadOnlyForegroundColor;                                    // 0x0D00   (0x0010)  
	SDK_UNDEFINED(16,333) /* FMulticastInlineDelegate */ __um(OnTextChanged);                                      // 0x0D10   (0x0010)  
	SDK_UNDEFINED(16,334) /* FMulticastInlineDelegate */ __um(OnTextCommitted);                                    // 0x0D20   (0x0010)  
	unsigned char                                      UnknownData02_7[0x10];                                      // 0x0D30   (0x0010)  MISSED
	// void SetTextStyle(FTextBlockStyle& InTextStyle);                                                                         // [0x3b9a760] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetText(FText InText);                                                                                              // [0x3b9a680] Final|Native|Public|BlueprintCallable 
	// void SetIsReadOnly(bool bReadOnly);                                                                                      // [0x3b9a220] Final|Native|Public|BlueprintCallable 
	// void SetHintText(FText InHintText);                                                                                      // [0x3b99fa0] Final|Native|Public|BlueprintCallable 
	// void SetError(FText InError);                                                                                            // [0x3b99d50] Final|Native|Public|BlueprintCallable 
	// void OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);    // [0x25a7960] MulticastDelegate|Public|Delegate|HasOutParms 
	// void OnMultiLineEditableTextBoxChangedEvent__DelegateSignature(FText& Text);                                             // [0x25a7960] MulticastDelegate|Public|Delegate|HasOutParms 
	// FText GetText();                                                                                                         // [0x3b998d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FText GetHintText();                                                                                                     // [0x3b99750] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.NamedSlotInterface
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UNamedSlotInterface : public UInterface
{ 
public:
};

/// Class /Script/UMG.NativeWidgetHost
/// Size: 0x0010 (16 bytes) (0x000128 - 0x000138) align 8 pad: 0x0000
class UNativeWidgetHost : public UWidget
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0128   (0x0010)  MISSED
};

/// Class /Script/UMG.Overlay
/// Size: 0x0010 (16 bytes) (0x000140 - 0x000150) align 8 pad: 0x0000
class UOverlay : public UPanelWidget
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0140   (0x0010)  MISSED
	// class UOverlaySlot* AddChildToOverlay(class UWidget* Content);                                                           // [0x3b99320] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.OverlaySlot
/// Size: 0x0020 (32 bytes) (0x000040 - 0x000060) align 8 pad: 0x0000
class UOverlaySlot : public UPanelSlot
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0040   (0x0008)  MISSED
	FMargin                                            Padding;                                                    // 0x0048   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0058   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0059   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x005A   (0x0006)  MISSED
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x3b9a8b0] Final|Native|Public|BlueprintCallable 
	// void SetPadding(FMargin InPadding);                                                                                      // [0x3b9a2b0] Final|Native|Public|BlueprintCallable 
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3b9a080] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.ProgressBar
/// Size: 0x02C0 (704 bytes) (0x000128 - 0x0003E8) align 8 pad: 0x0000
class UProgressBar : public UWidget
{ 
public:
	FProgressBarStyle                                  WidgetStyle;                                                // 0x0128   (0x0248)  
	class USlateWidgetStyleAsset*                      Style;                                                      // 0x0370   (0x0008)  
	class USlateBrushAsset*                            BackgroundImage;                                            // 0x0378   (0x0008)  
	class USlateBrushAsset*                            FillImage;                                                  // 0x0380   (0x0008)  
	class USlateBrushAsset*                            MarqueeImage;                                               // 0x0388   (0x0008)  
	float                                              Percent;                                                    // 0x0390   (0x0004)  
	TEnumAsByte<EProgressBarFillType>                  BarFillType;                                                // 0x0394   (0x0001)  
	bool                                               bIsMarquee;                                                 // 0x0395   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0396   (0x0002)  MISSED
	FVector2D                                          BorderPadding;                                              // 0x0398   (0x0008)  
	SDK_UNDEFINED(20,335) /* FDelegateProperty */      __um(PercentDelegate);                                      // 0x03A0   (0x0014)  
	FLinearColor                                       FillColorAndOpacity;                                        // 0x03B4   (0x0010)  
	SDK_UNDEFINED(20,336) /* FDelegateProperty */      __um(FillColorAndOpacityDelegate);                          // 0x03C4   (0x0014)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x03D8   (0x0010)  MISSED
	// void SetPercent(float InPercent);                                                                                        // [0x3b9a340] Final|Native|Public|BlueprintCallable 
	// void SetIsMarquee(bool InbIsMarquee);                                                                                    // [0x3b9a100] Final|Native|Public|BlueprintCallable 
	// void SetFillColorAndOpacity(FLinearColor InColor);                                                                       // [0x3b99e30] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/UMG.RetainerBox
/// Size: 0x0038 (56 bytes) (0x000140 - 0x000178) align 8 pad: 0x0000
class URetainerBox : public UContentWidget
{ 
public:
	bool                                               bRetainRender;                                              // 0x0140   (0x0001)  
	bool                                               RenderOnInvalidation;                                       // 0x0141   (0x0001)  
	bool                                               RenderOnPhase;                                              // 0x0142   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0143   (0x0001)  MISSED
	int32_t                                            Phase;                                                      // 0x0144   (0x0004)  
	int32_t                                            PhaseCount;                                                 // 0x0148   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x014C   (0x0004)  MISSED
	class UMaterialInterface*                          EffectMaterial;                                             // 0x0150   (0x0008)  
	FName                                              TextureParameter;                                           // 0x0158   (0x000C)  
	unsigned char                                      UnknownData02_7[0x14];                                      // 0x0164   (0x0014)  MISSED
	// void SetTextureParameter(FName TextureParameter);                                                                        // [0x3b9a810] Final|Native|Public|BlueprintCallable 
	// void SetRetainRendering(bool bInRetainRendering);                                                                        // [0x3b9a510] Final|Native|Public|BlueprintCallable 
	// void SetRenderingPhase(int32_t RenderPhase, int32_t TotalPhases);                                                        // [0x3b9a440] Final|Native|Public|BlueprintCallable 
	// void SetEffectMaterial(class UMaterialInterface* EffectMaterial);                                                        // [0x3b99cc0] Final|Native|Public|BlueprintCallable 
	// void RequestRender();                                                                                                    // [0x3b99ca0] Final|Native|Public|BlueprintCallable 
	// class UMaterialInstanceDynamic* GetEffectMaterial();                                                                     // [0x3b99680] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.RichTextBlock
/// Size: 0x0580 (1408 bytes) (0x000148 - 0x0006C8) align 8 pad: 0x0000
class URichTextBlock : public UTextLayoutWidget
{ 
public:
	FText                                              Text;                                                       // 0x0148   (0x0018)  
	class UDataTable*                                  TextStyleSet;                                               // 0x0160   (0x0008)  
	TArray<class UClass*>                              DecoratorClasses;                                           // 0x0168   (0x0010)  
	bool                                               bOverrideDefaultStyle;                                      // 0x0178   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0179   (0x0007)  MISSED
	FTextBlockStyle                                    DefaultTextStyleOverride;                                   // 0x0180   (0x0288)  
	float                                              MinDesiredWidth;                                            // 0x0408   (0x0004)  
	ETextTransformPolicy                               TextTransformPolicy;                                        // 0x040C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x040D   (0x0003)  MISSED
	FTextBlockStyle                                    DefaultTextStyle;                                           // 0x0410   (0x0288)  
	TArray<class URichTextBlockDecorator*>             InstanceDecorators;                                         // 0x0698   (0x0010)  
	unsigned char                                      UnknownData02_7[0x20];                                      // 0x06A8   (0x0020)  MISSED
	// void SetTextTransformPolicy(ETextTransformPolicy InTransformPolicy);                                                     // [0x3b9fb80] Final|Native|Public|BlueprintCallable 
	// void SetTextStyleSet(class UDataTable* NewTextStyleSet);                                                                 // [0x3b9faf0] Final|Native|Public|BlueprintCallable 
	// void SetText(FText& InText);                                                                                             // [0x3b9fa20] Native|Public|HasOutParms|BlueprintCallable 
	// void SetMinDesiredWidth(float InMinDesiredWidth);                                                                        // [0x3b9f170] Final|Native|Public|BlueprintCallable 
	// void SetDefaultTextStyle(FTextBlockStyle& InDefaultTextStyle);                                                           // [0x3b9ec30] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetDefaultStrikeBrush(FSlateBrush& InStrikeBrush);                                                                  // [0x3b9eaa0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetDefaultShadowOffset(FVector2D InShadowOffset);                                                                   // [0x3b9ea20] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetDefaultShadowColorAndOpacity(FLinearColor InShadowColorAndOpacity);                                              // [0x3b9e990] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetDefaultFont(FSlateFontInfo InFontInfo);                                                                          // [0x3b9e860] Final|Native|Public|BlueprintCallable 
	// void SetDefaultColorAndOpacity(FSlateColor InColorAndOpacity);                                                           // [0x3b9e760] Final|Native|Public|BlueprintCallable 
	// void SetAutoWrapText(bool InAutoTextWrap);                                                                               // [0x3b9e650] Final|Native|Public|BlueprintCallable 
	// FText GetText();                                                                                                         // [0x3b9d9d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class URichTextBlockDecorator* GetDecoratorByClass(class UClass* DecoratorClass);                                        // [0x3b9d750] Final|Native|Public|BlueprintCallable 
	// void ClearAllDefaultStyleOverrides();                                                                                    // [0x3b9d270] Final|Native|Public  
};

/// Class /Script/UMG.RichTextBlockDecorator
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class URichTextBlockDecorator : public UObject
{ 
public:
};

/// Class /Script/UMG.RichTextBlockImageDecorator
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class URichTextBlockImageDecorator : public URichTextBlockDecorator
{ 
public:
	class UDataTable*                                  ImageSet;                                                   // 0x0030   (0x0008)  
};

/// Class /Script/UMG.SafeZone
/// Size: 0x0018 (24 bytes) (0x000140 - 0x000158) align 8 pad: 0x0000
class USafeZone : public UContentWidget
{ 
public:
	bool                                               PadLeft;                                                    // 0x0140   (0x0001)  
	bool                                               PadRight;                                                   // 0x0141   (0x0001)  
	bool                                               PadTop;                                                     // 0x0142   (0x0001)  
	bool                                               PadBottom;                                                  // 0x0143   (0x0001)  
	unsigned char                                      UnknownData00_7[0x14];                                      // 0x0144   (0x0014)  MISSED
	// void SetSidesToPad(bool InPadLeft, bool InPadRight, bool InPadTop, bool InPadBottom);                                    // [0x3b9f6d0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.SafeZoneSlot
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class USafeZoneSlot : public UPanelSlot
{ 
public:
	bool                                               bIsTitleSafe;                                               // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	FMargin                                            SafeAreaScale;                                              // 0x0044   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HAlign;                                                     // 0x0054   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VAlign;                                                     // 0x0055   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0056   (0x0002)  MISSED
	FMargin                                            Padding;                                                    // 0x0058   (0x0010)  
};

/// Class /Script/UMG.ScaleBox
/// Size: 0x0020 (32 bytes) (0x000140 - 0x000160) align 8 pad: 0x0000
class UScaleBox : public UContentWidget
{ 
public:
	TEnumAsByte<EStretch>                              Stretch;                                                    // 0x0140   (0x0001)  
	TEnumAsByte<EStretchDirection>                     StretchDirection;                                           // 0x0141   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0142   (0x0002)  MISSED
	float                                              UserSpecifiedScale;                                         // 0x0144   (0x0004)  
	bool                                               IgnoreInheritedScale;                                       // 0x0148   (0x0001)  
	unsigned char                                      UnknownData01_7[0x17];                                      // 0x0149   (0x0017)  MISSED
	// void SetUserSpecifiedScale(float InUserSpecifiedScale);                                                                  // [0x3b9fc00] Final|Native|Public|BlueprintCallable 
	// void SetStretchDirection(TEnumAsByte<EStretchDirection> InStretchDirection);                                             // [0x3b9f9a0] Final|Native|Public|BlueprintCallable 
	// void SetStretch(TEnumAsByte<EStretch> InStretch);                                                                        // [0x3b9f920] Final|Native|Public|BlueprintCallable 
	// void SetIgnoreInheritedScale(bool bInIgnoreInheritedScale);                                                              // [0x3b9ee60] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.ScaleBoxSlot
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UScaleBoxSlot : public UPanelSlot
{ 
public:
	FMargin                                            Padding;                                                    // 0x0040   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0050   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0051   (0x0001)  
	unsigned char                                      UnknownData00_7[0x16];                                      // 0x0052   (0x0016)  MISSED
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x20f3700] Final|Native|Public|BlueprintCallable 
	// void SetPadding(FMargin InPadding);                                                                                      // [0x3b9f2f0] Final|Native|Public|BlueprintCallable 
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x20f35f0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.ScrollBar
/// Size: 0x0550 (1360 bytes) (0x000128 - 0x000678) align 8 pad: 0x0000
class UScrollBar : public UWidget
{ 
public:
	FScrollBarStyle                                    WidgetStyle;                                                // 0x0128   (0x0518)  
	class USlateWidgetStyleAsset*                      Style;                                                      // 0x0640   (0x0008)  
	bool                                               bAlwaysShowScrollbar;                                       // 0x0648   (0x0001)  
	bool                                               bAlwaysShowScrollbarTrack;                                  // 0x0649   (0x0001)  
	TEnumAsByte<EOrientation>                          Orientation;                                                // 0x064A   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x064B   (0x0001)  MISSED
	FVector2D                                          Thickness;                                                  // 0x064C   (0x0008)  
	FMargin                                            Padding;                                                    // 0x0654   (0x0010)  
	unsigned char                                      UnknownData01_7[0x14];                                      // 0x0664   (0x0014)  MISSED
	// void SetState(float InOffsetFraction, float InThumbSizeFraction);                                                        // [0x3b9f850] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.ScrollBox
/// Size: 0x07D0 (2000 bytes) (0x000140 - 0x000910) align 8 pad: 0x0000
class UScrollBox : public UPanelWidget
{ 
public:
	FScrollBoxStyle                                    WidgetStyle;                                                // 0x0140   (0x0248)  
	FScrollBarStyle                                    WidgetBarStyle;                                             // 0x0388   (0x0518)  
	class USlateWidgetStyleAsset*                      Style;                                                      // 0x08A0   (0x0008)  
	class USlateWidgetStyleAsset*                      BarStyle;                                                   // 0x08A8   (0x0008)  
	TEnumAsByte<EOrientation>                          Orientation;                                                // 0x08B0   (0x0001)  
	ESlateVisibility                                   ScrollBarVisibility;                                        // 0x08B1   (0x0001)  
	EConsumeMouseWheel                                 ConsumeMouseWheel;                                          // 0x08B2   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x08B3   (0x0001)  MISSED
	FVector2D                                          ScrollbarThickness;                                         // 0x08B4   (0x0008)  
	FMargin                                            ScrollbarPadding;                                           // 0x08BC   (0x0010)  
	bool                                               AlwaysShowScrollbar;                                        // 0x08CC   (0x0001)  
	bool                                               AlwaysShowScrollbarTrack;                                   // 0x08CD   (0x0001)  
	bool                                               AllowOverscroll;                                            // 0x08CE   (0x0001)  
	bool                                               bAnimateWheelScrolling;                                     // 0x08CF   (0x0001)  
	EDescendantScrollDestination                       NavigationDestination;                                      // 0x08D0   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x08D1   (0x0003)  MISSED
	float                                              NavigationScrollPadding;                                    // 0x08D4   (0x0004)  
	EScrollWhenFocusChanges                            ScrollWhenFocusChanges;                                     // 0x08D8   (0x0001)  
	bool                                               bAllowRightClickDragScrolling;                              // 0x08D9   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x08DA   (0x0002)  MISSED
	float                                              WheelScrollMultiplier;                                      // 0x08DC   (0x0004)  
	bool                                               bCoverNavigation;                                           // 0x08E0   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x08E1   (0x0007)  MISSED
	SDK_UNDEFINED(16,337) /* FMulticastInlineDelegate */ __um(OnUserScrolled);                                     // 0x08E8   (0x0010)  
	unsigned char                                      UnknownData04_7[0x18];                                      // 0x08F8   (0x0018)  MISSED
	// void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);                                                           // [0x3b9fd80] Final|Native|Public|BlueprintCallable 
	// void SetScrollOffset(float NewScrollOffset);                                                                             // [0x3b9f520] Final|Native|Public|BlueprintCallable 
	// void SetScrollbarVisibility(ESlateVisibility NewScrollBarVisibility);                                                    // [0x3b9f4a0] Final|Native|Public|BlueprintCallable 
	// void SetScrollbarThickness(FVector2D& NewScrollbarThickness);                                                            // [0x3b9f640] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetScrollbarPadding(FMargin& NewScrollbarPadding);                                                                  // [0x3b9f5a0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetOrientation(TEnumAsByte<EOrientation> NewOrientation);                                                           // [0x3b9f270] Final|Native|Public|BlueprintCallable 
	// void SetConsumeMouseWheel(EConsumeMouseWheel NewConsumeMouseWheel);                                                      // [0x3b9e6e0] Final|Native|Public|BlueprintCallable 
	// void SetAnimateWheelScrolling(bool bShouldAnimateWheelScrolling);                                                        // [0x3b9e5c0] Final|Native|Public|BlueprintCallable 
	// void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);                                                                // [0x3b9e530] Final|Native|Public|BlueprintCallable 
	// void SetAllowOverscroll(bool NewAllowOverscroll);                                                                        // [0x3b9e4a0] Final|Native|Public|BlueprintCallable 
	// void ScrollWidgetIntoView(class UWidget* WidgetToFind, bool AnimateScroll, EDescendantScrollDestination ScrollDestination, float Padding); // [0x3b9e340] Final|Native|Public|BlueprintCallable 
	// void ScrollToStart();                                                                                                    // [0x3b9e320] Final|Native|Public|BlueprintCallable 
	// void ScrollToEnd();                                                                                                      // [0x3b9e300] Final|Native|Public|BlueprintCallable 
	// bool IsPressing();                                                                                                       // [0x3b9daa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetViewOffsetFraction();                                                                                           // [0x3b9da70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetScrollOffsetOfEnd();                                                                                            // [0x3b9d9a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetScrollOffset();                                                                                                 // [0x3b9d970] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void EndInertialScrolling();                                                                                             // [0x3b9d390] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.ScrollBoxSlot
/// Size: 0x0020 (32 bytes) (0x000040 - 0x000060) align 8 pad: 0x0000
class UScrollBoxSlot : public UPanelSlot
{ 
public:
	FMargin                                            Padding;                                                    // 0x0040   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0050   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0051   (0x0001)  
	unsigned char                                      UnknownData00_7[0xE];                                       // 0x0052   (0x000E)  MISSED
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x3b9fc80] Final|Native|Public|BlueprintCallable 
	// void SetPadding(FMargin InPadding);                                                                                      // [0x3b9f380] Final|Native|Public|BlueprintCallable 
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3b9ed60] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.SizeBox
/// Size: 0x0038 (56 bytes) (0x000140 - 0x000178) align 8 pad: 0x0000
class USizeBox : public UContentWidget
{ 
public:
	unsigned char                                      UnknownData00_3[0x10];                                      // 0x0140   (0x0010)  MISSED
	float                                              WidthOverride;                                              // 0x0150   (0x0004)  
	float                                              HeightOverride;                                             // 0x0154   (0x0004)  
	float                                              MinDesiredWidth;                                            // 0x0158   (0x0004)  
	float                                              MinDesiredHeight;                                           // 0x015C   (0x0004)  
	float                                              MaxDesiredWidth;                                            // 0x0160   (0x0004)  
	float                                              MaxDesiredHeight;                                           // 0x0164   (0x0004)  
	float                                              MinAspectRatio;                                             // 0x0168   (0x0004)  
	float                                              MaxAspectRatio;                                             // 0x016C   (0x0004)  
	bool                                               bOverride_WidthOverride : 1;                                // 0x0170:0 (0x0001)  
	bool                                               bOverride_HeightOverride : 1;                               // 0x0170:1 (0x0001)  
	bool                                               bOverride_MinDesiredWidth : 1;                              // 0x0170:2 (0x0001)  
	bool                                               bOverride_MinDesiredHeight : 1;                             // 0x0170:3 (0x0001)  
	bool                                               bOverride_MaxDesiredWidth : 1;                              // 0x0170:4 (0x0001)  
	bool                                               bOverride_MaxDesiredHeight : 1;                             // 0x0170:5 (0x0001)  
	bool                                               bOverride_MinAspectRatio : 1;                               // 0x0170:6 (0x0001)  
	bool                                               bOverride_MaxAspectRatio : 1;                               // 0x0170:7 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0171   (0x0007)  MISSED
	// void SetWidthOverride(float InWidthOverride);                                                                            // [0x3b9fe00] Final|Native|Public|BlueprintCallable 
	// void SetMinDesiredWidth(float InMinDesiredWidth);                                                                        // [0x3b9f1f0] Final|Native|Public|BlueprintCallable 
	// void SetMinDesiredHeight(float InMinDesiredHeight);                                                                      // [0x3b9f0f0] Final|Native|Public|BlueprintCallable 
	// void SetMinAspectRatio(float InMinAspectRatio);                                                                          // [0x3b9f070] Final|Native|Public|BlueprintCallable 
	// void SetMaxDesiredWidth(float InMaxDesiredWidth);                                                                        // [0x3b9eff0] Final|Native|Public|BlueprintCallable 
	// void SetMaxDesiredHeight(float InMaxDesiredHeight);                                                                      // [0x3b9ef70] Final|Native|Public|BlueprintCallable 
	// void SetMaxAspectRatio(float InMaxAspectRatio);                                                                          // [0x3b9eef0] Final|Native|Public|BlueprintCallable 
	// void SetHeightOverride(float InHeightOverride);                                                                          // [0x3b9ece0] Final|Native|Public|BlueprintCallable 
	// void ClearWidthOverride();                                                                                               // [0x3b9d370] Final|Native|Public|BlueprintCallable 
	// void ClearMinDesiredWidth();                                                                                             // [0x3b9d350] Final|Native|Public|BlueprintCallable 
	// void ClearMinDesiredHeight();                                                                                            // [0x3b9d330] Final|Native|Public|BlueprintCallable 
	// void ClearMinAspectRatio();                                                                                              // [0x3b9d310] Final|Native|Public|BlueprintCallable 
	// void ClearMaxDesiredWidth();                                                                                             // [0x3b9d2f0] Final|Native|Public|BlueprintCallable 
	// void ClearMaxDesiredHeight();                                                                                            // [0x3b9d2d0] Final|Native|Public|BlueprintCallable 
	// void ClearMaxAspectRatio();                                                                                              // [0x3b9d2b0] Final|Native|Public|BlueprintCallable 
	// void ClearHeightOverride();                                                                                              // [0x3b9d290] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.SizeBoxSlot
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class USizeBoxSlot : public UPanelSlot
{ 
public:
	FMargin                                            Padding;                                                    // 0x0040   (0x0010)  
	unsigned char                                      UnknownData00_6[0x10];                                      // 0x0050   (0x0010)  MISSED
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0060   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0061   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x0062   (0x0006)  MISSED
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x3b9fd00] Final|Native|Public|BlueprintCallable 
	// void SetPadding(FMargin InPadding);                                                                                      // [0x3b9f410] Final|Native|Public|BlueprintCallable 
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3b9ede0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.SlateBlueprintLibrary
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class USlateBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
public:
	// FVector2D TransformVectorLocalToAbsolute(FGeometry& Geometry, FVector2D LocalVector);                                    // [0x3ba0180] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector2D TransformVectorAbsoluteToLocal(FGeometry& Geometry, FVector2D AbsoluteVector);                                 // [0x3ba0080] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// float TransformScalarLocalToAbsolute(FGeometry& Geometry, float LocalScalar);                                            // [0x3b9ff80] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// float TransformScalarAbsoluteToLocal(FGeometry& Geometry, float AbsoluteScalar);                                         // [0x3b9fe80] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// void ScreenToWidgetLocal(class UObject* WorldContextObject, FGeometry& Geometry, FVector2D ScreenPosition, FVector2D& LocalCoordinate, bool bIncludeWindowPosition); // [0x3b9e120] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// void ScreenToWidgetAbsolute(class UObject* WorldContextObject, FVector2D ScreenPosition, FVector2D& AbsoluteCoordinate, bool bIncludeWindowPosition); // [0x3b9dfc0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// void ScreenToViewport(class UObject* WorldContextObject, FVector2D ScreenPosition, FVector2D& ViewportPosition);         // [0x3b9dec0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// void LocalToViewport(class UObject* WorldContextObject, FGeometry& Geometry, FVector2D LocalCoordinate, FVector2D& PixelPosition, FVector2D& ViewportPosition); // [0x3b9dcd0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector2D LocalToAbsolute(FGeometry& Geometry, FVector2D LocalCoordinate);                                               // [0x3b9dbd0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool IsUnderLocation(FGeometry& Geometry, FVector2D& AbsoluteCoordinate);                                                // [0x3b9dad0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector2D GetLocalTopLeft(FGeometry& Geometry);                                                                          // [0x3b9d8b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector2D GetLocalSize(FGeometry& Geometry);                                                                             // [0x3b9d7f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector2D GetAbsoluteSize(FGeometry& Geometry);                                                                          // [0x3b9d690] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// bool EqualEqual_SlateBrush(FSlateBrush& A, FSlateBrush& B);                                                              // [0x3b9d3b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// void AbsoluteToViewport(class UObject* WorldContextObject, FVector2D AbsoluteDesktopCoordinate, FVector2D& PixelPosition, FVector2D& ViewportPosition); // [0x3b9d110] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FVector2D AbsoluteToLocal(FGeometry& Geometry, FVector2D AbsoluteCoordinate);                                            // [0x3b9d010] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
};

/// Struct /Script/UMG.SlateMeshVertex
/// Size: 0x003C (60 bytes) (0x000000 - 0x00003C) align 4 pad: 0x0000
struct FSlateMeshVertex
{ 
	FVector2D                                          Position;                                                   // 0x0000   (0x0008)  
	FColor                                             Color;                                                      // 0x0008   (0x0004)  
	FVector2D                                          uv0;                                                        // 0x000C   (0x0008)  
	FVector2D                                          uv1;                                                        // 0x0014   (0x0008)  
	FVector2D                                          uv2;                                                        // 0x001C   (0x0008)  
	FVector2D                                          uv3;                                                        // 0x0024   (0x0008)  
	FVector2D                                          UV4;                                                        // 0x002C   (0x0008)  
	FVector2D                                          UV5;                                                        // 0x0034   (0x0008)  
};

/// Class /Script/UMG.SlateVectorArtData
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000068) align 8 pad: 0x0000
class USlateVectorArtData : public UObject
{ 
public:
	TArray<FSlateMeshVertex>                           VertexData;                                                 // 0x0030   (0x0010)  
	TArray<uint32_t>                                   IndexData;                                                  // 0x0040   (0x0010)  
	class UMaterialInterface*                          Material;                                                   // 0x0050   (0x0008)  
	FVector2D                                          ExtentMin;                                                  // 0x0058   (0x0008)  
	FVector2D                                          ExtentMax;                                                  // 0x0060   (0x0008)  
};

/// Class /Script/UMG.SlateAccessibleWidgetData
/// Size: 0x0068 (104 bytes) (0x000030 - 0x000098) align 8 pad: 0x0000
class USlateAccessibleWidgetData : public UObject
{ 
public:
	bool                                               bCanChildrenBeAccessible;                                   // 0x0030   (0x0001)  
	ESlateAccessibleBehavior                           AccessibleBehavior;                                         // 0x0031   (0x0001)  
	ESlateAccessibleBehavior                           AccessibleSummaryBehavior;                                  // 0x0032   (0x0001)  
	unsigned char                                      UnknownData00_6[0x5];                                       // 0x0033   (0x0005)  MISSED
	FText                                              AccessibleText;                                             // 0x0038   (0x0018)  
	SDK_UNDEFINED(20,338) /* FDelegateProperty */      __um(AccessibleTextDelegate);                               // 0x0050   (0x0014)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0064   (0x0004)  MISSED
	FText                                              AccessibleSummaryText;                                      // 0x0068   (0x0018)  
	SDK_UNDEFINED(20,339) /* FDelegateProperty */      __um(AccessibleSummaryTextDelegate);                        // 0x0080   (0x0014)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x0094   (0x0004)  MISSED
};

/// Class /Script/UMG.Slider
/// Size: 0x0420 (1056 bytes) (0x000128 - 0x000548) align 8 pad: 0x0000
class USlider : public UWidget
{ 
public:
	float                                              Value;                                                      // 0x0128   (0x0004)  
	SDK_UNDEFINED(20,340) /* FDelegateProperty */      __um(ValueDelegate);                                        // 0x012C   (0x0014)  
	float                                              MinValue;                                                   // 0x0140   (0x0004)  
	float                                              MaxValue;                                                   // 0x0144   (0x0004)  
	FSliderStyle                                       WidgetStyle;                                                // 0x0148   (0x0370)  
	TEnumAsByte<EOrientation>                          Orientation;                                                // 0x04B8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x04B9   (0x0003)  MISSED
	FLinearColor                                       SliderBarColor;                                             // 0x04BC   (0x0010)  
	FLinearColor                                       SliderHandleColor;                                          // 0x04CC   (0x0010)  
	bool                                               IndentHandle;                                               // 0x04DC   (0x0001)  
	bool                                               Locked;                                                     // 0x04DD   (0x0001)  
	bool                                               MouseUsesStep;                                              // 0x04DE   (0x0001)  
	bool                                               RequiresControllerLock;                                     // 0x04DF   (0x0001)  
	float                                              StepSize;                                                   // 0x04E0   (0x0004)  
	bool                                               IsFocusable;                                                // 0x04E4   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x04E5   (0x0003)  MISSED
	SDK_UNDEFINED(16,341) /* FMulticastInlineDelegate */ __um(OnMouseCaptureBegin);                                // 0x04E8   (0x0010)  
	SDK_UNDEFINED(16,342) /* FMulticastInlineDelegate */ __um(OnMouseCaptureEnd);                                  // 0x04F8   (0x0010)  
	SDK_UNDEFINED(16,343) /* FMulticastInlineDelegate */ __um(OnControllerCaptureBegin);                           // 0x0508   (0x0010)  
	SDK_UNDEFINED(16,344) /* FMulticastInlineDelegate */ __um(OnControllerCaptureEnd);                             // 0x0518   (0x0010)  
	SDK_UNDEFINED(16,345) /* FMulticastInlineDelegate */ __um(OnValueChanged);                                     // 0x0528   (0x0010)  
	unsigned char                                      UnknownData02_7[0x10];                                      // 0x0538   (0x0010)  MISSED
	// void SetValue(float InValue);                                                                                            // [0x3ba3ef0] Final|Native|Public|BlueprintCallable 
	// void SetStepSize(float InValue);                                                                                         // [0x3ba3ab0] Final|Native|Public|BlueprintCallable 
	// void SetSliderHandleColor(FLinearColor InValue);                                                                         // [0x3ba3a20] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetSliderBarColor(FLinearColor InValue);                                                                            // [0x3ba3990] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetMinValue(float InValue);                                                                                         // [0x3ba35f0] Final|Native|Public|BlueprintCallable 
	// void SetMaxValue(float InValue);                                                                                         // [0x3ba3360] Final|Native|Public|BlueprintCallable 
	// void SetLocked(bool InValue);                                                                                            // [0x3ba31c0] Final|Native|Public|BlueprintCallable 
	// void SetIndentHandle(bool InValue);                                                                                      // [0x3ba30b0] Final|Native|Public|BlueprintCallable 
	// float GetValue();                                                                                                        // [0x3ba28d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetNormalizedValue();                                                                                              // [0x3ba26e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.Spacer
/// Size: 0x0018 (24 bytes) (0x000128 - 0x000140) align 8 pad: 0x0000
class USpacer : public UWidget
{ 
public:
	FVector2D                                          Size;                                                       // 0x0128   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0130   (0x0010)  MISSED
	// void setSize(FVector2D InSize);                                                                                          // [0x3ba3910] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/UMG.SpinBox
/// Size: 0x0440 (1088 bytes) (0x000128 - 0x000568) align 8 pad: 0x0000
class USpinBox : public UWidget
{ 
public:
	float                                              Value;                                                      // 0x0128   (0x0004)  
	SDK_UNDEFINED(20,346) /* FDelegateProperty */      __um(ValueDelegate);                                        // 0x012C   (0x0014)  
	FSpinBoxStyle                                      WidgetStyle;                                                // 0x0140   (0x0310)  
	class USlateWidgetStyleAsset*                      Style;                                                      // 0x0450   (0x0008)  
	int32_t                                            MinFractionalDigits;                                        // 0x0458   (0x0004)  
	int32_t                                            MaxFractionalDigits;                                        // 0x045C   (0x0004)  
	bool                                               bAlwaysUsesDeltaSnap;                                       // 0x0460   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0461   (0x0003)  MISSED
	float                                              Delta;                                                      // 0x0464   (0x0004)  
	float                                              SliderExponent;                                             // 0x0468   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x046C   (0x0004)  MISSED
	FSlateFontInfo                                     Font;                                                       // 0x0470   (0x0058)  
	TEnumAsByte<ETextJustify>                          Justification;                                              // 0x04C8   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x04C9   (0x0003)  MISSED
	float                                              MinDesiredWidth;                                            // 0x04CC   (0x0004)  
	bool                                               ClearKeyboardFocusOnCommit;                                 // 0x04D0   (0x0001)  
	bool                                               SelectAllTextOnCommit;                                      // 0x04D1   (0x0001)  
	unsigned char                                      UnknownData03_6[0x6];                                       // 0x04D2   (0x0006)  MISSED
	FSlateColor                                        ForegroundColor;                                            // 0x04D8   (0x0028)  
	SDK_UNDEFINED(16,347) /* FMulticastInlineDelegate */ __um(OnValueChanged);                                     // 0x0500   (0x0010)  
	SDK_UNDEFINED(16,348) /* FMulticastInlineDelegate */ __um(OnValueCommitted);                                   // 0x0510   (0x0010)  
	SDK_UNDEFINED(16,349) /* FMulticastInlineDelegate */ __um(OnBeginSliderMovement);                              // 0x0520   (0x0010)  
	SDK_UNDEFINED(16,350) /* FMulticastInlineDelegate */ __um(OnEndSliderMovement);                                // 0x0530   (0x0010)  
	bool                                               bOverride_MinValue : 1;                                     // 0x0540:0 (0x0001)  
	bool                                               bOverride_MaxValue : 1;                                     // 0x0540:1 (0x0001)  
	bool                                               bOverride_MinSliderValue : 1;                               // 0x0540:2 (0x0001)  
	bool                                               bOverride_MaxSliderValue : 1;                               // 0x0540:3 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0541   (0x0003)  MISSED
	float                                              MinValue;                                                   // 0x0544   (0x0004)  
	float                                              MaxValue;                                                   // 0x0548   (0x0004)  
	float                                              MinSliderValue;                                             // 0x054C   (0x0004)  
	float                                              MaxSliderValue;                                             // 0x0550   (0x0004)  
	unsigned char                                      UnknownData05_7[0x14];                                      // 0x0554   (0x0014)  MISSED
	// void SetValue(float NewValue);                                                                                           // [0x3ba3f70] Final|Native|Public|BlueprintCallable 
	// void SetMinValue(float NewValue);                                                                                        // [0x3ba3670] Final|Native|Public|BlueprintCallable 
	// void SetMinSliderValue(float NewValue);                                                                                  // [0x3ba3570] Final|Native|Public|BlueprintCallable 
	// void SetMinFractionalDigits(int32_t NewValue);                                                                           // [0x3ba34e0] Final|Native|Public|BlueprintCallable 
	// void SetMaxValue(float NewValue);                                                                                        // [0x3ba33e0] Final|Native|Public|BlueprintCallable 
	// void SetMaxSliderValue(float NewValue);                                                                                  // [0x3ba32e0] Final|Native|Public|BlueprintCallable 
	// void SetMaxFractionalDigits(int32_t NewValue);                                                                           // [0x3ba3250] Final|Native|Public|BlueprintCallable 
	// void SetForegroundColor(FSlateColor InForegroundColor);                                                                  // [0x3ba2fb0] Final|Native|Public|BlueprintCallable 
	// void SetDelta(float NewValue);                                                                                           // [0x3ba2d00] Final|Native|Public|BlueprintCallable 
	// void SetAlwaysUsesDeltaSnap(bool bNewValue);                                                                             // [0x3ba2930] Final|Native|Public|BlueprintCallable 
	// void OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, TEnumAsByte<ETextCommit> CommitMethod);              // [0x25a7960] MulticastDelegate|Public|Delegate 
	// void OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);                                                       // [0x25a7960] MulticastDelegate|Public|Delegate 
	// void OnSpinBoxBeginSliderMovement__DelegateSignature();                                                                  // [0x25a7960] MulticastDelegate|Public|Delegate 
	// float GetValue();                                                                                                        // [0x3ba2900] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetMinValue();                                                                                                     // [0x3ba26b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetMinSliderValue();                                                                                               // [0x3ba2680] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetMinFractionalDigits();                                                                                        // [0x3ba2650] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetMaxValue();                                                                                                     // [0x3ba2620] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetMaxSliderValue();                                                                                               // [0x3ba25f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetMaxFractionalDigits();                                                                                        // [0x3ba25c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetDelta();                                                                                                        // [0x3ba24f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool GetAlwaysUsesDeltaSnap();                                                                                           // [0x3ba24c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void ClearMinValue();                                                                                                    // [0x3ba24a0] Final|Native|Public|BlueprintCallable 
	// void ClearMinSliderValue();                                                                                              // [0x3ba2480] Final|Native|Public|BlueprintCallable 
	// void ClearMaxValue();                                                                                                    // [0x3ba2460] Final|Native|Public|BlueprintCallable 
	// void ClearMaxSliderValue();                                                                                              // [0x3ba2440] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.TextBinding
/// Size: 0x0008 (8 bytes) (0x000070 - 0x000078) align 8 pad: 0x0000
class UTextBinding : public UPropertyBinding
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0070   (0x0008)  MISSED
	// FText GetTextValue();                                                                                                    // [0x3ba2830] Final|Native|Public|Const 
	// FString GetStringValue();                                                                                                // [0x3ba2710] Final|Native|Public|Const 
};

/// Class /Script/UMG.TextBlock
/// Size: 0x01A0 (416 bytes) (0x000148 - 0x0002E8) align 8 pad: 0x0000
class UTextBlock : public UTextLayoutWidget
{ 
public:
	FText                                              Text;                                                       // 0x0148   (0x0018)  
	SDK_UNDEFINED(20,351) /* FDelegateProperty */      __um(TextDelegate);                                         // 0x0160   (0x0014)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0174   (0x0004)  MISSED
	FSlateColor                                        ColorAndOpacity;                                            // 0x0178   (0x0028)  
	SDK_UNDEFINED(20,352) /* FDelegateProperty */      __um(ColorAndOpacityDelegate);                              // 0x01A0   (0x0014)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x01B4   (0x0004)  MISSED
	FSlateFontInfo                                     Font;                                                       // 0x01B8   (0x0058)  
	FSlateBrush                                        StrikeBrush;                                                // 0x0210   (0x0090)  
	FVector2D                                          ShadowOffset;                                               // 0x02A0   (0x0008)  
	FLinearColor                                       ShadowColorAndOpacity;                                      // 0x02A8   (0x0010)  
	SDK_UNDEFINED(20,353) /* FDelegateProperty */      __um(ShadowColorAndOpacityDelegate);                        // 0x02B8   (0x0014)  
	float                                              MinDesiredWidth;                                            // 0x02CC   (0x0004)  
	bool                                               bWrapWithInvalidationPanel;                                 // 0x02D0   (0x0001)  
	bool                                               bAutoWrapText;                                              // 0x02D1   (0x0001)  
	ETextTransformPolicy                               TextTransformPolicy;                                        // 0x02D2   (0x0001)  
	bool                                               bSimpleTextMode;                                            // 0x02D3   (0x0001)  
	unsigned char                                      UnknownData02_7[0x14];                                      // 0x02D4   (0x0014)  MISSED
	// void SetTextTransformPolicy(ETextTransformPolicy InTransformPolicy);                                                     // [0x3ba3e70] Final|Native|Public|BlueprintCallable 
	// void SetText(FText InText);                                                                                              // [0x3ba3d80] Native|Public|BlueprintCallable 
	// void SetStrikeBrush(FSlateBrush InStrikeBrush);                                                                          // [0x3ba3b30] Final|Native|Public|BlueprintCallable 
	// void SetShadowOffset(FVector2D InShadowOffset);                                                                          // [0x3ba3890] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetShadowColorAndOpacity(FLinearColor InShadowColorAndOpacity);                                                     // [0x3ba3800] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetOpacity(float InOpacity);                                                                                        // [0x3ba3780] Final|Native|Public|BlueprintCallable 
	// void SetMinDesiredWidth(float InMinDesiredWidth);                                                                        // [0x3ba3460] Final|Native|Public|BlueprintCallable 
	// void SetFont(FSlateFontInfo InFontInfo);                                                                                 // [0x3ba2e80] Final|Native|Public|BlueprintCallable 
	// void SetColorAndOpacity(FSlateColor InColorAndOpacity);                                                                  // [0x3ba2c00] Final|Native|Public|BlueprintCallable 
	// void SetAutoWrapText(bool InAutoTextWrap);                                                                               // [0x3ba2b70] Final|Native|Public|BlueprintCallable 
	// FText GetText();                                                                                                         // [0x3ba2790] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UMaterialInstanceDynamic* GetDynamicOutlineMaterial();                                                             // [0x3ba2550] Final|Native|Public|BlueprintCallable 
	// class UMaterialInstanceDynamic* GetDynamicFontMaterial();                                                                // [0x3ba2520] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.Throbber
/// Size: 0x00B0 (176 bytes) (0x000128 - 0x0001D8) align 8 pad: 0x0000
class UThrobber : public UWidget
{ 
public:
	int32_t                                            NumberOfPieces;                                             // 0x0128   (0x0004)  
	bool                                               bAnimateHorizontally;                                       // 0x012C   (0x0001)  
	bool                                               bAnimateVertically;                                         // 0x012D   (0x0001)  
	bool                                               bAnimateOpacity;                                            // 0x012E   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x012F   (0x0001)  MISSED
	class USlateBrushAsset*                            PieceImage;                                                 // 0x0130   (0x0008)  
	FSlateBrush                                        Image;                                                      // 0x0138   (0x0090)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x01C8   (0x0010)  MISSED
	// void SetNumberOfPieces(int32_t InNumberOfPieces);                                                                        // [0x3ba36f0] Final|Native|Public|BlueprintCallable 
	// void SetAnimateVertically(bool bInAnimateVertically);                                                                    // [0x3ba2ae0] Final|Native|Public|BlueprintCallable 
	// void SetAnimateOpacity(bool bInAnimateOpacity);                                                                          // [0x3ba2a50] Final|Native|Public|BlueprintCallable 
	// void SetAnimateHorizontally(bool bInAnimateHorizontally);                                                                // [0x3ba29c0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.TileView
/// Size: 0x0020 (32 bytes) (0x000388 - 0x0003A8) align 8 pad: 0x0000
class UTileView : public UListView
{ 
public:
	float                                              EntryHeight;                                                // 0x0388   (0x0004)  
	float                                              EntryWidth;                                                 // 0x038C   (0x0004)  
	EListItemAlignment                                 TileAlignment;                                              // 0x0390   (0x0001)  
	bool                                               bWrapHorizontalNavigation;                                  // 0x0391   (0x0001)  
	unsigned char                                      UnknownData00_7[0x16];                                      // 0x0392   (0x0016)  MISSED
	// void SetEntryWidth(float NewWidth);                                                                                      // [0x3ba2e00] Final|Native|Public|BlueprintCallable 
	// void SetEntryHeight(float NewHeight);                                                                                    // [0x3ba2d80] Final|Native|Public|BlueprintCallable 
	// float GetEntryWidth();                                                                                                   // [0x3ba25a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetEntryHeight();                                                                                                  // [0x3ba2580] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.TreeView
/// Size: 0x0060 (96 bytes) (0x000388 - 0x0003E8) align 8 pad: 0x0000
class UTreeView : public UListView
{ 
public:
	unsigned char                                      UnknownData00_3[0x10];                                      // 0x0388   (0x0010)  MISSED
	SDK_UNDEFINED(20,354) /* FDelegateProperty */      __um(BP_OnGetItemChildren);                                 // 0x0398   (0x0014)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x03AC   (0x0004)  MISSED
	SDK_UNDEFINED(16,355) /* FMulticastInlineDelegate */ __um(BP_OnItemExpansionChanged);                          // 0x03B0   (0x0010)  
	unsigned char                                      UnknownData02_7[0x28];                                      // 0x03C0   (0x0028)  MISSED
	// void SetItemExpansion(class UObject* Item, bool bExpandItem);                                                            // [0x3baaa30] Final|Native|Public|BlueprintCallable 
	// void ExpandAll();                                                                                                        // [0x3ba94c0] Final|Native|Public|BlueprintCallable 
	// void CollapseAll();                                                                                                      // [0x3ba94a0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.KuroSafeZoneSlot
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UKuroSafeZoneSlot : public UPanelSlot
{ 
public:
	bool                                               bIsTitleSafe;                                               // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	FMargin                                            SafeAreaScale;                                              // 0x0044   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HAlign;                                                     // 0x0054   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VAlign;                                                     // 0x0055   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0056   (0x0002)  MISSED
	FMargin                                            Padding;                                                    // 0x0058   (0x0010)  
};

/// Class /Script/UMG.KuroUMGSafeZone
/// Size: 0x0020 (32 bytes) (0x000140 - 0x000160) align 8 pad: 0x0000
class UKuroUMGSafeZone : public UContentWidget
{ 
public:
	bool                                               PadLeft;                                                    // 0x0140   (0x0001)  
	bool                                               PadRight;                                                   // 0x0141   (0x0001)  
	bool                                               PadTop;                                                     // 0x0142   (0x0001)  
	bool                                               PadBottom;                                                  // 0x0143   (0x0001)  
	unsigned char                                      UnknownData00_7[0x1C];                                      // 0x0144   (0x001C)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneRootEvaluationTemplateInstance
/// Size: 0x00F8 (248 bytes) (0x000000 - 0x0000F8) align 8 pad: 0x0000
struct FMovieSceneRootEvaluationTemplateInstance
{ 
	SDK_UNDEFINED(8,356) /* TWeakObjectPtr<UMovieSceneSequence*> */ __um(WeakRootSequence);                        // 0x0000   (0x0008)  
	class UMovieSceneCompiledDataManager*              CompiledDataManager;                                        // 0x0008   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0010   (0x0008)  MISSED
	class UMovieSceneEntitySystemLinker*               EntitySystemLinker;                                         // 0x0018   (0x0008)  
	unsigned char                                      UnknownData01_6[0x80];                                      // 0x0020   (0x0080)  MISSED
	SDK_UNDEFINED(80,357) /* TMap<FMovieSceneSequenceID, UObject*> */ __um(DirectorInstances);                     // 0x00A0   (0x0050)  
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x00F0   (0x0008)  MISSED
};

/// Class /Script/UMG.UMGSequencePlayer
/// Size: 0x0568 (1384 bytes) (0x000030 - 0x000598) align 8 pad: 0x0000
class UUMGSequencePlayer : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x3E8];                                     // 0x0030   (0x03E8)  MISSED
	class UWidgetAnimation*                            Animation;                                                  // 0x0418   (0x0008)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0420   (0x0008)  MISSED
	FMovieSceneRootEvaluationTemplateInstance          RootTemplateInstance;                                       // 0x0428   (0x00F8)  
	unsigned char                                      UnknownData02_7[0x78];                                      // 0x0520   (0x0078)  MISSED
	// void SetUserTag(FName InUserTag);                                                                                        // [0x3bab0b0] Final|Native|Public|BlueprintCallable 
	// FName GetUserTag();                                                                                                      // [0x3ba96b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.UMGSequenceTickManager
/// Size: 0x0108 (264 bytes) (0x000030 - 0x000138) align 8 pad: 0x0000
class UUMGSequenceTickManager : public UObject
{ 
public:
	SDK_UNDEFINED(80,358) /* TSet<TWeakObjectPtr<UUserWidget*>> */ __um(WeakUserWidgets);                          // 0x0030   (0x0050)  
	class UMovieSceneEntitySystemLinker*               Linker;                                                     // 0x0080   (0x0008)  
	unsigned char                                      UnknownData00_7[0xB0];                                      // 0x0088   (0x00B0)  MISSED
};

/// Class /Script/UMG.UniformGridPanel
/// Size: 0x0028 (40 bytes) (0x000140 - 0x000168) align 8 pad: 0x0000
class UUniformGridPanel : public UPanelWidget
{ 
public:
	FMargin                                            SlotPadding;                                                // 0x0140   (0x0010)  
	float                                              MinDesiredSlotWidth;                                        // 0x0150   (0x0004)  
	float                                              MinDesiredSlotHeight;                                       // 0x0154   (0x0004)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0158   (0x0010)  MISSED
	// void SetSlotPadding(FMargin InSlotPadding);                                                                              // [0x3bab020] Final|Native|Public|BlueprintCallable 
	// void SetMinDesiredSlotWidth(float InMinDesiredSlotWidth);                                                                // [0x3baab80] Final|Native|Public|BlueprintCallable 
	// void SetMinDesiredSlotHeight(float InMinDesiredSlotHeight);                                                              // [0x3baab00] Final|Native|Public|BlueprintCallable 
	// class UUniformGridSlot* AddChildToUniformGrid(class UWidget* Content, int32_t InRow, int32_t InColumn);                  // [0x3ba8ee0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.UniformGridSlot
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UUniformGridSlot : public UPanelSlot
{ 
public:
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0040   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0041   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0042   (0x0002)  MISSED
	int32_t                                            Row;                                                        // 0x0044   (0x0004)  
	int32_t                                            Column;                                                     // 0x0048   (0x0004)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x3bab150] Final|Native|Public|BlueprintCallable 
	// void SetRow(int32_t InRow);                                                                                              // [0x3baaf90] Final|Native|Public|BlueprintCallable 
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3baa890] Final|Native|Public|BlueprintCallable 
	// void SetColumn(int32_t InColumn);                                                                                        // [0x3baa680] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.VerticalBox
/// Size: 0x0010 (16 bytes) (0x000140 - 0x000150) align 8 pad: 0x0000
class UVerticalBox : public UPanelWidget
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0140   (0x0010)  MISSED
	// class UVerticalBoxSlot* AddChildToVerticalBox(class UWidget* Content);                                                   // [0x3bad310] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.VerticalBoxSlot
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UVerticalBoxSlot : public UPanelSlot
{ 
public:
	FSlateChildSize                                    Size;                                                       // 0x0040   (0x0008)  
	FMargin                                            Padding;                                                    // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0058   (0x0008)  MISSED
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0060   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0061   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x0062   (0x0006)  MISSED
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x3baed00] Final|Native|Public|BlueprintCallable 
	// void setSize(FSlateChildSize InSize);                                                                                    // [0x3baea80] Final|Native|Public|BlueprintCallable 
	// void SetPadding(FMargin InPadding);                                                                                      // [0x3bae610] Final|Native|Public|BlueprintCallable 
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3bae0c0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.Viewport
/// Size: 0x0048 (72 bytes) (0x000140 - 0x000188) align 8 pad: 0x0000
class UViewport : public UContentWidget
{ 
public:
	FLinearColor                                       BackgroundColor;                                            // 0x0140   (0x0010)  
	unsigned char                                      UnknownData00_7[0x38];                                      // 0x0150   (0x0038)  MISSED
	// class AActor* Spawn(class UClass* ActorClass);                                                                           // [0x3baef20] Final|Native|Public|BlueprintCallable 
	// void SetViewRotation(FRotator Rotation);                                                                                 // [0x3baee10] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetViewLocation(FVector Location);                                                                                  // [0x3baed80] Final|Native|Public|HasDefaults|BlueprintCallable 
	// FRotator GetViewRotation();                                                                                              // [0x3badad0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// class UWorld* GetViewportWorld();                                                                                        // [0x3badb10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector GetViewLocation();                                                                                               // [0x3bada90] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.VisibilityBinding
/// Size: 0x0000 (0 bytes) (0x000070 - 0x000070) align 8 pad: 0x0000
class UVisibilityBinding : public UPropertyBinding
{ 
public:
	// ESlateVisibility GetValue();                                                                                             // [0x3bada60] Final|Native|Public|Const 
};

/// Class /Script/MovieScene.MovieSceneSequence
/// Size: 0x0010 (16 bytes) (0x000058 - 0x000068) align 8 pad: 0x0000
class UMovieSceneSequence : public UMovieSceneSignedObject
{ 
public:
	class UMovieSceneCompiledData*                     CompiledData;                                               // 0x0058   (0x0008)  
	EMovieSceneCompletionMode                          DefaultCompletionMode;                                      // 0x0060   (0x0001)  
	bool                                               bParentContextsAreSignificant;                              // 0x0061   (0x0001)  
	bool                                               bPlayableDirectly;                                          // 0x0062   (0x0001)  
	EMovieSceneSequenceFlags                           SequenceFlags;                                              // 0x0063   (0x0001)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0064   (0x0004)  MISSED
	// bool HasBindingTag(FName InBindingName, bool IncludeSubSequence);                                                        // [0x3995540] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// TArray<FMovieSceneObjectBindingID> FindBindingsByTag(FName InBindingName);                                               // [0x3994ef0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FMovieSceneObjectBindingID FindBindingByTag(FName InBindingName);                                                        // [0x3994e20] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/UMG.WidgetAnimationBinding
/// Size: 0x002C (44 bytes) (0x000000 - 0x00002C) align 4 pad: 0x0000
struct FWidgetAnimationBinding
{ 
	FName                                              WidgetName;                                                 // 0x0000   (0x000C)  
	FName                                              SlotWidgetName;                                             // 0x000C   (0x000C)  
	FGuid                                              AnimationGuid;                                              // 0x0018   (0x0010)  
	bool                                               bIsRootWidget;                                              // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0029   (0x0003)  MISSED
};

/// Class /Script/UMG.WidgetAnimation
/// Size: 0x0030 (48 bytes) (0x000068 - 0x000098) align 8 pad: 0x0000
class UWidgetAnimation : public UMovieSceneSequence
{ 
public:
	class UMovieScene*                                 MovieScene;                                                 // 0x0068   (0x0008)  
	TArray<FWidgetAnimationBinding>                    AnimationBindings;                                          // 0x0070   (0x0010)  
	bool                                               bLegacyFinishOnStop;                                        // 0x0080   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0081   (0x0007)  MISSED
	FString                                            DisplayLabel;                                               // 0x0088   (0x0010)  
	// void UnbindFromAnimationStarted(class UUserWidget* Widget, FDelegateProperty Delegate);                                  // [0x3baf1d0] Final|Native|Public|BlueprintCallable 
	// void UnbindFromAnimationFinished(class UUserWidget* Widget, FDelegateProperty Delegate);                                 // [0x3baf0e0] Final|Native|Public|BlueprintCallable 
	// void UnbindAllFromAnimationStarted(class UUserWidget* Widget);                                                           // [0x3baf050] Final|Native|Public|BlueprintCallable 
	// void UnbindAllFromAnimationFinished(class UUserWidget* Widget);                                                          // [0x3baefc0] Final|Native|Public|BlueprintCallable 
	// float GetStartTime();                                                                                                    // [0x3bad9f0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetEndTime();                                                                                                      // [0x3bad830] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void BindToAnimationStarted(class UUserWidget* Widget, FDelegateProperty Delegate);                                      // [0x3bad4a0] Final|Native|Public|BlueprintCallable 
	// void BindToAnimationFinished(class UUserWidget* Widget, FDelegateProperty Delegate);                                     // [0x3bad3b0] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/UMG.BlueprintWidgetAnimationDelegateBinding
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 4 pad: 0x0000
struct FBlueprintWidgetAnimationDelegateBinding
{ 
	EWidgetAnimationEvent                              Action;                                                     // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FName                                              AnimationToBind;                                            // 0x0004   (0x000C)  
	FName                                              FunctionNameToBind;                                         // 0x0010   (0x000C)  
	FName                                              UserTag;                                                    // 0x001C   (0x000C)  
};

/// Class /Script/UMG.WidgetAnimationDelegateBinding
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UWidgetAnimationDelegateBinding : public UDynamicBlueprintBinding
{ 
public:
	TArray<FBlueprintWidgetAnimationDelegateBinding>   WidgetAnimationDelegateBindings;                            // 0x0030   (0x0010)  
};

/// Class /Script/UMG.WidgetAnimationPlayCallbackProxy
/// Size: 0x0020 (32 bytes) (0x000030 - 0x000050) align 8 pad: 0x0000
class UWidgetAnimationPlayCallbackProxy : public UObject
{ 
public:
	SDK_UNDEFINED(16,359) /* FMulticastInlineDelegate */ __um(Finished);                                           // 0x0030   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0040   (0x0010)  MISSED
	// class UWidgetAnimationPlayCallbackProxy* CreatePlayAnimationTimeRangeProxyObject(class UUMGSequencePlayer*& Result, class UUserWidget* Widget, class UWidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int32_t NumLoopsToPlay, TEnumAsByte<EUMGSequencePlayMode> PlayMode, float PlaybackSpeed); // [0x3bb2070] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// class UWidgetAnimationPlayCallbackProxy* CreatePlayAnimationProxyObject(class UUMGSequencePlayer*& Result, class UUserWidget* Widget, class UWidgetAnimation* InAnimation, float StartAtTime, int32_t NumLoopsToPlay, TEnumAsByte<EUMGSequencePlayMode> PlayMode, float PlaybackSpeed); // [0x3bb1e50] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/UMG.WidgetBinding
/// Size: 0x0000 (0 bytes) (0x000070 - 0x000070) align 8 pad: 0x0000
class UWidgetBinding : public UPropertyBinding
{ 
public:
	// class UWidget* GetValue();                                                                                               // [0x3bb4520] Final|Native|Public|Const 
};

/// Class /Script/UMG.WidgetBlueprintLibrary
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UWidgetBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
public:
	// FEventReply UnlockMouse(FEventReply& Reply);                                                                             // [0x3bb65d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FEventReply Unhandled();                                                                                                 // [0x3bb6560] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void SetWindowTitleBarState(class UWidget* TitleBarContent, EWindowTitleBarMode Mode, bool bTitleBarDragEnabled, bool bWindowButtonsVisible, bool bTitleBarVisible); // [0x3bb6340] Final|Native|Static|Public|BlueprintCallable 
	// void SetWindowTitleBarOnCloseClickedDelegate(FDelegateProperty Delegate);                                                // [0x3bb62a0] Final|Native|Static|Public|BlueprintCallable 
	// void SetWindowTitleBarCloseButtonActive(bool bActive);                                                                   // [0x3bb6220] Final|Native|Static|Public|BlueprintCallable 
	// FEventReply SetUserFocus(FEventReply& Reply, class UWidget* FocusWidget, bool bInAllUsers);                              // [0x3bb18f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FEventReply SetMousePosition(FEventReply& Reply, FVector2D NewMousePosition);                                            // [0x3bb5b80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// void SetInputMode_UIOnlyEx(class APlayerController* PlayerController, class UWidget* InWidgetToFocus, EMouseLockMode InMouseLockMode); // [0x3bb59f0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// void SetInputMode_UIOnly(class APlayerController* Target, class UWidget* InWidgetToFocus, bool bLockMouseToViewport);    // [0x3bb58f0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// void SetInputMode_GameOnly(class APlayerController* PlayerController);                                                   // [0x3bb5870] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// void SetInputMode_GameAndUIEx(class APlayerController* PlayerController, class UWidget* InWidgetToFocus, EMouseLockMode InMouseLockMode, bool bHideCursorDuringCapture); // [0x3bb5720] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// void SetInputMode_GameAndUI(class APlayerController* Target, class UWidget* InWidgetToFocus, bool bLockMouseToViewport, bool bHideCursorDuringCapture); // [0x3bb55c0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// bool SetHardwareCursor(class UObject* WorldContextObject, TEnumAsByte<EMouseCursor> CursorShape, FName CursorName, FVector2D HotSpot); // [0x3bb5460] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// void SetFocusToGameViewport();                                                                                           // [0x3bb53c0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// void SetColorVisionDeficiencyType(EColorVisionDeficiency Type, float Severity, bool CorrectDeficiency, bool ShowCorrectionWithDeficiency); // [0x3bb50d0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// void SetBrushResourceToTexture(FSlateBrush& Brush, class UTexture2D* Texture);                                           // [0x3bb4f00] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void SetBrushResourceToMaterial(FSlateBrush& Brush, class UMaterialInterface* Material);                                 // [0x3bb4f00] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void RestorePreviousWindowTitleBarState();                                                                               // [0x3bb4e50] Final|Native|Static|Public|BlueprintCallable 
	// FEventReply ReleaseMouseCapture(FEventReply& Reply);                                                                     // [0x3bb4d40] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FEventReply ReleaseJoystickCapture(FEventReply& Reply, bool bInAllJoysticks);                                            // [0x3bb1b90] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// void OnGameWindowCloseButtonClickedDelegate__DelegateSignature();                                                        // [0x25a7960] Public|Delegate      
	// FSlateBrush NoResourceBrush();                                                                                           // [0x3bb4c70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FSlateBrush MakeBrushFromTexture(class UTexture2D* Texture, int32_t Width, int32_t Height);                              // [0x3bb4ab0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FSlateBrush MakeBrushFromMaterial(class UMaterialInterface* Material, int32_t Width, int32_t Height);                    // [0x3bb48f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FSlateBrush MakeBrushFromAsset(class USlateBrushAsset* BrushAsset);                                                      // [0x3bb47c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FEventReply LockMouse(FEventReply& Reply, class UWidget* CapturingWidget);                                               // [0x3bb4690] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// bool IsDragDropping();                                                                                                   // [0x3bb4630] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FEventReply Handled();                                                                                                   // [0x3bb45c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void GetSafeZonePadding(class UObject* WorldContextObject, FVector4& SafePadding, FVector2D& SafePaddingScale, FVector4& SpillOverPadding); // [0x3bb4330] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// FKeyEvent GetKeyEventFromAnalogInputEvent(FAnalogInputEvent& Event);                                                     // [0x3bb40a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FInputEvent GetInputEventFromPointerEvent(FPointerEvent& Event);                                                         // [0x3bb3f40] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FInputEvent GetInputEventFromNavigationEvent(FNavigationEvent& Event);                                                   // [0x3bb3e60] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FInputEvent GetInputEventFromKeyEvent(FKeyEvent& Event);                                                                 // [0x3bb3d30] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FInputEvent GetInputEventFromCharacterEvent(FCharacterEvent& Event);                                                     // [0x3bb3c50] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// class UMaterialInstanceDynamic* GetDynamicMaterial(FSlateBrush& Brush);                                                  // [0x3bb3aa0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// class UDragDropOperation* GetDragDroppingContent();                                                                      // [0x3bb3a10] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// class UTexture2D* GetBrushResourceAsTexture2D(FSlateBrush& Brush);                                                       // [0x3bb3820] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// class UMaterialInterface* GetBrushResourceAsMaterial(FSlateBrush& Brush);                                                // [0x3bb3690] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// class UObject* GetBrushResource(FSlateBrush& Brush);                                                                     // [0x3bb3500] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// void GetAllWidgetsWithInterface(class UObject* WorldContextObject, TArray<UUserWidget*>& FoundWidgets, class UClass* Interface, bool TopLevelOnly); // [0x3bb3390] Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable 
	// void GetAllWidgetsOfClass(class UObject* WorldContextObject, TArray<UUserWidget*>& FoundWidgets, class UClass* WidgetClass, bool TopLevelOnly); // [0x3bb3220] Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable 
	// FEventReply EndDragDrop(FEventReply& Reply);                                                                             // [0x3bb3130] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// void DrawTextFormatted(FPaintContext& Context, FText& Text, FVector2D Position, class UFont* Font, int32_t FontSize, FName FontTypeFace, FLinearColor Tint); // [0x3bb2ea0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void DrawText(FPaintContext& Context, FString InString, FVector2D Position, FLinearColor Tint);                          // [0x3bb2d10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void DrawLines(FPaintContext& Context, TArray<FVector2D>& Points, FLinearColor Tint, bool bAntiAlias, float Thickness);  // [0x3bb2b30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void DrawLine(FPaintContext& Context, FVector2D PositionA, FVector2D PositionB, FLinearColor Tint, bool bAntiAlias, float Thickness); // [0x3bb2920] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void DrawBox(FPaintContext& Context, FVector2D Position, FVector2D Size, class USlateBrushAsset* Brush, FLinearColor Tint); // [0x3bb2760] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void DismissAllMenus();                                                                                                  // [0x3bb2740] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// FEventReply DetectDragIfPressed(FPointerEvent& PointerEvent, class UWidget* WidgetDetectingDrag, FKey DragKey);          // [0x3bb24c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// FEventReply DetectDrag(FEventReply& Reply, class UWidget* WidgetDetectingDrag, FKey DragKey);                            // [0x3bb22d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// class UDragDropOperation* CreateDragDropOperation(class UClass* OperationClass);                                         // [0x3bb1dc0] Final|Native|Static|Public|BlueprintCallable 
	// class UUserWidget* Create(class UObject* WorldContextObject, class UClass* WidgetType, class APlayerController* OwningPlayer); // [0x3bb1cc0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// FEventReply ClearUserFocus(FEventReply& Reply, bool bInAllUsers);                                                        // [0x3bb1b90] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FEventReply CaptureMouse(FEventReply& Reply, class UWidget* CapturingWidget);                                            // [0x3bb1a60] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FEventReply CaptureJoystick(FEventReply& Reply, class UWidget* CapturingWidget, bool bInAllJoysticks);                   // [0x3bb18f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// void CancelDragDrop();                                                                                                   // [0x3bb18d0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/UMG.WidgetComponent
/// Size: 0x0128 (296 bytes) (0x000508 - 0x000630) align 16 pad: 0x0000
class UWidgetComponent : public UMeshComponent
{ 
public:
	EWidgetSpace                                       Space;                                                      // 0x0508   (0x0001)  
	EWidgetTimingPolicy                                TimingPolicy;                                               // 0x0509   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x050A   (0x0006)  MISSED
	class UClass*                                      WidgetClass;                                                // 0x0510   (0x0008)  
	FIntPoint                                          DrawSize;                                                   // 0x0518   (0x0008)  
	bool                                               bManuallyRedraw;                                            // 0x0520   (0x0001)  
	bool                                               bRedrawRequested;                                           // 0x0521   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0522   (0x0002)  MISSED
	float                                              RedrawTime;                                                 // 0x0524   (0x0004)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x0528   (0x0008)  MISSED
	FIntPoint                                          CurrentDrawSize;                                            // 0x0530   (0x0008)  
	bool                                               bDrawAtDesiredSize;                                         // 0x0538   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0539   (0x0003)  MISSED
	FVector2D                                          Pivot;                                                      // 0x053C   (0x0008)  
	bool                                               bReceiveHardwareInput;                                      // 0x0544   (0x0001)  
	bool                                               bWindowFocusable;                                           // 0x0545   (0x0001)  
	EWindowVisibility                                  WindowVisibility;                                           // 0x0546   (0x0001)  
	bool                                               bApplyGammaCorrection;                                      // 0x0547   (0x0001)  
	class ULocalPlayer*                                OwnerPlayer;                                                // 0x0548   (0x0008)  
	FLinearColor                                       BackgroundColor;                                            // 0x0550   (0x0010)  
	FLinearColor                                       TintColorAndOpacity;                                        // 0x0560   (0x0010)  
	float                                              OpacityFromTexture;                                         // 0x0570   (0x0004)  
	EWidgetBlendMode                                   BlendMode;                                                  // 0x0574   (0x0001)  
	bool                                               bIsTwoSided;                                                // 0x0575   (0x0001)  
	bool                                               TickWhenOffscreen;                                          // 0x0576   (0x0001)  
	unsigned char                                      UnknownData04_6[0x1];                                       // 0x0577   (0x0001)  MISSED
	class UBodySetup*                                  BodySetup;                                                  // 0x0578   (0x0008)  
	class UMaterialInterface*                          TranslucentMaterial;                                        // 0x0580   (0x0008)  
	class UMaterialInterface*                          TranslucentMaterial_OneSided;                               // 0x0588   (0x0008)  
	class UMaterialInterface*                          OpaqueMaterial;                                             // 0x0590   (0x0008)  
	class UMaterialInterface*                          OpaqueMaterial_OneSided;                                    // 0x0598   (0x0008)  
	class UMaterialInterface*                          MaskedMaterial;                                             // 0x05A0   (0x0008)  
	class UMaterialInterface*                          MaskedMaterial_OneSided;                                    // 0x05A8   (0x0008)  
	class UTextureRenderTarget2D*                      RenderTarget;                                               // 0x05B0   (0x0008)  
	class UMaterialInstanceDynamic*                    MaterialInstance;                                           // 0x05B8   (0x0008)  
	bool                                               bAddedToScreen;                                             // 0x05C0   (0x0001)  
	bool                                               bEditTimeUsable;                                            // 0x05C1   (0x0001)  
	unsigned char                                      UnknownData05_6[0x2];                                       // 0x05C2   (0x0002)  MISSED
	FName                                              SharedLayerName;                                            // 0x05C4   (0x000C)  
	int32_t                                            LayerZOrder;                                                // 0x05D0   (0x0004)  
	EWidgetGeometryMode                                GeometryMode;                                               // 0x05D4   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x05D5   (0x0003)  MISSED
	float                                              CylinderArcAngle;                                           // 0x05D8   (0x0004)  
	ETickMode                                          TickMode;                                                   // 0x05DC   (0x0001)  
	unsigned char                                      UnknownData07_6[0x23];                                      // 0x05DD   (0x0023)  MISSED
	class UUserWidget*                                 Widget;                                                     // 0x0600   (0x0008)  
	unsigned char                                      UnknownData08_7[0x28];                                      // 0x0608   (0x0028)  MISSED
	// void SetWindowVisibility(EWindowVisibility InVisibility);                                                                // [0x3bb64e0] Final|Native|Public|BlueprintCallable 
	// void SetWindowFocusable(bool bInWindowFocusable);                                                                        // [0x3bb6190] Final|Native|Public|BlueprintCallable 
	// void SetWidgetSpace(EWidgetSpace newSpace);                                                                              // [0x3bb6110] Final|Native|Public|BlueprintCallable 
	// void SetWidget(class UUserWidget* Widget);                                                                               // [0x3bb6080] Native|Public|BlueprintCallable 
	// void SetTwoSided(bool bWantTwoSided);                                                                                    // [0x3bb5ff0] Final|Native|Public|BlueprintCallable 
	// void SetTintColorAndOpacity(FLinearColor NewTintColorAndOpacity);                                                        // [0x3bb5f60] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetTickWhenOffscreen(bool bWantTickWhenOffscreen);                                                                  // [0x3bb5ed0] Final|Native|Public|BlueprintCallable 
	// void SetTickMode(ETickMode InTickMode);                                                                                  // [0x3bb5e50] Final|Native|Public|BlueprintCallable 
	// void SetRedrawTime(float InRedrawTime);                                                                                  // [0x3bb5dd0] Final|Native|Public|BlueprintCallable 
	// void SetPivot(FVector2D& InPivot);                                                                                       // [0x3bb5d40] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void SetOwnerPlayer(class ULocalPlayer* LocalPlayer);                                                                    // [0x3bb5cb0] Final|Native|Public|BlueprintCallable 
	// void SetManuallyRedraw(bool bUseManualRedraw);                                                                           // [0x3bb5af0] Final|Native|Public|BlueprintCallable 
	// void SetGeometryMode(EWidgetGeometryMode InGeometryMode);                                                                // [0x3bb53e0] Final|Native|Public|BlueprintCallable 
	// void SetDrawSize(FVector2D Size);                                                                                        // [0x3bb5340] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize);                                                                    // [0x3bb52b0] Final|Native|Public|BlueprintCallable 
	// void SetCylinderArcAngle(float InCylinderArcAngle);                                                                      // [0x3bb5230] Final|Native|Public|BlueprintCallable 
	// void SetBackgroundColor(FLinearColor NewBackgroundColor);                                                                // [0x3bb4e70] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void RequestRedraw();                                                                                                    // [0x3bb4e30] Native|Public|BlueprintCallable 
	// bool IsWidgetVisible();                                                                                                  // [0x3bb4660] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// EWindowVisibility GetWindowVisiblility();                                                                                // [0x3bb45a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool GetWindowFocusable();                                                                                               // [0x3bb4580] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// EWidgetSpace GetWidgetSpace();                                                                                           // [0xc15000] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UUserWidget* GetWidget();                                                                                          // [0x3bb4550] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UUserWidget* GetUserWidgetObject();                                                                                // [0x3bb44f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool GetTwoSided();                                                                                                      // [0x3bb44d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool GetTickWhenOffscreen();                                                                                             // [0x3bb44b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UTextureRenderTarget2D* GetRenderTarget();                                                                         // [0x3bb4300] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetRedrawTime();                                                                                                   // [0x1772c80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector2D GetPivot();                                                                                                    // [0x3bb42d0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// class ULocalPlayer* GetOwnerPlayer();                                                                                    // [0x3bb42a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UMaterialInstanceDynamic* GetMaterialInstance();                                                                   // [0x3bb4270] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool GetManuallyRedraw();                                                                                                // [0x3633490] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// EWidgetGeometryMode GetGeometryMode();                                                                                   // [0x3bb3c30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector2D GetDrawSize();                                                                                                 // [0x3bb3a60] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// bool GetDrawAtDesiredSize();                                                                                             // [0x3bb3a40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetCylinderArcAngle();                                                                                             // [0x3bb39f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector2D GetCurrentDrawSize();                                                                                          // [0x3bb39b0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.WidgetInteractionComponent
/// Size: 0x0218 (536 bytes) (0x000218 - 0x000430) align 16 pad: 0x0000
class UWidgetInteractionComponent : public USceneComponent
{ 
public:
	SDK_UNDEFINED(16,360) /* FMulticastInlineDelegate */ __um(OnHoveredWidgetChanged);                             // 0x0218   (0x0010)  
	unsigned char                                      UnknownData00_6[0x10];                                      // 0x0228   (0x0010)  MISSED
	int32_t                                            VirtualUserIndex;                                           // 0x0238   (0x0004)  
	int32_t                                            PointerIndex;                                               // 0x023C   (0x0004)  
	TEnumAsByte<ECollisionChannel>                     TraceChannel;                                               // 0x0240   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0241   (0x0003)  MISSED
	float                                              InteractionDistance;                                        // 0x0244   (0x0004)  
	EWidgetInteractionSource                           interactionSource;                                          // 0x0248   (0x0001)  
	bool                                               bEnableHitTesting;                                          // 0x0249   (0x0001)  
	bool                                               bShowDebug;                                                 // 0x024A   (0x0001)  
	unsigned char                                      UnknownData02_6[0x1];                                       // 0x024B   (0x0001)  MISSED
	float                                              DebugSphereLineThickness;                                   // 0x024C   (0x0004)  
	float                                              DebugLineThickness;                                         // 0x0250   (0x0004)  
	FLinearColor                                       DebugColor;                                                 // 0x0254   (0x0010)  
	unsigned char                                      UnknownData03_6[0x7C];                                      // 0x0264   (0x007C)  MISSED
	FHitResult                                         CustomHitResult;                                            // 0x02E0   (0x0094)  
	FVector2D                                          LocalHitLocation;                                           // 0x0374   (0x0008)  
	FVector2D                                          LastLocalHitLocation;                                       // 0x037C   (0x0008)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0384   (0x0004)  MISSED
	class UWidgetComponent*                            HoveredWidgetComponent;                                     // 0x0388   (0x0008)  
	FHitResult                                         LastHitResult;                                              // 0x0390   (0x0094)  
	bool                                               bIsHoveredWidgetInteractable;                               // 0x0424   (0x0001)  
	bool                                               bIsHoveredWidgetFocusable;                                  // 0x0425   (0x0001)  
	bool                                               bIsHoveredWidgetHitTestVisible;                             // 0x0426   (0x0001)  
	unsigned char                                      UnknownData05_7[0x9];                                       // 0x0427   (0x0009)  MISSED
	// void SetFocus(class UWidget* FocusWidget);                                                                               // [0x3bb95d0] Final|Native|Public|BlueprintCallable 
	// void SetCustomHitResult(FHitResult& HitResult);                                                                          // [0x3bb93e0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// bool SendKeyChar(FString Characters, bool bRepeat);                                                                      // [0x3bb9200] Native|Public|BlueprintCallable 
	// void ScrollWheel(float ScrollDelta);                                                                                     // [0x3bb9170] Native|Public|BlueprintCallable 
	// void ReleasePointerKey(FKey Key);                                                                                        // [0x3bb8fe0] Native|Public|BlueprintCallable 
	// bool ReleaseKey(FKey Key);                                                                                               // [0x3bb8ec0] Native|Public|BlueprintCallable 
	// void PressPointerKey(FKey Key);                                                                                          // [0x3bb8c40] Native|Public|BlueprintCallable 
	// bool PressKey(FKey Key, bool bRepeat);                                                                                   // [0x3bb8ae0] Native|Public|BlueprintCallable 
	// bool PressAndReleaseKey(FKey Key);                                                                                       // [0x3bb89c0] Native|Public|BlueprintCallable 
	// bool IsOverInteractableWidget();                                                                                         // [0x3bb8990] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsOverHitTestVisibleWidget();                                                                                       // [0x3bb8960] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsOverFocusableWidget();                                                                                            // [0x3bb8930] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FHitResult GetLastHitResult();                                                                                           // [0x3bb8360] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UWidgetComponent* GetHoveredWidgetComponent();                                                                     // [0x3bb8330] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FVector2D Get2DHitLocation();                                                                                            // [0x3bb8290] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.WidgetLayoutLibrary
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UWidgetLayoutLibrary : public UBlueprintFunctionLibrary
{ 
public:
	// class UWrapBoxSlot* SlotAsWrapBoxSlot(class UWidget* Widget);                                                            // [0x3bba3e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// class UWidgetSwitcherSlot* SlotAsWidgetSwitcherSlot(class UWidget* Widget);                                              // [0x3bba350] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// class UVerticalBoxSlot* SlotAsVerticalBoxSlot(class UWidget* Widget);                                                    // [0x3bba2c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// class UUniformGridSlot* SlotAsUniformGridSlot(class UWidget* Widget);                                                    // [0x3bba230] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// class USizeBoxSlot* SlotAsSizeBoxSlot(class UWidget* Widget);                                                            // [0x3bba1a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// class UScrollBoxSlot* SlotAsScrollBoxSlot(class UWidget* Widget);                                                        // [0x3bba110] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// class UScaleBoxSlot* SlotAsScaleBoxSlot(class UWidget* Widget);                                                          // [0x3bba080] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// class USafeZoneSlot* SlotAsSafeBoxSlot(class UWidget* Widget);                                                           // [0x3bb9ff0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// class UOverlaySlot* SlotAsOverlaySlot(class UWidget* Widget);                                                            // [0x3bb9f60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// class UHorizontalBoxSlot* SlotAsHorizontalBoxSlot(class UWidget* Widget);                                                // [0x3bb9ed0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// class UGridSlot* SlotAsGridSlot(class UWidget* Widget);                                                                  // [0x3bb9e40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// class UCanvasPanelSlot* SlotAsCanvasSlot(class UWidget* Widget);                                                         // [0x3bb9db0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// class UBorderSlot* SlotAsBorderSlot(class UWidget* Widget);                                                              // [0x3bb9d20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// void RemoveAllWidgets(class UObject* WorldContextObject);                                                                // [0x3bb90f0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// bool ProjectWorldLocationToWidgetPosition(class APlayerController* PlayerController, FVector WorldLocation, FVector2D& ScreenPosition, bool bPlayerViewportRelative); // [0x3bb8d50] Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// FGeometry GetViewportWidgetGeometry(class UObject* WorldContextObject);                                                  // [0x3bb87e0] Final|Native|Static|Public|BlueprintCallable 
	// FVector2D GetViewportSize(class UObject* WorldContextObject);                                                            // [0x3bb8750] Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// float GetViewportScale(class UObject* WorldContextObject);                                                               // [0x3bb86c0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// FGeometry GetPlayerScreenWidgetGeometry(class APlayerController* PlayerController);                                      // [0x3bb8610] Final|Native|Static|Public|BlueprintCallable 
	// bool GetMousePositionScaledByDPI(class APlayerController* Player, float& LocationX, float& LocationY);                   // [0x3bb84c0] Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FVector2D GetMousePositionOnViewport(class UObject* WorldContextObject);                                                 // [0x3bb8430] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// FVector2D GetMousePositionOnPlatform();                                                                                  // [0x3bb83f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
};

/// Struct /Script/UMG.WidgetNavigationData
/// Size: 0x002C (44 bytes) (0x000000 - 0x00002C) align 4 pad: 0x0000
struct FWidgetNavigationData
{ 
	EUINavigationRule                                  Rule;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FName                                              WidgetToFocus;                                              // 0x0004   (0x000C)  
	SDK_UNDEFINED(8,361) /* TWeakObjectPtr<UWidget*> */ __um(Widget);                                              // 0x0010   (0x0008)  
	SDK_UNDEFINED(20,362) /* FDelegateProperty */      __um(CustomDelegate);                                       // 0x0018   (0x0014)  
};

/// Class /Script/UMG.WidgetNavigation
/// Size: 0x0108 (264 bytes) (0x000030 - 0x000138) align 8 pad: 0x0000
class UWidgetNavigation : public UObject
{ 
public:
	FWidgetNavigationData                              Up;                                                         // 0x0030   (0x002C)  
	FWidgetNavigationData                              Down;                                                       // 0x005C   (0x002C)  
	FWidgetNavigationData                              Left;                                                       // 0x0088   (0x002C)  
	FWidgetNavigationData                              Right;                                                      // 0x00B4   (0x002C)  
	FWidgetNavigationData                              Next;                                                       // 0x00E0   (0x002C)  
	FWidgetNavigationData                              Previous;                                                   // 0x010C   (0x002C)  
};

/// Class /Script/UMG.WidgetSwitcher
/// Size: 0x0018 (24 bytes) (0x000140 - 0x000158) align 8 pad: 0x0000
class UWidgetSwitcher : public UPanelWidget
{ 
public:
	int32_t                                            ActiveWidgetIndex;                                          // 0x0140   (0x0004)  
	unsigned char                                      UnknownData00_7[0x14];                                      // 0x0144   (0x0014)  MISSED
	// void SetActiveWidgetIndex(int32_t Index);                                                                                // [0x3bb9350] Native|Public|BlueprintCallable 
	// void SetActiveWidget(class UWidget* Widget);                                                                             // [0x3b95120] Native|Public|BlueprintCallable 
	// class UWidget* GetWidgetAtIndex(int32_t Index);                                                                          // [0x3bb8890] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetNumWidgets();                                                                                                 // [0x3bb85e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetActiveWidgetIndex();                                                                                          // [0x3bb8300] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// class UWidget* GetActiveWidget();                                                                                        // [0x3bb82d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.WidgetSwitcherSlot
/// Size: 0x0020 (32 bytes) (0x000040 - 0x000060) align 8 pad: 0x0000
class UWidgetSwitcherSlot : public UPanelSlot
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0040   (0x0008)  MISSED
	FMargin                                            Padding;                                                    // 0x0048   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0058   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0059   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x005A   (0x0006)  MISSED
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x3bb9b20] Final|Native|Public|BlueprintCallable 
	// void SetPadding(FMargin InPadding);                                                                                      // [0x3bb98e0] Final|Native|Public|BlueprintCallable 
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3bb9660] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.WidgetTree
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UWidgetTree : public UObject
{ 
public:
	class UWidget*                                     RootWidget;                                                 // 0x0030   (0x0008)  
};

/// Class /Script/UMG.WindowTitleBarArea
/// Size: 0x0020 (32 bytes) (0x000140 - 0x000160) align 8 pad: 0x0000
class UWindowTitleBarArea : public UContentWidget
{ 
public:
	bool                                               bWindowButtonsEnabled;                                      // 0x0140   (0x0001)  
	bool                                               bDoubleClickTogglesFullscreen;                              // 0x0141   (0x0001)  
	unsigned char                                      UnknownData00_7[0x1E];                                      // 0x0142   (0x001E)  MISSED
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x3bb9ba0] Final|Native|Public|BlueprintCallable 
	// void SetPadding(FMargin InPadding);                                                                                      // [0x3bb9970] Final|Native|Public|BlueprintCallable 
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3bb96e0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.WindowTitleBarAreaSlot
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UWindowTitleBarAreaSlot : public UPanelSlot
{ 
public:
	FMargin                                            Padding;                                                    // 0x0040   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0050   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0051   (0x0001)  
	unsigned char                                      UnknownData00_7[0x16];                                      // 0x0052   (0x0016)  MISSED
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x3bb9c20] Final|Native|Public|BlueprintCallable 
	// void SetPadding(FMargin InPadding);                                                                                      // [0x3bb9a00] Final|Native|Public|BlueprintCallable 
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3bb9760] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.WrapBox
/// Size: 0x0028 (40 bytes) (0x000140 - 0x000168) align 8 pad: 0x0000
class UWrapBox : public UPanelWidget
{ 
public:
	FVector2D                                          InnerSlotPadding;                                           // 0x0140   (0x0008)  
	float                                              WrapWidth;                                                  // 0x0148   (0x0004)  
	float                                              WrapSize;                                                   // 0x014C   (0x0004)  
	bool                                               bExplicitWrapWidth;                                         // 0x0150   (0x0001)  
	bool                                               bExplicitWrapSize;                                          // 0x0151   (0x0001)  
	TEnumAsByte<EOrientation>                          Orientation;                                                // 0x0152   (0x0001)  
	unsigned char                                      UnknownData00_7[0x15];                                      // 0x0153   (0x0015)  MISSED
	// void SetInnerSlotPadding(FVector2D InPadding);                                                                           // [0x3bb9860] Final|Native|Public|HasDefaults|BlueprintCallable 
	// class UWrapBoxSlot* AddChildToWrapBox(class UWidget* Content);                                                           // [0x3bb81f0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.WrapBoxSlot
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UWrapBoxSlot : public UPanelSlot
{ 
public:
	FMargin                                            Padding;                                                    // 0x0040   (0x0010)  
	bool                                               bFillEmptySpace;                                            // 0x0050   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0051   (0x0003)  MISSED
	float                                              FillSpanWhenLessThan;                                       // 0x0054   (0x0004)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0058   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0059   (0x0001)  
	unsigned char                                      UnknownData01_7[0xE];                                       // 0x005A   (0x000E)  MISSED
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x3bb9ca0] Final|Native|Public|BlueprintCallable 
	// void SetPadding(FMargin InPadding);                                                                                      // [0x3bb9a90] Final|Native|Public|BlueprintCallable 
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3bb97e0] Final|Native|Public|BlueprintCallable 
	// void SetFillSpanWhenLessThan(float InFillSpanWhenLessThan);                                                              // [0x3bb9550] Final|Native|Public|BlueprintCallable 
	// void SetFillEmptySpace(bool InbFillEmptySpace);                                                                          // [0x3bb94c0] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/UMG.EventReply
/// Size: 0x00C0 (192 bytes) (0x000000 - 0x0000C0) align 8 pad: 0x0000
struct FEventReply
{ 
	unsigned char                                      UnknownData00_2[0xC0];                                      // 0x0000   (0x00C0)  MISSED
};

/// Struct /Script/UMG.PaintContext
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FPaintContext
{ 
	unsigned char                                      UnknownData00_2[0x30];                                      // 0x0000   (0x0030)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneEvalTemplateBase
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FMovieSceneEvalTemplateBase
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneEvalTemplate
/// Size: 0x0010 (16 bytes) (0x000010 - 0x000020) align 8 pad: 0x0000
struct FMovieSceneEvalTemplate : FMovieSceneEvalTemplateBase
{ 
	EMovieSceneCompletionMode                          CompletionMode;                                             // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0011   (0x0003)  MISSED
	SDK_UNDEFINED(8,363) /* TWeakObjectPtr<UMovieSceneSection*> */ __um(SourceSectionPtr);                         // 0x0014   (0x0008)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/MovieScene.MovieScenePropertySectionData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FMovieScenePropertySectionData
{ 
	FName                                              PropertyName;                                               // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FString                                            PropertyPath;                                               // 0x0010   (0x0010)  
};

/// Struct /Script/MovieScene.MovieScenePropertySectionTemplate
/// Size: 0x0020 (32 bytes) (0x000020 - 0x000040) align 8 pad: 0x0000
struct FMovieScenePropertySectionTemplate : FMovieSceneEvalTemplate
{ 
	FMovieScenePropertySectionData                     PropertyData;                                               // 0x0020   (0x0020)  
};

/// Struct /Script/UMG.MovieSceneMarginSectionTemplate
/// Size: 0x0288 (648 bytes) (0x000040 - 0x0002C8) align 8 pad: 0x0000
struct FMovieSceneMarginSectionTemplate : FMovieScenePropertySectionTemplate
{ 
	FMovieSceneFloatChannel                            TopCurve;                                                   // 0x0040   (0x00A0)  
	FMovieSceneFloatChannel                            LeftCurve;                                                  // 0x00E0   (0x00A0)  
	FMovieSceneFloatChannel                            RightCurve;                                                 // 0x0180   (0x00A0)  
	FMovieSceneFloatChannel                            BottomCurve;                                                // 0x0220   (0x00A0)  
	EMovieSceneBlendType                               BlendType;                                                  // 0x02C0   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x02C1   (0x0007)  MISSED
};

/// Struct /Script/MovieSceneTracks.ScalarParameterNameAndCurve
/// Size: 0x00B0 (176 bytes) (0x000000 - 0x0000B0) align 8 pad: 0x0000
struct FScalarParameterNameAndCurve
{ 
	FName                                              ParameterName;                                              // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FMovieSceneFloatChannel                            ParameterCurve;                                             // 0x0010   (0x00A0)  
};

/// Struct /Script/MovieScene.MovieSceneBoolChannel
/// Size: 0x0088 (136 bytes) (0x000008 - 0x000090) align 8 pad: 0x0000
struct FMovieSceneBoolChannel : FMovieSceneChannel
{ 
	TArray<FFrameNumber>                               Times;                                                      // 0x0008   (0x0010)  
	bool                                               DefaultValue;                                               // 0x0018   (0x0001)  
	bool                                               bHasDefaultValue;                                           // 0x0019   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x001A   (0x0006)  MISSED
	TArray<bool>                                       Values;                                                     // 0x0020   (0x0010)  
	unsigned char                                      UnknownData01_7[0x60];                                      // 0x0030   (0x0060)  MISSED
};

/// Struct /Script/MovieSceneTracks.BoolParameterNameAndCurve
/// Size: 0x00A0 (160 bytes) (0x000000 - 0x0000A0) align 8 pad: 0x0000
struct FBoolParameterNameAndCurve
{ 
	FName                                              ParameterName;                                              // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FMovieSceneBoolChannel                             ParameterCurve;                                             // 0x0010   (0x0090)  
};

/// Struct /Script/MovieSceneTracks.Vector2DParameterNameAndCurves
/// Size: 0x0150 (336 bytes) (0x000000 - 0x000150) align 8 pad: 0x0000
struct FVector2DParameterNameAndCurves
{ 
	FName                                              ParameterName;                                              // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FMovieSceneFloatChannel                            XCurve;                                                     // 0x0010   (0x00A0)  
	FMovieSceneFloatChannel                            YCurve;                                                     // 0x00B0   (0x00A0)  
};

/// Struct /Script/MovieSceneTracks.VectorParameterNameAndCurves
/// Size: 0x01F0 (496 bytes) (0x000000 - 0x0001F0) align 8 pad: 0x0000
struct FVectorParameterNameAndCurves
{ 
	FName                                              ParameterName;                                              // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FMovieSceneFloatChannel                            XCurve;                                                     // 0x0010   (0x00A0)  
	FMovieSceneFloatChannel                            YCurve;                                                     // 0x00B0   (0x00A0)  
	FMovieSceneFloatChannel                            ZCurve;                                                     // 0x0150   (0x00A0)  
};

/// Struct /Script/MovieSceneTracks.ColorParameterNameAndCurves
/// Size: 0x0290 (656 bytes) (0x000000 - 0x000290) align 8 pad: 0x0000
struct FColorParameterNameAndCurves
{ 
	FName                                              ParameterName;                                              // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FMovieSceneFloatChannel                            RedCurve;                                                   // 0x0010   (0x00A0)  
	FMovieSceneFloatChannel                            GreenCurve;                                                 // 0x00B0   (0x00A0)  
	FMovieSceneFloatChannel                            BlueCurve;                                                  // 0x0150   (0x00A0)  
	FMovieSceneFloatChannel                            AlphaCurve;                                                 // 0x01F0   (0x00A0)  
};

/// Struct /Script/MovieSceneTracks.TransformParameterNameAndCurves
/// Size: 0x05B0 (1456 bytes) (0x000000 - 0x0005B0) align 8 pad: 0x0000
struct FTransformParameterNameAndCurves
{ 
	FName                                              ParameterName;                                              // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FMovieSceneFloatChannel                            Translation[3];                                             // 0x0010   (0x01E0)  
	FMovieSceneFloatChannel                            Rotation[3];                                                // 0x01F0   (0x01E0)  
	FMovieSceneFloatChannel                            Scale[3];                                                   // 0x03D0   (0x01E0)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneParameterSectionTemplate
/// Size: 0x0060 (96 bytes) (0x000020 - 0x000080) align 8 pad: 0x0000
struct FMovieSceneParameterSectionTemplate : FMovieSceneEvalTemplate
{ 
	TArray<FScalarParameterNameAndCurve>               Scalars;                                                    // 0x0020   (0x0010)  
	TArray<FBoolParameterNameAndCurve>                 Bools;                                                      // 0x0030   (0x0010)  
	TArray<FVector2DParameterNameAndCurves>            Vector2Ds;                                                  // 0x0040   (0x0010)  
	TArray<FVectorParameterNameAndCurves>              Vectors;                                                    // 0x0050   (0x0010)  
	TArray<FColorParameterNameAndCurves>               Colors;                                                     // 0x0060   (0x0010)  
	TArray<FTransformParameterNameAndCurves>           Transforms;                                                 // 0x0070   (0x0010)  
};

/// Struct /Script/UMG.MovieSceneWidgetMaterialSectionTemplate
/// Size: 0x0010 (16 bytes) (0x000080 - 0x000090) align 8 pad: 0x0000
struct FMovieSceneWidgetMaterialSectionTemplate : FMovieSceneParameterSectionTemplate
{ 
	TArray<FName>                                      BrushPropertyNamePath;                                      // 0x0080   (0x0010)  
};

/// Struct /Script/UMG.RichTextStyleRow
/// Size: 0x0288 (648 bytes) (0x000008 - 0x000290) align 8 pad: 0x0000
struct FRichTextStyleRow : FTableRowBase
{ 
	FTextBlockStyle                                    TextStyle;                                                  // 0x0008   (0x0288)  
};

/// Struct /Script/UMG.RichImageRow
/// Size: 0x0090 (144 bytes) (0x000008 - 0x000098) align 8 pad: 0x0000
struct FRichImageRow : FTableRowBase
{ 
	FSlateBrush                                        Brush;                                                      // 0x0008   (0x0090)  
};

/// Struct /Script/UMG.WidgetComponentInstanceData
/// Size: 0x0010 (16 bytes) (0x0000B8 - 0x0000C8) align 8 pad: 0x0000
struct FWidgetComponentInstanceData : FSceneComponentInstanceData
{ 
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x00B8   (0x0010)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneSequenceLoopCount
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FMovieSceneSequenceLoopCount
{ 
	int32_t                                            Value;                                                      // 0x0000   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneSequencePlaybackSettings
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FMovieSceneSequencePlaybackSettings
{ 
	bool                                               bAutoPlay : 1;                                              // 0x0000:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	FMovieSceneSequenceLoopCount                       LoopCount;                                                  // 0x0004   (0x0004)  
	float                                              PlayRate;                                                   // 0x0008   (0x0004)  
	float                                              StartTime;                                                  // 0x000C   (0x0004)  
	bool                                               bRandomStartTime : 1;                                       // 0x0010:0 (0x0001)  
	bool                                               bRestoreState : 1;                                          // 0x0010:1 (0x0001)  
	bool                                               bDisableMovementInput : 1;                                  // 0x0010:2 (0x0001)  
	bool                                               bDisableLookAtInput : 1;                                    // 0x0010:3 (0x0001)  
	bool                                               bHidePlayer : 1;                                            // 0x0010:4 (0x0001)  
	bool                                               bHideHud : 1;                                               // 0x0010:5 (0x0001)  
	bool                                               bDisableCameraCuts : 1;                                     // 0x0010:6 (0x0001)  
	bool                                               bPauseAtEnd : 1;                                            // 0x0010:7 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0011   (0x0003)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneSequenceReplProperties
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FMovieSceneSequenceReplProperties
{ 
	FFrameTime                                         LastKnownPosition;                                          // 0x0000   (0x0008)  
	TEnumAsByte<EMovieScenePlayerStatus>               LastKnownStatus;                                            // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	int32_t                                            LastKnownNumLoops;                                          // 0x000C   (0x0004)  
};

/// Class /Script/MovieScene.MovieSceneSequencePlayer
/// Size: 0x06B8 (1720 bytes) (0x000030 - 0x0006E8) align 8 pad: 0x0000
class UMovieSceneSequencePlayer : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x3E8];                                     // 0x0030   (0x03E8)  MISSED
	SDK_UNDEFINED(16,364) /* FMulticastInlineDelegate */ __um(OnPlay);                                             // 0x0418   (0x0010)  
	SDK_UNDEFINED(16,365) /* FMulticastInlineDelegate */ __um(OnPlayReverse);                                      // 0x0428   (0x0010)  
	SDK_UNDEFINED(16,366) /* FMulticastInlineDelegate */ __um(OnStop);                                             // 0x0438   (0x0010)  
	SDK_UNDEFINED(16,367) /* FMulticastInlineDelegate */ __um(OnPause);                                            // 0x0448   (0x0010)  
	SDK_UNDEFINED(16,368) /* FMulticastInlineDelegate */ __um(OnInterrupt);                                        // 0x0458   (0x0010)  
	SDK_UNDEFINED(16,369) /* FMulticastInlineDelegate */ __um(OnFinished);                                         // 0x0468   (0x0010)  
	unsigned char                                      UnknownData01_6[0x30];                                      // 0x0478   (0x0030)  MISSED
	TEnumAsByte<EMovieScenePlayerStatus>               Status;                                                     // 0x04A8   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x04A9   (0x0003)  MISSED
	bool                                               bReversePlayback : 1;                                       // 0x04AC:0 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x04AD   (0x0003)  MISSED
	TArray<int32_t>                                    KeyFrames;                                                  // 0x04B0   (0x0010)  
	class UMovieSceneSequence*                         Sequence;                                                   // 0x04C0   (0x0008)  
	FFrameNumber                                       StartTime;                                                  // 0x04C8   (0x0004)  
	int32_t                                            DurationFrames;                                             // 0x04CC   (0x0004)  
	float                                              DurationSubFrames;                                          // 0x04D0   (0x0004)  
	int32_t                                            CurrentNumLoops;                                            // 0x04D4   (0x0004)  
	FMovieSceneSequencePlaybackSettings                PlaybackSettings;                                           // 0x04D8   (0x0014)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x04EC   (0x0004)  MISSED
	FMovieSceneRootEvaluationTemplateInstance          RootTemplateInstance;                                       // 0x04F0   (0x00F8)  
	unsigned char                                      UnknownData05_6[0x68];                                      // 0x05E8   (0x0068)  MISSED
	FMovieSceneSequenceReplProperties                  NetSyncProps;                                               // 0x0650   (0x0010)  
	SDK_UNDEFINED(16,370) /* TScriptInterface<Class> */ __um(PlaybackClient);                                      // 0x0660   (0x0010)  
	class UMovieSceneSequenceTickManager*              TickManager;                                                // 0x0670   (0x0008)  
	unsigned char                                      UnknownData06_7[0x70];                                      // 0x0678   (0x0070)  MISSED
	// void StopAtCurrentTime();                                                                                                // [0x3996fa0] Final|Native|Public|BlueprintCallable 
	// void Stop();                                                                                                             // [0x3996f80] Final|Native|Public|BlueprintCallable 
	// void SetTimeRange(float StartTime, float Duration);                                                                      // [0x3996eb0] Final|Native|Public|BlueprintCallable 
	// void SetPlayRate(float PlayRate);                                                                                        // [0x3996a40] Final|Native|Public|BlueprintCallable 
	// void SetPlaybackPositionWithNoEval(FMovieSceneSequencePlaybackParams PlaybackParams);                                    // [0x3996be0] Final|Native|Public|BlueprintCallable 
	// void SetPlaybackPosition(FMovieSceneSequencePlaybackParams PlaybackParams);                                              // [0x3996ac0] Final|Native|Public|BlueprintCallable 
	// void SetKeyFrames(TArray<int32_t>& InKeyFrames);                                                                         // [0x3996900] Final|Native|Public|HasOutParms|BlueprintCallable 
	// void SetFrameRate(FFrameRate FrameRate);                                                                                 // [0x3996750] Final|Native|Public|BlueprintCallable 
	// void SetFrameRange(int32_t StartFrame, int32_t Duration, float SubFrames);                                               // [0x3996640] Final|Native|Public|BlueprintCallable 
	// void SetDisableCameraCuts(bool bInDisableCameraCuts);                                                                    // [0x39965b0] Final|Native|Public|BlueprintCallable 
	// void ScrubToSeconds(float TimeInSeconds);                                                                                // [0x3996400] Final|Native|Public|BlueprintCallable 
	// bool ScrubToMarkedFrame(FString InLabel);                                                                                // [0x39962f0] Final|Native|Public|BlueprintCallable 
	// void ScrubToFrame(FFrameTime NewPosition);                                                                               // [0x3996240] Final|Native|Public|BlueprintCallable 
	// void Scrub();                                                                                                            // [0x3996220] Final|Native|Public|BlueprintCallable 
	// void RPC_OnStopEvent(FFrameTime StoppedTime);                                                                            // [0x3996180] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// void RPC_ExplicitServerUpdateEvent(EUpdatePositionMethod method, FFrameTime RelevantTime);                               // [0x39960a0] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// void PlayToSeconds(float TimeInSeconds);                                                                                 // [0x3995e50] Final|Native|Public|BlueprintCallable 
	// bool PlayToMarkedFrame(FString InLabel);                                                                                 // [0x3995d40] Final|Native|Public|BlueprintCallable 
	// void PlayToFrame(FFrameTime NewPosition);                                                                                // [0x3995c90] Final|Native|Public|BlueprintCallable 
	// void PlayTo_Circle(FMovieSceneSequencePlaybackParams InPlaybackParams, bool InAutoDirect, bool InIsForward);             // [0x3995f00] Final|Native|Public|BlueprintCallable 
	// void PlayTo(FMovieSceneSequencePlaybackParams PlaybackParams);                                                           // [0x3995b70] Final|Native|Public|BlueprintCallable 
	// void PlayReverseLooping(int32_t NumLoops);                                                                               // [0x3995ae0] Final|Native|Public|BlueprintCallable 
	// void PlayReverse();                                                                                                      // [0x3995ac0] Final|Native|Public|BlueprintCallable 
	// void PlayLooping(int32_t NumLoops);                                                                                      // [0x3995a30] Final|Native|Public|BlueprintCallable 
	// void Play();                                                                                                             // [0x3995a10] Final|Native|Public|BlueprintCallable 
	// void PauseOnNextFrame();                                                                                                 // [0x39959f0] Final|Native|Public|BlueprintCallable 
	// void Pause();                                                                                                            // [0x39959d0] Final|Native|Public|BlueprintCallable 
	// void JumpToSeconds(float TimeInSeconds);                                                                                 // [0x3995920] Final|Native|Public|BlueprintCallable 
	// bool JumpToMarkedFrame(FString InLabel);                                                                                 // [0x3995810] Final|Native|Public|BlueprintCallable 
	// void JumpToFrame(FFrameTime NewPosition);                                                                                // [0x3995760] Final|Native|Public|BlueprintCallable 
	// bool IsStopped();                                                                                                        // [0x3995730] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsReversed();                                                                                                       // [0x3995700] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsPlaying();                                                                                                        // [0x39956d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool IsPaused();                                                                                                         // [0x39956a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// void GoToEndAndStop(EUpdatePositionMethod UpdateMethod);                                                                 // [0x39954c0] Final|Native|Public|BlueprintCallable 
	// FQualifiedFrameTime GetStartTime();                                                                                      // [0x3995470] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// float GetPlayRate();                                                                                                     // [0x39953d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// TArray<FMovieSceneObjectBindingID> GetObjectBindings(class UObject* InObject);                                           // [0x39952d0] Final|Native|Public|BlueprintCallable 
	// FFrameRate GetFrameRate();                                                                                               // [0x39952b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// int32_t GetFrameDuration();                                                                                              // [0x3995280] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FQualifiedFrameTime GetEndTime();                                                                                        // [0x3995220] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// FQualifiedFrameTime GetDuration();                                                                                       // [0x39951b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// bool GetDisableCameraCuts();                                                                                             // [0x3995180] Final|Native|Public|BlueprintCallable 
	// FQualifiedFrameTime GetCurrentTime();                                                                                    // [0x3995140] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// TArray<UObject*> GetBoundObjects(FMovieSceneObjectBindingID ObjectBinding);                                              // [0x3995010] Final|Native|Public|BlueprintCallable 
	// void ClearKeyFrames();                                                                                                   // [0x3994e00] Final|Native|Public|BlueprintCallable 
	// void ChangePlaybackDirection();                                                                                          // [0x3994de0] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/MovieScene.MovieSceneSectionParameters
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align 4 pad: 0x0000
struct FMovieSceneSectionParameters
{ 
	FFrameNumber                                       StartFrameOffset;                                           // 0x0000   (0x0004)  
	bool                                               bCanLoop;                                                   // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0005   (0x0003)  MISSED
	FFrameNumber                                       EndFrameOffset;                                             // 0x0008   (0x0004)  
	FFrameNumber                                       FirstLoopStartFrameOffset;                                  // 0x000C   (0x0004)  
	float                                              TimeScale;                                                  // 0x0010   (0x0004)  
	int32_t                                            HierarchicalBias;                                           // 0x0014   (0x0004)  
	float                                              StartOffset;                                                // 0x0018   (0x0004)  
	float                                              PrerollTime;                                                // 0x001C   (0x0004)  
	float                                              PostrollTime;                                               // 0x0020   (0x0004)  
};

/// Class /Script/MovieScene.MovieSceneSubSection
/// Size: 0x0078 (120 bytes) (0x0000F0 - 0x000168) align 8 pad: 0x0000
class UMovieSceneSubSection : public UMovieSceneSection
{ 
public:
	FMovieSceneSectionParameters                       Parameters;                                                 // 0x00F0   (0x0024)  
	float                                              StartOffset;                                                // 0x0114   (0x0004)  
	float                                              TimeScale;                                                  // 0x0118   (0x0004)  
	float                                              PrerollTime;                                                // 0x011C   (0x0004)  
	class UMovieSceneSequence*                         SubSequence;                                                // 0x0120   (0x0008)  
	SDK_UNDEFINED(28,371) /* TLazyObjectPtr<AActor*> */ __um(ActorToRecord);                                       // 0x0128   (0x001C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0144   (0x0004)  MISSED
	FString                                            TargetSequenceName;                                         // 0x0148   (0x0010)  
	FDirectoryPath                                     TargetPathToRecordTo;                                       // 0x0158   (0x0010)  
	// void SetSequence(class UMovieSceneSequence* Sequence);                                                                   // [0x3999b00] Final|Native|Public|BlueprintCallable 
	// class UMovieSceneSequence* GetSequence();                                                                                // [0x3999ad0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/MovieScene.MovieSceneSubTrack
/// Size: 0x0010 (16 bytes) (0x000080 - 0x000090) align 8 pad: 0x0000
class UMovieSceneSubTrack : public UMovieSceneNameableTrack
{ 
public:
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0080   (0x0010)  
};

/// Class /Script/MovieScene.MovieSceneCustomClockSource
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UMovieSceneCustomClockSource : public UInterface
{ 
public:
	// void OnTick(float DeltaSeconds, float InPlayRate);                                                                       // [0x398b650] Native|Public        
	// void OnStopPlaying(FQualifiedFrameTime& InStopTime);                                                                     // [0x398b5a0] Native|Public|HasOutParms 
	// void OnStartPlaying(FQualifiedFrameTime& InStartTime);                                                                   // [0x398b4f0] Native|Public|HasOutParms 
	// FFrameTime OnRequestCurrentTime(FQualifiedFrameTime& InCurrentTime, float InPlayRate);                                   // [0x398b3f0] Native|Public|HasOutParms 
};

/// Class /Script/MovieScene.MovieSceneEntityProvider
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UMovieSceneEntityProvider : public UInterface
{ 
public:
};

/// Class /Script/MovieScene.MovieScenePlaybackClient
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UMovieScenePlaybackClient : public UInterface
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneTrackTemplateProducer
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UMovieSceneTrackTemplateProducer : public UInterface
{ 
public:
};

/// Class /Script/MovieScene.NodeAndChannelMappings
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UNodeAndChannelMappings : public UInterface
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneNodeGroup
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UMovieSceneNodeGroup : public UObject
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneNodeGroupCollection
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UMovieSceneNodeGroupCollection : public UObject
{ 
public:
};

/// Struct /Script/MovieScene.MovieSceneSpawnable
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align 16 pad: 0x0000
struct FMovieSceneSpawnable
{ 
	FTransform                                         SpawnTransform;                                             // 0x0000   (0x0030)  
	TArray<FName>                                      Tags;                                                       // 0x0030   (0x0010)  
	bool                                               bContinuouslyRespawn;                                       // 0x0040   (0x0001)  
	bool                                               bEvaluateTracksWhenNotSpawned;                              // 0x0041   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0042   (0x0002)  MISSED
	FGuid                                              Guid;                                                       // 0x0044   (0x0010)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0054   (0x0004)  MISSED
	FString                                            Name;                                                       // 0x0058   (0x0010)  
	class UObject*                                     ObjectTemplate;                                             // 0x0068   (0x0008)  
	TArray<FGuid>                                      ChildPossessables;                                          // 0x0070   (0x0010)  
	ESpawnOwnership                                    Ownership;                                                  // 0x0080   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0081   (0x0003)  MISSED
	FName                                              LevelName;                                                  // 0x0084   (0x000C)  
};

/// Struct /Script/MovieScene.MovieScenePossessable
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 pad: 0x0000
struct FMovieScenePossessable
{ 
	TArray<FName>                                      Tags;                                                       // 0x0000   (0x0010)  
	FGuid                                              Guid;                                                       // 0x0010   (0x0010)  
	FString                                            Name;                                                       // 0x0020   (0x0010)  
	FGuid                                              ParentGuid;                                                 // 0x0030   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneBinding
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FMovieSceneBinding
{ 
	FGuid                                              ObjectGUID;                                                 // 0x0000   (0x0010)  
	FString                                            BindingName;                                                // 0x0010   (0x0010)  
	TArray<class UMovieSceneTrack*>                    Tracks;                                                     // 0x0020   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneMarkedFrame
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FMovieSceneMarkedFrame
{ 
	FFrameNumber                                       FrameNumber;                                                // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	FString                                            Label;                                                      // 0x0008   (0x0010)  
};

/// Class /Script/MovieScene.MovieScene
/// Size: 0x0100 (256 bytes) (0x000058 - 0x000158) align 8 pad: 0x0000
class UMovieScene : public UMovieSceneSignedObject
{ 
public:
	TArray<FMovieSceneSpawnable>                       Spawnables;                                                 // 0x0058   (0x0010)  
	TArray<FMovieScenePossessable>                     Possessables;                                               // 0x0068   (0x0010)  
	TArray<FMovieSceneBinding>                         ObjectBindings;                                             // 0x0078   (0x0010)  
	SDK_UNDEFINED(80,372) /* TMap<FName, FMovieSceneObjectBindingIDs> */ __um(BindingGroups);                      // 0x0088   (0x0050)  
	TArray<class UMovieSceneTrack*>                    MasterTracks;                                               // 0x00D8   (0x0010)  
	class UMovieSceneTrack*                            CameraCutTrack;                                             // 0x00E8   (0x0008)  
	FMovieSceneFrameRange                              SelectionRange;                                             // 0x00F0   (0x0010)  
	FMovieSceneFrameRange                              PlaybackRange;                                              // 0x0100   (0x0010)  
	FFrameRate                                         TickResolution;                                             // 0x0110   (0x0008)  
	FFrameRate                                         DisplayRate;                                                // 0x0118   (0x0008)  
	EMovieSceneEvaluationType                          EvaluationType;                                             // 0x0120   (0x0001)  
	EUpdateClockSource                                 ClockSource;                                                // 0x0121   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x0122   (0x0006)  MISSED
	FSoftObjectPath                                    CustomClockSourcePath;                                      // 0x0128   (0x0020)  
	TArray<FMovieSceneMarkedFrame>                     MarkedFrames;                                               // 0x0148   (0x0010)  
	// TArray<FName> AllTags();                                                                                                 // [0x398b360] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/MovieScene.MovieSceneObjectBindingID
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FMovieSceneObjectBindingID
{ 
	int32_t                                            SequenceID;                                                 // 0x0000   (0x0004)  
	EMovieSceneObjectBindingSpace                      Space;                                                      // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0005   (0x0003)  MISSED
	FGuid                                              Guid;                                                       // 0x0008   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneBindingOverrideData
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 pad: 0x0000
struct FMovieSceneBindingOverrideData
{ 
	FMovieSceneObjectBindingID                         ObjectBindingID;                                            // 0x0000   (0x0018)  
	SDK_UNDEFINED(48,373) /* TWeakObjectPtr<UObject*> */ __um(Object);                                             // 0x0018   (0x0030)  
	bool                                               bOverridesDefault;                                          // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0049   (0x0007)  MISSED
};

/// Class /Script/MovieScene.MovieSceneBindingOverrides
/// Size: 0x0068 (104 bytes) (0x000030 - 0x000098) align 8 pad: 0x0000
class UMovieSceneBindingOverrides : public UObject
{ 
public:
	TArray<FMovieSceneBindingOverrideData>             BindingData;                                                // 0x0030   (0x0010)  
	unsigned char                                      UnknownData00_7[0x58];                                      // 0x0040   (0x0058)  MISSED
};

/// Class /Script/MovieScene.MovieSceneBindingOwnerInterface
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UMovieSceneBindingOwnerInterface : public UInterface
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneBlenderSystem
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UMovieSceneBlenderSystem : public UMovieSceneEntitySystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x20];                                      // 0x0048   (0x0020)  MISSED
};

/// Class /Script/MovieScene.MovieSceneBoolSection
/// Size: 0x0098 (152 bytes) (0x0000F0 - 0x000188) align 8 pad: 0x0000
class UMovieSceneBoolSection : public UMovieSceneSection
{ 
public:
	bool                                               DefaultValue;                                               // 0x00F0   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x00F1   (0x0007)  MISSED
	FMovieSceneBoolChannel                             BoolCurve;                                                  // 0x00F8   (0x0090)  
};

/// Class /Script/MovieScene.MovieSceneEntityInstantiatorSystem
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMovieSceneEntityInstantiatorSystem : public UMovieSceneEntitySystem
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneGenericBoundObjectInstantiator
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMovieSceneGenericBoundObjectInstantiator : public UMovieSceneEntityInstantiatorSystem
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneBoundSceneComponentInstantiator
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMovieSceneBoundSceneComponentInstantiator : public UMovieSceneEntityInstantiatorSystem
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneSceneComponentImpersonator
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UMovieSceneSceneComponentImpersonator : public UInterface
{ 
public:
};

/// Struct /Script/MovieScene.MovieSceneEvaluationTemplateSerialNumber
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FMovieSceneEvaluationTemplateSerialNumber
{ 
	uint32_t                                           Value;                                                      // 0x0000   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneTrackIdentifier
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FMovieSceneTrackIdentifier
{ 
	uint32_t                                           Value;                                                      // 0x0000   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneTemplateGenerationLedger
/// Size: 0x00A8 (168 bytes) (0x000000 - 0x0000A8) align 8 pad: 0x0000
struct FMovieSceneTemplateGenerationLedger
{ 
	FMovieSceneTrackIdentifier                         LastTrackIdentifier;                                        // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	SDK_UNDEFINED(80,374) /* TMap<FGuid, FMovieSceneTrackIdentifier> */ __um(TrackSignatureToTrackIdentifier);     // 0x0008   (0x0050)  
	SDK_UNDEFINED(80,375) /* TMap<FGuid, FMovieSceneFrameRange> */ __um(SubSectionRanges);                         // 0x0058   (0x0050)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationTemplate
/// Size: 0x0160 (352 bytes) (0x000000 - 0x000160) align 8 pad: 0x0000
struct FMovieSceneEvaluationTemplate
{ 
	SDK_UNDEFINED(80,376) /* TMap<FMovieSceneTrackIdentifier, FMovieSceneEvaluationTrack> */ __um(Tracks);         // 0x0000   (0x0050)  
	unsigned char                                      UnknownData00_6[0x50];                                      // 0x0050   (0x0050)  MISSED
	FGuid                                              SequenceSignature;                                          // 0x00A0   (0x0010)  
	FMovieSceneEvaluationTemplateSerialNumber          TemplateSerialNumber;                                       // 0x00B0   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00B4   (0x0004)  MISSED
	FMovieSceneTemplateGenerationLedger                TemplateLedger;                                             // 0x00B8   (0x00A8)  
};

/// Struct /Script/MovieScene.MovieSceneSequenceID
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FMovieSceneSequenceID
{ 
	uint32_t                                           Value;                                                      // 0x0000   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneSequenceHierarchyNode
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FMovieSceneSequenceHierarchyNode
{ 
	FMovieSceneSequenceID                              ParentID;                                                   // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	TArray<FMovieSceneSequenceID>                      Children;                                                   // 0x0008   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneSubSequenceTree
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 pad: 0x0000
struct FMovieSceneSubSequenceTree
{ 
	unsigned char                                      UnknownData00_2[0x60];                                      // 0x0000   (0x0060)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneSequenceHierarchy
/// Size: 0x0118 (280 bytes) (0x000000 - 0x000118) align 8 pad: 0x0000
struct FMovieSceneSequenceHierarchy
{ 
	FMovieSceneSequenceHierarchyNode                   RootNode;                                                   // 0x0000   (0x0018)  
	FMovieSceneSubSequenceTree                         Tree;                                                       // 0x0018   (0x0060)  
	SDK_UNDEFINED(80,377) /* TMap<FMovieSceneSequenceID, FMovieSceneSubSequenceData> */ __um(SubSequences);        // 0x0078   (0x0050)  
	SDK_UNDEFINED(80,378) /* TMap<FMovieSceneSequenceID, FMovieSceneSequenceHierarchyNode> */ __um(Hierarchy);     // 0x00C8   (0x0050)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationFieldEntityTree
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 pad: 0x0000
struct FMovieSceneEvaluationFieldEntityTree
{ 
	unsigned char                                      UnknownData00_2[0x60];                                      // 0x0000   (0x0060)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneEvaluationFieldEntityKey
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FMovieSceneEvaluationFieldEntityKey
{ 
	SDK_UNDEFINED(8,379) /* TWeakObjectPtr<UObject*> */ __um(EntityOwner);                                         // 0x0000   (0x0008)  
	uint32_t                                           EntityID;                                                   // 0x0008   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationFieldEntity
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FMovieSceneEvaluationFieldEntity
{ 
	FMovieSceneEvaluationFieldEntityKey                Key;                                                        // 0x0000   (0x000C)  
	int32_t                                            SharedMetaDataIndex;                                        // 0x000C   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationFieldEntityMetaData
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FMovieSceneEvaluationFieldEntityMetaData
{ 
	FFrameNumber                                       ForcedTime;                                                 // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	ESectionEvaluationFlags                            Flags;                                                      // 0x0008   (0x0001)  
	bool                                               bEvaluateInSequencePreRoll : 1;                             // 0x0009:0 (0x0001)  
	bool                                               bEvaluateInSequencePostRoll : 1;                            // 0x0009:1 (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x000A   (0x0002)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneEvaluationFieldSharedEntityMetaData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FMovieSceneEvaluationFieldSharedEntityMetaData
{ 
	FGuid                                              ObjectBindingID;                                            // 0x0000   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneEntityComponentField
/// Size: 0x00F0 (240 bytes) (0x000000 - 0x0000F0) align 8 pad: 0x0000
struct FMovieSceneEntityComponentField
{ 
	FMovieSceneEvaluationFieldEntityTree               PersistentEntityTree;                                       // 0x0000   (0x0060)  
	FMovieSceneEvaluationFieldEntityTree               OneShotEntityTree;                                          // 0x0060   (0x0060)  
	TArray<FMovieSceneEvaluationFieldEntity>           Entities;                                                   // 0x00C0   (0x0010)  
	TArray<FMovieSceneEvaluationFieldEntityMetaData>   EntityMetaData;                                             // 0x00D0   (0x0010)  
	TArray<FMovieSceneEvaluationFieldSharedEntityMetaData> SharedMetaData;                                         // 0x00E0   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationGroupLUTIndex
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FMovieSceneEvaluationGroupLUTIndex
{ 
	int32_t                                            NumInitPtrs;                                                // 0x0000   (0x0004)  
	int32_t                                            NumEvalPtrs;                                                // 0x0004   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationFieldTrackPtr
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FMovieSceneEvaluationFieldTrackPtr
{ 
	FMovieSceneSequenceID                              SequenceID;                                                 // 0x0000   (0x0004)  
	FMovieSceneTrackIdentifier                         TrackIdentifier;                                            // 0x0004   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneFieldEntry_EvaluationTrack
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FMovieSceneFieldEntry_EvaluationTrack
{ 
	FMovieSceneEvaluationFieldTrackPtr                 TrackPtr;                                                   // 0x0000   (0x0008)  
	uint16_t                                           NumChildren;                                                // 0x0008   (0x0002)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x000A   (0x0002)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneFieldEntry_ChildTemplate
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FMovieSceneFieldEntry_ChildTemplate
{ 
	uint16_t                                           ChildIndex;                                                 // 0x0000   (0x0002)  
	ESectionEvaluationFlags                            Flags;                                                      // 0x0002   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0003   (0x0001)  MISSED
	FFrameNumber                                       ForcedTime;                                                 // 0x0004   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationGroup
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FMovieSceneEvaluationGroup
{ 
	TArray<FMovieSceneEvaluationGroupLUTIndex>         LUTIndices;                                                 // 0x0000   (0x0010)  
	TArray<FMovieSceneFieldEntry_EvaluationTrack>      TrackLUT;                                                   // 0x0010   (0x0010)  
	TArray<FMovieSceneFieldEntry_ChildTemplate>        SectionLUT;                                                 // 0x0020   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationKey
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FMovieSceneEvaluationKey
{ 
	FMovieSceneSequenceID                              SequenceID;                                                 // 0x0000   (0x0004)  
	FMovieSceneTrackIdentifier                         TrackIdentifier;                                            // 0x0004   (0x0004)  
	uint32_t                                           SectionIndex;                                               // 0x0008   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneOrderedEvaluationKey
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FMovieSceneOrderedEvaluationKey
{ 
	FMovieSceneEvaluationKey                           Key;                                                        // 0x0000   (0x000C)  
	uint16_t                                           SetupIndex;                                                 // 0x000C   (0x0002)  
	uint16_t                                           TearDownIndex;                                              // 0x000E   (0x0002)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationMetaData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FMovieSceneEvaluationMetaData
{ 
	TArray<FMovieSceneSequenceID>                      ActiveSequences;                                            // 0x0000   (0x0010)  
	TArray<FMovieSceneOrderedEvaluationKey>            ActiveEntities;                                             // 0x0010   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationField
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FMovieSceneEvaluationField
{ 
	TArray<FMovieSceneFrameRange>                      Ranges;                                                     // 0x0000   (0x0010)  
	TArray<FMovieSceneEvaluationGroup>                 Groups;                                                     // 0x0010   (0x0010)  
	TArray<FMovieSceneEvaluationMetaData>              MetaData;                                                   // 0x0020   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneSequenceCompilerMaskStruct
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FMovieSceneSequenceCompilerMaskStruct
{ 
	bool                                               bHierarchy : 1;                                             // 0x0000:0 (0x0001)  
	bool                                               bEvaluationTemplate : 1;                                    // 0x0000:1 (0x0001)  
	bool                                               bEvaluationTemplateField : 1;                               // 0x0000:2 (0x0001)  
	bool                                               bEntityComponentField : 1;                                  // 0x0000:3 (0x0001)  
};

/// Class /Script/MovieScene.MovieSceneCompiledData
/// Size: 0x03D0 (976 bytes) (0x000030 - 0x000400) align 8 pad: 0x0000
class UMovieSceneCompiledData : public UObject
{ 
public:
	FMovieSceneEvaluationTemplate                      EvaluationTemplate;                                         // 0x0030   (0x0160)  
	FMovieSceneSequenceHierarchy                       Hierarchy;                                                  // 0x0190   (0x0118)  
	FMovieSceneEntityComponentField                    EntityComponentField;                                       // 0x02A8   (0x00F0)  
	FMovieSceneEvaluationField                         TrackTemplateField;                                         // 0x0398   (0x0030)  
	TArray<FFrameTime>                                 DeterminismFences;                                          // 0x03C8   (0x0010)  
	FGuid                                              CompiledSignature;                                          // 0x03D8   (0x0010)  
	FGuid                                              CompilerVersion;                                            // 0x03E8   (0x0010)  
	FMovieSceneSequenceCompilerMaskStruct              AccumulatedMask;                                            // 0x03F8   (0x0001)  
	FMovieSceneSequenceCompilerMaskStruct              AllocatedMask;                                              // 0x03F9   (0x0001)  
	EMovieSceneSequenceFlags                           AccumulatedFlags;                                           // 0x03FA   (0x0001)  
	unsigned char                                      UnknownData00_7[0x5];                                       // 0x03FB   (0x0005)  MISSED
};

/// Class /Script/MovieScene.MovieSceneCompiledDataManager
/// Size: 0x0208 (520 bytes) (0x000030 - 0x000238) align 8 pad: 0x0000
class UMovieSceneCompiledDataManager : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0xB0];                                      // 0x0030   (0x00B0)  MISSED
	SDK_UNDEFINED(80,380) /* TMap<int32_t, FMovieSceneSequenceHierarchy> */ __um(Hierarchies);                     // 0x00E0   (0x0050)  
	SDK_UNDEFINED(80,381) /* TMap<int32_t, FMovieSceneEvaluationTemplate> */ __um(TrackTemplates);                 // 0x0130   (0x0050)  
	SDK_UNDEFINED(80,382) /* TMap<int32_t, FMovieSceneEvaluationField> */ __um(TrackTemplateFields);               // 0x0180   (0x0050)  
	SDK_UNDEFINED(80,383) /* TMap<int32_t, FMovieSceneEntityComponentField> */ __um(EntityComponentFields);        // 0x01D0   (0x0050)  
	unsigned char                                      UnknownData01_7[0x18];                                      // 0x0220   (0x0018)  MISSED
};

/// Class /Script/MovieScene.MovieSceneFloatDecomposer
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UMovieSceneFloatDecomposer : public UInterface
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneBuiltInEasingFunction
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UMovieSceneBuiltInEasingFunction : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0030   (0x0008)  MISSED
	EMovieSceneBuiltInEasing                           Type;                                                       // 0x0038   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/MovieScene.MovieSceneEasingExternalCurve
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UMovieSceneEasingExternalCurve : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0030   (0x0008)  MISSED
	class UCurveFloat*                                 Curve;                                                      // 0x0038   (0x0008)  
};

/// Class /Script/MovieScene.MovieSceneEasingFunction
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UMovieSceneEasingFunction : public UInterface
{ 
public:
	// float OnEvaluate(float Interp);                                                                                          // [0x25a7960] Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
};

/// Struct /Script/MovieScene.MovieSceneEntitySystemGraphNodes
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FMovieSceneEntitySystemGraphNodes
{ 
	unsigned char                                      UnknownData00_2[0x38];                                      // 0x0000   (0x0038)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneEntitySystemGraph
/// Size: 0x0138 (312 bytes) (0x000000 - 0x000138) align 8 pad: 0x0000
struct FMovieSceneEntitySystemGraph
{ 
	unsigned char                                      UnknownData00_7[0x80];                                      // 0x0000   (0x0080)  MISSED
	FMovieSceneEntitySystemGraphNodes                  Nodes;                                                      // 0x0080   (0x0038)  
	unsigned char                                      UnknownData01_7[0x80];                                      // 0x00B8   (0x0080)  MISSED
};

/// Class /Script/MovieScene.MovieSceneEntitySystemLinker
/// Size: 0x0438 (1080 bytes) (0x000030 - 0x000468) align 8 pad: 0x0000
class UMovieSceneEntitySystemLinker : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x218];                                     // 0x0030   (0x0218)  MISSED
	FMovieSceneEntitySystemGraph                       SystemGraph;                                                // 0x0248   (0x0138)  
	unsigned char                                      UnknownData01_7[0xE8];                                      // 0x0380   (0x00E8)  MISSED
};

/// Class /Script/MovieScene.MovieSceneEvalTimeSystem
/// Size: 0x0010 (16 bytes) (0x000048 - 0x000058) align 8 pad: 0x0000
class UMovieSceneEvalTimeSystem : public UMovieSceneEntitySystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0048   (0x0010)  MISSED
};

/// Class /Script/MovieScene.MovieSceneFolder
/// Size: 0x0050 (80 bytes) (0x000030 - 0x000080) align 8 pad: 0x0000
class UMovieSceneFolder : public UObject
{ 
public:
	FName                                              FolderName;                                                 // 0x0030   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x003C   (0x0004)  MISSED
	TArray<class UMovieSceneFolder*>                   ChildFolders;                                               // 0x0040   (0x0010)  
	TArray<class UMovieSceneTrack*>                    ChildMasterTracks;                                          // 0x0050   (0x0010)  
	TArray<FString>                                    ChildObjectBindingStrings;                                  // 0x0060   (0x0010)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0070   (0x0010)  MISSED
};

/// Class /Script/MovieScene.MovieSceneKeyProxy
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UMovieSceneKeyProxy : public UInterface
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneMasterInstantiatorSystem
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMovieSceneMasterInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
};

/// Class /Script/MovieScene.MovieScenePreAnimatedStateSystemInterface
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UMovieScenePreAnimatedStateSystemInterface : public UInterface
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneCachePreAnimatedStateSystem
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMovieSceneCachePreAnimatedStateSystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneRestorePreAnimatedStateSystem
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMovieSceneRestorePreAnimatedStateSystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneSequenceTickManager
/// Size: 0x00D0 (208 bytes) (0x000030 - 0x000100) align 8 pad: 0x0000
class UMovieSceneSequenceTickManager : public UObject
{ 
public:
	TArray<class AActor*>                              SequenceActors;                                             // 0x0030   (0x0010)  
	class UMovieSceneEntitySystemLinker*               Linker;                                                     // 0x0040   (0x0008)  
	unsigned char                                      UnknownData00_6[0xA8];                                      // 0x0048   (0x00A8)  MISSED
	TArray<class AActor*>                              RemoveSequenceActors;                                       // 0x00F0   (0x0010)  
};

/// Class /Script/MovieScene.MovieSceneSpawnablesSystem
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMovieSceneSpawnablesSystem : public UMovieSceneEntitySystem
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneSpawnSection
/// Size: 0x0008 (8 bytes) (0x000188 - 0x000190) align 8 pad: 0x0000
class UMovieSceneSpawnSection : public UMovieSceneBoolSection
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0188   (0x0008)  MISSED
};

/// Class /Script/MovieScene.MovieSceneSpawnTrack
/// Size: 0x0020 (32 bytes) (0x000080 - 0x0000A0) align 8 pad: 0x0000
class UMovieSceneSpawnTrack : public UMovieSceneTrack
{ 
public:
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0080   (0x0010)  
	FGuid                                              ObjectGUID;                                                 // 0x0090   (0x0010)  
};

/// Class /Script/MovieScene.TestMovieSceneTrack
/// Size: 0x0020 (32 bytes) (0x000080 - 0x0000A0) align 8 pad: 0x0000
class UTestMovieSceneTrack : public UMovieSceneTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0080   (0x0008)  MISSED
	bool                                               bHighPassFilter;                                            // 0x0088   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0089   (0x0007)  MISSED
	TArray<class UMovieSceneSection*>                  SectionArray;                                               // 0x0090   (0x0010)  
};

/// Class /Script/MovieScene.TestMovieSceneSection
/// Size: 0x0000 (0 bytes) (0x0000F0 - 0x0000F0) align 8 pad: 0x0000
class UTestMovieSceneSection : public UMovieSceneSection
{ 
public:
};

/// Class /Script/MovieScene.TestMovieSceneSequence
/// Size: 0x0008 (8 bytes) (0x000068 - 0x000070) align 8 pad: 0x0000
class UTestMovieSceneSequence : public UMovieSceneSequence
{ 
public:
	class UMovieScene*                                 MovieScene;                                                 // 0x0068   (0x0008)  
};

/// Class /Script/MovieScene.TestMovieSceneSubTrack
/// Size: 0x0010 (16 bytes) (0x000090 - 0x0000A0) align 8 pad: 0x0000
class UTestMovieSceneSubTrack : public UMovieSceneSubTrack
{ 
public:
	TArray<class UMovieSceneSection*>                  SectionArray;                                               // 0x0090   (0x0010)  
};

/// Class /Script/MovieScene.TestMovieSceneSubSection
/// Size: 0x0000 (0 bytes) (0x000168 - 0x000168) align 8 pad: 0x0000
class UTestMovieSceneSubSection : public UMovieSceneSubSection
{ 
public:
};

/// Struct /Script/MovieScene.MovieSceneTrackInstanceInput
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FMovieSceneTrackInstanceInput
{ 
	class UMovieSceneSection*                          Section;                                                    // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0008   (0x0008)  MISSED
};

/// Class /Script/MovieScene.MovieSceneTrackInstance
/// Size: 0x0028 (40 bytes) (0x000030 - 0x000058) align 8 pad: 0x0000
class UMovieSceneTrackInstance : public UObject
{ 
public:
	class UObject*                                     AnimatedObject;                                             // 0x0030   (0x0008)  
	bool                                               bIsMasterTrackInstance;                                     // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0039   (0x0007)  MISSED
	class UMovieSceneEntitySystemLinker*               Linker;                                                     // 0x0040   (0x0008)  
	TArray<FMovieSceneTrackInstanceInput>              Inputs;                                                     // 0x0048   (0x0010)  
};

/// Class /Script/MovieScene.MovieSceneTrackInstanceInstantiator
/// Size: 0x00B0 (176 bytes) (0x000048 - 0x0000F8) align 8 pad: 0x0000
class UMovieSceneTrackInstanceInstantiator : public UMovieSceneEntityInstantiatorSystem
{ 
public:
	unsigned char                                      UnknownData00_1[0xB0];                                      // 0x0048   (0x00B0)  MISSED
};

/// Class /Script/MovieScene.MovieSceneTrackInstanceSystem
/// Size: 0x0008 (8 bytes) (0x000048 - 0x000050) align 8 pad: 0x0000
class UMovieSceneTrackInstanceSystem : public UMovieSceneEntitySystem
{ 
public:
	class UMovieSceneTrackInstanceInstantiator*        Instantiator;                                               // 0x0048   (0x0008)  
};

/// Struct /Script/MovieScene.MovieSceneIntegerChannel
/// Size: 0x0088 (136 bytes) (0x000008 - 0x000090) align 8 pad: 0x0000
struct FMovieSceneIntegerChannel : FMovieSceneChannel
{ 
	TArray<FFrameNumber>                               Times;                                                      // 0x0008   (0x0010)  
	int32_t                                            DefaultValue;                                               // 0x0018   (0x0004)  
	bool                                               bHasDefaultValue;                                           // 0x001C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x001D   (0x0003)  MISSED
	TArray<int32_t>                                    Values;                                                     // 0x0020   (0x0010)  
	unsigned char                                      UnknownData01_7[0x60];                                      // 0x0030   (0x0060)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneTrackImplementation
/// Size: 0x0000 (0 bytes) (0x000010 - 0x000010) align 8 pad: 0x0000
struct FMovieSceneTrackImplementation : FMovieSceneEvalTemplateBase
{ 
};

/// Struct /Script/MovieScene.MovieSceneSequenceInstanceData
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 pad: 0x0000
struct FMovieSceneSequenceInstanceData
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneEvaluationOperand
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FMovieSceneEvaluationOperand
{ 
	FGuid                                              ObjectBindingID;                                            // 0x0000   (0x0010)  
	FMovieSceneSequenceID                              SequenceID;                                                 // 0x0010   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneByteChannel
/// Size: 0x0090 (144 bytes) (0x000008 - 0x000098) align 8 pad: 0x0000
struct FMovieSceneByteChannel : FMovieSceneChannel
{ 
	TArray<FFrameNumber>                               Times;                                                      // 0x0008   (0x0010)  
	char                                               DefaultValue;                                               // 0x0018   (0x0001)  
	bool                                               bHasDefaultValue;                                           // 0x0019   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x001A   (0x0006)  MISSED
	TArray<char>                                       Values;                                                     // 0x0020   (0x0010)  
	class UEnum*                                       Enum;                                                       // 0x0030   (0x0008)  
	unsigned char                                      UnknownData01_7[0x60];                                      // 0x0038   (0x0060)  MISSED
};

/// Struct /Script/MovieScene.TrackInstanceInputComponent
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FTrackInstanceInputComponent
{ 
	class UMovieSceneSection*                          Section;                                                    // 0x0000   (0x0008)  
	int32_t                                            OutputIndex;                                                // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x000C   (0x0004)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneTrackInstanceComponent
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FMovieSceneTrackInstanceComponent
{ 
	class UMovieSceneSection*                          Owner;                                                      // 0x0000   (0x0008)  
	class UClass*                                      TrackInstanceClass;                                         // 0x0008   (0x0008)  
};

/// Struct /Script/MovieScene.EasingComponentData
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 pad: 0x0000
struct FEasingComponentData
{ 
	class UMovieSceneSection*                          Section;                                                    // 0x0000   (0x0008)  
};

/// Struct /Script/MovieScene.MovieSceneSectionGroup
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FMovieSceneSectionGroup
{ 
	SDK_UNDEFINED(16,384) /* TArray<TWeakObjectPtr<UMovieSceneSection*>> */ __um(Sections);                        // 0x0000   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneObjectBindingIDs
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FMovieSceneObjectBindingIDs
{ 
	TArray<FMovieSceneObjectBindingID>                 IDs;                                                        // 0x0000   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneTrackLabels
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FMovieSceneTrackLabels
{ 
	TArray<FString>                                    Strings;                                                    // 0x0000   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneEditorData
/// Size: 0x00F0 (240 bytes) (0x000000 - 0x0000F0) align 8 pad: 0x0000
struct FMovieSceneEditorData
{ 
	SDK_UNDEFINED(80,385) /* TMap<FString, FMovieSceneExpansionState> */ __um(ExpansionStates);                    // 0x0000   (0x0050)  
	TArray<FString>                                    PinnedNodes;                                                // 0x0050   (0x0010)  
	double                                             ViewStart;                                                  // 0x0060   (0x0008)  
	double                                             ViewEnd;                                                    // 0x0068   (0x0008)  
	double                                             WorkStart;                                                  // 0x0070   (0x0008)  
	double                                             WorkEnd;                                                    // 0x0078   (0x0008)  
	SDK_UNDEFINED(80,386) /* TSet<FFrameNumber> */     __um(MarkedFrames);                                         // 0x0080   (0x0050)  
	FFloatRange                                        WorkingRange;                                               // 0x00D0   (0x0010)  
	FFloatRange                                        ViewRange;                                                  // 0x00E0   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneExpansionState
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FMovieSceneExpansionState
{ 
	bool                                               bExpanded;                                                  // 0x0000   (0x0001)  
};

/// Struct /Script/MovieScene.MovieSceneTimecodeSource
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FMovieSceneTimecodeSource
{ 
	FTimecode                                          Timecode;                                                   // 0x0000   (0x0014)  
	FFrameNumber                                       DeltaFrame;                                                 // 0x0014   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneEntitySystemGraphNode
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FMovieSceneEntitySystemGraphNode
{ 
	unsigned char                                      UnknownData00_7[0x20];                                      // 0x0000   (0x0020)  MISSED
	class UMovieSceneEntitySystem*                     System;                                                     // 0x0020   (0x0008)  
};

/// Struct /Script/MovieScene.MovieSceneEvalTemplatePtr
/// Size: 0x0088 (136 bytes) (0x000000 - 0x000088) align 8 pad: 0x0000
struct FMovieSceneEvalTemplatePtr
{ 
	unsigned char                                      UnknownData00_2[0x88];                                      // 0x0000   (0x0088)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneEmptyStruct
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FMovieSceneEmptyStruct
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneSegmentIdentifier
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FMovieSceneSegmentIdentifier
{ 
	int32_t                                            IdentifierIndex;                                            // 0x0000   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationFieldSegmentPtr
/// Size: 0x0004 (4 bytes) (0x000008 - 0x00000C) align 4 pad: 0x0000
struct FMovieSceneEvaluationFieldSegmentPtr : FMovieSceneEvaluationFieldTrackPtr
{ 
	FMovieSceneSegmentIdentifier                       SegmentID;                                                  // 0x0008   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneTrackImplementationPtr
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FMovieSceneTrackImplementationPtr
{ 
	unsigned char                                      UnknownData00_2[0x38];                                      // 0x0000   (0x0038)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneEvaluationTrack
/// Size: 0x0078 (120 bytes) (0x000000 - 0x000078) align 8 pad: 0x0000
struct FMovieSceneEvaluationTrack
{ 
	FGuid                                              ObjectBindingID;                                            // 0x0000   (0x0010)  
	uint16_t                                           EvaluationPriority;                                         // 0x0010   (0x0002)  
	EEvaluationMethod                                  EvaluationMethod;                                           // 0x0012   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0013   (0x0001)  MISSED
	SDK_UNDEFINED(8,387) /* TWeakObjectPtr<UMovieSceneTrack*> */ __um(SourceTrack);                                // 0x0014   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	TArray<FMovieSceneEvalTemplatePtr>                 ChildTemplates;                                             // 0x0020   (0x0010)  
	FMovieSceneTrackImplementationPtr                  TrackTemplate;                                              // 0x0030   (0x0038)  
	FName                                              EvaluationGroup;                                            // 0x0068   (0x000C)  
	bool                                               bEvaluateInPreroll : 1;                                     // 0x0074:0 (0x0001)  
	bool                                               bEvaluateInPostroll : 1;                                    // 0x0074:1 (0x0001)  
	bool                                               bTearDownPriority : 1;                                      // 0x0074:2 (0x0001)  
	unsigned char                                      UnknownData02_7[0x3];                                       // 0x0075   (0x0003)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneSubSectionData
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FMovieSceneSubSectionData
{ 
	SDK_UNDEFINED(8,388) /* TWeakObjectPtr<UMovieSceneSubSection*> */ __um(Section);                               // 0x0000   (0x0008)  
	FGuid                                              ObjectBindingID;                                            // 0x0008   (0x0010)  
	ESectionEvaluationFlags                            Flags;                                                      // 0x0018   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0019   (0x0003)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneKeyStruct
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 pad: 0x0000
struct FMovieSceneKeyStruct
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneKeyTimeStruct
/// Size: 0x0020 (32 bytes) (0x000008 - 0x000028) align 8 pad: 0x0000
struct FMovieSceneKeyTimeStruct : FMovieSceneKeyStruct
{ 
	FFrameNumber                                       Time;                                                       // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_7[0x1C];                                      // 0x000C   (0x001C)  MISSED
};

/// Struct /Script/MovieScene.GeneratedMovieSceneKeyStruct
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 16 pad: 0x0000
struct FGeneratedMovieSceneKeyStruct
{ 
	unsigned char                                      UnknownData00_2[0x50];                                      // 0x0000   (0x0050)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneObjectPathChannelKeyValue
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FMovieSceneObjectPathChannelKeyValue
{ 
	SDK_UNDEFINED(48,389) /* TWeakObjectPtr<UObject*> */ __um(SoftPtr);                                            // 0x0000   (0x0030)  
	class UObject*                                     HardPtr;                                                    // 0x0030   (0x0008)  
};

/// Struct /Script/MovieScene.MovieSceneObjectPathChannel
/// Size: 0x00C0 (192 bytes) (0x000008 - 0x0000C8) align 8 pad: 0x0000
struct FMovieSceneObjectPathChannel : FMovieSceneChannel
{ 
	class UClass*                                      PropertyClass;                                              // 0x0008   (0x0008)  
	TArray<FFrameNumber>                               Times;                                                      // 0x0010   (0x0010)  
	TArray<FMovieSceneObjectPathChannelKeyValue>       Values;                                                     // 0x0020   (0x0010)  
	FMovieSceneObjectPathChannelKeyValue               DefaultValue;                                               // 0x0030   (0x0038)  
	unsigned char                                      UnknownData00_7[0x60];                                      // 0x0068   (0x0060)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneSegment
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align 8 pad: 0x0000
struct FMovieSceneSegment
{ 
	unsigned char                                      UnknownData00_2[0x58];                                      // 0x0000   (0x0058)  MISSED
};

/// Struct /Script/MovieScene.SectionEvaluationData
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FSectionEvaluationData
{ 
	int32_t                                            ImplIndex;                                                  // 0x0000   (0x0004)  
	FFrameNumber                                       ForcedTime;                                                 // 0x0004   (0x0004)  
	ESectionEvaluationFlags                            Flags;                                                      // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneTimeTransform
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FMovieSceneTimeTransform
{ 
	float                                              TimeScale;                                                  // 0x0000   (0x0004)  
	FFrameTime                                         Offset;                                                     // 0x0004   (0x0008)  
};

/// Struct /Script/MovieScene.MovieSceneTimeWarping
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FMovieSceneTimeWarping
{ 
	FFrameNumber                                       Start;                                                      // 0x0000   (0x0004)  
	FFrameNumber                                       End;                                                        // 0x0004   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneNestedSequenceTransform
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FMovieSceneNestedSequenceTransform
{ 
	FMovieSceneTimeTransform                           LinearTransform;                                            // 0x0000   (0x000C)  
	FMovieSceneTimeWarping                             Warping;                                                    // 0x000C   (0x0008)  
};

/// Struct /Script/MovieScene.MovieSceneSequenceTransform
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FMovieSceneSequenceTransform
{ 
	FMovieSceneTimeTransform                           LinearTransform;                                            // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	TArray<FMovieSceneNestedSequenceTransform>         NestedTransforms;                                           // 0x0010   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneSequenceInstanceDataPtr
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FMovieSceneSequenceInstanceDataPtr
{ 
	unsigned char                                      UnknownData00_2[0x18];                                      // 0x0000   (0x0018)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneSubSequenceData
/// Size: 0x00F0 (240 bytes) (0x000000 - 0x0000F0) align 8 pad: 0x0000
struct FMovieSceneSubSequenceData
{ 
	FSoftObjectPath                                    Sequence;                                                   // 0x0000   (0x0020)  
	FMovieSceneSequenceTransform                       RootToSequenceTransform;                                    // 0x0020   (0x0020)  
	FFrameRate                                         TickResolution;                                             // 0x0040   (0x0008)  
	FMovieSceneSequenceID                              DeterministicSequenceID;                                    // 0x0048   (0x0004)  
	FMovieSceneFrameRange                              PlayRange;                                                  // 0x004C   (0x0010)  
	FMovieSceneFrameRange                              FullPlayRange;                                              // 0x005C   (0x0010)  
	FMovieSceneFrameRange                              UnwarpedPlayRange;                                          // 0x006C   (0x0010)  
	FMovieSceneFrameRange                              PreRollRange;                                               // 0x007C   (0x0010)  
	FMovieSceneFrameRange                              PostRollRange;                                              // 0x008C   (0x0010)  
	int16_t                                            HierarchicalBias;                                           // 0x009C   (0x0002)  
	bool                                               bHasHierarchicalEasing;                                     // 0x009E   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x009F   (0x0001)  MISSED
	FMovieSceneSequenceInstanceDataPtr                 InstanceData;                                               // 0x00A0   (0x0018)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x00B8   (0x0008)  MISSED
	FGuid                                              SubSectionSignature;                                        // 0x00C0   (0x0010)  
	FMovieSceneSequenceTransform                       OuterToInnerTransform;                                      // 0x00D0   (0x0020)  
};

/// Struct /Script/MovieScene.MovieSceneSubSequenceTreeEntry
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FMovieSceneSubSequenceTreeEntry
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneSequencePlaybackParams
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FMovieSceneSequencePlaybackParams
{ 
	FFrameTime                                         Frame;                                                      // 0x0000   (0x0008)  
	float                                              Time;                                                       // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FString                                            MarkedFrame;                                                // 0x0010   (0x0010)  
	EMovieScenePositionType                            PositionType;                                               // 0x0020   (0x0001)  
	EUpdatePositionMethod                              UpdateMethod;                                               // 0x0021   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x0022   (0x0006)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneWarpCounter
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FMovieSceneWarpCounter
{ 
	TArray<uint32_t>                                   WarpCounts;                                                 // 0x0000   (0x0010)  
};

/// Struct /Script/MovieScene.TestMovieSceneEvalTemplate
/// Size: 0x0000 (0 bytes) (0x000020 - 0x000020) align 8 pad: 0x0000
struct FTestMovieSceneEvalTemplate : FMovieSceneEvalTemplate
{ 
};

/// Struct /Script/MovieScene.MovieSceneTrackDisplayOptions
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FMovieSceneTrackDisplayOptions
{ 
	bool                                               bShowVerticalFrames : 1;                                    // 0x0000:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0001   (0x0003)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneTrackInstanceEntry
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FMovieSceneTrackInstanceEntry
{ 
	class UObject*                                     BoundObject;                                                // 0x0000   (0x0008)  
	class UMovieSceneTrackInstance*                    TrackInstance;                                              // 0x0008   (0x0008)  
};

/// Class /Script/MovieSceneTracks.MovieSceneParameterSection
/// Size: 0x0060 (96 bytes) (0x0000F0 - 0x000150) align 8 pad: 0x0000
class UMovieSceneParameterSection : public UMovieSceneSection
{ 
public:
	TArray<FBoolParameterNameAndCurve>                 BoolParameterNamesAndCurves;                                // 0x00F0   (0x0010)  
	TArray<FScalarParameterNameAndCurve>               ScalarParameterNamesAndCurves;                              // 0x0100   (0x0010)  
	TArray<FVector2DParameterNameAndCurves>            Vector2DParameterNamesAndCurves;                            // 0x0110   (0x0010)  
	TArray<FVectorParameterNameAndCurves>              VectorParameterNamesAndCurves;                              // 0x0120   (0x0010)  
	TArray<FColorParameterNameAndCurves>               ColorParameterNamesAndCurves;                               // 0x0130   (0x0010)  
	TArray<FTransformParameterNameAndCurves>           TransformParameterNamesAndCurves;                           // 0x0140   (0x0010)  
	// bool RemoveVectorParameter(FName InParameterName);                                                                       // [0x3ab5470] Final|Native|Public|BlueprintCallable 
	// bool RemoveVector2DParameter(FName InParameterName);                                                                     // [0x3ab53c0] Final|Native|Public|BlueprintCallable 
	// bool RemoveTransformParameter(FName InParameterName);                                                                    // [0x3ab5310] Final|Native|Public|BlueprintCallable 
	// bool RemoveScalarParameter(FName InParameterName);                                                                       // [0x3ab5260] Final|Native|Public|BlueprintCallable 
	// bool RemoveColorParameter(FName InParameterName);                                                                        // [0x3ab51b0] Final|Native|Public|BlueprintCallable 
	// bool RemoveBoolParameter(FName InParameterName);                                                                         // [0x3ab5100] Final|Native|Public|BlueprintCallable 
	// void GetParameterNames(TSet<FName>& ParameterNames);                                                                     // [0x3ab4fc0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// void AddVectorParameterKey(FName InParameterName, FFrameNumber InTime, FVector InValue);                                 // [0x3ab4e80] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void AddVector2DParameterKey(FName InParameterName, FFrameNumber InTime, FVector2D InValue);                             // [0x3ab4d60] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void AddTransformParameterKey(FName InParameterName, FFrameNumber InTime, FTransform& InValue);                          // [0x3ab4be0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// void AddScalarParameterKey(FName InParameterName, FFrameNumber InTime, float InValue);                                   // [0x3ab4ab0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void AddColorParameterKey(FName InParameterName, FFrameNumber InTime, FLinearColor InValue);                             // [0x3ab4980] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void AddBoolParameterKey(FName InParameterName, FFrameNumber InTime, bool InValue);                                      // [0x3ab4850] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/MovieSceneTracks.FloatChannelEvaluatorSystem
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UFloatChannelEvaluatorSystem : public UMovieSceneEntitySystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneTransformOrigin
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UMovieSceneTransformOrigin : public UInterface
{ 
public:
	// FTransform BP_GetTransformOrigin();                                                                                      // [0x25a7960] Event|Protected|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
};

/// Class /Script/MovieSceneTracks.MovieScene3DConstraintSection
/// Size: 0x0028 (40 bytes) (0x0000F0 - 0x000118) align 8 pad: 0x0000
class UMovieScene3DConstraintSection : public UMovieSceneSection
{ 
public:
	FGuid                                              ConstraintId;                                               // 0x00F0   (0x0010)  
	FMovieSceneObjectBindingID                         ConstraintBindingID;                                        // 0x0100   (0x0018)  
	// void SetConstraintBindingID(FMovieSceneObjectBindingID& InConstraintBindingID);                                          // [0x3aaa550] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// FMovieSceneObjectBindingID GetConstraintBindingID();                                                                     // [0x3aaa450] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/MovieSceneTracks.MovieScene3DAttachSection
/// Size: 0x0028 (40 bytes) (0x000118 - 0x000140) align 8 pad: 0x0000
class UMovieScene3DAttachSection : public UMovieScene3DConstraintSection
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0118   (0x0008)  MISSED
	FName                                              AttachSocketName;                                           // 0x0120   (0x000C)  
	FName                                              AttachComponentName;                                        // 0x012C   (0x000C)  
	EAttachmentRule                                    AttachmentLocationRule;                                     // 0x0138   (0x0001)  
	EAttachmentRule                                    AttachmentRotationRule;                                     // 0x0139   (0x0001)  
	EAttachmentRule                                    AttachmentScaleRule;                                        // 0x013A   (0x0001)  
	EDetachmentRule                                    DetachmentLocationRule;                                     // 0x013B   (0x0001)  
	EDetachmentRule                                    DetachmentRotationRule;                                     // 0x013C   (0x0001)  
	EDetachmentRule                                    DetachmentScaleRule;                                        // 0x013D   (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x013E   (0x0002)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScene3DConstraintTrack
/// Size: 0x0010 (16 bytes) (0x000080 - 0x000090) align 8 pad: 0x0000
class UMovieScene3DConstraintTrack : public UMovieSceneTrack
{ 
public:
	TArray<class UMovieSceneSection*>                  ConstraintSections;                                         // 0x0080   (0x0010)  
};

/// Class /Script/MovieSceneTracks.MovieScene3DAttachTrack
/// Size: 0x0000 (0 bytes) (0x000090 - 0x000090) align 8 pad: 0x0000
class UMovieScene3DAttachTrack : public UMovieScene3DConstraintTrack
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieScene3DPathSection
/// Size: 0x00A8 (168 bytes) (0x000118 - 0x0001C0) align 8 pad: 0x0000
class UMovieScene3DPathSection : public UMovieScene3DConstraintSection
{ 
public:
	FMovieSceneFloatChannel                            TimingCurve;                                                // 0x0118   (0x00A0)  
	MovieScene3DPathSection_Axis                       FrontAxisEnum;                                              // 0x01B8   (0x0001)  
	MovieScene3DPathSection_Axis                       UpAxisEnum;                                                 // 0x01B9   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x01BA   (0x0002)  MISSED
	bool                                               bFollow : 1;                                                // 0x01BC:0 (0x0001)  
	bool                                               bReverse : 1;                                               // 0x01BC:1 (0x0001)  
	bool                                               bForceUpright : 1;                                          // 0x01BC:2 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x01BD   (0x0003)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScene3DPathTrack
/// Size: 0x0008 (8 bytes) (0x000090 - 0x000098) align 8 pad: 0x0000
class UMovieScene3DPathTrack : public UMovieScene3DConstraintTrack
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0090   (0x0008)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScene3DTransformPropertySystem
/// Size: 0x0000 (0 bytes) (0x000058 - 0x000058) align 8 pad: 0x0000
class UMovieScene3DTransformPropertySystem : public UMovieScenePropertySystem
{ 
public:
};

/// Struct /Script/MovieSceneTracks.MovieSceneTransformMask
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FMovieSceneTransformMask
{ 
	uint32_t                                           Mask;                                                       // 0x0000   (0x0004)  
};

/// Class /Script/MovieSceneTracks.MovieScene3DTransformSection
/// Size: 0x0658 (1624 bytes) (0x0000F0 - 0x000748) align 8 pad: 0x0000
class UMovieScene3DTransformSection : public UMovieSceneSection
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00F0   (0x0008)  MISSED
	FMovieSceneTransformMask                           TransformMask;                                              // 0x00F8   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00FC   (0x0004)  MISSED
	FMovieSceneFloatChannel                            Translation[3];                                             // 0x0100   (0x01E0)  
	FMovieSceneFloatChannel                            Rotation[3];                                                // 0x02E0   (0x01E0)  
	FMovieSceneFloatChannel                            Scale[3];                                                   // 0x04C0   (0x01E0)  
	FMovieSceneFloatChannel                            ManualWeight;                                               // 0x06A0   (0x00A0)  
	bool                                               bUseQuaternionInterpolation;                                // 0x0740   (0x0001)  
	unsigned char                                      UnknownData02_7[0x7];                                       // 0x0741   (0x0007)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScene3DTransformTrack
/// Size: 0x0000 (0 bytes) (0x0000B8 - 0x0000B8) align 8 pad: 0x0000
class UMovieScene3DTransformTrack : public UMovieScenePropertyTrack
{ 
public:
};

/// Struct /Script/MovieSceneTracks.MovieSceneActorReferenceKey
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 4 pad: 0x0000
struct FMovieSceneActorReferenceKey
{ 
	FMovieSceneObjectBindingID                         Object;                                                     // 0x0000   (0x0018)  
	FName                                              ComponentName;                                              // 0x0018   (0x000C)  
	FName                                              SocketName;                                                 // 0x0024   (0x000C)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneActorReferenceData
/// Size: 0x00B0 (176 bytes) (0x000008 - 0x0000B8) align 8 pad: 0x0000
struct FMovieSceneActorReferenceData : FMovieSceneChannel
{ 
	TArray<FFrameNumber>                               KeyTimes;                                                   // 0x0008   (0x0010)  
	unsigned char                                      UnknownData00_6[0x30];                                      // 0x0018   (0x0030)  MISSED
	TArray<FMovieSceneActorReferenceKey>               KeyValues;                                                  // 0x0048   (0x0010)  
	unsigned char                                      UnknownData01_7[0x60];                                      // 0x0058   (0x0060)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneActorReferenceSection
/// Size: 0x0148 (328 bytes) (0x0000F0 - 0x000238) align 8 pad: 0x0000
class UMovieSceneActorReferenceSection : public UMovieSceneSection
{ 
public:
	FMovieSceneActorReferenceData                      ActorReferenceData;                                         // 0x00F0   (0x00B8)  
	FIntegralCurve                                     ActorGuidIndexCurve;                                        // 0x01A8   (0x0080)  
	TArray<FString>                                    ActorGuidStrings;                                           // 0x0228   (0x0010)  
};

/// Class /Script/MovieSceneTracks.MovieSceneActorReferenceTrack
/// Size: 0x0008 (8 bytes) (0x0000B8 - 0x0000C0) align 8 pad: 0x0000
class UMovieSceneActorReferenceTrack : public UMovieScenePropertyTrack
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x00B8   (0x0008)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneAudioSection
/// Size: 0x0260 (608 bytes) (0x0000F0 - 0x000350) align 8 pad: 0x0000
class UMovieSceneAudioSection : public UMovieSceneSection
{ 
public:
	class USoundBase*                                  Sound;                                                      // 0x00F0   (0x0008)  
	FFrameNumber                                       StartFrameOffset;                                           // 0x00F8   (0x0004)  
	float                                              StartOffset;                                                // 0x00FC   (0x0004)  
	float                                              AudioStartTime;                                             // 0x0100   (0x0004)  
	float                                              AudioDilationFactor;                                        // 0x0104   (0x0004)  
	float                                              AudioVolume;                                                // 0x0108   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x010C   (0x0004)  MISSED
	FMovieSceneFloatChannel                            SoundVolume;                                                // 0x0110   (0x00A0)  
	FMovieSceneFloatChannel                            PitchMultiplier;                                            // 0x01B0   (0x00A0)  
	FMovieSceneActorReferenceData                      AttachActorData;                                            // 0x0250   (0x00B8)  
	bool                                               bLooping;                                                   // 0x0308   (0x0001)  
	bool                                               bSuppressSubtitles;                                         // 0x0309   (0x0001)  
	bool                                               bOverrideAttenuation;                                       // 0x030A   (0x0001)  
	unsigned char                                      UnknownData01_6[0x5];                                       // 0x030B   (0x0005)  MISSED
	class USoundAttenuation*                           AttenuationSettings;                                        // 0x0310   (0x0008)  
	SDK_UNDEFINED(20,390) /* FDelegateProperty */      __um(OnQueueSubtitles);                                     // 0x0318   (0x0014)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x032C   (0x0004)  MISSED
	SDK_UNDEFINED(16,391) /* FMulticastInlineDelegate */ __um(OnAudioFinished);                                    // 0x0330   (0x0010)  
	SDK_UNDEFINED(16,392) /* FMulticastInlineDelegate */ __um(OnAudioPlaybackPercent);                             // 0x0340   (0x0010)  
	// void SetStartOffset(FFrameNumber InStartOffset);                                                                         // [0x3aaa6a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// void SetSound(class USoundBase* InSound);                                                                                // [0x3aaa610] Final|Native|Public|BlueprintCallable 
	// FFrameNumber GetStartOffset();                                                                                           // [0xc1d630] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// class USoundBase* GetSound();                                                                                            // [0xbe0fe0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/MovieSceneTracks.MovieSceneAudioTrack
/// Size: 0x0018 (24 bytes) (0x000080 - 0x000098) align 8 pad: 0x0000
class UMovieSceneAudioTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0080   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  AudioSections;                                              // 0x0088   (0x0010)  
};

/// Class /Script/MovieSceneTracks.MovieSceneBaseValueEvaluatorSystem
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMovieSceneBaseValueEvaluatorSystem : public UMovieSceneEntitySystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneBoolTrack
/// Size: 0x0008 (8 bytes) (0x0000B8 - 0x0000C0) align 8 pad: 0x0000
class UMovieSceneBoolTrack : public UMovieScenePropertyTrack
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x00B8   (0x0008)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneByteSection
/// Size: 0x0098 (152 bytes) (0x0000F0 - 0x000188) align 8 pad: 0x0000
class UMovieSceneByteSection : public UMovieSceneSection
{ 
public:
	FMovieSceneByteChannel                             ByteCurve;                                                  // 0x00F0   (0x0098)  
};

/// Class /Script/MovieSceneTracks.MovieSceneByteTrack
/// Size: 0x0010 (16 bytes) (0x0000B8 - 0x0000C8) align 8 pad: 0x0000
class UMovieSceneByteTrack : public UMovieScenePropertyTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00B8   (0x0008)  MISSED
	class UEnum*                                       Enum;                                                       // 0x00C0   (0x0008)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraAnimSectionData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FMovieSceneCameraAnimSectionData
{ 
	class UCameraAnim*                                 CameraAnim;                                                 // 0x0000   (0x0008)  
	float                                              PlayRate;                                                   // 0x0008   (0x0004)  
	float                                              PlayScale;                                                  // 0x000C   (0x0004)  
	float                                              BlendInTime;                                                // 0x0010   (0x0004)  
	float                                              BlendOutTime;                                               // 0x0014   (0x0004)  
	bool                                               bLooping;                                                   // 0x0018   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0019   (0x0007)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraAnimSection
/// Size: 0x0040 (64 bytes) (0x0000F0 - 0x000130) align 8 pad: 0x0000
class UMovieSceneCameraAnimSection : public UMovieSceneSection
{ 
public:
	FMovieSceneCameraAnimSectionData                   AnimData;                                                   // 0x00F0   (0x0020)  
	class UCameraAnim*                                 CameraAnim;                                                 // 0x0110   (0x0008)  
	float                                              PlayRate;                                                   // 0x0118   (0x0004)  
	float                                              PlayScale;                                                  // 0x011C   (0x0004)  
	float                                              BlendInTime;                                                // 0x0120   (0x0004)  
	float                                              BlendOutTime;                                               // 0x0124   (0x0004)  
	bool                                               bLooping;                                                   // 0x0128   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0129   (0x0007)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraAnimTrack
/// Size: 0x0018 (24 bytes) (0x000080 - 0x000098) align 8 pad: 0x0000
class UMovieSceneCameraAnimTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0080   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  CameraAnimSections;                                         // 0x0088   (0x0010)  
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraCutSection
/// Size: 0x0080 (128 bytes) (0x0000F0 - 0x000170) align 16 pad: 0x0000
class UMovieSceneCameraCutSection : public UMovieSceneSection
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00F0   (0x0008)  MISSED
	bool                                               bLockPreviousCamera;                                        // 0x00F8   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x00F9   (0x0003)  MISSED
	FGuid                                              CameraGuid;                                                 // 0x00FC   (0x0010)  
	FMovieSceneObjectBindingID                         CameraBindingID;                                            // 0x010C   (0x0018)  
	unsigned char                                      UnknownData02_6[0xC];                                       // 0x0124   (0x000C)  MISSED
	FTransform                                         InitialCameraCutTransform;                                  // 0x0130   (0x0030)  
	bool                                               bHasInitialCameraCutTransform;                              // 0x0160   (0x0001)  
	unsigned char                                      UnknownData03_7[0xF];                                       // 0x0161   (0x000F)  MISSED
	// void SetCameraBindingID(FMovieSceneObjectBindingID& InCameraBindingID);                                                  // [0x3aaa490] Final|Native|Public|HasOutParms|BlueprintCallable 
	// FMovieSceneObjectBindingID GetCameraBindingID();                                                                         // [0x3aaa410] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraCutTrack
/// Size: 0x0018 (24 bytes) (0x000080 - 0x000098) align 8 pad: 0x0000
class UMovieSceneCameraCutTrack : public UMovieSceneNameableTrack
{ 
public:
	bool                                               bCanBlend;                                                  // 0x0080   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0081   (0x0007)  MISSED
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0088   (0x0010)  
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraCutTrackInstance
/// Size: 0x0068 (104 bytes) (0x000058 - 0x0000C0) align 8 pad: 0x0000
class UMovieSceneCameraCutTrackInstance : public UMovieSceneTrackInstance
{ 
public:
	unsigned char                                      UnknownData00_1[0x68];                                      // 0x0058   (0x0068)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraShakeSectionData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FMovieSceneCameraShakeSectionData
{ 
	class UClass*                                      ShakeClass;                                                 // 0x0000   (0x0008)  
	float                                              PlayScale;                                                  // 0x0008   (0x0004)  
	ECameraShakePlaySpace                              PlaySpace;                                                  // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	FRotator                                           UserDefinedPlaySpace;                                       // 0x0010   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraShakeSection
/// Size: 0x0040 (64 bytes) (0x0000F0 - 0x000130) align 8 pad: 0x0000
class UMovieSceneCameraShakeSection : public UMovieSceneSection
{ 
public:
	FMovieSceneCameraShakeSectionData                  ShakeData;                                                  // 0x00F0   (0x0020)  
	class UClass*                                      ShakeClass;                                                 // 0x0110   (0x0008)  
	float                                              PlayScale;                                                  // 0x0118   (0x0004)  
	ECameraShakePlaySpace                              PlaySpace;                                                  // 0x011C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x011D   (0x0003)  MISSED
	FRotator                                           UserDefinedPlaySpace;                                       // 0x0120   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x012C   (0x0004)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraShakeSourceShakeSection
/// Size: 0x0020 (32 bytes) (0x0000F0 - 0x000110) align 8 pad: 0x0000
class UMovieSceneCameraShakeSourceShakeSection : public UMovieSceneSection
{ 
public:
	FMovieSceneCameraShakeSectionData                  ShakeData;                                                  // 0x00F0   (0x0020)  
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraShakeSourceShakeTrack
/// Size: 0x0018 (24 bytes) (0x000080 - 0x000098) align 8 pad: 0x0000
class UMovieSceneCameraShakeSourceShakeTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0080   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  CameraShakeSections;                                        // 0x0088   (0x0010)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraShakeSourceTrigger
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FMovieSceneCameraShakeSourceTrigger
{ 
	class UClass*                                      ShakeClass;                                                 // 0x0000   (0x0008)  
	float                                              PlayScale;                                                  // 0x0008   (0x0004)  
	ECameraShakePlaySpace                              PlaySpace;                                                  // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	FRotator                                           UserDefinedPlaySpace;                                       // 0x0010   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraShakeSourceTriggerChannel
/// Size: 0x0080 (128 bytes) (0x000008 - 0x000088) align 8 pad: 0x0000
struct FMovieSceneCameraShakeSourceTriggerChannel : FMovieSceneChannel
{ 
	TArray<FFrameNumber>                               KeyTimes;                                                   // 0x0008   (0x0010)  
	TArray<FMovieSceneCameraShakeSourceTrigger>        KeyValues;                                                  // 0x0018   (0x0010)  
	unsigned char                                      UnknownData00_7[0x60];                                      // 0x0028   (0x0060)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraShakeSourceTriggerSection
/// Size: 0x0088 (136 bytes) (0x0000F0 - 0x000178) align 8 pad: 0x0000
class UMovieSceneCameraShakeSourceTriggerSection : public UMovieSceneSection
{ 
public:
	FMovieSceneCameraShakeSourceTriggerChannel         Channel;                                                    // 0x00F0   (0x0088)  
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraShakeSourceTriggerTrack
/// Size: 0x0018 (24 bytes) (0x000080 - 0x000098) align 8 pad: 0x0000
class UMovieSceneCameraShakeSourceTriggerTrack : public UMovieSceneTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0080   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0088   (0x0010)  
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraShakeTrack
/// Size: 0x0018 (24 bytes) (0x000080 - 0x000098) align 8 pad: 0x0000
class UMovieSceneCameraShakeTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0080   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  CameraShakeSections;                                        // 0x0088   (0x0010)  
};

/// Class /Script/MovieSceneTracks.MovieSceneCinematicShotSection
/// Size: 0x0028 (40 bytes) (0x000168 - 0x000190) align 8 pad: 0x0000
class UMovieSceneCinematicShotSection : public UMovieSceneSubSection
{ 
public:
	FString                                            ShotDisplayName;                                            // 0x0168   (0x0010)  
	FText                                              DisplayName;                                                // 0x0178   (0x0018)  
	// void SetShotDisplayName(FString InShotDisplayName);                                                                      // [0x3aafbf0] Final|Native|Public|BlueprintCallable 
	// FString GetShotDisplayName();                                                                                            // [0x3aafa50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/MovieSceneTracks.MovieSceneCinematicShotTrack
/// Size: 0x0000 (0 bytes) (0x000090 - 0x000090) align 8 pad: 0x0000
class UMovieSceneCinematicShotTrack : public UMovieSceneSubTrack
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneColorSection
/// Size: 0x0280 (640 bytes) (0x0000F0 - 0x000370) align 8 pad: 0x0000
class UMovieSceneColorSection : public UMovieSceneSection
{ 
public:
	FMovieSceneFloatChannel                            RedCurve;                                                   // 0x00F0   (0x00A0)  
	FMovieSceneFloatChannel                            GreenCurve;                                                 // 0x0190   (0x00A0)  
	FMovieSceneFloatChannel                            BlueCurve;                                                  // 0x0230   (0x00A0)  
	FMovieSceneFloatChannel                            AlphaCurve;                                                 // 0x02D0   (0x00A0)  
};

/// Class /Script/MovieSceneTracks.MovieSceneColorTrack
/// Size: 0x0010 (16 bytes) (0x0000B8 - 0x0000C8) align 8 pad: 0x0000
class UMovieSceneColorTrack : public UMovieScenePropertyTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00B8   (0x0008)  MISSED
	bool                                               bIsSlateColor;                                              // 0x00C0   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x00C1   (0x0007)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneComponentAttachmentInvalidatorSystem
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMovieSceneComponentAttachmentInvalidatorSystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneComponentAttachmentSystem
/// Size: 0x0180 (384 bytes) (0x000048 - 0x0001C8) align 8 pad: 0x0000
class UMovieSceneComponentAttachmentSystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x180];                                     // 0x0048   (0x0180)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneComponentMobilitySystem
/// Size: 0x01E0 (480 bytes) (0x000048 - 0x000228) align 8 pad: 0x0000
class UMovieSceneComponentMobilitySystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x1E0];                                     // 0x0048   (0x01E0)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScenePreAnimatedComponentTransformSystem
/// Size: 0x0180 (384 bytes) (0x000048 - 0x0001C8) align 8 pad: 0x0000
class UMovieScenePreAnimatedComponentTransformSystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x180];                                     // 0x0048   (0x0180)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneComponentTransformSystem
/// Size: 0x0000 (0 bytes) (0x000058 - 0x000058) align 8 pad: 0x0000
class UMovieSceneComponentTransformSystem : public UMovieScenePropertySystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneEnumSection
/// Size: 0x0098 (152 bytes) (0x0000F0 - 0x000188) align 8 pad: 0x0000
class UMovieSceneEnumSection : public UMovieSceneSection
{ 
public:
	FMovieSceneByteChannel                             EnumCurve;                                                  // 0x00F0   (0x0098)  
};

/// Class /Script/MovieSceneTracks.MovieSceneEnumTrack
/// Size: 0x0010 (16 bytes) (0x0000B8 - 0x0000C8) align 8 pad: 0x0000
class UMovieSceneEnumTrack : public UMovieScenePropertyTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00B8   (0x0008)  MISSED
	class UEnum*                                       Enum;                                                       // 0x00C0   (0x0008)  
};

/// Class /Script/MovieSceneTracks.MovieSceneEulerTransformPropertySystem
/// Size: 0x0000 (0 bytes) (0x000058 - 0x000058) align 8 pad: 0x0000
class UMovieSceneEulerTransformPropertySystem : public UMovieScenePropertySystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneEulerTransformTrack
/// Size: 0x0000 (0 bytes) (0x0000B8 - 0x0000B8) align 8 pad: 0x0000
class UMovieSceneEulerTransformTrack : public UMovieScenePropertyTrack
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneEventSectionBase
/// Size: 0x0000 (0 bytes) (0x0000F0 - 0x0000F0) align 8 pad: 0x0000
class UMovieSceneEventSectionBase : public UMovieSceneSection
{ 
public:
};

/// Struct /Script/MovieSceneTracks.MovieSceneEventPtrs
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FMovieSceneEventPtrs
{ 
	class UFunction*                                   Function;                                                   // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_7[0x20];                                      // 0x0008   (0x0020)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneEvent
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FMovieSceneEvent
{ 
	FMovieSceneEventPtrs                               Ptrs;                                                       // 0x0000   (0x0028)  
};

/// Class /Script/MovieSceneTracks.MovieSceneEventRepeaterSection
/// Size: 0x0030 (48 bytes) (0x0000F0 - 0x000120) align 8 pad: 0x0000
class UMovieSceneEventRepeaterSection : public UMovieSceneEventSectionBase
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00F0   (0x0008)  MISSED
	FMovieSceneEvent                                   Event;                                                      // 0x00F8   (0x0028)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneEventParameters
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FMovieSceneEventParameters
{ 
	unsigned char                                      UnknownData00_2[0x30];                                      // 0x0000   (0x0030)  MISSED
};

/// Struct /Script/MovieSceneTracks.EventPayload
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 pad: 0x0000
struct FEventPayload
{ 
	FName                                              EventName;                                                  // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FMovieSceneEventParameters                         Parameters;                                                 // 0x0010   (0x0030)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneEventSectionData
/// Size: 0x0080 (128 bytes) (0x000008 - 0x000088) align 8 pad: 0x0000
struct FMovieSceneEventSectionData : FMovieSceneChannel
{ 
	TArray<FFrameNumber>                               Times;                                                      // 0x0008   (0x0010)  
	TArray<FEventPayload>                              KeyValues;                                                  // 0x0018   (0x0010)  
	unsigned char                                      UnknownData00_7[0x60];                                      // 0x0028   (0x0060)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneEventSection
/// Size: 0x0100 (256 bytes) (0x0000F0 - 0x0001F0) align 8 pad: 0x0000
class UMovieSceneEventSection : public UMovieSceneSection
{ 
public:
	FNameCurve                                         Events;                                                     // 0x00F0   (0x0078)  
	FMovieSceneEventSectionData                        eventData;                                                  // 0x0168   (0x0088)  
};

/// Class /Script/MovieSceneTracks.MovieSceneEventSystem
/// Size: 0x0050 (80 bytes) (0x000048 - 0x000098) align 8 pad: 0x0000
class UMovieSceneEventSystem : public UMovieSceneEntitySystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x50];                                      // 0x0048   (0x0050)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScenePreSpawnEventSystem
/// Size: 0x0000 (0 bytes) (0x000098 - 0x000098) align 8 pad: 0x0000
class UMovieScenePreSpawnEventSystem : public UMovieSceneEventSystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieScenePostSpawnEventSystem
/// Size: 0x0000 (0 bytes) (0x000098 - 0x000098) align 8 pad: 0x0000
class UMovieScenePostSpawnEventSystem : public UMovieSceneEventSystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieScenePostEvalEventSystem
/// Size: 0x0000 (0 bytes) (0x000098 - 0x000098) align 8 pad: 0x0000
class UMovieScenePostEvalEventSystem : public UMovieSceneEventSystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneEventTrack
/// Size: 0x0020 (32 bytes) (0x000080 - 0x0000A0) align 8 pad: 0x0000
class UMovieSceneEventTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0080   (0x0008)  MISSED
	bool                                               bFireEventsWhenForwards : 1;                                // 0x0088:0 (0x0001)  
	bool                                               bFireEventsWhenBackwards : 1;                               // 0x0088:1 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0089   (0x0003)  MISSED
	EFireEventsAtPosition                              EventPosition;                                              // 0x008C   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x008D   (0x0003)  MISSED
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0090   (0x0010)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneEventChannel
/// Size: 0x0080 (128 bytes) (0x000008 - 0x000088) align 8 pad: 0x0000
struct FMovieSceneEventChannel : FMovieSceneChannel
{ 
	TArray<FFrameNumber>                               KeyTimes;                                                   // 0x0008   (0x0010)  
	TArray<FMovieSceneEvent>                           KeyValues;                                                  // 0x0018   (0x0010)  
	unsigned char                                      UnknownData00_7[0x60];                                      // 0x0028   (0x0060)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneEventTriggerSection
/// Size: 0x0090 (144 bytes) (0x0000F0 - 0x000180) align 8 pad: 0x0000
class UMovieSceneEventTriggerSection : public UMovieSceneEventSectionBase
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00F0   (0x0008)  MISSED
	FMovieSceneEventChannel                            EventChannel;                                               // 0x00F8   (0x0088)  
};

/// Class /Script/MovieSceneTracks.MovieSceneFadeSection
/// Size: 0x00B8 (184 bytes) (0x0000F0 - 0x0001A8) align 8 pad: 0x0000
class UMovieSceneFadeSection : public UMovieSceneSection
{ 
public:
	FMovieSceneFloatChannel                            FloatCurve;                                                 // 0x00F0   (0x00A0)  
	FLinearColor                                       FadeColor;                                                  // 0x0190   (0x0010)  
	bool                                               bFadeAudio : 1;                                             // 0x01A0:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x01A1   (0x0007)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneFloatTrack
/// Size: 0x0000 (0 bytes) (0x0000B8 - 0x0000B8) align 8 pad: 0x0000
class UMovieSceneFloatTrack : public UMovieScenePropertyTrack
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneFadeTrack
/// Size: 0x0008 (8 bytes) (0x0000B8 - 0x0000C0) align 8 pad: 0x0000
class UMovieSceneFadeTrack : public UMovieSceneFloatTrack
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x00B8   (0x0008)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneFloatPropertySystem
/// Size: 0x0000 (0 bytes) (0x000058 - 0x000058) align 8 pad: 0x0000
class UMovieSceneFloatPropertySystem : public UMovieScenePropertySystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneFloatSection
/// Size: 0x00A8 (168 bytes) (0x0000F0 - 0x000198) align 8 pad: 0x0000
class UMovieSceneFloatSection : public UMovieSceneSection
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00F0   (0x0008)  MISSED
	FMovieSceneFloatChannel                            FloatCurve;                                                 // 0x00F8   (0x00A0)  
};

/// Class /Script/MovieSceneTracks.MovieSceneHierarchicalBiasSystem
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMovieSceneHierarchicalBiasSystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneIntegerSection
/// Size: 0x0090 (144 bytes) (0x0000F0 - 0x000180) align 8 pad: 0x0000
class UMovieSceneIntegerSection : public UMovieSceneSection
{ 
public:
	FMovieSceneIntegerChannel                          IntegerCurve;                                               // 0x00F0   (0x0090)  
};

/// Class /Script/MovieSceneTracks.MovieSceneIntegerTrack
/// Size: 0x0008 (8 bytes) (0x0000B8 - 0x0000C0) align 8 pad: 0x0000
class UMovieSceneIntegerTrack : public UMovieScenePropertyTrack
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x00B8   (0x0008)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneInterrogatedPropertyInstantiatorSystem
/// Size: 0x01A8 (424 bytes) (0x000048 - 0x0001F0) align 8 pad: 0x0000
class UMovieSceneInterrogatedPropertyInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x1A8];                                     // 0x0048   (0x01A8)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneLevelVisibilitySection
/// Size: 0x0020 (32 bytes) (0x0000F0 - 0x000110) align 8 pad: 0x0000
class UMovieSceneLevelVisibilitySection : public UMovieSceneSection
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00F0   (0x0008)  MISSED
	ELevelVisibility                                   Visibility;                                                 // 0x00F8   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x00F9   (0x0007)  MISSED
	TArray<FName>                                      LevelNames;                                                 // 0x0100   (0x0010)  
	// void SetVisibility(ELevelVisibility InVisibility);                                                                       // [0x3aafcf0] Final|Native|Public|BlueprintCallable 
	// void SetLevelNames(TArray<FName>& InLevelNames);                                                                         // [0x3aafb40] Final|Native|Public|HasOutParms|BlueprintCallable 
	// ELevelVisibility GetVisibility();                                                                                        // [0x3aafb10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// TArray<FName> GetLevelNames();                                                                                           // [0x3aafa20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/MovieSceneTracks.MovieSceneLevelVisibilitySystem
/// Size: 0x0188 (392 bytes) (0x000048 - 0x0001D0) align 8 pad: 0x0000
class UMovieSceneLevelVisibilitySystem : public UMovieSceneEntitySystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x188];                                     // 0x0048   (0x0188)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneLevelVisibilityTrack
/// Size: 0x0010 (16 bytes) (0x000080 - 0x000090) align 8 pad: 0x0000
class UMovieSceneLevelVisibilityTrack : public UMovieSceneNameableTrack
{ 
public:
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0080   (0x0010)  
};

/// Class /Script/MovieSceneTracks.MovieSceneMaterialParameterCollectionTrack
/// Size: 0x0010 (16 bytes) (0x000090 - 0x0000A0) align 8 pad: 0x0000
class UMovieSceneMaterialParameterCollectionTrack : public UMovieSceneMaterialTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0090   (0x0008)  MISSED
	class UMaterialParameterCollection*                MPC;                                                        // 0x0098   (0x0008)  
};

/// Class /Script/MovieSceneTracks.MovieSceneComponentMaterialTrack
/// Size: 0x0010 (16 bytes) (0x000090 - 0x0000A0) align 8 pad: 0x0000
class UMovieSceneComponentMaterialTrack : public UMovieSceneMaterialTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0090   (0x0008)  MISSED
	int32_t                                            MaterialIndex;                                              // 0x0098   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x009C   (0x0004)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneObjectPropertySection
/// Size: 0x00C8 (200 bytes) (0x0000F0 - 0x0001B8) align 8 pad: 0x0000
class UMovieSceneObjectPropertySection : public UMovieSceneSection
{ 
public:
	FMovieSceneObjectPathChannel                       ObjectChannel;                                              // 0x00F0   (0x00C8)  
};

/// Class /Script/MovieSceneTracks.MovieSceneObjectPropertyTrack
/// Size: 0x0010 (16 bytes) (0x0000B8 - 0x0000C8) align 8 pad: 0x0000
class UMovieSceneObjectPropertyTrack : public UMovieScenePropertyTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00B8   (0x0008)  MISSED
	class UClass*                                      PropertyClass;                                              // 0x00C0   (0x0008)  
};

/// Class /Script/MovieSceneTracks.MovieSceneParticleParameterTrack
/// Size: 0x0018 (24 bytes) (0x000080 - 0x000098) align 8 pad: 0x0000
class UMovieSceneParticleParameterTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0080   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0088   (0x0010)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneParticleChannel
/// Size: 0x0000 (0 bytes) (0x000098 - 0x000098) align 8 pad: 0x0000
struct FMovieSceneParticleChannel : FMovieSceneByteChannel
{ 
};

/// Class /Script/MovieSceneTracks.MovieSceneParticleSection
/// Size: 0x0098 (152 bytes) (0x0000F0 - 0x000188) align 8 pad: 0x0000
class UMovieSceneParticleSection : public UMovieSceneSection
{ 
public:
	FMovieSceneParticleChannel                         ParticleKeys;                                               // 0x00F0   (0x0098)  
};

/// Class /Script/MovieSceneTracks.MovieSceneParticleTrack
/// Size: 0x0018 (24 bytes) (0x000080 - 0x000098) align 8 pad: 0x0000
class UMovieSceneParticleTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0080   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  ParticleSections;                                           // 0x0088   (0x0010)  
};

/// Class /Script/MovieSceneTracks.MovieScenePiecewiseFloatBlenderSystem
/// Size: 0x00C0 (192 bytes) (0x000068 - 0x000128) align 8 pad: 0x0000
class UMovieScenePiecewiseFloatBlenderSystem : public UMovieSceneBlenderSystem
{ 
public:
	unsigned char                                      UnknownData00_1[0xC0];                                      // 0x0068   (0x00C0)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScenePrimitiveMaterialSection
/// Size: 0x00C8 (200 bytes) (0x0000F0 - 0x0001B8) align 8 pad: 0x0000
class UMovieScenePrimitiveMaterialSection : public UMovieSceneSection
{ 
public:
	FMovieSceneObjectPathChannel                       MaterialChannel;                                            // 0x00F0   (0x00C8)  
};

/// Class /Script/MovieSceneTracks.MovieScenePrimitiveMaterialTrack
/// Size: 0x0010 (16 bytes) (0x0000B8 - 0x0000C8) align 8 pad: 0x0000
class UMovieScenePrimitiveMaterialTrack : public UMovieScenePropertyTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00B8   (0x0008)  MISSED
	int32_t                                            MaterialIndex;                                              // 0x00C0   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x00C4   (0x0004)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScenePropertyInstantiatorSystem
/// Size: 0x0250 (592 bytes) (0x000048 - 0x000298) align 8 pad: 0x0000
class UMovieScenePropertyInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x250];                                     // 0x0048   (0x0250)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneQuaternionInterpolationRotationSystem
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMovieSceneQuaternionInterpolationRotationSystem : public UMovieSceneEntitySystem
{ 
public:
};

/// Struct /Script/MovieSceneTracks.MovieSceneSkeletalAnimationParams
/// Size: 0x00F0 (240 bytes) (0x000000 - 0x0000F0) align 8 pad: 0x0000
struct FMovieSceneSkeletalAnimationParams
{ 
	class UAnimSequenceBase*                           Animation;                                                  // 0x0000   (0x0008)  
	FFrameNumber                                       FirstLoopStartFrameOffset;                                  // 0x0008   (0x0004)  
	FFrameNumber                                       StartFrameOffset;                                           // 0x000C   (0x0004)  
	FFrameNumber                                       EndFrameOffset;                                             // 0x0010   (0x0004)  
	float                                              PlayRate;                                                   // 0x0014   (0x0004)  
	bool                                               bReverse : 1;                                               // 0x0018:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0019   (0x0003)  MISSED
	FName                                              SlotName;                                                   // 0x001C   (0x000C)  
	FMovieSceneFloatChannel                            Weight;                                                     // 0x0028   (0x00A0)  
	bool                                               bSkipAnimNotifiers;                                         // 0x00C8   (0x0001)  
	bool                                               bForceCustomMode;                                           // 0x00C9   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x00CA   (0x0002)  MISSED
	float                                              StartOffset;                                                // 0x00CC   (0x0004)  
	float                                              EndOffset;                                                  // 0x00D0   (0x0004)  
	FName                                              KuroAnimLinkTag;                                            // 0x00D4   (0x000C)  
	bool                                               bAnimLoop;                                                  // 0x00E0   (0x0001)  
	bool                                               bAnimMatch;                                                 // 0x00E1   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x00E2   (0x0002)  MISSED
	float                                              AnimMatchAngle;                                             // 0x00E4   (0x0004)  
	bool                                               bForceResetWeight;                                          // 0x00E8   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x00E9   (0x0007)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneSkeletalAnimationSection
/// Size: 0x01B0 (432 bytes) (0x0000F0 - 0x0002A0) align 16 pad: 0x0000
class UMovieSceneSkeletalAnimationSection : public UMovieSceneSection
{ 
public:
	FMovieSceneSkeletalAnimationParams                 Params;                                                     // 0x00F0   (0x00F0)  
	class UAnimSequence*                               AnimSequence;                                               // 0x01E0   (0x0008)  
	class UAnimSequenceBase*                           Animation;                                                  // 0x01E8   (0x0008)  
	float                                              StartOffset;                                                // 0x01F0   (0x0004)  
	float                                              EndOffset;                                                  // 0x01F4   (0x0004)  
	float                                              PlayRate;                                                   // 0x01F8   (0x0004)  
	bool                                               bReverse : 1;                                               // 0x01FC:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x01FD   (0x0003)  MISSED
	FName                                              SlotName;                                                   // 0x0200   (0x000C)  
	FVector                                            StartLocationOffset;                                        // 0x020C   (0x000C)  
	FRotator                                           StartRotationOffset;                                        // 0x0218   (0x000C)  
	bool                                               bMatchWithPrevious;                                         // 0x0224   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0225   (0x0003)  MISSED
	FName                                              MatchedBoneName;                                            // 0x0228   (0x000C)  
	FVector                                            MatchedLocationOffset;                                      // 0x0234   (0x000C)  
	FRotator                                           MatchedRotationOffset;                                      // 0x0240   (0x000C)  
	bool                                               bMatchTranslation;                                          // 0x024C   (0x0001)  
	bool                                               bMatchIncludeZHeight;                                       // 0x024D   (0x0001)  
	bool                                               bMatchRotationYaw;                                          // 0x024E   (0x0001)  
	bool                                               bMatchRotationPitch;                                        // 0x024F   (0x0001)  
	bool                                               bMatchRotationRoll;                                         // 0x0250   (0x0001)  
	bool                                               bMatchConnectedFrame;                                       // 0x0251   (0x0001)  
	unsigned char                                      UnknownData02_7[0x4E];                                      // 0x0252   (0x004E)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneSkeletalAnimRootMotionTrackParams
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FMovieSceneSkeletalAnimRootMotionTrackParams
{ 
	unsigned char                                      UnknownData00_2[0x30];                                      // 0x0000   (0x0030)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneSkeletalAnimationTrack
/// Size: 0x0058 (88 bytes) (0x000080 - 0x0000D8) align 8 pad: 0x0000
class UMovieSceneSkeletalAnimationTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0080   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  AnimationSections;                                          // 0x0088   (0x0010)  
	bool                                               bUseLegacySectionIndexBlend;                                // 0x0098   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0099   (0x0007)  MISSED
	FMovieSceneSkeletalAnimRootMotionTrackParams       RootMotionParams;                                           // 0x00A0   (0x0030)  
	bool                                               bBlendFirstChildOfRoot;                                     // 0x00D0   (0x0001)  
	unsigned char                                      UnknownData02_7[0x7];                                       // 0x00D1   (0x0007)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneSlomoSection
/// Size: 0x00A0 (160 bytes) (0x0000F0 - 0x000190) align 8 pad: 0x0000
class UMovieSceneSlomoSection : public UMovieSceneSection
{ 
public:
	FMovieSceneFloatChannel                            FloatCurve;                                                 // 0x00F0   (0x00A0)  
};

/// Class /Script/MovieSceneTracks.MovieSceneSlomoTrack
/// Size: 0x0008 (8 bytes) (0x0000B8 - 0x0000C0) align 8 pad: 0x0000
class UMovieSceneSlomoTrack : public UMovieSceneFloatTrack
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x00B8   (0x0008)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneStringChannel
/// Size: 0x0098 (152 bytes) (0x000008 - 0x0000A0) align 8 pad: 0x0000
struct FMovieSceneStringChannel : FMovieSceneChannel
{ 
	TArray<FFrameNumber>                               Times;                                                      // 0x0008   (0x0010)  
	TArray<FString>                                    Values;                                                     // 0x0018   (0x0010)  
	FString                                            DefaultValue;                                               // 0x0028   (0x0010)  
	bool                                               bHasDefaultValue;                                           // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_7[0x67];                                      // 0x0039   (0x0067)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneStringSection
/// Size: 0x00A0 (160 bytes) (0x0000F0 - 0x000190) align 8 pad: 0x0000
class UMovieSceneStringSection : public UMovieSceneSection
{ 
public:
	FMovieSceneStringChannel                           StringCurve;                                                // 0x00F0   (0x00A0)  
};

/// Class /Script/MovieSceneTracks.MovieSceneStringTrack
/// Size: 0x0008 (8 bytes) (0x0000B8 - 0x0000C0) align 8 pad: 0x0000
class UMovieSceneStringTrack : public UMovieScenePropertyTrack
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x00B8   (0x0008)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneTransformOriginSystem
/// Size: 0x0038 (56 bytes) (0x000048 - 0x000080) align 8 pad: 0x0000
class UMovieSceneTransformOriginSystem : public UMovieSceneEntitySystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x38];                                      // 0x0048   (0x0038)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneTransformTrack
/// Size: 0x0000 (0 bytes) (0x0000B8 - 0x0000B8) align 8 pad: 0x0000
class UMovieSceneTransformTrack : public UMovieScenePropertyTrack
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneVectorSection
/// Size: 0x0288 (648 bytes) (0x0000F0 - 0x000378) align 8 pad: 0x0000
class UMovieSceneVectorSection : public UMovieSceneSection
{ 
public:
	FMovieSceneFloatChannel                            Curves[4];                                                  // 0x00F0   (0x0280)  
	int32_t                                            ChannelsUsed;                                               // 0x0370   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0374   (0x0004)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneVectorTrack
/// Size: 0x0010 (16 bytes) (0x0000B8 - 0x0000C8) align 8 pad: 0x0000
class UMovieSceneVectorTrack : public UMovieScenePropertyTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00B8   (0x0008)  MISSED
	int32_t                                            NumChannelsUsed;                                            // 0x00C0   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x00C4   (0x0004)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneVisibilityTrack
/// Size: 0x0000 (0 bytes) (0x0000C0 - 0x0000C0) align 8 pad: 0x0000
class UMovieSceneVisibilityTrack : public UMovieSceneBoolTrack
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneHierarchicalEasingInstantiatorSystem
/// Size: 0x0050 (80 bytes) (0x000048 - 0x000098) align 8 pad: 0x0000
class UMovieSceneHierarchicalEasingInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x50];                                      // 0x0048   (0x0050)  MISSED
};

/// Class /Script/MovieSceneTracks.WeightAndEasingEvaluatorSystem
/// Size: 0x0038 (56 bytes) (0x000048 - 0x000080) align 8 pad: 0x0000
class UWeightAndEasingEvaluatorSystem : public UMovieSceneEntitySystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x38];                                      // 0x0048   (0x0038)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieScene3DPathSectionTemplate
/// Size: 0x00C0 (192 bytes) (0x000020 - 0x0000E0) align 8 pad: 0x0000
struct FMovieScene3DPathSectionTemplate : FMovieSceneEvalTemplate
{ 
	FMovieSceneObjectBindingID                         PathBindingID;                                              // 0x0020   (0x0018)  
	FMovieSceneFloatChannel                            TimingCurve;                                                // 0x0038   (0x00A0)  
	MovieScene3DPathSection_Axis                       FrontAxisEnum;                                              // 0x00D8   (0x0001)  
	MovieScene3DPathSection_Axis                       UpAxisEnum;                                                 // 0x00D9   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x00DA   (0x0002)  MISSED
	bool                                               bFollow : 1;                                                // 0x00DC:0 (0x0001)  
	bool                                               bReverse : 1;                                               // 0x00DC:1 (0x0001)  
	bool                                               bForceUpright : 1;                                          // 0x00DC:2 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x00DD   (0x0003)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieScene3DTransformKeyStruct
/// Size: 0x0040 (64 bytes) (0x000008 - 0x000048) align 8 pad: 0x0000
struct FMovieScene3DTransformKeyStruct : FMovieSceneKeyStruct
{ 
	FVector                                            Location;                                                   // 0x0008   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x0014   (0x000C)  
	FVector                                            Scale;                                                      // 0x0020   (0x000C)  
	FFrameNumber                                       Time;                                                       // 0x002C   (0x0004)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0030   (0x0018)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieScene3DScaleKeyStruct
/// Size: 0x0028 (40 bytes) (0x000008 - 0x000030) align 8 pad: 0x0000
struct FMovieScene3DScaleKeyStruct : FMovieSceneKeyStruct
{ 
	FVector                                            Scale;                                                      // 0x0008   (0x000C)  
	FFrameNumber                                       Time;                                                       // 0x0014   (0x0004)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0018   (0x0018)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieScene3DRotationKeyStruct
/// Size: 0x0028 (40 bytes) (0x000008 - 0x000030) align 8 pad: 0x0000
struct FMovieScene3DRotationKeyStruct : FMovieSceneKeyStruct
{ 
	FRotator                                           Rotation;                                                   // 0x0008   (0x000C)  
	FFrameNumber                                       Time;                                                       // 0x0014   (0x0004)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0018   (0x0018)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieScene3DLocationKeyStruct
/// Size: 0x0028 (40 bytes) (0x000008 - 0x000030) align 8 pad: 0x0000
struct FMovieScene3DLocationKeyStruct : FMovieSceneKeyStruct
{ 
	FVector                                            Location;                                                   // 0x0008   (0x000C)  
	FFrameNumber                                       Time;                                                       // 0x0014   (0x0004)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0018   (0x0018)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieScene3DTransformTemplateData
/// Size: 0x0650 (1616 bytes) (0x000000 - 0x000650) align 8 pad: 0x0000
struct FMovieScene3DTransformTemplateData
{ 
	FMovieSceneFloatChannel                            TranslationCurve[3];                                        // 0x0000   (0x01E0)  
	FMovieSceneFloatChannel                            RotationCurve[3];                                           // 0x01E0   (0x01E0)  
	FMovieSceneFloatChannel                            ScaleCurve[3];                                              // 0x03C0   (0x01E0)  
	FMovieSceneFloatChannel                            ManualWeight;                                               // 0x05A0   (0x00A0)  
	EMovieSceneBlendType                               BlendType;                                                  // 0x0640   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0641   (0x0003)  MISSED
	FMovieSceneTransformMask                           Mask;                                                       // 0x0644   (0x0004)  
	bool                                               bUseQuaternionInterpolation;                                // 0x0648   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0649   (0x0007)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneActorReferenceSectionTemplate
/// Size: 0x00D8 (216 bytes) (0x000020 - 0x0000F8) align 8 pad: 0x0000
struct FMovieSceneActorReferenceSectionTemplate : FMovieSceneEvalTemplate
{ 
	FMovieScenePropertySectionData                     PropertyData;                                               // 0x0020   (0x0020)  
	FMovieSceneActorReferenceData                      ActorReferenceData;                                         // 0x0040   (0x00B8)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneAudioSectionTemplate
/// Size: 0x0008 (8 bytes) (0x000020 - 0x000028) align 8 pad: 0x0000
struct FMovieSceneAudioSectionTemplate : FMovieSceneEvalTemplate
{ 
	class UMovieSceneAudioSection*                     AudioSection;                                               // 0x0020   (0x0008)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneAdditiveCameraAnimationTemplate
/// Size: 0x0000 (0 bytes) (0x000020 - 0x000020) align 8 pad: 0x0000
struct FMovieSceneAdditiveCameraAnimationTemplate : FMovieSceneEvalTemplate
{ 
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraShakeSectionTemplate
/// Size: 0x0028 (40 bytes) (0x000020 - 0x000048) align 8 pad: 0x0000
struct FMovieSceneCameraShakeSectionTemplate : FMovieSceneAdditiveCameraAnimationTemplate
{ 
	FMovieSceneCameraShakeSectionData                  SourceData;                                                 // 0x0020   (0x0020)  
	FFrameNumber                                       SectionStartTime;                                           // 0x0040   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraAnimSectionTemplate
/// Size: 0x0028 (40 bytes) (0x000020 - 0x000048) align 8 pad: 0x0000
struct FMovieSceneCameraAnimSectionTemplate : FMovieSceneAdditiveCameraAnimationTemplate
{ 
	FMovieSceneCameraAnimSectionData                   SourceData;                                                 // 0x0020   (0x0020)  
	FFrameNumber                                       SectionStartTime;                                           // 0x0040   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraShakeSourceShakeSectionTemplate
/// Size: 0x0028 (40 bytes) (0x000020 - 0x000048) align 8 pad: 0x0000
struct FMovieSceneCameraShakeSourceShakeSectionTemplate : FMovieSceneEvalTemplate
{ 
	FMovieSceneCameraShakeSectionData                  SourceData;                                                 // 0x0020   (0x0020)  
	FFrameNumber                                       SectionStartTime;                                           // 0x0040   (0x0004)  
	FFrameNumber                                       SectionEndTime;                                             // 0x0044   (0x0004)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraShakeSourceTriggerSectionTemplate
/// Size: 0x0020 (32 bytes) (0x000020 - 0x000040) align 8 pad: 0x0000
struct FMovieSceneCameraShakeSourceTriggerSectionTemplate : FMovieSceneEvalTemplate
{ 
	TArray<FFrameNumber>                               TriggerTimes;                                               // 0x0020   (0x0010)  
	TArray<FMovieSceneCameraShakeSourceTrigger>        TriggerValues;                                              // 0x0030   (0x0010)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneColorKeyStruct
/// Size: 0x0030 (48 bytes) (0x000008 - 0x000038) align 8 pad: 0x0000
struct FMovieSceneColorKeyStruct : FMovieSceneKeyStruct
{ 
	FLinearColor                                       Color;                                                      // 0x0008   (0x0010)  
	FFrameNumber                                       Time;                                                       // 0x0018   (0x0004)  
	unsigned char                                      UnknownData00_7[0x1C];                                      // 0x001C   (0x001C)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneColorSectionTemplate
/// Size: 0x0288 (648 bytes) (0x000040 - 0x0002C8) align 8 pad: 0x0000
struct FMovieSceneColorSectionTemplate : FMovieScenePropertySectionTemplate
{ 
	FMovieSceneFloatChannel                            Curves[4];                                                  // 0x0040   (0x0280)  
	EMovieSceneBlendType                               BlendType;                                                  // 0x02C0   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x02C1   (0x0007)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneEventPayloadVariable
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FMovieSceneEventPayloadVariable
{ 
	FString                                            Value;                                                      // 0x0000   (0x0010)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneEventTriggerData
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align 8 pad: 0x0000
struct FMovieSceneEventTriggerData
{ 
	FMovieSceneEventPtrs                               Ptrs;                                                       // 0x0000   (0x0028)  
	FGuid                                              ObjectBindingID;                                            // 0x0028   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0038   (0x0010)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneEventSectionTemplate
/// Size: 0x0090 (144 bytes) (0x000020 - 0x0000B0) align 8 pad: 0x0000
struct FMovieSceneEventSectionTemplate : FMovieSceneEvalTemplate
{ 
	FMovieSceneEventSectionData                        eventData;                                                  // 0x0020   (0x0088)  
	bool                                               bFireEventsWhenForwards : 1;                                // 0x00A8:0 (0x0001)  
	bool                                               bFireEventsWhenBackwards : 1;                               // 0x00A8:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x00A9   (0x0007)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneFadeSectionTemplate
/// Size: 0x00B8 (184 bytes) (0x000020 - 0x0000D8) align 8 pad: 0x0000
struct FMovieSceneFadeSectionTemplate : FMovieSceneEvalTemplate
{ 
	FMovieSceneFloatChannel                            FadeCurve;                                                  // 0x0020   (0x00A0)  
	FLinearColor                                       FadeColor;                                                  // 0x00C0   (0x0010)  
	bool                                               bFadeAudio : 1;                                             // 0x00D0:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x00D1   (0x0007)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneMaterialParameterCollectionTemplate
/// Size: 0x0008 (8 bytes) (0x000080 - 0x000088) align 8 pad: 0x0000
struct FMovieSceneMaterialParameterCollectionTemplate : FMovieSceneParameterSectionTemplate
{ 
	class UMaterialParameterCollection*                MPC;                                                        // 0x0080   (0x0008)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneObjectPropertyTemplate
/// Size: 0x00C8 (200 bytes) (0x000040 - 0x000108) align 8 pad: 0x0000
struct FMovieSceneObjectPropertyTemplate : FMovieScenePropertySectionTemplate
{ 
	FMovieSceneObjectPathChannel                       ObjectChannel;                                              // 0x0040   (0x00C8)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneComponentMaterialSectionTemplate
/// Size: 0x0008 (8 bytes) (0x000080 - 0x000088) align 8 pad: 0x0000
struct FMovieSceneComponentMaterialSectionTemplate : FMovieSceneParameterSectionTemplate
{ 
	int32_t                                            MaterialIndex;                                              // 0x0080   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0084   (0x0004)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneParticleParameterSectionTemplate
/// Size: 0x0000 (0 bytes) (0x000080 - 0x000080) align 8 pad: 0x0000
struct FMovieSceneParticleParameterSectionTemplate : FMovieSceneParameterSectionTemplate
{ 
};

/// Struct /Script/MovieSceneTracks.MovieSceneParticleSectionTemplate
/// Size: 0x0098 (152 bytes) (0x000020 - 0x0000B8) align 8 pad: 0x0000
struct FMovieSceneParticleSectionTemplate : FMovieSceneEvalTemplate
{ 
	FMovieSceneParticleChannel                         ParticleKeys;                                               // 0x0020   (0x0098)  
};

/// Struct /Script/MovieSceneTracks.MovieScenePrimitiveMaterialTemplate
/// Size: 0x00D0 (208 bytes) (0x000020 - 0x0000F0) align 8 pad: 0x0000
struct FMovieScenePrimitiveMaterialTemplate : FMovieSceneEvalTemplate
{ 
	int32_t                                            MaterialIndex;                                              // 0x0020   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0024   (0x0004)  MISSED
	FMovieSceneObjectPathChannel                       MaterialChannel;                                            // 0x0028   (0x00C8)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneVectorPropertySectionTemplate
/// Size: 0x0288 (648 bytes) (0x000040 - 0x0002C8) align 8 pad: 0x0000
struct FMovieSceneVectorPropertySectionTemplate : FMovieScenePropertySectionTemplate
{ 
	FMovieSceneFloatChannel                            ComponentCurves[4];                                         // 0x0040   (0x0280)  
	int32_t                                            NumChannelsUsed;                                            // 0x02C0   (0x0004)  
	EMovieSceneBlendType                               BlendType;                                                  // 0x02C4   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x02C5   (0x0003)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneStringPropertySectionTemplate
/// Size: 0x00A0 (160 bytes) (0x000040 - 0x0000E0) align 8 pad: 0x0000
struct FMovieSceneStringPropertySectionTemplate : FMovieScenePropertySectionTemplate
{ 
	FMovieSceneStringChannel                           StringCurve;                                                // 0x0040   (0x00A0)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneIntegerPropertySectionTemplate
/// Size: 0x0098 (152 bytes) (0x000040 - 0x0000D8) align 8 pad: 0x0000
struct FMovieSceneIntegerPropertySectionTemplate : FMovieScenePropertySectionTemplate
{ 
	FMovieSceneIntegerChannel                          IntegerCurve;                                               // 0x0040   (0x0090)  
	EMovieSceneBlendType                               BlendType;                                                  // 0x00D0   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x00D1   (0x0007)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneEnumPropertySectionTemplate
/// Size: 0x0098 (152 bytes) (0x000040 - 0x0000D8) align 8 pad: 0x0000
struct FMovieSceneEnumPropertySectionTemplate : FMovieScenePropertySectionTemplate
{ 
	FMovieSceneByteChannel                             EnumCurve;                                                  // 0x0040   (0x0098)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneBytePropertySectionTemplate
/// Size: 0x0098 (152 bytes) (0x000040 - 0x0000D8) align 8 pad: 0x0000
struct FMovieSceneBytePropertySectionTemplate : FMovieScenePropertySectionTemplate
{ 
	FMovieSceneByteChannel                             ByteCurve;                                                  // 0x0040   (0x0098)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneBoolPropertySectionTemplate
/// Size: 0x0090 (144 bytes) (0x000040 - 0x0000D0) align 8 pad: 0x0000
struct FMovieSceneBoolPropertySectionTemplate : FMovieScenePropertySectionTemplate
{ 
	FMovieSceneBoolChannel                             BoolCurve;                                                  // 0x0040   (0x0090)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneSkeletalAnimationSectionTemplateParameters
/// Size: 0x0008 (8 bytes) (0x0000F0 - 0x0000F8) align 8 pad: 0x0000
struct FMovieSceneSkeletalAnimationSectionTemplateParameters : FMovieSceneSkeletalAnimationParams
{ 
	FFrameNumber                                       SectionStartTime;                                           // 0x00F0   (0x0004)  
	FFrameNumber                                       SectionEndTime;                                             // 0x00F4   (0x0004)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneSkeletalAnimationSectionTemplate
/// Size: 0x00F8 (248 bytes) (0x000020 - 0x000118) align 8 pad: 0x0000
struct FMovieSceneSkeletalAnimationSectionTemplate : FMovieSceneEvalTemplate
{ 
	FMovieSceneSkeletalAnimationSectionTemplateParameters Params;                                                  // 0x0020   (0x00F8)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneSlomoSectionTemplate
/// Size: 0x00A0 (160 bytes) (0x000020 - 0x0000C0) align 8 pad: 0x0000
struct FMovieSceneSlomoSectionTemplate : FMovieSceneEvalTemplate
{ 
	FMovieSceneFloatChannel                            SlomoCurve;                                                 // 0x0020   (0x00A0)  
};

/// Struct /Script/MovieSceneTracks.LevelVisibilityComponentData
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 pad: 0x0000
struct FLevelVisibilityComponentData
{ 
	class UMovieSceneLevelVisibilitySection*           Section;                                                    // 0x0000   (0x0008)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneVectorKeyStructBase
/// Size: 0x0020 (32 bytes) (0x000008 - 0x000028) align 8 pad: 0x0000
struct FMovieSceneVectorKeyStructBase : FMovieSceneKeyStruct
{ 
	FFrameNumber                                       Time;                                                       // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_7[0x1C];                                      // 0x000C   (0x001C)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneVector4KeyStruct
/// Size: 0x0018 (24 bytes) (0x000028 - 0x000040) align 16 pad: 0x0000
struct FMovieSceneVector4KeyStruct : FMovieSceneVectorKeyStructBase
{ 
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0028   (0x0008)  MISSED
	FVector4                                           Vector;                                                     // 0x0030   (0x0010)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneVectorKeyStruct
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
struct FMovieSceneVectorKeyStruct : FMovieSceneVectorKeyStructBase
{ 
	FVector                                            Vector;                                                     // 0x0028   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneVector2DKeyStruct
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
struct FMovieSceneVector2DKeyStruct : FMovieSceneVectorKeyStructBase
{ 
	FVector2D                                          Vector;                                                     // 0x0028   (0x0008)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneVisibilitySectionTemplate
/// Size: 0x0000 (0 bytes) (0x0000D0 - 0x0000D0) align 8 pad: 0x0000
struct FMovieSceneVisibilitySectionTemplate : FMovieSceneBoolPropertySectionTemplate
{ 
};

